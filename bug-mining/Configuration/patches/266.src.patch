diff --git a/src/main/java/org/apache/commons/configuration2/builder/combined/ReloadingCombinedConfigurationBuilder.java b/src/main/java/org/apache/commons/configuration2/builder/combined/ReloadingCombinedConfigurationBuilder.java
index cd2b58b1..a286bb44 100644
--- a/src/main/java/org/apache/commons/configuration2/builder/combined/ReloadingCombinedConfigurationBuilder.java
+++ b/src/main/java/org/apache/commons/configuration2/builder/combined/ReloadingCombinedConfigurationBuilder.java
@@ -122,6 +122,21 @@ public class ReloadingCombinedConfigurationBuilder extends
         return reloadingController;
     }
 
+    /**
+     * {@inheritDoc} This implementation makes sure that the reloading state of
+     * the managed reloading controller is reset. Note that this has to be done
+     * here and not in {@link #initResultInstance(CombinedConfiguration)}
+     * because it must be outside of a synchronized block; otherwise, a
+     * dead-lock situation can occur.
+     */
+    @Override
+    public CombinedConfiguration getConfiguration() throws ConfigurationException
+    {
+        CombinedConfiguration result = super.getConfiguration();
+        reloadingController.resetReloadingState();
+        return result;
+    }
+
     /**
      * {@inheritDoc} This implementation creates a builder for XML
      * configurations with reloading support.
@@ -145,7 +160,10 @@ public class ReloadingCombinedConfigurationBuilder extends
             throws ConfigurationException
     {
         super.initResultInstance(result);
-        reloadingController = createReloadingController();
+        if (reloadingController == null)
+        {
+            reloadingController = createReloadingController();
+        }
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/configuration2/reloading/CombinedReloadingController.java b/src/main/java/org/apache/commons/configuration2/reloading/CombinedReloadingController.java
index 9ea0831e..23f4c357 100644
--- a/src/main/java/org/apache/commons/configuration2/reloading/CombinedReloadingController.java
+++ b/src/main/java/org/apache/commons/configuration2/reloading/CombinedReloadingController.java
@@ -172,20 +172,23 @@ public class CombinedReloadingController extends ReloadingController
 
         /**
          * {@inheritDoc} This implementation delegates to the managed
-         * controllers. If one of them returns <b>true</b> from its check
-         * method, iteration is aborted, and result is <b>true</b>.
+         * controllers. For all of them the {@code checkForReloading()}
+         * method is called, giving them the chance to trigger a reload if
+         * necessary. If one of these calls returns <b>true</b>, the result of
+         * this method is <b>true</b>, otherwise <b>false</b>.
          */
         @Override
         public boolean isReloadingRequired()
         {
+            boolean result = false;
             for (ReloadingController rc : owner.getSubControllers())
             {
                 if (rc.checkForReloading(null))
                 {
-                    return true;
+                    result = true;
                 }
             }
-            return false;
+            return result;
         }
 
         /**
diff --git a/src/test/java/org/apache/commons/configuration2/reloading/TestCombinedReloadingController.java b/src/test/java/org/apache/commons/configuration2/reloading/TestCombinedReloadingController.java
index 917ec6e7..2fcdf344 100644
--- a/src/test/java/org/apache/commons/configuration2/reloading/TestCombinedReloadingController.java
+++ b/src/test/java/org/apache/commons/configuration2/reloading/TestCombinedReloadingController.java
@@ -118,6 +118,8 @@ public class TestCombinedReloadingController
                 Boolean.FALSE);
         EasyMock.expect(subControllers[1].checkForReloading(null)).andReturn(
                 Boolean.TRUE);
+        EasyMock.expect(subControllers[2].checkForReloading(null)).andReturn(
+                Boolean.FALSE);
         replaySubControllers();
         assertTrue("Wrong result", ctrl.checkForReloading("someData"));
         verifySubSontrollers();
@@ -149,6 +151,10 @@ public class TestCombinedReloadingController
         CombinedReloadingController ctrl = setUpController();
         EasyMock.expect(subControllers[0].checkForReloading(null)).andReturn(
                 Boolean.TRUE);
+        EasyMock.expect(subControllers[1].checkForReloading(null)).andReturn(
+                Boolean.FALSE);
+        EasyMock.expect(subControllers[2].checkForReloading(null)).andReturn(
+                Boolean.FALSE);
         for (ReloadingController rc : subControllers)
         {
             rc.resetReloadingState();
