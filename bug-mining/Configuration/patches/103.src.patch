diff --git a/conf/configA.xml b/conf/configA.xml
new file mode 100644
index 00000000..597bda04
--- /dev/null
+++ b/conf/configA.xml
@@ -0,0 +1,3 @@
+<configuration>  
+  <property name="config" value="100"/>
+</configuration>
\ No newline at end of file
diff --git a/conf/configB.xml b/conf/configB.xml
new file mode 100644
index 00000000..e496692b
--- /dev/null
+++ b/conf/configB.xml
@@ -0,0 +1,3 @@
+<configuration>
+  <stuff>test</stuff>
+</configuration>
\ No newline at end of file
diff --git a/conf/log4j-test.xml b/conf/log4j-test.xml
new file mode 100644
index 00000000..63b009e7
--- /dev/null
+++ b/conf/log4j-test.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
+
+<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
+  <appender name="console" class="org.apache.log4j.ConsoleAppender">
+    <param name="Target" value="System.out"/>
+    <layout class="org.apache.log4j.PatternLayout">
+      <param name="ConversionPattern" value="%-5p %c{1} - %m%n"/>
+    </layout>
+  </appender>
+
+  <root>
+    <priority value ="debug" />
+    <appender-ref ref="console" />
+  </root>
+
+</log4j:configuration>
\ No newline at end of file
diff --git a/conf/testFileMonitorConfigurationBuilder.xml b/conf/testFileReloadConfigurationBuilder.xml
similarity index 90%
rename from conf/testFileMonitorConfigurationBuilder.xml
rename to conf/testFileReloadConfigurationBuilder.xml
index 69041c00..8e7e9d16 100644
--- a/conf/testFileMonitorConfigurationBuilder.xml
+++ b/conf/testFileReloadConfigurationBuilder.xml
@@ -21,15 +21,15 @@
                config-name="clientConfig" delimiterParsingDisabled="true" schemaValidation="false">
        <expressionEngine
           config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
-       <reloadingStrategy delay="500"
-          config-class="org.apache.commons.configuration.reloading.VFSFileMonitorReloadingStrategy"/>
+       <reloadingStrategy refreshDelay="0"
+          config-class="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy"/>
     </multifile>
     <xml fileName="testMultiConfiguration_default.xml"
          config-name="defaultConfig" delimiterParsingDisabled="true">
       <expressionEngine
           config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
-      <reloadingStrategy
-          config-class="org.apache.commons.configuration.reloading.VFSFileMonitorReloadingStrategy"/>
+      <reloadingStrategy refreshDelay="0"
+          config-class="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy"/>
     </xml>
   </override>
 </configuration>
\ No newline at end of file
diff --git a/conf/testFileMonitorConfigurationBuilder2.xml b/conf/testFileReloadConfigurationBuilder2.xml
similarity index 90%
rename from conf/testFileMonitorConfigurationBuilder2.xml
rename to conf/testFileReloadConfigurationBuilder2.xml
index af69b3cb..226f22ae 100644
--- a/conf/testFileMonitorConfigurationBuilder2.xml
+++ b/conf/testFileReloadConfigurationBuilder2.xml
@@ -21,15 +21,15 @@
                config-name="clientConfig" delimiterParsingDisabled="true" schemaValidation="false">
        <expressionEngine
           config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
-       <reloadingStrategy delay="500"
-          config-class="org.apache.commons.configuration.reloading.VFSFileMonitorReloadingStrategy"/>
+       <reloadingStrategy refreshDelay="500"
+          config-class="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy"/>
     </multifile>
     <xml fileName="testMultiConfiguration_default.xml"
          config-name="defaultConfig" delimiterParsingDisabled="true">
       <expressionEngine
           config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
-      <reloadingStrategy
-          config-class="org.apache.commons.configuration.reloading.VFSFileMonitorReloadingStrategy"/>
+      <reloadingStrategy refreshDelay="500"
+          config-class="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy"/>
     </xml>
   </override>
 </configuration>
\ No newline at end of file
diff --git a/conf/testMultiConfiguration.xsd b/conf/testMultiConfiguration.xsd
new file mode 100644
index 00000000..b5a0ccc0
--- /dev/null
+++ b/conf/testMultiConfiguration.xsd
@@ -0,0 +1,97 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
+  <xs:element name="configuration" type="configurationType"/>
+  <xs:complexType name="configurationType">
+    <xs:sequence>
+      <xs:element type="colorsType" name="colors" minOccurs="0"/>
+      <xs:element type="xs:integer" name="rowsPerPage" minOccurs="0"/>
+      <xs:element type="buttonsType" name="buttons" minOccurs="0"/>
+      <xs:element type="numberFormatType" name="numberFormat" minOccurs="0"/>
+      <xs:element type="splitType" name="split" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Comma delimited lists</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="ChannelsType" name="Channels" minOccurs="0"/>
+    </xs:sequence>
+  </xs:complexType>
+  <xs:complexType name="splitType">
+    <xs:sequence>
+      <xs:element type="xs:string" name="list1" minOccurs="0"/>
+      <xs:element type="xs:string" name="list2" minOccurs="0"/>
+      <xs:element type="list3Type" name="list3" minOccurs="0"/>
+      <xs:element type="list4Type" name="list4" minOccurs="0"/>
+    </xs:sequence>
+  </xs:complexType>
+  <xs:complexType name="colorsType">
+    <xs:sequence>
+      <xs:element type="xs:string" name="background" minOccurs="0"/>
+      <xs:element type="xs:string" name="text" minOccurs="0"/>
+      <xs:element type="xs:string" name="header" minOccurs="0"/>
+      <xs:element type="linkType" name="link" minOccurs="0"/>
+      <xs:element type="xs:string" name="default" minOccurs="0"/>
+    </xs:sequence>
+  </xs:complexType>
+  <xs:complexType name="list4Type">
+    <xs:simpleContent>
+      <xs:extension base="xs:string">
+        <xs:attribute type="xs:string" name="values"/>
+      </xs:extension>
+    </xs:simpleContent>
+  </xs:complexType>
+  <xs:complexType name="linkType">
+    <xs:simpleContent>
+      <xs:extension base="xs:string">
+        <xs:attribute type="xs:string" name="normal"/>
+        <xs:attribute type="xs:string" name="visited"/>
+      </xs:extension>
+    </xs:simpleContent>
+  </xs:complexType>
+  <xs:complexType name="list3Type">
+    <xs:simpleContent>
+      <xs:extension base="xs:string">
+        <xs:attribute type="xs:string" name="values"/>
+      </xs:extension>
+    </xs:simpleContent>
+  </xs:complexType>
+  <xs:complexType name="buttonsType">
+    <xs:sequence>
+      <xs:element type="xs:string" name="name" minOccurs="0"/>
+    </xs:sequence>
+  </xs:complexType>
+  <xs:complexType name="numberFormatType">
+    <xs:simpleContent>
+      <xs:extension base="xs:string">
+        <xs:attribute type="xs:string" name="pattern"/>
+      </xs:extension>
+    </xs:simpleContent>
+  </xs:complexType>
+  <xs:complexType name="ChannelType">
+    <xs:sequence>
+      <xs:element name="Name" minOccurs="0">
+        <xs:simpleType>
+          <xs:restriction base="xs:string">
+          </xs:restriction>
+        </xs:simpleType>
+      </xs:element>
+      <xs:element name="ChannelData" minOccurs="0">
+        <xs:simpleType>
+          <xs:restriction base="xs:string">
+          </xs:restriction>
+        </xs:simpleType>
+      </xs:element>
+      <xs:element name="MoreChannelData" minOccurs="0">
+        <xs:simpleType>
+          <xs:restriction base="xs:string">
+          </xs:restriction>
+        </xs:simpleType>
+      </xs:element>
+    </xs:sequence>
+    <xs:attribute type="xs:string" name="id" use="optional"/>
+  </xs:complexType>
+  <xs:complexType name="ChannelsType">
+    <xs:choice maxOccurs="unbounded" minOccurs="0">
+      <xs:element type="ChannelType" name="Channel" minOccurs="0"/>
+    </xs:choice>
+  </xs:complexType>
+</xs:schema>
\ No newline at end of file
diff --git a/conf/testMultiConfiguration_2001.xml b/conf/testMultiConfiguration_2001.xml
new file mode 100644
index 00000000..b8c6208d
--- /dev/null
+++ b/conf/testMultiConfiguration_2001.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<configuration
+           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+           xsi:noNamespaceSchemaLocation="http://commons.apache.org/testMultiConfiguration.xsd">
+  <colors>
+    <undefined>This will throw a schema exception</undefined>
+  </colors>
+  <buttons>
+    <name>OK-1,Cancel-2,Help-3</name>
+  </buttons>
+  <numberFormat pattern="###\,###.##"/>
+</configuration>
\ No newline at end of file
diff --git a/conf/testMultiConfiguration_2002.xml b/conf/testMultiConfiguration_2002.xml
new file mode 100644
index 00000000..38b1c84a
--- /dev/null
+++ b/conf/testMultiConfiguration_2002.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<configuration
+           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+           xsi:noNamespaceSchemaLocation="http://commons.apache.org/testMultiConfiguration.xsd">
+  <colors>
+    <background>#2222222</background>
+    <text>#000000</text>
+    <header>#222222</header>
+    <link normal="#020202" visited="#202020"/>
+    <default>${colors.header3}</default>
+  </colors>
+  <rowsPerPage>25</rowsPerPage>
+  <buttons>
+    <name>OK-2,Cancel-2,Help-2</name>
+  </buttons>
+  <numberFormat pattern="###\,###.##"/>
+</configuration>
\ No newline at end of file
diff --git a/conf/testMultiConfiguration_3001.xml b/conf/testMultiConfiguration_3001.xml
new file mode 100644
index 00000000..53b0e234
--- /dev/null
+++ b/conf/testMultiConfiguration_3001.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+           xsi:noNamespaceSchemaLocation="http://commons.apache.org/testMultiConfiguration.xsd">
+  <colors>
+    <background>#808080</background>
+    <text>#000000</text>
+    <header>#008000</header>
+    <link normal="#000080" visited="#800080"/>
+    <default>${colors.header}</default>
+  </colors>
+  <rowsPerPage>15</rowsPerPage>
+  <buttons>
+    <name>OK,Cancel,Help</name>
+  </buttons>
+  <numberFormat pattern="###\,###.##"/>
+  <Channels>
+    <Channel id="1">
+      <Name>My Channel</Name>
+    </Channel>
+    <Channel id="2">
+      <MoreChannelData>more test 2 data</MoreChannelData>
+    </Channel>
+  </Channels>
+</configuration>
diff --git a/conf/testMultiConfiguration_3002.xml b/conf/testMultiConfiguration_3002.xml
new file mode 100644
index 00000000..0e376d92
--- /dev/null
+++ b/conf/testMultiConfiguration_3002.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+           xsi:noNamespaceSchemaLocation="http://commons.apache.org/testMultiConfiguration.xsd">
+  <colors>
+    <background>#2222222</background>
+    <text>#000000</text>
+    <header>#222222</header>
+    <link normal="#020202" visited="#202020"/>
+    <default>${colors.header3}</default>
+  </colors>
+  <rowsPerPage>25</rowsPerPage>
+  <buttons>
+    <name>OK-2,Cancel-2,Help-2</name>
+  </buttons>
+  <numberFormat pattern="###\,###.##"/>
+</configuration>
diff --git a/conf/testMultiConfiguration_default.xml b/conf/testMultiConfiguration_default.xml
index 82b68ff4..850188be 100644
--- a/conf/testMultiConfiguration_default.xml
+++ b/conf/testMultiConfiguration_default.xml
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="ISO-8859-1" ?>
-<configuration>
+<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+           xsi:noNamespaceSchemaLocation="http://commons.apache.org/testMultiConfiguration.xsd">
   <colors>
     <background>#40404040</background>
     <text>#000000</text>
diff --git a/conf/testMultiTenentConfigurationBuilder2.xml b/conf/testMultiTenentConfigurationBuilder2.xml
new file mode 100644
index 00000000..39f030be
--- /dev/null
+++ b/conf/testMultiTenentConfigurationBuilder2.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<!-- Test configuration definition file that demonstrates complex initialization -->
+<configuration>
+  <header>
+    <result delimiterParsingDisabled="true" forceReloadCheck="true" loggerName="TestLogger"
+            config-class="org.apache.commons.configuration.DynamicCombinedConfiguration"
+            keyPattern="$${sys:Id}">
+      <nodeCombiner config-class="org.apache.commons.configuration.tree.MergeCombiner"/>
+      <expressionEngine
+          config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
+    </result>
+    <entity-resolver catalogFiles="catalog.xml"/>
+    <providers>
+      <provider config-tag="multifile"
+         config-class="org.apache.commons.configuration.DefaultConfigurationBuilder$FileConfigurationProvider"
+         configurationClass="org.apache.commons.configuration.MultiFileHierarchicalConfiguration"/>
+    </providers>
+  </header>
+  <override>
+    <multifile filePattern="testMultiConfiguration_$$${sys:Id}.xml"
+               config-name="clientConfig" delimiterParsingDisabled="true" schemaValidation="true">
+       <expressionEngine
+          config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
+       <reloadingStrategy refreshDelay="500"
+          config-class="org.apache.commons.configuration.reloading.FileChangedReloadingStrategy"/>
+    </multifile>
+    <xml fileName="testMultiConfiguration_default.xml"
+         config-name="defaultConfig" delimiterParsingDisabled="true" schemaValidation="true">
+      <expressionEngine
+          config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
+      <reloadingStrategy refreshDelay="500"
+          config-class="org.apache.commons.configuration.reloading.FileChangedReloadingStrategy"/>
+    </xml>
+  </override>
+</configuration>
\ No newline at end of file
diff --git a/conf/testMultiTenentConfigurationBuilder3.xml b/conf/testMultiTenentConfigurationBuilder3.xml
new file mode 100644
index 00000000..8b1712d5
--- /dev/null
+++ b/conf/testMultiTenentConfigurationBuilder3.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<!-- Test configuration definition file that demonstrates complex initialization -->
+<configuration>
+  <header>
+    <result delimiterParsingDisabled="true" forceReloadCheck="true" loggerName="TestLogger"
+            config-class="org.apache.commons.configuration.DynamicCombinedConfiguration"
+            keyPattern="$${sys:Id}">
+      <nodeCombiner config-class="org.apache.commons.configuration.tree.MergeCombiner"/>
+      <expressionEngine
+          config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
+    </result>
+    <entity-resolver catalogFiles="catalog.xml"/>
+    <providers>
+      <provider config-tag="multifile"
+         config-class="org.apache.commons.configuration.DefaultConfigurationBuilder$FileConfigurationProvider"
+         configurationClass="org.apache.commons.configuration.MultiFileHierarchicalConfiguration"/>
+    </providers>
+  </header>
+  <override>
+    <multifile filePattern="testwrite/testMultiConfiguration_$$${sys:Id}.xml"
+               config-name="clientConfig" delimiterParsingDisabled="true" schemaValidation="true">
+       <expressionEngine
+          config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
+       <reloadingStrategy refreshDelay="500"
+          config-class="org.apache.commons.configuration.reloading.FileChangedReloadingStrategy"/>
+    </multifile>
+    <xml fileName="testMultiConfiguration_default.xml"
+         config-name="defaultConfig" delimiterParsingDisabled="true" schemaValidation="true">
+      <expressionEngine
+          config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
+      <reloadingStrategy refreshDelay="500"
+          config-class="org.apache.commons.configuration.reloading.FileChangedReloadingStrategy"/>
+    </xml>
+  </override>
+</configuration>
\ No newline at end of file
diff --git a/conf/testVFSMultiTenentConfigurationBuilder1.xml b/conf/testVFSMultiTenentConfigurationBuilder1.xml
new file mode 100644
index 00000000..fec0a632
--- /dev/null
+++ b/conf/testVFSMultiTenentConfigurationBuilder1.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<!-- Test configuration definition file that demonstrates complex initialization -->
+<configuration>
+  <header>
+    <result delimiterParsingDisabled="true" forceReloadCheck="true" loggerName="TestLogger"
+            config-class="org.apache.commons.configuration.DynamicCombinedConfiguration"
+            keyPattern="$${sys:Id}">
+      <nodeCombiner config-class="org.apache.commons.configuration.tree.MergeCombiner"/>
+      <expressionEngine
+          config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
+    </result>
+    <fileSystem config-class="org.apache.commons.configuration.VFSFileSystem"/>     
+    <entity-resolver catalogFiles="catalog.xml"/>
+    <providers>
+      <provider config-tag="multifile"
+         config-class="org.apache.commons.configuration.DefaultConfigurationBuilder$FileConfigurationProvider"
+         configurationClass="org.apache.commons.configuration.MultiFileHierarchicalConfiguration"/>
+    </providers>
+  </header>
+  <override>
+    <multifile filePattern="testMultiConfiguration_$$${sys:Id}.xml"
+               config-name="clientConfig" delimiterParsingDisabled="true" schemaValidation="true">
+       <expressionEngine
+          config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
+       <reloadingStrategy refreshDelay="500"
+          config-class="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy"/>
+    </multifile>
+    <xml fileName="testMultiConfiguration_default.xml"
+         config-name="defaultConfig" delimiterParsingDisabled="true" schemaValidation="true">
+      <expressionEngine
+          config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
+      <reloadingStrategy refreshDelay="500"
+          config-class="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy"/>
+    </xml>
+  </override>
+</configuration>
\ No newline at end of file
diff --git a/conf/testVFSMultiTenentConfigurationBuilder2.xml b/conf/testVFSMultiTenentConfigurationBuilder2.xml
new file mode 100644
index 00000000..3d29aded
--- /dev/null
+++ b/conf/testVFSMultiTenentConfigurationBuilder2.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<!-- Test configuration definition file that demonstrates complex initialization -->
+<configuration>
+  <header>
+    <result delimiterParsingDisabled="true" forceReloadCheck="true" loggerName="TestLogger"
+            config-class="org.apache.commons.configuration.DynamicCombinedConfiguration"
+            keyPattern="$${sys:Id}">
+      <nodeCombiner config-class="org.apache.commons.configuration.tree.MergeCombiner"/>
+      <expressionEngine
+          config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
+    </result>
+    <fileSystem config-class="org.apache.commons.configuration.VFSFileSystem"/>
+    <entity-resolver catalogFiles="catalog.xml"/>
+    <providers>
+      <provider config-tag="multifile"
+         config-class="org.apache.commons.configuration.DefaultConfigurationBuilder$FileConfigurationProvider"
+         configurationClass="org.apache.commons.configuration.MultiFileHierarchicalConfiguration"/>
+    </providers>
+  </header>
+  <override>
+    <multifile filePattern="testwrite/testMultiConfiguration_$$${sys:Id}.xml"
+               config-name="clientConfig" delimiterParsingDisabled="true" schemaValidation="true">
+       <expressionEngine
+          config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
+       <reloadingStrategy refreshDelay="500"
+          config-class="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy"/>
+    </multifile>
+    <xml fileName="testMultiConfiguration_default.xml"
+         config-name="defaultConfig" delimiterParsingDisabled="true" schemaValidation="true">
+      <expressionEngine
+          config-class="org.apache.commons.configuration.tree.xpath.XPathExpressionEngine"/>
+      <reloadingStrategy refreshDelay="500"
+          config-class="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy"/>
+    </xml>
+  </override>
+</configuration>
\ No newline at end of file
diff --git a/pom.xml b/pom.xml
index c9f36bb9..b98d977d 100644
--- a/pom.xml
+++ b/pom.xml
@@ -462,6 +462,7 @@
             <include>testdb.script</include>
             <include>*.properties</include>
             <include>*.dtd</include>
+            <include>*.xsd</include>
           </includes>
         </testResource>
         <testResource>
@@ -494,6 +495,10 @@
                 <name>java.awt.headless</name>
                 <value>true</value>
               </property>
+              <property>
+                <name>org.apache.commons.logging.Log</name>
+                <value>org.apache.commons.configuration.Logging</value>
+              </property>
             </systemProperties>
           </configuration>
         </plugin>
diff --git a/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java b/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
index a9b434e8..5b8215dc 100644
--- a/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
+++ b/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
@@ -103,7 +103,7 @@ implements FileConfiguration, FileSystemBased
     protected ReloadingStrategy strategy;
 
     /** A lock object for protecting reload operations.*/
-    private Object reloadLock = new Object();
+    protected Object reloadLock = new Object();
 
     /** Stores the encoding of the configuration file.*/
     private String encoding;
@@ -207,6 +207,11 @@ implements FileConfiguration, FileSystemBased
         return this.fileSystem;
     }
 
+    public Object getReloadLock()
+    {
+        return reloadLock;
+    }
+
 
     /**
      * Load the configuration from the underlying location.
@@ -747,8 +752,11 @@ implements FileConfiguration, FileSystemBased
      */
     public void addProperty(String key, Object value)
     {
-        super.addProperty(key, value);
-        possiblySave();
+        synchronized(reloadLock)
+        {
+            super.addProperty(key, value);
+            possiblySave();
+        }
     }
 
     /**
@@ -761,14 +769,20 @@ implements FileConfiguration, FileSystemBased
      */
     public void setProperty(String key, Object value)
     {
-        super.setProperty(key, value);
-        possiblySave();
+        synchronized(reloadLock)
+        {
+            super.setProperty(key, value);
+            possiblySave();
+        }
     }
 
     public void clearProperty(String key)
     {
-        super.clearProperty(key);
-        possiblySave();
+        synchronized(reloadLock)
+        {
+            super.clearProperty(key);
+            possiblySave();
+        }
     }
 
     public ReloadingStrategy getReloadingStrategy()
@@ -794,6 +808,11 @@ implements FileConfiguration, FileSystemBased
      * event.
      */
     public void reload()
+    {
+        reload(false);
+    }
+
+    public boolean reload(boolean checkReload)
     {
         synchronized (reloadLock)
         {
@@ -833,6 +852,10 @@ implements FileConfiguration, FileSystemBased
                 {
                     fireError(EVENT_RELOAD, null, null, e);
                     // todo rollback the changes if the file can't be reloaded
+                    if (checkReload)
+                    {
+                        return false;
+                    }
                 }
                 finally
                 {
@@ -840,6 +863,7 @@ implements FileConfiguration, FileSystemBased
                 }
             }
         }
+        return true;
     }
 
     /**
@@ -920,13 +944,19 @@ implements FileConfiguration, FileSystemBased
     public boolean isEmpty()
     {
         reload();
-        return super.isEmpty();
+        synchronized(reloadLock)
+        {
+            return super.isEmpty();
+        }
     }
 
     public boolean containsKey(String key)
     {
         reload();
-        return super.containsKey(key);
+        synchronized(reloadLock)
+        {
+            return super.containsKey(key);
+        }
     }
 
     /**
diff --git a/src/java/org/apache/commons/configuration/AbstractHierarchicalFileConfiguration.java b/src/java/org/apache/commons/configuration/AbstractHierarchicalFileConfiguration.java
index 2a6a70fd..41565055 100644
--- a/src/java/org/apache/commons/configuration/AbstractHierarchicalFileConfiguration.java
+++ b/src/java/org/apache/commons/configuration/AbstractHierarchicalFileConfiguration.java
@@ -29,7 +29,10 @@ import java.util.List;
 
 import org.apache.commons.configuration.event.ConfigurationEvent;
 import org.apache.commons.configuration.event.ConfigurationListener;
+import org.apache.commons.configuration.event.ConfigurationErrorListener;
+import org.apache.commons.configuration.event.ConfigurationErrorEvent;
 import org.apache.commons.configuration.reloading.ReloadingStrategy;
+import org.apache.commons.configuration.reloading.Reloadable;
 
 /**
  * <p>Base class for implementing file based hierarchical configurations.</p>
@@ -45,7 +48,8 @@ import org.apache.commons.configuration.reloading.ReloadingStrategy;
  */
 public abstract class AbstractHierarchicalFileConfiguration
 extends HierarchicalConfiguration
-implements FileConfiguration, ConfigurationListener, FileSystemBased
+implements FileConfiguration, ConfigurationListener, ConfigurationErrorListener, FileSystemBased,
+        Reloadable
 {
     /** Stores the delegate used for implementing functionality related to the
      * <code>FileConfiguration</code> interface.
@@ -137,26 +141,38 @@ implements FileConfiguration, ConfigurationListener, FileSystemBased
 
     protected void addPropertyDirect(String key, Object obj)
     {
-        super.addPropertyDirect(key, obj);
-        delegate.possiblySave();
+        synchronized(delegate.getReloadLock())
+        {
+            super.addPropertyDirect(key, obj);
+            delegate.possiblySave();
+        }
     }
 
     public void clearProperty(String key)
     {
-        super.clearProperty(key);
-        delegate.possiblySave();
+        synchronized(delegate.getReloadLock())
+        {
+            super.clearProperty(key);
+            delegate.possiblySave();
+        }
     }
 
     public void clearTree(String key)
     {
-        super.clearTree(key);
-        delegate.possiblySave();
+        synchronized(delegate.getReloadLock())
+        {
+            super.clearTree(key);
+            delegate.possiblySave();
+        }
     }
 
     public void setProperty(String key, Object value)
     {
-        super.setProperty(key, value);
-        delegate.possiblySave();
+        synchronized(delegate.getReloadLock())
+        {
+            super.setProperty(key, value);
+            delegate.possiblySave();
+        }
     }
 
     public void load() throws ConfigurationException
@@ -280,11 +296,16 @@ implements FileConfiguration, ConfigurationListener, FileSystemBased
     }
 
     public void reload()
+    {
+        reload(false);
+    }
+
+    private boolean reload(boolean checkReload)
     {
         setDetailEvents(false);
         try
         {
-            delegate.reload();
+            return delegate.reload(checkReload);
         }
         finally
         {
@@ -302,34 +323,58 @@ implements FileConfiguration, ConfigurationListener, FileSystemBased
         delegate.setEncoding(encoding);
     }
 
+    public Object getReloadLock()
+    {
+        return delegate.getReloadLock();
+    }
+
     public boolean containsKey(String key)
     {
         reload();
-        return super.containsKey(key);
+        synchronized(delegate.getReloadLock())
+        {
+            return super.containsKey(key);
+        }
     }
 
     public Iterator getKeys()
     {
         reload();
-        return super.getKeys();
+        synchronized(delegate.getReloadLock())
+        {
+            return super.getKeys();
+        }
     }
 
     public Iterator getKeys(String prefix)
     {
         reload();
-        return super.getKeys(prefix);
+        synchronized(delegate.getReloadLock())
+        {
+            return super.getKeys(prefix);
+        }
     }
 
     public Object getProperty(String key)
     {
-        reload();
-        return super.getProperty(key);
+        if (reload(true))
+        {
+            // Avoid reloading again and getting the same error.
+            synchronized(delegate.getReloadLock())
+            {
+                return super.getProperty(key);
+            }
+        }
+        return null;
     }
 
     public boolean isEmpty()
     {
         reload();
-        return super.isEmpty();
+        synchronized(delegate.getReloadLock())
+        {
+            return super.isEmpty();
+        }
     }
 
     /**
@@ -342,8 +387,11 @@ implements FileConfiguration, ConfigurationListener, FileSystemBased
      */
     public void addNodes(String key, Collection nodes)
     {
-        super.addNodes(key, nodes);
-        delegate.possiblySave();
+        synchronized(delegate.getReloadLock())
+        {
+            super.addNodes(key, nodes);
+            delegate.possiblySave();
+        }
     }
 
     /**
@@ -356,7 +404,10 @@ implements FileConfiguration, ConfigurationListener, FileSystemBased
     protected List fetchNodeList(String key)
     {
         reload();
-        return super.fetchNodeList(key);
+        synchronized(delegate.getReloadLock())
+        {
+            return super.fetchNodeList(key);
+        }
     }
 
     /**
@@ -394,6 +445,8 @@ implements FileConfiguration, ConfigurationListener, FileSystemBased
     private void initDelegate(FileConfigurationDelegate del)
     {
         del.addConfigurationListener(this);
+        del.addErrorListener(this);
+        del.setLogger(getLogger());
     }
 
     /**
@@ -418,6 +471,12 @@ implements FileConfiguration, ConfigurationListener, FileSystemBased
         }
     }
 
+    public void configurationError(ConfigurationErrorEvent event)
+    {
+        fireError(event.getType(), event.getPropertyName(), event.getPropertyValue(),
+                event.getCause());
+    }
+
     /**
      * Returns the file configuration delegate.
      *
diff --git a/src/java/org/apache/commons/configuration/CombinedConfiguration.java b/src/java/org/apache/commons/configuration/CombinedConfiguration.java
index e697b7df..f76f4bbe 100644
--- a/src/java/org/apache/commons/configuration/CombinedConfiguration.java
+++ b/src/java/org/apache/commons/configuration/CombinedConfiguration.java
@@ -37,6 +37,7 @@ import org.apache.commons.configuration.tree.NodeCombiner;
 import org.apache.commons.configuration.tree.UnionCombiner;
 import org.apache.commons.configuration.tree.ViewNode;
 import org.apache.commons.configuration.tree.TreeUtils;
+import org.apache.commons.configuration.reloading.Reloadable;
 
 /**
  * <p>
@@ -169,7 +170,7 @@ import org.apache.commons.configuration.tree.TreeUtils;
  * @since 1.3
  * @version $Id$
  */
-public class CombinedConfiguration extends HierarchicalConfiguration implements
+public class CombinedConfiguration extends HierarchicalReloadableConfiguration implements
         ConfigurationListener, Cloneable
 {
     /**
@@ -204,6 +205,13 @@ public class CombinedConfiguration extends HierarchicalConfiguration implements
     /** Stores a map with the named configurations. */
     private Map namedConfigurations;
 
+    /** The default behavior is to ignore exceptions that occur during reload */
+    private boolean ignoreReloadExceptions = true;
+
+    //private final Object reloadLock = new Object();
+
+    private boolean reloadRequired = false;
+
     /**
      * An expression engine used for converting child configurations to
      * hierarchical ones.
@@ -237,6 +245,12 @@ public class CombinedConfiguration extends HierarchicalConfiguration implements
         this(null);
     }
 
+    /*
+    public Object getReloadLock()
+    {
+        return reloadLock;
+    } */
+
     /**
      * Returns the node combiner that is used for creating the combined node
      * structure.
@@ -329,6 +343,26 @@ public class CombinedConfiguration extends HierarchicalConfiguration implements
         this.conversionExpressionEngine = conversionExpressionEngine;
     }
 
+    /**
+     * Retrieves the value of the ignoreReloadExceptions flag.
+     * @return true if exceptions are ignored, false otherwise.
+     */
+    public boolean isIgnoreReloadExceptions()
+    {
+        return ignoreReloadExceptions;
+    }
+
+    /**
+     * If set to true then exceptions that occur during reloading will be
+     * ignored. If false then the exceptions will be allowed to be thrown
+     * back to the caller.
+     * @param ignoreReloadExceptions true if exceptions should be ignored.
+     */
+    public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
+    {
+        this.ignoreReloadExceptions = ignoreReloadExceptions;
+    }
+
     /**
      * Adds a new configuration to this combined configuration. It is possible
      * (but not mandatory) to give the new configuration a name. This name must
@@ -546,7 +580,7 @@ public class CombinedConfiguration extends HierarchicalConfiguration implements
      */
     public void invalidate()
     {
-        combinedRoot = null;
+        reloadRequired = true;
         fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
     }
 
@@ -578,13 +612,153 @@ public class CombinedConfiguration extends HierarchicalConfiguration implements
      */
     public ConfigurationNode getRootNode()
     {
-        if (combinedRoot == null)
+        synchronized(getReloadLock())
+        {
+            if (reloadRequired || combinedRoot == null)
+            {
+                combinedRoot = constructCombinedNode();
+                reloadRequired = false;
+            }
+            return combinedRoot;
+        }
+    }
+    /*
+    public Object getProperty(String key)
+    {
+        synchronized(reloadLock)
+        {
+            return super.getProperty(key);
+        }
+    }
+
+    protected void addPropertyDirect(String key, Object obj)
+    {
+        synchronized(reloadLock)
+        {
+            super.addPropertyDirect(key, obj);
+        }
+    }
+
+    public void addNodes(String key, Collection nodes)
+    {
+        synchronized(reloadLock)
+        {
+            super.addNodes(key, nodes);
+        }
+    }
+
+    public boolean isEmpty()
+    {
+        synchronized(reloadLock)
+        {
+            return super.isEmpty();
+        }
+    }
+
+    public Configuration subset(String prefix)
+    {
+        synchronized(reloadLock)
+        {
+            return super.subset(prefix);
+        }
+    }
+
+    public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
+    {
+        synchronized(reloadLock)
+        {
+            return super.configurationAt(key, supportUpdates);
+        }
+    }
+
+    public SubnodeConfiguration configurationAt(String key)
+    {
+        synchronized(reloadLock)
         {
-            combinedRoot = constructCombinedNode();
+            return super.configurationAt(key);
         }
-        return combinedRoot;
     }
 
+    public List configurationsAt(String key)
+    {
+        synchronized(reloadLock)
+        {
+            return super.configurationsAt(key);
+        }
+    }
+
+    protected SubnodeConfiguration createSubnodeConfiguration(ConfigurationNode node)
+    {
+        synchronized(reloadLock)
+        {
+            return super.createSubnodeConfiguration(node);
+        }
+    }
+
+    protected SubnodeConfiguration createSubnodeConfiguration(ConfigurationNode node, String subnodeKey)
+    {
+        synchronized(reloadLock)
+        {
+            return super.createSubnodeConfiguration(node, subnodeKey);
+        }
+    }
+
+    public boolean containsKey(String key)
+    {
+        synchronized(reloadLock)
+        {
+            return super.containsKey(key);
+        }
+    }
+
+    public void setProperty(String key, Object value)
+    {
+        synchronized(reloadLock)
+        {
+            super.setProperty(key, value);
+        }
+    }
+
+    public void clearTree(String key)
+    {
+        synchronized(reloadLock)
+        {
+            super.clearTree(key);
+        }
+    }
+
+    public void clearProperty(String key)
+    {
+        synchronized(reloadLock)
+        {
+            super.clearProperty(key);
+        }
+    }
+
+    public Iterator getKeys()
+    {
+        synchronized(reloadLock)
+        {
+            return super.getKeys();
+        }
+    }
+
+    public Iterator getKeys(String prefix)
+    {
+        synchronized(reloadLock)
+        {
+            return super.getKeys(prefix);
+        }
+    }
+
+    public int getMaxIndex(String key)
+    {
+        synchronized(reloadLock)
+        {
+            return super.getMaxIndex(key);
+        }
+    } */
+
     /**
      * Clears this configuration. All contained configurations will be removed.
      */
@@ -716,8 +890,10 @@ public class CombinedConfiguration extends HierarchicalConfiguration implements
             }
             catch (Exception ex)
             {
-                // ignore all exceptions, e.g. missing property exceptions
-                ;
+                if (!ignoreReloadExceptions)
+                {
+                    throw new ConfigurationRuntimeException(ex);
+                }
             }
         }
     }
diff --git a/src/java/org/apache/commons/configuration/DefaultFileSystem.java b/src/java/org/apache/commons/configuration/DefaultFileSystem.java
index f20a1855..69f1c019 100644
--- a/src/java/org/apache/commons/configuration/DefaultFileSystem.java
+++ b/src/java/org/apache/commons/configuration/DefaultFileSystem.java
@@ -16,6 +16,9 @@
  */
 package org.apache.commons.configuration;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
 import java.io.InputStream;
 import java.io.File;
 import java.io.IOException;
@@ -35,6 +38,11 @@ import java.net.MalformedURLException;
  */
 public class DefaultFileSystem extends FileSystem
 {
+    /**
+     * The Log for diagnostic messages.
+     */
+    private Log log = LogFactory.getLog(DefaultFileSystem.class);
+
     public InputStream getInputStream(String basePath, String fileName)
         throws ConfigurationException
     {
@@ -254,6 +262,10 @@ public class DefaultFileSystem extends FileSystem
         }
         catch (IOException e)
         {
+            if (log.isDebugEnabled())
+            {
+                log.debug("Could not locate file " + fileName + " at " + basePath + ": " + e.getMessage());
+            }
             return null;
         }
     }
diff --git a/src/java/org/apache/commons/configuration/DynamicCombinedConfiguration.java b/src/java/org/apache/commons/configuration/DynamicCombinedConfiguration.java
index f8d5b216..d7ae6582 100644
--- a/src/java/org/apache/commons/configuration/DynamicCombinedConfiguration.java
+++ b/src/java/org/apache/commons/configuration/DynamicCombinedConfiguration.java
@@ -87,6 +87,7 @@ public class DynamicCombinedConfiguration extends CombinedConfiguration
     {
         super();
         setNodeCombiner(comb);
+        setIgnoreReloadExceptions(false);
     }
 
     /**
@@ -98,6 +99,7 @@ public class DynamicCombinedConfiguration extends CombinedConfiguration
     public DynamicCombinedConfiguration()
     {
         super();
+        setIgnoreReloadExceptions(false);
     }
 
     public void setKeyPattern(String pattern)
@@ -768,6 +770,7 @@ public class DynamicCombinedConfiguration extends CombinedConfiguration
                         config.setLogger(log);
                     }
                 }
+                config.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
                 config.setExpressionEngine(this.getExpressionEngine());
                 config.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
                 config.setConversionExpressionEngine(getConversionExpressionEngine());
diff --git a/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java b/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java
index 28d9a623..8a87b075 100644
--- a/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java
+++ b/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java
@@ -193,6 +193,16 @@ public class HierarchicalConfiguration extends AbstractConfiguration implements
         }
     }
 
+    /**
+     * Object to synchronize on a reload. This class is not reloadable so this
+     * object isn't important
+     * @return
+     */
+    public Object getReloadLock()
+    {
+        return this;
+    }
+
     /**
      * Returns the root node of this hierarchical configuration. This method
      * exists for backwards compatibility only. New code should use the
diff --git a/src/java/org/apache/commons/configuration/HierarchicalReloadableConfiguration.java b/src/java/org/apache/commons/configuration/HierarchicalReloadableConfiguration.java
new file mode 100644
index 00000000..5210d1d8
--- /dev/null
+++ b/src/java/org/apache/commons/configuration/HierarchicalReloadableConfiguration.java
@@ -0,0 +1,206 @@
+package org.apache.commons.configuration;
+
+import org.apache.commons.configuration.tree.ConfigurationNode;
+import org.apache.commons.configuration.event.ConfigurationEvent;
+import org.apache.commons.configuration.reloading.Reloadable;
+
+import java.util.Collection;
+import java.util.List;
+import java.util.Iterator;
+
+/**
+ *
+ */
+public class HierarchicalReloadableConfiguration extends HierarchicalConfiguration
+    implements Reloadable
+{
+    private final Object reloadLock;
+
+    /**
+     * Creates a new instance of <code>HierarchicalReloadableConfiguration</code>.
+     */
+    public HierarchicalReloadableConfiguration()
+    {
+        super();
+        reloadLock = new Object();
+    }
+
+    public HierarchicalReloadableConfiguration(Object lock)
+    {
+        super();
+        reloadLock = lock == null ? new Object() : lock;
+    }
+
+    /**
+     * Creates a new instance of <code>HierarchicalConfiguration</code> and
+     * copies all data contained in the specified configuration into the new
+     * one.
+     *
+     * @param c the configuration that is to be copied (if <b>null</b>, this
+     * constructor will behave like the standard constructor)
+     * @since 1.4
+     */
+    public HierarchicalReloadableConfiguration(HierarchicalConfiguration c)
+    {
+        super(c);
+        reloadLock = new Object();
+    }
+
+
+    public Object getReloadLock()
+    {
+        return reloadLock;
+    }
+
+    public Object getProperty(String key)
+    {
+        synchronized(reloadLock)
+        {
+            return super.getProperty(key);
+        }
+    }
+
+    protected void addPropertyDirect(String key, Object obj)
+    {
+        synchronized(reloadLock)
+        {
+            super.addPropertyDirect(key, obj);
+        }
+    }
+
+    public void addNodes(String key, Collection nodes)
+    {
+        synchronized(reloadLock)
+        {
+            super.addNodes(key, nodes);
+        }
+    }
+
+    public boolean isEmpty()
+    {
+        synchronized(reloadLock)
+        {
+            return super.isEmpty();
+        }
+    }
+
+    public Configuration subset(String prefix)
+    {
+        synchronized(reloadLock)
+        {
+            return super.subset(prefix);
+        }
+    }
+
+    public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
+    {
+        synchronized(reloadLock)
+        {
+            return super.configurationAt(key, supportUpdates);
+        }
+    }
+
+    public SubnodeConfiguration configurationAt(String key)
+    {
+        synchronized(reloadLock)
+        {
+            return super.configurationAt(key);
+        }
+    }
+
+    public List configurationsAt(String key)
+    {
+        synchronized(reloadLock)
+        {
+            return super.configurationsAt(key);
+        }
+    }
+
+    protected SubnodeConfiguration createSubnodeConfiguration(ConfigurationNode node)
+    {
+        synchronized(reloadLock)
+        {
+            return super.createSubnodeConfiguration(node);
+        }
+    }
+
+    protected SubnodeConfiguration createSubnodeConfiguration(ConfigurationNode node, String subnodeKey)
+    {
+        synchronized(reloadLock)
+        {
+            return super.createSubnodeConfiguration(node, subnodeKey);
+        }
+    }
+
+    protected void subnodeConfigurationChanged(ConfigurationEvent event)
+    {
+        synchronized(reloadLock)
+        {
+            super.subnodeConfigurationChanged(event);
+        }
+    }
+
+    void registerSubnodeConfiguration(SubnodeConfiguration config)
+    {
+        synchronized(reloadLock)
+        {
+            super.registerSubnodeConfiguration(config);
+        }
+    }
+
+    public boolean containsKey(String key)
+    {
+        synchronized(reloadLock)
+        {
+            return super.containsKey(key);
+        }
+    }
+
+    public void setProperty(String key, Object value)
+    {
+        synchronized(reloadLock)
+        {
+            super.setProperty(key, value);
+        }
+    }
+
+    public void clearTree(String key)
+    {
+        synchronized(reloadLock)
+        {
+            super.clearTree(key);
+        }
+    }
+
+    public void clearProperty(String key)
+    {
+        synchronized(reloadLock)
+        {
+            super.clearProperty(key);
+        }
+    }
+
+    public Iterator getKeys()
+    {
+        synchronized(reloadLock)
+        {
+            return super.getKeys();
+        }
+    }
+
+    public Iterator getKeys(String prefix)
+    {
+        synchronized(reloadLock)
+        {
+            return super.getKeys(prefix);
+        }
+    }
+
+    public int getMaxIndex(String key)
+    {
+        synchronized(reloadLock)
+        {
+            return super.getMaxIndex(key);
+        }
+    }
+}
diff --git a/src/java/org/apache/commons/configuration/MultiFileHierarchicalConfiguration.java b/src/java/org/apache/commons/configuration/MultiFileHierarchicalConfiguration.java
index dfc84798..809e16e5 100644
--- a/src/java/org/apache/commons/configuration/MultiFileHierarchicalConfiguration.java
+++ b/src/java/org/apache/commons/configuration/MultiFileHierarchicalConfiguration.java
@@ -43,6 +43,7 @@ import org.apache.commons.beanutils.BeanUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.xml.sax.EntityResolver;
+import org.xml.sax.SAXParseException;
 
 /**
  * This class provides access to multiple configuration files that reside in a location that
@@ -92,7 +93,7 @@ public class MultiFileHierarchicalConfiguration extends AbstractHierarchicalFile
     private boolean attributeSplittingDisabled;
 
     /** The Logger name to use */
-    private String loggerName = "";
+    private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
 
     /** The Reloading strategy to use on created configurations */
     private ReloadingStrategy fileStrategy;
@@ -107,6 +108,7 @@ public class MultiFileHierarchicalConfiguration extends AbstractHierarchicalFile
     {
         super();
         this.init = true;
+        setLogger(LogFactory.getLog(loggerName));
     }
 
     /**
@@ -621,6 +623,14 @@ public class MultiFileHierarchicalConfiguration extends AbstractHierarchicalFile
                 listener.configurationError(event);
             }
         }
+
+        if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
+        {
+            if (isThrowable(event.getCause()))
+            {
+                throw new ConfigurationRuntimeException(event.getCause());
+            }
+        }
     }
 
     /*
@@ -730,7 +740,7 @@ public class MultiFileHierarchicalConfiguration extends AbstractHierarchicalFile
         }
         catch (ConfigurationException ce)
         {
-            if (!ignoreException)
+            if (isThrowable(ce))
             {
                 throw new ConfigurationRuntimeException(ce);
             }
@@ -746,6 +756,20 @@ public class MultiFileHierarchicalConfiguration extends AbstractHierarchicalFile
         return configuration;
     }
 
+    private boolean isThrowable(Throwable throwable)
+    {
+        if (!ignoreException)
+        {
+            return true;
+        }
+        Throwable cause = throwable.getCause();
+        while (cause != null && !(cause instanceof SAXParseException))
+        {
+            cause = cause.getCause();
+        }
+        return cause != null;
+    }
+
     /**
      * Clone the FileReloadingStrategy since each file needs its own.
      * @return A new FileReloadingStrategy.
diff --git a/src/java/org/apache/commons/configuration/SubnodeConfiguration.java b/src/java/org/apache/commons/configuration/SubnodeConfiguration.java
index 4b6f941f..457e8142 100644
--- a/src/java/org/apache/commons/configuration/SubnodeConfiguration.java
+++ b/src/java/org/apache/commons/configuration/SubnodeConfiguration.java
@@ -23,6 +23,7 @@ import java.util.List;
 
 import org.apache.commons.configuration.interpol.ConfigurationInterpolator;
 import org.apache.commons.configuration.tree.ConfigurationNode;
+import org.apache.commons.configuration.reloading.Reloadable;
 
 /**
  * <p>
@@ -114,7 +115,7 @@ import org.apache.commons.configuration.tree.ConfigurationNode;
  * @author Oliver Heger
  * @version $Id$
  */
-public class SubnodeConfiguration extends HierarchicalConfiguration
+public class SubnodeConfiguration extends HierarchicalReloadableConfiguration
 {
     /**
      * The serial version UID.
@@ -136,6 +137,7 @@ public class SubnodeConfiguration extends HierarchicalConfiguration
      */
     public SubnodeConfiguration(HierarchicalConfiguration parent, ConfigurationNode root)
     {
+        super(parent instanceof Reloadable ? ((Reloadable) parent).getReloadLock() : null);
         if (parent == null)
         {
             throw new IllegalArgumentException(
diff --git a/src/java/org/apache/commons/configuration/XMLConfiguration.java b/src/java/org/apache/commons/configuration/XMLConfiguration.java
index 89dd9b1f..c44e7be1 100644
--- a/src/java/org/apache/commons/configuration/XMLConfiguration.java
+++ b/src/java/org/apache/commons/configuration/XMLConfiguration.java
@@ -939,11 +939,11 @@ public class XMLConfiguration extends AbstractHierarchicalFileConfiguration
         }
         catch (SAXParseException spe)
         {
-            this.getLogger().debug("Error parsing " + source.getSystemId(), spe);
             throw new ConfigurationException("Error parsing " + source.getSystemId(), spe);
         }
         catch (Exception e)
         {
+            this.getLogger().debug("Unable to load the configuraton", e);
             throw new ConfigurationException("Unable to load the configuration", e);
         }
     }
diff --git a/src/java/org/apache/commons/configuration/reloading/FileChangedReloadingStrategy.java b/src/java/org/apache/commons/configuration/reloading/FileChangedReloadingStrategy.java
index b2b390a4..ad54ea29 100644
--- a/src/java/org/apache/commons/configuration/reloading/FileChangedReloadingStrategy.java
+++ b/src/java/org/apache/commons/configuration/reloading/FileChangedReloadingStrategy.java
@@ -23,6 +23,8 @@ import java.net.URL;
 
 import org.apache.commons.configuration.ConfigurationUtils;
 import org.apache.commons.configuration.FileConfiguration;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 /**
  * <p>A reloading strategy that will reload the configuration every time its
@@ -64,6 +66,9 @@ public class FileChangedReloadingStrategy implements ReloadingStrategy
     /** A flag whether a reload is required.*/
     private boolean reloading;
 
+    /** The Log to use for diagnostic messages */
+    private Log logger = LogFactory.getLog(FileChangedReloadingStrategy.class);
+
     public void setConfiguration(FileConfiguration configuration)
     {
         this.configuration = configuration;
@@ -85,6 +90,10 @@ public class FileChangedReloadingStrategy implements ReloadingStrategy
                 lastChecked = now;
                 if (hasChanged())
                 {
+                    if (logger.isDebugEnabled())
+                    {
+                        logger.debug("File change detected: " + getName());
+                    }
                     reloading = true;
                 }
             }
@@ -141,6 +150,11 @@ public class FileChangedReloadingStrategy implements ReloadingStrategy
         File file = getFile();
         if (file == null || !file.exists())
         {
+            if (logger.isWarnEnabled() && lastModified != 0)
+            {
+                logger.warn("File was deleted: " + getName(file));
+                lastModified = 0;
+            }
             return false;
         }
 
@@ -186,4 +200,27 @@ public class FileChangedReloadingStrategy implements ReloadingStrategy
             return ConfigurationUtils.fileFromURL(url);
         }
     }
+
+    private String getName()
+    {
+        return getName(getFile());
+    }
+
+    private String getName(File file)
+    {
+        String name = configuration.getURL().toString();
+        if (name == null)
+        {
+            if (file != null)
+            {
+                name = file.getAbsolutePath();
+            }
+            else
+            {
+                name = "base: " + configuration.getBasePath()
+                       + "file: " + configuration.getFileName();
+            }
+        }
+        return name;
+    }
 }
diff --git a/src/java/org/apache/commons/configuration/reloading/Reloadable.java b/src/java/org/apache/commons/configuration/reloading/Reloadable.java
new file mode 100644
index 00000000..88a486c7
--- /dev/null
+++ b/src/java/org/apache/commons/configuration/reloading/Reloadable.java
@@ -0,0 +1,9 @@
+package org.apache.commons.configuration.reloading;
+
+/**
+ * Interface that allows other objects to synchronize on a root lock.
+ */
+public interface Reloadable
+{
+    Object getReloadLock();
+}
diff --git a/src/java/org/apache/commons/configuration/reloading/VFSFileChangedReloadingStrategy.java b/src/java/org/apache/commons/configuration/reloading/VFSFileChangedReloadingStrategy.java
new file mode 100644
index 00000000..8b54b69e
--- /dev/null
+++ b/src/java/org/apache/commons/configuration/reloading/VFSFileChangedReloadingStrategy.java
@@ -0,0 +1,204 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.configuration.reloading;
+
+import org.apache.commons.configuration.FileConfiguration;
+import org.apache.commons.configuration.FileSystemBased;
+import org.apache.commons.configuration.FileSystem;
+import org.apache.commons.configuration.ConfigurationRuntimeException;
+import org.apache.commons.vfs.FileSystemManager;
+import org.apache.commons.vfs.FileObject;
+import org.apache.commons.vfs.VFS;
+import org.apache.commons.vfs.FileSystemException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+/**
+ * <p>A reloading strategy that will reload the configuration every time its
+ * underlying file is changed.</p>
+ * <p>This reloading strategy does not actively monitor a configuration file,
+ * but is triggered by its associated configuration whenever properties are
+ * accessed. It then checks the configuration file's last modification date
+ * and causes a reload if this has changed.</p>
+ * <p>To avoid permanent disc access on successive property lookups a refresh
+ * delay can be specified. This has the effect that the configuration file's
+ * last modification date is only checked once in this delay period. The default
+ * value for this refresh delay is 5 seconds.</p>
+ * <p>This strategy only works with FileConfiguration instances.</p>
+ *
+ * @author Emmanuel Bourg
+ * @version $Revision$, $Date$
+ * @since 1.1
+ */
+public class VFSFileChangedReloadingStrategy implements ReloadingStrategy
+{
+    /** Constant for the default refresh delay.*/
+    private static final int DEFAULT_REFRESH_DELAY = 5000;
+
+    /** Stores a reference to the configuration to be monitored.*/
+    protected FileConfiguration configuration;
+
+    /** The last time the configuration file was modified. */
+    protected long lastModified;
+
+    /** The last time the file was checked for changes. */
+    protected long lastChecked;
+
+    /** The minimum delay in milliseconds between checks. */
+    protected long refreshDelay = DEFAULT_REFRESH_DELAY;
+
+    /** A flag whether a reload is required.*/
+    private boolean reloading;
+
+    /** Stores the logger.*/
+    private Log log = LogFactory.getLog(getClass());
+
+    public void setConfiguration(FileConfiguration configuration)
+    {
+        this.configuration = configuration;
+    }
+
+    public void init()
+    {
+        if (configuration.getURL() == null && configuration.getFileName() == null)
+        {
+            return;
+        }
+        if (this.configuration == null)
+        {
+            throw new IllegalStateException("No configuration has been set for this strategy");
+        }
+        updateLastModified();
+    }
+
+    public boolean reloadingRequired()
+    {
+        if (!reloading)
+        {
+            long now = System.currentTimeMillis();
+
+            if (now > lastChecked + refreshDelay)
+            {
+                lastChecked = now;
+                if (hasChanged())
+                {
+                    reloading = true;
+                }
+            }
+        }
+
+        return reloading;
+    }
+
+    public void reloadingPerformed()
+    {
+        updateLastModified();
+    }
+
+    /**
+     * Return the minimal time in milliseconds between two reloadings.
+     *
+     * @return the refresh delay (in milliseconds)
+     */
+    public long getRefreshDelay()
+    {
+        return refreshDelay;
+    }
+
+    /**
+     * Set the minimal time between two reloadings.
+     *
+     * @param refreshDelay refresh delay in milliseconds
+     */
+    public void setRefreshDelay(long refreshDelay)
+    {
+        this.refreshDelay = refreshDelay;
+    }
+
+    /**
+     * Update the last modified time.
+     */
+    protected void updateLastModified()
+    {
+        FileObject file = getFile();
+        if (file != null)
+        {
+            try
+            {
+                lastModified = file.getContent().getLastModifiedTime();
+            }
+            catch (FileSystemException fse)
+            {
+                log.error("Unable to get last modified time for" + file.getName().getURI());
+            }
+        }
+        reloading = false;
+    }
+
+    /**
+     * Check if the configuration has changed since the last time it was loaded.
+     *
+     * @return a flag whether the configuration has changed
+     */
+    protected boolean hasChanged()
+    {
+        FileObject file = getFile();
+        try
+        {
+            if (file == null || !file.exists())
+            {
+                return false;
+            }
+
+            return file.getContent().getLastModifiedTime() > lastModified;
+        }
+        catch (FileSystemException ex)
+        {
+            log.error("Unable to get last modified time for" + file.getName().getURI());
+            return false;
+        }
+    }
+
+    /**
+     * Returns the file that is monitored by this strategy. Note that the return
+     * value can be <b>null </b> under some circumstances.
+     *
+     * @return the monitored file
+     */
+    protected FileObject getFile()
+    {
+        try
+        {
+            FileSystemManager fsManager = VFS.getManager();
+            FileSystem fs = ((FileSystemBased) configuration).getFileSystem();
+            String uri = fs.getPath(null, configuration.getURL(), configuration.getBasePath(),
+                configuration.getFileName());
+            if (uri == null)
+            {
+                throw new ConfigurationRuntimeException("Unable to determine file to monitor");
+            }
+            return fsManager.resolveFile(uri);
+        }
+        catch (FileSystemException fse)
+        {
+            String msg = "Unable to monitor " + configuration.getURL().toString();
+            log.error(msg);
+            throw new ConfigurationRuntimeException(msg, fse);
+        }
+    }
+}
diff --git a/src/java/org/apache/commons/configuration/reloading/VFSFileMonitorReloadingStrategy.java b/src/java/org/apache/commons/configuration/reloading/VFSFileMonitorReloadingStrategy.java
deleted file mode 100644
index c749477b..00000000
--- a/src/java/org/apache/commons/configuration/reloading/VFSFileMonitorReloadingStrategy.java
+++ /dev/null
@@ -1,245 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.commons.configuration.reloading;
-
-import org.apache.commons.configuration.FileConfiguration;
-import org.apache.commons.configuration.FileSystemBased;
-import org.apache.commons.configuration.ConfigurationRuntimeException;
-import org.apache.commons.configuration.FileSystem;
-import org.apache.commons.configuration.AbstractFileConfiguration;
-
-import org.apache.commons.vfs.impl.DefaultFileMonitor;
-import org.apache.commons.vfs.FileListener;
-import org.apache.commons.vfs.FileChangeEvent;
-import org.apache.commons.vfs.FileObject;
-import org.apache.commons.vfs.VFS;
-import org.apache.commons.vfs.FileSystemManager;
-import org.apache.commons.vfs.FileSystemException;
-
-import java.util.Iterator;
-import java.util.Map;
-import java.util.HashMap;
-
-/**
- * <p>A reloading strategy that will reload the configuration every time its
- * underlying file is changed.</p>
- * @since 1.7
- * @author <a
- * href="http://commons.apache.org/configuration/team-list.html">Commons Configuration team</a>
- */
-public class VFSFileMonitorReloadingStrategy implements ReloadingStrategy, FileListener
-{
-    /** Used to synchronize initialization of the monitor. */
-    private static final String INIT_GATE = "gate";
-
-    /** The FileMonitor */
-    private static DefaultFileMonitor fm;
-
-    /** The files being monitored */
-    private static Map strategies = new HashMap();
-
-    /** Mimimum delay value */
-    private static final long DEFAULT_DELAY = 1000;
-
-    /** Stores a reference to the configuration to be monitored. */
-    protected FileConfiguration configuration;
-
-    /** The reload status */
-    private boolean reloadRequired;
-
-    /** Delay interval between checking the files. */
-    private long delay;
-
-    /**
-     * Return the current delay interval.
-     * @return The delay interval.
-     */
-    public long getDelay()
-    {
-        return fm.getDelay();
-    }
-
-    /**
-     * Request a new delay interval. If the interval specified is less than
-     * what the monitor is currently using the interval will be ignored. If
-     * this method is called after the strategy has started it will be ignored.
-     * @param delay The requested delay interval.
-     */
-    public void setDelay(long delay)
-    {
-        this.delay = delay;
-    }
-
-    /**
-     * Specify the configuration to monitor. The configuration must be set before
-     * init is called.
-     * @param configuration The configuration to monitor.
-     */
-    public void setConfiguration(FileConfiguration configuration)
-    {
-        if (configuration == null || configuration instanceof FileSystemBased)
-        {
-            this.configuration = configuration;
-        }
-        else
-        {
-            throw new ConfigurationRuntimeException("Configuration must be based on a FileSystem");
-        }
-    }
-
-    /**
-     * Initialize the ReloadingStrategy.
-     */
-    public void init()
-    {
-        if (configuration.getURL() == null && configuration.getFileName() == null)
-        {
-            return;
-        }
-        if (this.configuration == null)
-        {
-            throw new IllegalStateException("No configuration has been set for this strategy");
-        }
-        FileObject file;
-
-        try
-        {
-            FileSystemManager fsManager = VFS.getManager();
-            FileSystem fs = ((FileSystemBased) configuration).getFileSystem();
-            String uri = fs.getPath(null, configuration.getURL(), configuration.getBasePath(),
-                configuration.getFileName());
-            if (uri == null)
-            {
-                throw new ConfigurationRuntimeException("Unable to determine file to monitor");
-            }
-            file = fsManager.resolveFile(uri);
-        }
-        catch (FileSystemException fse)
-        {
-            String msg = "Unable to monitor " + configuration.getURL().toString();
-            throw new ConfigurationRuntimeException(msg, fse);
-        }
-        synchronized (INIT_GATE)
-        {
-            if (fm == null)
-            {
-                fm = new DefaultFileMonitor(null);
-                long delayTime = (delay > DEFAULT_DELAY) ? delay : DEFAULT_DELAY;
-                fm.setDelay(delayTime);
-                fm.start();
-            }
-            else
-            {
-                long delayTime = fm.getDelay();
-                if (delay > delayTime)
-                {
-                    fm.setDelay(delay);
-                }
-            }
-            file.getFileSystem().addListener(file, this);
-            fm.addFile(file);
-            strategies.put(file, this);
-        }
-
-    }
-
-    /**
-     * Shutdown all reloading strategies
-     */
-    public static void stopMonitor()
-    {
-        synchronized (INIT_GATE)
-        {
-            if (fm != null)
-            {
-                fm.stop();
-                fm = null;
-            }
-
-            Iterator iter = strategies.entrySet().iterator();
-
-            while (iter.hasNext())
-            {
-                Map.Entry entry = (Map.Entry) iter.next();
-                FileObject file = (FileObject) entry.getKey();
-                VFSFileMonitorReloadingStrategy strategy = (VFSFileMonitorReloadingStrategy) entry.getValue();
-                file.getFileSystem().removeListener(file, strategy);
-            }
-            strategies.clear();
-        }
-    }
-
-    /**
-     * Tell if the evaluation of the strategy requires to reload the configuration.
-     *
-     * @return a flag whether a reload should be performed
-     */
-    public boolean reloadingRequired()
-    {
-        return reloadRequired;
-    }
-
-    /**
-     * Notify the strategy that the file has been reloaded.
-     */
-    public void reloadingPerformed()
-    {
-        reloadRequired = false;
-    }
-
-
-    /**
-     * Called when a file is created.
-     * @param event The event.
-     * @throws Exception If an error occurs.
-     */
-    public void fileCreated(FileChangeEvent event) throws Exception
-    {
-        reloadRequired = true;
-        fireEvent();
-    }
-
-    /**
-     * Called when a file is deleted.
-     * @param event The event.
-     * @throws Exception If an error occurs.
-     */
-    public void fileDeleted(FileChangeEvent event) throws Exception
-    {
-        // Ignore this event
-    }
-
-    /**
-     * Called when a file is changed.
-     * @param event The event.
-     * @throws Exception If an exception occurs.
-     */
-    public void fileChanged(FileChangeEvent event) throws Exception
-    {
-        reloadRequired = true;
-        fireEvent();
-    }
-
-    private void fireEvent()
-    {
-        if (configuration instanceof AbstractFileConfiguration)
-        {
-            ((AbstractFileConfiguration) configuration).configurationChanged();
-        }
-    }
-
-}
diff --git a/src/test/org/apache/commons/configuration/Logging.java b/src/test/org/apache/commons/configuration/Logging.java
new file mode 100644
index 00000000..f7ff94ab
--- /dev/null
+++ b/src/test/org/apache/commons/configuration/Logging.java
@@ -0,0 +1,259 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.configuration;
+
+import org.apache.commons.logging.impl.Log4JLogger;
+import org.apache.log4j.Priority;
+import org.apache.log4j.Level;
+import org.apache.log4j.Appender;
+import org.apache.log4j.PatternLayout;
+import org.apache.log4j.ConsoleAppender;
+
+/**
+ * Configures logging for tests.
+ *
+ * When running with Maven do -Dmaven.surefire.debug="LogLevel=level" to set the
+ * Log Level to the desired value.
+ */
+public class Logging extends Log4JLogger
+{
+    /**
+     * The fully qualified name of the Log4JLogger class.
+     */
+    private static final String FQCN = Logging.class.getName();
+
+    private static Priority traceLevel;
+
+    static
+    {
+        // Releases of log4j1.2 >= 1.2.12 have Priority.TRACE available, earlier
+        // versions do not. If TRACE is not available, then we have to map
+        // calls to Log.trace(...) onto the DEBUG level.
+
+        try
+        {
+            traceLevel = (Priority) Level.class.getDeclaredField("TRACE").get(null);
+        }
+        catch (Exception ex)
+        {
+            // ok, trace not available
+            traceLevel = Priority.DEBUG;
+        }
+
+        String level = System.getProperty("LogLevel");
+        if (level != null)
+        {
+            org.apache.log4j.Logger log = org.apache.log4j.Logger.getRootLogger();
+            log.setLevel(Level.toLevel(level));
+            Appender appender = new ConsoleAppender(new PatternLayout("%p - %m%n"), ConsoleAppender.SYSTEM_OUT);
+            log.addAppender(appender);
+        }
+    }
+
+    public Logging()
+    {
+        super();
+    }
+
+
+    /**
+     * Base constructor.
+     */
+    public Logging(String name)
+    {
+        super(name);
+    }
+
+    /**
+     * For use with a log4j factory.
+     */
+    public Logging(org.apache.log4j.Logger logger)
+    {
+        super(logger);
+    }
+
+    // ---------------------------------------------------------
+    // Implementation
+    //
+    // Note that in the methods below the Priority class is used to define
+    // levels even though the Level class is supported in 1.2. This is done
+    // so that at compile time the call definitely resolves to a call to
+    // a method that takes a Priority rather than one that takes a Level.
+    //
+    // The Category class (and hence its subclass Logging) in version 1.2 only
+    // has methods that take Priority objects. The Category class (and hence
+    // Logging class) in version 1.3 has methods that take both Priority and
+    // Level objects. This means that if we use Level here, and compile
+    // against log4j 1.3 then calls would be bound to the versions of
+    // methods taking Level objects and then would fail to run against
+    // version 1.2 of log4j.
+    // ---------------------------------------------------------
+
+
+    /**
+     * Logs a message with <code>org.apache.log4j.Priority.TRACE</code>.
+     * When using a log4j version that does not support the <code>TRACE</code>
+     * level, the message will be logged at the <code>DEBUG</code> level.
+     *
+     * @param message to log
+     * @see org.apache.commons.logging.Log#trace(Object)
+     */
+    public void trace(Object message)
+    {
+        getLogger().log(FQCN, traceLevel, message, null);
+    }
+
+
+    /**
+     * Logs a message with <code>org.apache.log4j.Priority.TRACE</code>.
+     * When using a log4j version that does not support the <code>TRACE</code>
+     * level, the message will be logged at the <code>DEBUG</code> level.
+     *
+     * @param message to log
+     * @param t       log this cause
+     * @see org.apache.commons.logging.Log#trace(Object, Throwable)
+     */
+    public void trace(Object message, Throwable t)
+    {
+        getLogger().log(FQCN, traceLevel, message, t);
+    }
+
+
+    /**
+     * Logs a message with <code>org.apache.log4j.Priority.DEBUG</code>.
+     *
+     * @param message to log
+     * @see org.apache.commons.logging.Log#debug(Object)
+     */
+    public void debug(Object message)
+    {
+        getLogger().log(FQCN, Priority.DEBUG, message, null);
+    }
+
+    /**
+     * Logs a message with <code>org.apache.log4j.Priority.DEBUG</code>.
+     *
+     * @param message to log
+     * @param t       log this cause
+     * @see org.apache.commons.logging.Log#debug(Object, Throwable)
+     */
+    public void debug(Object message, Throwable t)
+    {
+        getLogger().log(FQCN, Priority.DEBUG, message, t);
+    }
+
+
+    /**
+     * Logs a message with <code>org.apache.log4j.Priority.INFO</code>.
+     *
+     * @param message to log
+     * @see org.apache.commons.logging.Log#info(Object)
+     */
+    public void info(Object message)
+    {
+        getLogger().log(FQCN, Priority.INFO, message, null);
+    }
+
+
+    /**
+     * Logs a message with <code>org.apache.log4j.Priority.INFO</code>.
+     *
+     * @param message to log
+     * @param t       log this cause
+     * @see org.apache.commons.logging.Log#info(Object, Throwable)
+     */
+    public void info(Object message, Throwable t)
+    {
+        getLogger().log(FQCN, Priority.INFO, message, t);
+    }
+
+
+    /**
+     * Logs a message with <code>org.apache.log4j.Priority.WARN</code>.
+     *
+     * @param message to log
+     * @see org.apache.commons.logging.Log#warn(Object)
+     */
+    public void warn(Object message)
+    {
+        getLogger().log(FQCN, Priority.WARN, message, null);
+    }
+
+
+    /**
+     * Logs a message with <code>org.apache.log4j.Priority.WARN</code>.
+     *
+     * @param message to log
+     * @param t       log this cause
+     * @see org.apache.commons.logging.Log#warn(Object, Throwable)
+     */
+    public void warn(Object message, Throwable t)
+    {
+        getLogger().log(FQCN, Priority.WARN, message, t);
+    }
+
+
+    /**
+     * Logs a message with <code>org.apache.log4j.Priority.ERROR</code>.
+     *
+     * @param message to log
+     * @see org.apache.commons.logging.Log#error(Object)
+     */
+    public void error(Object message)
+    {
+        getLogger().log(FQCN, Priority.ERROR, message, null);
+    }
+
+
+    /**
+     * Logs a message with <code>org.apache.log4j.Priority.ERROR</code>.
+     *
+     * @param message to log
+     * @param t       log this cause
+     * @see org.apache.commons.logging.Log#error(Object, Throwable)
+     */
+    public void error(Object message, Throwable t)
+    {
+        getLogger().log(FQCN, Priority.ERROR, message, t);
+    }
+
+
+    /**
+     * Logs a message with <code>org.apache.log4j.Priority.FATAL</code>.
+     *
+     * @param message to log
+     * @see org.apache.commons.logging.Log#fatal(Object)
+     */
+    public void fatal(Object message)
+    {
+        getLogger().log(FQCN, Priority.FATAL, message, null);
+    }
+
+
+    /**
+     * Logs a message with <code>org.apache.log4j.Priority.FATAL</code>.
+     *
+     * @param message to log
+     * @param t       log this cause
+     * @see org.apache.commons.logging.Log#fatal(Object, Throwable)
+     */
+    public void fatal(Object message, Throwable t)
+    {
+        getLogger().log(FQCN, Priority.FATAL, message, t);
+    }
+
+}
diff --git a/src/test/org/apache/commons/configuration/TestAbstractConfiguration.java b/src/test/org/apache/commons/configuration/TestAbstractConfiguration.java
index 0c425d64..61a607bc 100644
--- a/src/test/org/apache/commons/configuration/TestAbstractConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestAbstractConfiguration.java
@@ -152,7 +152,7 @@ public abstract class TestAbstractConfiguration extends TestCase
         assertNotNull("Default logger is null", config.getLogger());
         Log log = LogFactory.getLog(config.getClass());
         config.setLogger(log);
-        assertSame("Logger was not set", log, config.getLogger());
+        assertSame("Logging was not set", log, config.getLogger());
     }
 
     /**
diff --git a/src/test/org/apache/commons/configuration/TestCatalogResolver.java b/src/test/org/apache/commons/configuration/TestCatalogResolver.java
index 0b7f5356..75d64bef 100644
--- a/src/test/org/apache/commons/configuration/TestCatalogResolver.java
+++ b/src/test/org/apache/commons/configuration/TestCatalogResolver.java
@@ -85,8 +85,8 @@ public class TestCatalogResolver extends TestCase
     {
         Log log = LogFactory.getLog(this.getClass());
         resolver.setLogger(log);
-        assertNotNull("No Logger returned", resolver.getLogger());
-        assertTrue("Incorrect Logger", log == resolver.getLogger());
+        assertNotNull("No Logging returned", resolver.getLogger());
+        assertTrue("Incorrect Logging", log == resolver.getLogger());
     }
 
 }
diff --git a/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java b/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java
index 420b28e4..21612461 100644
--- a/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java
@@ -34,10 +34,13 @@ import junit.framework.TestCase;
 import org.apache.commons.configuration.event.ConfigurationEvent;
 import org.apache.commons.configuration.event.ConfigurationListener;
 import org.apache.commons.configuration.reloading.FileAlwaysReloadingStrategy;
+import org.apache.commons.configuration.reloading.FileRandomReloadingStrategy;
 import org.apache.commons.configuration.tree.DefaultExpressionEngine;
 import org.apache.commons.configuration.tree.NodeCombiner;
 import org.apache.commons.configuration.tree.OverrideCombiner;
 import org.apache.commons.configuration.tree.UnionCombiner;
+import org.apache.commons.configuration.tree.MergeCombiner;
+import org.apache.commons.configuration.tree.xpath.XPathExpressionEngine;
 
 /**
  * Test class for CombinedConfiguration.
@@ -764,6 +767,75 @@ public class TestCombinedConfiguration extends TestCase
                 .getInt("xmlReload1"));
     }
 
+    public void testConcurrentGetAndReload() throws Exception
+    {
+        final int threadCount = 5;
+        final int loopCount = 1000;
+        config.setForceReloadCheck(true);
+        config.setNodeCombiner(new MergeCombiner());
+        final XMLConfiguration xml = new XMLConfiguration("configA.xml");
+        xml.setReloadingStrategy(new FileRandomReloadingStrategy());
+        config.addConfiguration(xml);
+        final XMLConfiguration xml2 = new XMLConfiguration("configB.xml");
+        xml2.setReloadingStrategy(new FileRandomReloadingStrategy());
+        config.addConfiguration(xml2);
+        config.setExpressionEngine(new XPathExpressionEngine());
+
+        assertEquals(config.getString("/property[@name='config']/@value"), "100");
+
+        Thread testThreads[] = new Thread[threadCount];
+        int failures[] = new int[threadCount];
+
+        for (int i = 0; i < testThreads.length; ++i)
+        {
+            testThreads[i] = new ReloadThread(config, failures, i, loopCount);
+            testThreads[i].start();
+        }
+
+        int totalFailures = 0;
+        for (int i = 0; i < testThreads.length; ++i)
+        {
+            testThreads[i].join();
+            totalFailures += failures[i];
+        }
+        assertTrue(totalFailures + " failures Occurred", totalFailures == 0);
+    }
+
+    private class ReloadThread extends Thread
+    {
+        CombinedConfiguration combined;
+        int[] failures;
+        int index;
+        int count;
+
+        ReloadThread(CombinedConfiguration config, int[] failures, int index, int count)
+        {
+            combined = config;
+            this.failures = failures;
+            this.index = index;
+            this.count = count;
+        }
+        public void run()
+        {
+            failures[index] = 0;
+            for (int i = 0; i < count; i++)
+            {
+                try
+                {
+                    String value = combined.getString("/property[@name='config']/@value");
+                    if (value == null || !value.equals("100"))
+                    {
+                        ++failures[index];
+                    }
+                }
+                catch (Exception ex)
+                {
+                    ++failures[index];
+                }
+            }
+        }
+    }
+
     /**
      * Helper method for writing a file. The file is also added to a list and
      * will be deleted in teadDown() automatically.
diff --git a/src/test/org/apache/commons/configuration/TestMultiFileHierarchicalConfiguration.java b/src/test/org/apache/commons/configuration/TestMultiFileHierarchicalConfiguration.java
index 2759cad1..6da689a5 100644
--- a/src/test/org/apache/commons/configuration/TestMultiFileHierarchicalConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestMultiFileHierarchicalConfiguration.java
@@ -19,6 +19,9 @@ package org.apache.commons.configuration;
 
 import junit.framework.TestCase;
 import org.apache.commons.configuration.reloading.FileChangedReloadingStrategy;
+import org.xml.sax.SAXParseException;
+
+import java.io.*;
 
 /**
  * Unit test for simple MultiConfigurationTest.
@@ -27,6 +30,15 @@ public class TestMultiFileHierarchicalConfiguration extends TestCase
 {
     private static String PATTERN1 = "target/test-classes/testMultiConfiguration_${sys:Id}.xml";
 
+    private static final File MULTI_TENENT_FILE = new File(
+            "conf/testMultiTenentConfigurationBuilder2.xml");
+
+    private static final File MULTI_TENENT_FILE2 = new File(
+            "target/test-classes/testMultiTenentConfigurationBuilder2.xml");
+
+    private static final File MULTI_RELOAD_FILE = new File(
+            "conf/testMultiTenentConfigurationBuilder3.xml");
+
     /**
      * Rigourous Test :-)
      */
@@ -48,4 +60,238 @@ public class TestMultiFileHierarchicalConfiguration extends TestCase
         System.setProperty("Id", "1003");
         assertTrue(config.getInt("rowsPerPage") == 35);
     }
+
+    public void testSchemaValidationError() throws Exception
+    {
+        System.clearProperty("Id");
+        DefaultConfigurationBuilder factory = new DefaultConfigurationBuilder();
+        factory.setFile(MULTI_TENENT_FILE);
+        CombinedConfiguration config = factory.getConfiguration(true);
+        try
+        {
+            System.setProperty("Id", "2001");
+            config.getInt("rowsPerPage");
+            fail("No exception thrown");
+        }
+        catch (Exception ex)
+        {
+            Throwable cause = ex.getCause();
+            while (cause != null && !(cause instanceof SAXParseException))
+            {
+                cause = cause.getCause();
+            }
+            assertTrue("SAXParseException was not thrown", cause instanceof SAXParseException);
+        }
+    }
+
+    public void testSchemaValidation() throws Exception
+    {
+        System.clearProperty("Id");
+        DefaultConfigurationBuilder factory = new DefaultConfigurationBuilder();
+        factory.setFile(MULTI_TENENT_FILE);
+        CombinedConfiguration config = factory.getConfiguration(true);
+        System.setProperty("Id", "2002");
+        int rows = config.getInt("rowsPerPage");
+        assertTrue("expected: " + rows + " actual: " + "25", 25 == rows);
+    }
+
+    public void testMissingFile() throws Exception
+    {
+        System.clearProperty("Id");
+        DefaultConfigurationBuilder factory = new DefaultConfigurationBuilder();
+        factory.setFile(MULTI_TENENT_FILE);
+        CombinedConfiguration config = factory.getConfiguration(true);
+        System.setProperty("Id", "3099");
+        int rows = config.getInt("rowsPerPage");
+        assertTrue("expected: " + rows + " actual: " + "50", 50 == rows);
+
+    }
+
+    public void testFileReload1() throws Exception
+    {
+        System.getProperties().remove("Id");
+        DefaultConfigurationBuilder factory = new DefaultConfigurationBuilder();
+        factory.setFile(MULTI_RELOAD_FILE);
+        CombinedConfiguration config = factory.getConfiguration(true);
+
+        // create a new configuration
+        File input = new File("target/test-classes/testMultiConfiguration_3001.xml");
+        File output = new File("target/test-classes/testwrite/testMultiConfiguration_3001.xml");
+        output.delete();
+        output.getParentFile().mkdir();
+        copyFile(input, output);
+
+        assertNotNull(config);
+        verify("3001", config, 15);
+        Thread.sleep(1100);
+        XMLConfiguration x = new XMLConfiguration();
+        x.setFile(output);
+        x.setAttributeSplittingDisabled(true);
+        x.setDelimiterParsingDisabled(true);
+        x.load();
+        x.setProperty("rowsPerPage", "35");
+        //Insure orginal timestamp and new timestamp aren't the same second.
+        Thread.sleep(1100);
+        x.save();
+        verify("3001", config, 35);
+        output.delete();
+    }
+
+    public void testFileReload2() throws Exception
+    {
+        // create a new configuration
+        File input = new File("target/test-classes/testMultiConfiguration_3002.xml");
+        File output = new File("target/test-classes/testwrite/testMultiConfiguration_3002.xml");
+        output.delete();
+
+        System.getProperties().remove("Id");
+        DefaultConfigurationBuilder factory = new DefaultConfigurationBuilder();
+        factory.setFile(MULTI_RELOAD_FILE);
+        CombinedConfiguration config = factory.getConfiguration(true);
+        assertNotNull(config);
+        // The file should not exist yet.
+        verify("3002", config, 50);
+
+        output.getParentFile().mkdir();
+        copyFile(input, output);
+        Thread.sleep(600);
+        verify("3002", config, 25);
+        output.delete();
+    }
+
+    public void testFileReload3() throws Exception
+    {
+        // create a new configuration
+        File input = new File("target/test-classes/testMultiConfiguration_3001.xml");
+        File output = new File("target/test-classes/testwrite/testMultiConfiguration_3001.xml");
+        output.delete();
+        output.getParentFile().mkdir();
+
+        System.getProperties().remove("Id");
+        DefaultConfigurationBuilder factory = new DefaultConfigurationBuilder();
+        factory.setFile(MULTI_RELOAD_FILE);
+        CombinedConfiguration config = factory.getConfiguration(true);
+        assertNotNull(config);
+        //The file does not exist yet.
+        verify("3001", config, 50);
+        copyFile(input, output);
+        //Sleep so refreshDelay elapses
+        Thread.sleep(600);
+        verify("3001", config, 15);
+        Thread.sleep(500);
+        XMLConfiguration x = new XMLConfiguration();
+        x.setFile(output);
+        x.setAttributeSplittingDisabled(true);
+        x.setDelimiterParsingDisabled(true);
+        x.load();
+        x.setProperty("rowsPerPage", "35");
+        // Insure original timestamp and new timestamp are not the same second.
+        Thread.sleep(1100);
+        x.save();
+        verify("3001", config, 35);
+        output.delete();
+    }
+
+
+    public void testReloadDefault() throws Exception
+    {
+        // create a new configuration
+        String defaultName = "target/test-classes/testMultiConfiguration_default.xml";
+        File input = new File(defaultName);
+
+        System.getProperties().remove("Id");
+        DefaultConfigurationBuilder factory = new DefaultConfigurationBuilder();
+        factory.setFile(MULTI_TENENT_FILE2);
+        CombinedConfiguration config = factory.getConfiguration(true);
+        assertNotNull(config);
+        verify("3001", config, 15);
+        verify("3002", config, 25);
+        System.setProperty("Id", "3002");
+        config.addProperty("/ TestProp", "Test");
+        assertTrue("Property not added", "Test".equals(config.getString("TestProp")));
+        System.getProperties().remove("Id");
+        //Sleep so refreshDelay elapses
+        Thread.sleep(600);
+        long time = System.currentTimeMillis();
+        long original = input.lastModified();
+        input.setLastModified(time);
+        File defaultFile = new File(defaultName);
+        long newTime = defaultFile.lastModified();
+        assertTrue("time mismatch", original != newTime);
+        Thread.sleep(600);
+        verify("3001", config, 15);
+        verify("3002", config, 25);
+        System.setProperty("Id", "3002");
+        String test = config.getString("TestProp");
+        assertNull("Property was not cleared by reload", test);
+    }
+
+
+    public void testFileReloadSchemaValidationError() throws Exception
+    {
+        System.getProperties().remove("Id");
+        DefaultConfigurationBuilder factory = new DefaultConfigurationBuilder();
+        factory.setFile(MULTI_RELOAD_FILE);
+        CombinedConfiguration config = factory.getConfiguration(true);
+
+        // create a new configuration
+        File input = new File("target/test-classes/testMultiConfiguration_3001.xml");
+        File output = new File("target/test-classes/testwrite/testMultiConfiguration_3001.xml");
+        output.delete();
+        output.getParentFile().mkdir();
+        copyFile(input, output);
+
+        assertNotNull(config);
+        verify("3001", config, 15);
+        Thread.sleep(1100);
+        XMLConfiguration x = new XMLConfiguration();
+        x.setFile(output);
+        x.setAttributeSplittingDisabled(true);
+        x.setDelimiterParsingDisabled(true);
+        x.load();
+        x.setProperty("rowsPerPage", "test");
+        //Insure orginal timestamp and new timestamp aren't the same second.
+        Thread.sleep(1100);
+        x.save();
+        System.setProperty("Id", "3001");
+        try
+        {
+            config.getInt("rowsPerPage");
+            fail("No exception was thrown");
+        }
+        catch (Exception ex)
+        {
+
+        }
+
+        output.delete();
+    }
+
+    private void copyFile(File input, File output) throws IOException
+    {
+        Reader reader = new FileReader(input);
+        Writer writer = new FileWriter(output);
+        char[] buffer = new char[4096];
+        int n = 0;
+        while (-1 != (n = reader.read(buffer)))
+        {
+            writer.write(buffer, 0, n);
+        }
+        reader.close();
+        writer.close();
+    }
+
+    private void verify(String key, CombinedConfiguration config, int rows)
+    {
+        if (key == null)
+        {
+            System.getProperties().remove("Id");
+        }
+        else
+        {
+            System.setProperty("Id", key);
+        }
+        int actual = config.getInt("rowsPerPage");
+        assertTrue("expected: " + rows + " actual: " + actual, actual == rows);
+    }
 }
diff --git a/src/test/org/apache/commons/configuration/TestVFSConfigurationBuilder.java b/src/test/org/apache/commons/configuration/TestVFSConfigurationBuilder.java
index 0ba9fce2..cc99f158 100644
--- a/src/test/org/apache/commons/configuration/TestVFSConfigurationBuilder.java
+++ b/src/test/org/apache/commons/configuration/TestVFSConfigurationBuilder.java
@@ -31,7 +31,6 @@ import junit.framework.TestCase;
 
 import org.apache.commons.configuration.beanutils.BeanHelper;
 import org.apache.commons.configuration.reloading.FileChangedReloadingStrategy;
-import org.apache.commons.configuration.reloading.VFSFileMonitorReloadingStrategy;
 import org.apache.commons.configuration.tree.DefaultConfigurationNode;
 import org.apache.commons.configuration.tree.xpath.XPathExpressionEngine;
 import org.apache.commons.configuration.event.ConfigurationListener;
@@ -91,14 +90,17 @@ public class TestVFSConfigurationBuilder extends TestCase implements Configurati
     private static final File FILESYSTEM_FILE = new File(
             "conf/testFileSystem.xml");
 
-    private static final File FILEMONITOR_FILE = new File(
-            "target/test-classes/testFileMonitorConfigurationBuilder.xml");
+    private static final File FILERELOAD_FILE = new File(
+            "target/test-classes/testFileReloadConfigurationBuilder.xml");
 
-    private static final File FILEMONITOR2_FILE = new File(
-            "target/test-classes/testFileMonitorConfigurationBuilder2.xml");
+    private static final File FILERELOAD2_FILE = new File(
+            "target/test-classes/testFileReloadConfigurationBuilder2.xml");
 
-    private static final String FILEMONITOR_URI = "file://" + System.getProperty("user.dir")
-            + "/target/test-classes/testFileMonitorConfigurationBuilder2.xml";
+      private static final File MULTI_RELOAD_FILE1 = new File(
+            "target/test-classes/testVFSMultiTenentConfigurationBuilder1.xml");
+
+    private static final File MULTI_RELOAD_FILE2 = new File(
+            "target/test-classes/testVFSMultiTenentConfigurationBuilder2.xml");
 
     /** Constant for the name of an optional configuration.*/
     private static final String OPTIONAL_NAME = "optionalConfig";
@@ -109,12 +111,6 @@ public class TestVFSConfigurationBuilder extends TestCase implements Configurati
     /** Stores the object to be tested. */
     DefaultConfigurationBuilder factory;
 
-    public TestVFSConfigurationBuilder()
-    {
-        super();
-        VFSFileMonitorReloadingStrategy.stopMonitor();
-    }
-
     protected void setUp() throws Exception
     {
         super.setUp();
@@ -1005,7 +1001,7 @@ public class TestVFSConfigurationBuilder extends TestCase implements Configurati
         }
     }
 
-    public void testFileMonitor1() throws Exception
+    public void testFileReload1() throws Exception
     {
         // create a new configuration
         File input = new File("target/test-classes/testMultiConfiguration_1001.xml");
@@ -1013,116 +1009,147 @@ public class TestVFSConfigurationBuilder extends TestCase implements Configurati
         output.delete();
         output.getParentFile().mkdir();
         copyFile(input, output);
+        // Sleep to make sure the file timestamp is not in the same second as "now".
+        Thread.sleep(1100);
 
-        factory.setFile(FILEMONITOR_FILE);
+        factory.setFile(FILERELOAD_FILE);
         FileSystem.resetDefaultFileSystem();
         System.getProperties().remove("Id");
 
         CombinedConfiguration config = factory.getConfiguration(true);
         assertNotNull(config);
-        config.addConfigurationListener(this);
         verify("1001", config, 15);
-
-        // Allow time for FileMonitor to set up.
-        Thread.sleep(1000);
         XMLConfiguration x = new XMLConfiguration(output);
         x.setProperty("rowsPerPage", "50");
         x.save();
-
-        waitForChange();
         verify("1001", config, 50);
         output.delete();
-        VFSFileMonitorReloadingStrategy.stopMonitor();
     }
 
-    public void testFileMonitor2() throws Exception
+    public void testFileReload2() throws Exception
     {
         // create a new configuration
         File input = new File("target/test-classes/testMultiConfiguration_1002.xml");
         File output = new File("target/test-classes/testwrite/testMultiConfiguration_1002.xml");
         output.delete();
 
-        factory.setFile(FILEMONITOR_FILE);
+        factory.setFile(FILERELOAD_FILE);
         FileSystem.resetDefaultFileSystem();
         System.getProperties().remove("Id");
 
         CombinedConfiguration config = factory.getConfiguration(true);
-        config.addConfigurationListener(this);
         assertNotNull(config);
 
         verify("1002", config, 50);
-        Thread.sleep(1000);
-
+        // Sleep to make sure the file timestamp is not in the same second as "now".
+        Thread.sleep(1100);
         output.getParentFile().mkdir();
         copyFile(input, output);
-
-        // Allow time for the monitor to notice the change.
-        //Thread.sleep(2000);
-        waitForChange();
         verify("1002", config, 25);
         output.delete();
-        VFSFileMonitorReloadingStrategy.stopMonitor();
     }
 
-
-    public void testFileMonitor3() throws Exception
+    public void testFileReload3() throws Exception
     {
         // create a new configuration
         File input = new File("target/test-classes/testMultiConfiguration_1001.xml");
         File output = new File("target/test-classes/testwrite/testMultiConfiguration_1001.xml");
         output.delete();
         output.getParentFile().mkdir();
-        copyFile(input, output);
 
-        factory.setFile(FILEMONITOR2_FILE);
+        factory.setFile(FILERELOAD_FILE);
+        FileSystem.resetDefaultFileSystem();
         System.getProperties().remove("Id");
 
         CombinedConfiguration config = factory.getConfiguration(true);
         assertNotNull(config);
-        config.addConfigurationListener(this);
+        verify("1001", config, 50);
+        copyFile(input, output);
+        // Sleep to make sure the file timestamp is not in the same second as "now".
+        Thread.sleep(1100);
         verify("1001", config, 15);
-
-        // Allow time for FileMonitor to set up.
-        Thread.sleep(1000);
         XMLConfiguration x = new XMLConfiguration(output);
-        x.setProperty("rowsPerPage", "50");
+        x.setProperty("rowsPerPage", "25");
         x.save();
-        // Let FileMonitor detect the change.
-        //Thread.sleep(2000);
-        waitForChange();
-        verify("1001", config, 50);
+         // Sleep to make sure the file timestamp is not in the same second as "now".
+        Thread.sleep(1100);
+        verify("1001", config, 25);
         output.delete();
-        VFSFileMonitorReloadingStrategy.stopMonitor();
     }
 
-    public void testFileMonitor4() throws Exception
+    public void testReloadDefault() throws Exception
     {
         // create a new configuration
-        File input = new File("target/test-classes/testMultiConfiguration_1002.xml");
-        File output = new File("target/test-classes/testwrite/testMultiConfiguration_1002.xml");
-        output.delete();
+        String defaultName = "target/test-classes/testMultiConfiguration_default.xml";
+        File input = new File(defaultName);
 
-        factory.setFileName(FILEMONITOR_URI);
         System.getProperties().remove("Id");
-
+        factory.setFile(MULTI_RELOAD_FILE1);
         CombinedConfiguration config = factory.getConfiguration(true);
         assertNotNull(config);
-        config.addConfigurationListener(this);
+        verify("3001", config, 15);
+        verify("3002", config, 25);
+        System.setProperty("Id", "3002");
+        config.addProperty("/ TestProp", "Test");
+        assertTrue("Property not added", "Test".equals(config.getString("TestProp")));
+        System.getProperties().remove("Id");
+        //Sleep so refreshDelay elapses
+        Thread.sleep(600);
+        long time = System.currentTimeMillis();
+        long original = input.lastModified();
+        input.setLastModified(time);
+        File defaultFile = new File(defaultName);
+        long newTime = defaultFile.lastModified();
+        assertTrue("time mismatch", original != newTime);
+        Thread.sleep(600);
+        verify("3001", config, 15);
+        verify("3002", config, 25);
+        System.setProperty("Id", "3002");
+        String test = config.getString("TestProp");
+        assertNull("Property was not cleared by reload", test);
+    }
 
-        verify("1002", config, 50);
-        Thread.sleep(1000);
 
+    public void testFileReloadSchemaValidationError() throws Exception
+    {
+        System.getProperties().remove("Id");
+        factory.setFile(MULTI_RELOAD_FILE2);
+        CombinedConfiguration config = factory.getConfiguration(true);
+
+        // create a new configuration
+        File input = new File("target/test-classes/testMultiConfiguration_3001.xml");
+        File output = new File("target/test-classes/testwrite/testMultiConfiguration_3001.xml");
+        output.delete();
         output.getParentFile().mkdir();
         copyFile(input, output);
 
-        // Allow time for the monitor to notice the change.
-        //Thread.sleep(2000);
-        waitForChange();
-        verify("1002", config, 25);
+        assertNotNull(config);
+        verify("3001", config, 15);
+        Thread.sleep(1100);
+        XMLConfiguration x = new XMLConfiguration();
+        x.setFile(output);
+        x.setAttributeSplittingDisabled(true);
+        x.setDelimiterParsingDisabled(true);
+        x.load();
+        x.setProperty("rowsPerPage", "test");
+        //Insure orginal timestamp and new timestamp aren't the same second.
+        Thread.sleep(1100);
+        x.save();
+        System.setProperty("Id", "3001");
+        try
+        {
+            config.getInt("rowsPerPage");
+            fail("No exception was thrown");
+        }
+        catch (Exception ex)
+        {
+
+        }
+
         output.delete();
-        VFSFileMonitorReloadingStrategy.stopMonitor();
     }
 
+
     private void copyFile(File input, File output) throws IOException
     {
         Reader reader = new FileReader(input);
@@ -1161,7 +1188,11 @@ public class TestVFSConfigurationBuilder extends TestCase implements Configurati
                 int count = 0;
                 while (!configChanged && count++ <= 3)
                 {
-                    this.wait(5000);
+                    this.wait(2000);
+                }
+                if (!configChanged)
+                {
+                  throw new IllegalStateException("No change detected");
                 }
             }
             catch (InterruptedException ie)
diff --git a/src/test/org/apache/commons/configuration/TestWebdavConfigurationBuilder.java b/src/test/org/apache/commons/configuration/TestWebdavConfigurationBuilder.java
index 3b4e1162..b19fa49b 100644
--- a/src/test/org/apache/commons/configuration/TestWebdavConfigurationBuilder.java
+++ b/src/test/org/apache/commons/configuration/TestWebdavConfigurationBuilder.java
@@ -21,7 +21,6 @@ import java.io.IOException;
 import java.io.Reader;
 import java.io.FileReader;
 import java.io.Writer;
-import java.io.FileWriter;
 import java.io.OutputStreamWriter;
 import java.util.Collection;
 import java.util.HashMap;
@@ -32,7 +31,6 @@ import junit.framework.TestCase;
 
 import org.apache.commons.configuration.beanutils.BeanHelper;
 import org.apache.commons.configuration.reloading.FileChangedReloadingStrategy;
-import org.apache.commons.configuration.reloading.VFSFileMonitorReloadingStrategy;
 import org.apache.commons.configuration.tree.DefaultConfigurationNode;
 import org.apache.commons.configuration.tree.xpath.XPathExpressionEngine;
 import org.apache.commons.configuration.event.ConfigurationEvent;
@@ -42,7 +40,6 @@ import org.apache.commons.vfs.FileSystemManager;
 import org.apache.commons.vfs.VFS;
 import org.apache.commons.vfs.FileName;
 import org.apache.commons.vfs.FileSystemOptions;
-import org.apache.commons.vfs.FileContent;
 
 /**
  * Test class for DefaultConfigurationBuilder.
@@ -93,13 +90,13 @@ public class TestWebdavConfigurationBuilder extends TestCase
     private static final String MULTI_TENENT_FILE =
             "testMultiTenentConfigurationBuilder.xml";
 
-    private static final String FILEMONITOR2_FILE =
-            "testFileMonitorConfigurationBuilder2.xml";
+    private static final String FILERELOAD2_FILE =
+            "testFileReloadConfigurationBuilder2.xml";
 
-    private static final String FILEMONITOR_1001_FILE =
+    private static final String FILERELOAD_1001_FILE =
             "testwrite/testMultiConfiguration_1001.xml";
 
-    private static final String FILEMONITOR_1002_FILE =
+    private static final String FILERELOAD_1002_FILE =
             "testwrite/testMultiConfiguration_1002.xml";
 
     private static final String TEST_PROPERTIES = "test.properties.xml";
@@ -900,16 +897,16 @@ public class TestWebdavConfigurationBuilder extends TestCase
         verify("1005", config, 50);
     }
 
-    public void testFileMonitor1() throws Exception
+    public void testFileChanged() throws Exception
     {
         // create a new configuration
         File input = new File("target/test-classes/testMultiConfiguration_1001.xml");
-        FileObject output = getFile(getBasePath() + FILEMONITOR_1001_FILE);
+        FileObject output = getFile(getBasePath() + FILERELOAD_1001_FILE);
         output.delete();
         output.getParent().createFolder();
         copyFile(input, output);
 
-        factory.setFileName(getBasePath() + FILEMONITOR2_FILE);
+        factory.setFileName(getBasePath() + FILERELOAD2_FILE);
         System.getProperties().remove("Id");
 
         CombinedConfiguration config = factory.getConfiguration(true);
@@ -919,7 +916,7 @@ public class TestWebdavConfigurationBuilder extends TestCase
 
         // Allow time for FileMonitor to set up.
         Thread.sleep(1000);
-        XMLConfiguration x = new XMLConfiguration(getBasePath() + FILEMONITOR_1001_FILE);
+        XMLConfiguration x = new XMLConfiguration(getBasePath() + FILERELOAD_1001_FILE);
         x.setProperty("rowsPerPage", "50");
         x.save();
         // Let FileMonitor detect the change.
@@ -927,17 +924,16 @@ public class TestWebdavConfigurationBuilder extends TestCase
         waitForChange();
         verify("1001", config, 50);
         output.delete();
-        VFSFileMonitorReloadingStrategy.stopMonitor();
     }
 
-    public void testFileMonitor2() throws Exception
+    public void testFileChanged2() throws Exception
     {
         // create a new configuration
         File input = new File("target/test-classes/testMultiConfiguration_1002.xml");
-        FileObject output = getFile(getBasePath() + FILEMONITOR_1002_FILE);
+        FileObject output = getFile(getBasePath() + FILERELOAD_1002_FILE);
         output.delete();
 
-        factory.setFileName(getBasePath() + FILEMONITOR2_FILE);
+        factory.setFileName(getBasePath() + FILERELOAD2_FILE);
         System.getProperties().remove("Id");
 
         CombinedConfiguration config = factory.getConfiguration(true);
@@ -955,7 +951,6 @@ public class TestWebdavConfigurationBuilder extends TestCase
         waitForChange();
         verify("1002", config, 25);
         output.delete();
-        VFSFileMonitorReloadingStrategy.stopMonitor();
     }
 
 
diff --git a/src/test/org/apache/commons/configuration/TestXMLConfiguration.java b/src/test/org/apache/commons/configuration/TestXMLConfiguration.java
index 4166e2e1..509f87b1 100644
--- a/src/test/org/apache/commons/configuration/TestXMLConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestXMLConfiguration.java
@@ -1597,6 +1597,50 @@ public class TestXMLConfiguration extends TestCase
         }
     }
 
+    public void testConcurrentGetAndReload() throws Exception
+    {
+        //final FileConfiguration config = new PropertiesConfiguration("test.properties");
+        final FileConfiguration config = new XMLConfiguration("test.xml");
+        config.setReloadingStrategy(new FileAlwaysReloadingStrategy());
+
+        assertTrue("Property not found", config.getProperty("test.short") != null);
+
+        Thread testThreads[] = new Thread[5];
+
+        for (int i = 0; i < testThreads.length; ++i)
+        {
+            testThreads[i] = new ReloadThread(config);
+            testThreads[i].start();
+        }
+
+        for (int i = 0; i < 2000; i++)
+        {
+            assertTrue("Property not found", config.getProperty("test.short") != null); 
+        }
+
+        for (int i = 0; i < testThreads.length; ++i)
+        {
+            testThreads[i].join();
+        }
+    }
+
+    private class ReloadThread extends Thread
+    {
+        FileConfiguration config;
+
+        ReloadThread(FileConfiguration config)
+        {
+            this.config = config;
+        }
+        public void run()
+        {
+            for (int i = 0; i < 1000; i++)
+            {
+                config.reload();
+            }
+        }
+    }
+
     /**
      * Prepares a configuration object for testing a reload operation.
      *
diff --git a/src/test/org/apache/commons/configuration/reloading/FileRandomReloadingStrategy.java b/src/test/org/apache/commons/configuration/reloading/FileRandomReloadingStrategy.java
new file mode 100644
index 00000000..6e9b5802
--- /dev/null
+++ b/src/test/org/apache/commons/configuration/reloading/FileRandomReloadingStrategy.java
@@ -0,0 +1,31 @@
+package org.apache.commons.configuration.reloading;
+
+import java.io.File;
+import java.util.Random;
+
+/**
+ * A ReloadingStrategy that randomly returns true or false;
+ */
+public class FileRandomReloadingStrategy extends FileChangedReloadingStrategy
+{
+    Random random = new Random();
+    /**
+     * Checks whether a reload is necessary.
+     *
+     * @return a flag whether a reload is required
+     */
+    public boolean reloadingRequired()
+    {
+        return random.nextBoolean();
+    }
+
+    /**
+     * Returns the file that is watched by this strategy.
+     *
+     * @return the monitored file
+     */
+    public File getMonitoredFile()
+    {
+        return getFile();
+    }
+}
diff --git a/src/test/org/apache/commons/configuration/reloading/TestFileChangedReloadingStrategy.java b/src/test/org/apache/commons/configuration/reloading/TestFileChangedReloadingStrategy.java
index b31ba229..8e2cd6e9 100644
--- a/src/test/org/apache/commons/configuration/reloading/TestFileChangedReloadingStrategy.java
+++ b/src/test/org/apache/commons/configuration/reloading/TestFileChangedReloadingStrategy.java
@@ -19,6 +19,7 @@ package org.apache.commons.configuration.reloading;
 
 import java.io.File;
 import java.io.FileWriter;
+import java.io.ByteArrayOutputStream;
 import java.net.URL;
 
 import junit.framework.TestCase;
@@ -26,6 +27,12 @@ import junit.framework.TestCase;
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.configuration.PropertiesConfiguration;
 import org.apache.commons.configuration.XMLConfiguration;
+import org.apache.log4j.Logger;
+import org.apache.log4j.Layout;
+import org.apache.log4j.PatternLayout;
+import org.apache.log4j.Appender;
+import org.apache.log4j.WriterAppender;
+import org.apache.log4j.Level;
 
 /**
  * Test case for the ReloadableConfiguration class.
@@ -163,4 +170,46 @@ public class TestFileChangedReloadingStrategy extends TestCase
         strategy.reloadingPerformed();
         assertFalse("Reloading still required", strategy.reloadingRequired());
     }
+
+    public void testFileDeletion() throws Exception
+    {
+        Logger logger = Logger.getLogger(FileChangedReloadingStrategy.class.getName());
+        Layout layout = new PatternLayout("%p - %m%n");
+        ByteArrayOutputStream os = new ByteArrayOutputStream();
+        Appender appender = new WriterAppender(layout, os);
+        logger.addAppender(appender);
+        logger.setLevel(Level.WARN);
+        logger.setAdditivity(false);
+        // create a new configuration
+        File file = new File("target/testReload.properties");
+
+        if (file.exists())
+        {
+            file.delete();
+        }
+
+        // create the configuration file
+        FileWriter out = new FileWriter(file);
+        out.write("string=value1");
+        out.flush();
+        out.close();
+
+        // load the configuration
+        PropertiesConfiguration config = new PropertiesConfiguration("target/testReload.properties");
+        FileChangedReloadingStrategy strategy = new FileChangedReloadingStrategy();
+        strategy.setRefreshDelay(500);
+        config.setReloadingStrategy(strategy);
+        assertEquals("Initial value", "value1", config.getString("string"));
+
+        Thread.sleep(2000);
+
+        // Delete the file.
+        file.delete();
+        //Old value should still be returned.
+        assertEquals("Initial value", "value1", config.getString("string"));
+        logger.removeAppender(appender);
+        String str = os.toString();
+        //System.out.println(str);
+        assertTrue("No error was logged", str != null && str.length() > 0);
+    }
 }
diff --git a/src/test/org/apache/commons/configuration/reloading/TestVFSFileMonitorReloadingStrategy.java b/src/test/org/apache/commons/configuration/reloading/TestVFSFileChangedReloadingStrategy.java
similarity index 52%
rename from src/test/org/apache/commons/configuration/reloading/TestVFSFileMonitorReloadingStrategy.java
rename to src/test/org/apache/commons/configuration/reloading/TestVFSFileChangedReloadingStrategy.java
index af070f34..987cba00 100644
--- a/src/test/org/apache/commons/configuration/reloading/TestVFSFileMonitorReloadingStrategy.java
+++ b/src/test/org/apache/commons/configuration/reloading/TestVFSFileChangedReloadingStrategy.java
@@ -38,11 +38,10 @@ import org.apache.commons.configuration.event.ConfigurationListener;
  * @author Ralph Goers
  * @version $Revision$
  */
-public class TestVFSFileMonitorReloadingStrategy extends TestCase
-        implements ConfigurationListener
+public class TestVFSFileChangedReloadingStrategy extends TestCase
 {
-    /** true when a file is changed */
-    private boolean configChanged = false;
+    /** Constant for the name of a test properties file.*/
+    private static final String TEST_FILE = "test.properties";
 
     protected void setUp() throws Exception
     {
@@ -74,12 +73,12 @@ public class TestVFSFileMonitorReloadingStrategy extends TestCase
 
         // load the configuration
         PropertiesConfiguration config = new PropertiesConfiguration("target/testReload.properties");
-        VFSFileMonitorReloadingStrategy strategy = new VFSFileMonitorReloadingStrategy();
-        strategy.setDelay(500);
+        VFSFileChangedReloadingStrategy strategy = new VFSFileChangedReloadingStrategy();
+        strategy.setRefreshDelay(500);
         config.setReloadingStrategy(strategy);
         assertEquals("Initial value", "value1", config.getString("string"));
 
-        Thread.sleep(1000);
+        Thread.sleep(2000);
 
         // change the file
         out = new FileWriter(file);
@@ -87,15 +86,8 @@ public class TestVFSFileMonitorReloadingStrategy extends TestCase
         out.flush();
         out.close();
 
-        Thread.sleep(2000);
-
         // test the automatic reloading
         assertEquals("Modified value with enabled reloading", "value2", config.getString("string"));
-        strategy.stopMonitor();
-        if (file.exists())
-        {
-            file.delete();
-        }
     }
 
     public void testNewFileReloading() throws Exception
@@ -110,9 +102,8 @@ public class TestVFSFileMonitorReloadingStrategy extends TestCase
 
         PropertiesConfiguration config = new PropertiesConfiguration();
         config.setFile(file);
-        config.addConfigurationListener(this);
-        VFSFileMonitorReloadingStrategy strategy = new VFSFileMonitorReloadingStrategy();
-        strategy.setDelay(500);
+        VFSFileChangedReloadingStrategy strategy = new VFSFileChangedReloadingStrategy();
+        strategy.setRefreshDelay(500);
         config.setReloadingStrategy(strategy);
 
         assertNull("Initial value", config.getString("string"));
@@ -123,106 +114,40 @@ public class TestVFSFileMonitorReloadingStrategy extends TestCase
         out.flush();
         out.close();
 
-        waitForChange();
+        Thread.sleep(2000);
 
         // test the automatic reloading
-        try
-        {
-            assertEquals("Modified value with enabled reloading", "value1", config.getString("string"));
-        }
-        finally
-        {
-            strategy.stopMonitor();
-            if (file.exists())
-            {
-                file.delete();
-            }
-        }
+        assertEquals("Modified value with enabled reloading", "value1", config.getString("string"));
     }
 
     public void testGetRefreshDelay() throws Exception
     {
-        // create a new configuration
-        File file = new File("target/testReload.properties");
-
-        if (file.exists())
-        {
-            file.delete();
-        }
-
-        // create the configuration file
-        FileWriter out = new FileWriter(file);
-        out.write("string=value1");
-        out.flush();
-        out.close();
-
-        PropertiesConfiguration config = new PropertiesConfiguration("target/testReload.properties");
-        VFSFileMonitorReloadingStrategy strategy = new VFSFileMonitorReloadingStrategy();
-        strategy.setDelay(500);
-        config.setReloadingStrategy(strategy);
-        // Minimum is 1 second.
-        assertEquals("refresh delay", 1000, strategy.getDelay());
-
-        config = new PropertiesConfiguration("target/testReload.properties");
-        strategy = new VFSFileMonitorReloadingStrategy();
-        strategy.setDelay(1500);
-        config.setReloadingStrategy(strategy);
-        // Can be made longer
-        assertEquals("refresh delay", 1500, strategy.getDelay());
-
-        config = new PropertiesConfiguration("target/testReload.properties");
-        strategy = new VFSFileMonitorReloadingStrategy();
-        strategy.setDelay(500);
-        config.setReloadingStrategy(strategy);
-        // Can't be made shorter
-        assertEquals("refresh delay", 1500, strategy.getDelay());
-
-        strategy.stopMonitor();
-        // Reset and verify everything clears
-        config = new PropertiesConfiguration("target/testReload.properties");
-        strategy = new VFSFileMonitorReloadingStrategy();
-        strategy.setDelay(1100);
-        config.setReloadingStrategy(strategy);
-        assertEquals("refresh delay", 1100, strategy.getDelay());
-        strategy.stopMonitor();
-        if (file.exists())
-        {
-            file.delete();
-        }
-    }
-
-    private void waitForChange()
-    {
-        synchronized(this)
-        {
-            try
-            {
-                int count = 0;
-                while (!configChanged && count++ <= 3)
-                {
-                    this.wait(5000);
-                }
-            }
-            catch (InterruptedException ie)
-            {
-                throw new IllegalStateException("wait timed out");
-            }
-            finally
-            {
-                configChanged = false;
-            }
-        }
+        VFSFileChangedReloadingStrategy strategy = new VFSFileChangedReloadingStrategy();
+        strategy.setRefreshDelay(500);
+        assertEquals("refresh delay", 500, strategy.getRefreshDelay());
     }
 
-    public void configurationChanged(ConfigurationEvent event)
+    /**
+     * Tests calling reloadingRequired() multiple times before a reload actually
+     * happens. This test is related to CONFIGURATION-302.
+     */
+    public void testReloadingRequiredMultipleTimes()
+            throws ConfigurationException
     {
-        if (event.getType() == AbstractFileConfiguration.EVENT_CONFIG_CHANGED)
+        VFSFileChangedReloadingStrategy strategy = new VFSFileChangedReloadingStrategy()
         {
-            synchronized(this)
+            protected boolean hasChanged()
             {
-                configChanged = true;
-                this.notify();
+                // signal always a change
+                return true;
             }
-        }
+        };
+        strategy.setRefreshDelay(100000);
+        PropertiesConfiguration config = new PropertiesConfiguration(TEST_FILE);
+        config.setReloadingStrategy(strategy);
+        assertTrue("Reloading not required", strategy.reloadingRequired());
+        assertTrue("Reloading no more required", strategy.reloadingRequired());
+        strategy.reloadingPerformed();
+        assertFalse("Reloading still required", strategy.reloadingRequired());
     }
 }
\ No newline at end of file
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 1bbb5029..89e3bf75 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,13 @@
 
   <body>
     <release version="1.7" date="in SVN" description="">
+      <action dev="rgoers" type="fix" issue="CONFIGURATION-397">
+        Schema violation exceptions are now propagated back to the caller.
+      </action>
+       <action dev="rgoers" type="fix" issue="CONFIGURATION-390">
+        XMLConfiguration and CombinedConfiguraton are now synchronized to fix problems
+        caused by reloading in a multithreaded environment.
+      </action>
       <action dev="oheger" type="fix" issue="CONFIGURATION-396">
         HierarchicalConfiguration.NodeVisitor is now passed the correct key to
         its visitAfterChildren() method.
diff --git a/xdocs/userguide/howto_filesystems.xml b/xdocs/userguide/howto_filesystems.xml
index 1a5ae295..aba26516 100644
--- a/xdocs/userguide/howto_filesystems.xml
+++ b/xdocs/userguide/howto_filesystems.xml
@@ -77,7 +77,7 @@
     </xml>
   </override>
 </configuration>
-]]></source>       
+]]></source>
       </subsection>
       <subsection name="File Options Provider">
         <p>
@@ -95,15 +95,11 @@
       </subsection>
       <subsection name="File Reloading Strategy">
         <p>
-          The <code><a href="../apidocs/org/apache/commons/configuration/reloading/VFSFileMonitorReloadingStrategy.html">VFSFileMonitorReloadingStrategy</a></code>
+          The <code><a href="../apidocs/org/apache/commons/configuration/reloading/VFSFileChangedReloadingStrategy.html">VFSFileChangedReloadingStrategy</a></code>
           can be used to cause Configurations accessed via the <code>VFSFileSystem</code> to be
           monitored and reloaded when the files are modified. The example below shows how
           <code>DefaultConfigurationBuilder</code> can be configured to use
-          <code>VFSFileMonitorReloadingStrategy</code>. While each declaration will result in
-          a new reloading strategy object, each instance will share a common <code>FileMonitor</code>.
-          The delay setting controls how often the <code>FileMonitor</code> checks for changes
-          and since there is only a single <code>FileMonitor</code>, only the largest value
-          specified on any <code>VFSFileMonitorReloadingStrategy</code> is used.
+          <code>VFSFilChangedReloadingStrategy</code>.
           In the example below both test.properties and settings.xml would be checked for changes
           once per minute.
         </p>
@@ -117,12 +113,12 @@
   </header>
   <override>
     <properties fileName="test.properties" throwExceptionOnMissing="true">
-      <reloadingStrategy delay="60000"
-        config-class="org.apache.commons.configuration.reloading.VFSFileMonitorReloadingStrategy"/>
+      <reloadingStrategy refreshDelay="60000"
+        config-class="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy"/>
     </properties>
     <xml fileName="settings.xml" config-name="xml">
-      <reloadingStrategy
-         config-class="org.apache.commons.configuration.reloading.VFSFileMonitorReloadingStrategy"/>
+      <reloadingStrategy refreshDelay="60000"
+         config-class="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy"/>
     </xml>
   </override>
 </configuration>
diff --git a/xdocs/userguide/howto_multitenant.xml b/xdocs/userguide/howto_multitenant.xml
index c07d252f..857daba8 100644
--- a/xdocs/userguide/howto_multitenant.xml
+++ b/xdocs/userguide/howto_multitenant.xml
@@ -54,6 +54,14 @@
           ReloadingStrategy and listeners will be propogated to each of the
           created configurations.
         </p>
+        <p>
+          When used in a combined configuration it is often acceptable for a file
+          matching a particular pattern to be missing so, by default, most exceptions
+          encountered when loading files are ignored. To change this behavior
+          call setIgnoreException(false) or configure the attribute to false in
+          DefaultConfigurationBuilder's configuration file. If schema validation
+          is enabled validation exceptions will always cause a failure.
+        </p>
       </subsection>
       <subsection name="DynamicCombinedConfiguration">
         <p>
