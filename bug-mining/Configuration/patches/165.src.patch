diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index a09d0bae..14df02c0 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -73,6 +73,9 @@
         Hierarchical configurations now provide methods to obtain sub
         configurations for all child elements of a given key.
       </action>
+      <action dev="oheger" type="update" issue="CONFIGURATION-516">
+        PropertiesConfiguration no longer escapes double quotes on saving.
+      </action>
       <action dev="oheger" type="update" issue="CONFIGURATION-515">
         The visibility of some internal methods of PropertiesConfiguration.PropertiesWriter
         has been increased to protected. This simplifies the implementation of
diff --git a/src/main/java/org/apache/commons/configuration/PropertiesConfiguration.java b/src/main/java/org/apache/commons/configuration/PropertiesConfiguration.java
index ad1f6663..f0a06596 100644
--- a/src/main/java/org/apache/commons/configuration/PropertiesConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration/PropertiesConfiguration.java
@@ -35,6 +35,11 @@ import org.apache.commons.configuration.io.FileLocatorAware;
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.commons.lang.StringEscapeUtils;
 import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.text.translate.AggregateTranslator;
+import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
+import org.apache.commons.lang3.text.translate.EntityArrays;
+import org.apache.commons.lang3.text.translate.LookupTranslator;
+import org.apache.commons.lang3.text.translate.UnicodeEscaper;
 
 /**
  * This is the "classic" Properties loader which loads the values from
@@ -855,6 +860,17 @@ public class PropertiesConfiguration extends BaseConfiguration
      */
     public static class PropertiesWriter extends FilterWriter
     {
+        /**
+         * A translator for escaping property values. This translator performs a
+         * subset of transformations done by the ESCAPE_JAVA translator from
+         * Commons Lang 3.
+         */
+        private static final CharSequenceTranslator ESCAPE_PROPERTIES =
+                new AggregateTranslator(new LookupTranslator(new String[][] {
+                    { "\\", "\\\\" }}),
+                        new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE()),
+                        UnicodeEscaper.outsideOf(32, 0x7f));
+
         /** Constant for the initial size when creating a string buffer. */
         private static final int BUF_SIZE = 8;
 
@@ -1097,8 +1113,8 @@ public class PropertiesConfiguration extends BaseConfiguration
         protected String escapeValue(Object value, boolean inList)
         {
             String escapedValue =
-                    StringEscapeUtils
-                            .escapeJava(escapeBackslashs(value, inList));
+                    ESCAPE_PROPERTIES
+                            .translate(escapeBackslashs(value, inList));
             if (getDelimiter() != 0)
             {
                 escapedValue =
diff --git a/src/test/java/org/apache/commons/configuration/TestPropertiesConfiguration.java b/src/test/java/org/apache/commons/configuration/TestPropertiesConfiguration.java
index 35ad4ce7..2c446950 100644
--- a/src/test/java/org/apache/commons/configuration/TestPropertiesConfiguration.java
+++ b/src/test/java/org/apache/commons/configuration/TestPropertiesConfiguration.java
@@ -989,6 +989,26 @@ public class TestPropertiesConfiguration
                 + footer + CR, out.toString());
     }
 
+    /**
+     * Tests the escaping of quotation marks in a properties value. This test is
+     * related to CONFIGURATION-516.
+     */
+    @Test
+    public void testEscapeQuote() throws ConfigurationException
+    {
+        conf.clear();
+        String text = "\"Hello World!\"";
+        conf.setProperty(PROP_NAME, text);
+        StringWriter out = new StringWriter();
+        new FileHandler(conf).save(out);
+        assertTrue("Value was escaped: " + out,
+                out.toString().indexOf(text) >= 0);
+        saveTestConfig();
+        PropertiesConfiguration c2 = new PropertiesConfiguration();
+        load(c2, testSavePropertiesFile.getAbsolutePath());
+        assertEquals("Wrong value", text, c2.getString(PROP_NAME));
+    }
+
     /**
      * Helper method for testing the content of a list with elements that
      * contain backslashes.
