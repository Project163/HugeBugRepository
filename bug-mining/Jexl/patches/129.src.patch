diff --git a/src/main/java/org/apache/commons/jexl3/internal/Scope.java b/src/main/java/org/apache/commons/jexl3/internal/Scope.java
index 134de982..15c0385c 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/Scope.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/Scope.java
@@ -19,8 +19,6 @@ package org.apache.commons.jexl3.internal;
 import java.util.Arrays;
 import java.util.LinkedHashMap;
 import java.util.Map;
-import org.apache.commons.jexl3.JexlContext;
-import org.apache.commons.jexl3.parser.ASTIdentifier;
 
 /**
  * A script scope, stores the declaration of parameters and local variables as symbols.
@@ -397,11 +395,16 @@ public final class Scope {
          * @return this frame
          */
         public Frame assign(Object... values) {
-            if (stack != null && values != null && values.length > 0) {
+            if (stack != null) {
                 int nparm = scope.getArgCount();
                 Object[] copy = stack.clone();
-                int ncopy = Math.min(nparm - curried, Math.min(nparm, values.length));
-                System.arraycopy(values, 0, copy, curried, ncopy);
+                int ncopy = 0;
+                if (values != null && values.length > 0) {
+                    ncopy = Math.min(nparm - curried, Math.min(nparm, values.length));
+                    System.arraycopy(values, 0, copy, curried, ncopy);
+                }
+                // unbound parameters are defined as null
+                Arrays.fill(copy, curried + ncopy, nparm, null);
                 return new Frame(scope, copy, curried + ncopy);
             }
             return this;
diff --git a/src/test/java/org/apache/commons/jexl3/ExceptionTest.java b/src/test/java/org/apache/commons/jexl3/ExceptionTest.java
index b8c79a67..e767eda4 100644
--- a/src/test/java/org/apache/commons/jexl3/ExceptionTest.java
+++ b/src/test/java/org/apache/commons/jexl3/ExceptionTest.java
@@ -185,9 +185,9 @@ public class ExceptionTest extends JexlTestCase {
         try {
             /* Object o = */ e.execute(ctxt);
             Assert.fail("x is null, should throw");
-        } catch (JexlException.Variable xjexl) {
+        } catch (JexlException xjexl) {
             String msg = xjexl.getMessage();
-            Assert.assertTrue(msg.indexOf("x") > 0);
+            Assert.assertTrue(msg.indexOf("null") > 0);
         }
 
         // allow null operands
