diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/mail/MailContentHandler.java b/tika-parsers/src/main/java/org/apache/tika/parser/mail/MailContentHandler.java
index 864890d78..7476347d5 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/mail/MailContentHandler.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/mail/MailContentHandler.java
@@ -27,6 +27,8 @@ import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Locale;
+import java.util.Map;
+import java.util.Map.Entry;
 import java.util.TimeZone;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -154,9 +156,21 @@ class MailContentHandler implements ContentHandler {
 
         if (body instanceof MaximalBodyDescriptor) {
             MaximalBodyDescriptor maximalBody = (MaximalBodyDescriptor) body;
-            String contentDispositionFileName = maximalBody.getContentDispositionFilename();
-            if (contentDispositionFileName != null) {
-                submd.set(Metadata.RESOURCE_NAME_KEY, contentDispositionFileName);
+            String contentDispositionType = maximalBody.getContentDispositionType();
+            if (contentDispositionType != null && !contentDispositionType.isEmpty()) {
+                StringBuilder contentDisposition = new StringBuilder( contentDispositionType );
+                Map<String, String> contentDispositionParameters = maximalBody.getContentDispositionParameters();
+                for ( Entry<String, String> param : contentDispositionParameters.entrySet() ) {
+                    contentDisposition.append("; ")
+                                      .append(param.getKey()).append("=\"").append(param.getValue()).append('"');
+                }
+
+                String contentDispositionFileName = maximalBody.getContentDispositionFilename();
+                if ( contentDispositionFileName != null ) {
+                    submd.set( Metadata.RESOURCE_NAME_KEY, contentDispositionFileName );
+                }
+
+                submd.set( Metadata.CONTENT_DISPOSITION, contentDisposition.toString() );
             }
         }
 
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/mail/RFC822ParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/mail/RFC822ParserTest.java
index 127638e1e..09cad0cf0 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/mail/RFC822ParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/mail/RFC822ParserTest.java
@@ -562,6 +562,7 @@ public class RFC822ParserTest extends TikaTest {
         final List<MediaType> seenTypes = new ArrayList<MediaType>();
         final List<String> seenText = new ArrayList<String>();
         final List<String> seenNames = new ArrayList<String>();
+        final List<String> seenContentDisposition = new ArrayList<String>();
         EmbeddedDocumentExtractor ext = new EmbeddedDocumentExtractor() {
             @Override
             public boolean shouldParseEmbedded(Metadata metadata) {
@@ -574,6 +575,7 @@ public class RFC822ParserTest extends TikaTest {
                     IOException {
                 seenNames.add( metadata.get(Metadata.RESOURCE_NAME_KEY) );
                 seenTypes.add( detector.detect(stream, metadata) );
+                seenContentDisposition.add( metadata.get(Metadata.CONTENT_DISPOSITION) );
                 
                 ContentHandler h = new BodyContentHandler();
                 try {
@@ -601,5 +603,50 @@ public class RFC822ParserTest extends TikaTest {
         assertEquals("image/png", seenTypes.get(1).toString());
         assertEquals("testPNG.png", seenNames.get(1));
         assertEquals("This email has a PNG attachment included in it\n\n", seenText.get(0));
+        assertEquals(null, seenContentDisposition.get(0));
+        assertEquals("attachment; filename=\"testPNG.png\"", seenContentDisposition.get(1));
+    }
+
+    @Test
+    public void testEmbeddedMetadata() throws Exception {
+        Metadata metadata = new Metadata();
+        Parser p = new RFC822Parser();
+        ParseContext context = new ParseContext();
+        final Parser extParser = new AutoDetectParser();
+        final List<Metadata> seenMetadata = new ArrayList<>();
+        EmbeddedDocumentExtractor ext = new EmbeddedDocumentExtractor() {
+            @Override
+            public boolean shouldParseEmbedded(Metadata metadata) {
+                return true;
+            }
+
+            @Override
+            public void parseEmbedded(InputStream stream, ContentHandler handler,
+                                      Metadata metadata, boolean outputHtml) throws SAXException,
+                                                                                    IOException {
+                seenMetadata.add( metadata );
+                try {
+                    extParser.parse(stream, new DefaultHandler(), metadata, new ParseContext());
+                } catch (TikaException e) {
+                    throw new RuntimeException(e);
+                }
+            }
+        };
+        context.set(EmbeddedDocumentExtractor.class, ext);
+
+        try(InputStream stream = getStream( "test-documents/testRFC822-multipart" )) {
+            p.parse(stream, new DefaultHandler(), metadata, context);
+        }
+
+        assertEquals(3, seenMetadata.size());
+        assertEquals(null, seenMetadata.get(0).get(Metadata.CONTENT_DISPOSITION));
+        assertEquals("text/plain; charset=UTF-8", seenMetadata.get(0).get(Metadata.CONTENT_TYPE));
+        assertEquals("UTF-8", seenMetadata.get(0).get(Metadata.CONTENT_ENCODING));
+        assertEquals(null, seenMetadata.get(1).get(Metadata.CONTENT_DISPOSITION));
+        assertEquals("text/html; charset=UTF-8", seenMetadata.get(1).get(Metadata.CONTENT_TYPE));
+        assertEquals("UTF-8", seenMetadata.get(1).get(Metadata.CONTENT_ENCODING));
+        assertEquals("attachment; filename=\"logo.gif\"", seenMetadata.get(2).get(Metadata.CONTENT_DISPOSITION));
+        assertEquals("logo.gif", seenMetadata.get(2).get(Metadata.RESOURCE_NAME_KEY));
+        assertEquals("image/gif", seenMetadata.get(2).get(Metadata.CONTENT_TYPE));
     }
 }
