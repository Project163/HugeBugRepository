diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 67ddfea6..4ae8c286 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -60,6 +60,7 @@ New Features in 3.2:
 Bugs Fixed in 3.2:
 ==================
 
+* JEXL-282:      Pragmas with antish names are broken
 * JEXL-281:      MethodExecutor incorrectly tests for empty parameters list
 * JEXL-279:      Null variables property access do not throw exceptions
 * JEXL-278:      Ambiguous exceptions should point to actual statement ambiguity
diff --git a/src/main/java/org/apache/commons/jexl3/parser/Parser.jjt b/src/main/java/org/apache/commons/jexl3/parser/Parser.jjt
index 590b5754..d2589e25 100644
--- a/src/main/java/org/apache/commons/jexl3/parser/Parser.jjt
+++ b/src/main/java/org/apache/commons/jexl3/parser/Parser.jjt
@@ -413,7 +413,9 @@ void pragmaKey(LinkedList<String> lstr) #void :
     Token t;
 }
 {
-    t=<IDENTIFIER> (LOOKAHEAD(2) <DOT> pragmaKey(lstr) )* { lstr.addFirst(t.image); }
+    t=<IDENTIFIER>  { lstr.add(t.image); } ( LOOKAHEAD(<DOT>) pragmaKey(lstr) )*
+   |
+    <DOT> t=<DOT_IDENTIFIER> { lstr.add(t.image); }
 }
 
 Object pragmaValue() #void :
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index 3dfadb1b..0de4bc0e 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -26,6 +26,9 @@
     </properties>
     <body>
         <release version="3.2" date="unreleased">
+            <action dev="henrib" type="fix" issue="JEXL-282" due-to="Dmitri Blinov">
+                Pragmas with antish names are broken
+            </action>
             <action dev="henrib" type="fix" issue="JEXL-281" due-to="Mirek Hankus">
                 MethodExecutor incorrectly tests for empty parameters list
             </action>
diff --git a/src/test/java/org/apache/commons/jexl3/PragmaTest.java b/src/test/java/org/apache/commons/jexl3/PragmaTest.java
index 3eff5790..7dbecbb7 100644
--- a/src/test/java/org/apache/commons/jexl3/PragmaTest.java
+++ b/src/test/java/org/apache/commons/jexl3/PragmaTest.java
@@ -26,7 +26,6 @@ import org.junit.Test;
 public class PragmaTest extends JexlTestCase {
     /**
      * Create a new test case.
-     * @param name case name
      */
     public PragmaTest() {
         super("PragmaTest");
@@ -36,34 +35,28 @@ public class PragmaTest extends JexlTestCase {
      * Test creating a script from a string.
      */
     @Test
+    @SuppressWarnings("AssertEqualsBetweenInconvertibleTypes")
     public void testPragmas() throws Exception {
         JexlContext jc = new MapContext();
-        try {
-            JexlScript script = JEXL.createScript("#pragma one 1\n#pragma the.very.hard 'truth'\n2;");
-            Assert.assertTrue(script != null);
-            Map<String, Object> pragmas = script.getPragmas();
-            Assert.assertEquals(2, pragmas.size());
-            Assert.assertEquals(1, pragmas.get("one"));
-            Assert.assertEquals("truth", pragmas.get("the.very.hard"));
-        } catch (JexlException xjexl) {
-            String s = xjexl.toString();
-        }
+        JexlScript script = JEXL.createScript("#pragma one 1\n#pragma the.very.hard 'truth'\n2;");
+        Assert.assertTrue(script != null);
+        Map<String, Object> pragmas = script.getPragmas();
+        Assert.assertEquals(2, pragmas.size());
+        Assert.assertEquals(1, pragmas.get("one"));
+        Assert.assertEquals("truth", pragmas.get("the.very.hard"));
     }
 
     @Test
+    @SuppressWarnings("AssertEqualsBetweenInconvertibleTypes")
     public void testJxltPragmas() throws Exception {
         JexlContext jc = new MapContext();
-        try {
-            JxltEngine engine = new JexlBuilder().create().createJxltEngine();
-            JxltEngine.Template tscript = engine.createTemplate("$$ #pragma one 1\n$$ #pragma the.very.hard 'truth'\n2;");
-            Assert.assertTrue(tscript != null);
-            Map<String, Object> pragmas = tscript.getPragmas();
-            Assert.assertEquals(2, pragmas.size());
-            Assert.assertEquals(1, pragmas.get("one"));
-            Assert.assertEquals("truth", pragmas.get("the.very.hard"));
-        } catch (JexlException xjexl) {
-            String s = xjexl.toString();
-        }
+        JxltEngine engine = new JexlBuilder().create().createJxltEngine();
+        JxltEngine.Template tscript = engine.createTemplate("$$ #pragma one 1\n$$ #pragma the.very.hard 'truth'\n2;");
+        Assert.assertTrue(tscript != null);
+        Map<String, Object> pragmas = tscript.getPragmas();
+        Assert.assertEquals(2, pragmas.size());
+        Assert.assertEquals(1, pragmas.get("one"));
+        Assert.assertEquals("truth", pragmas.get("the.very.hard"));
     }
 
 }
