diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPointerImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPointerImpl.java
index b674ad94..50c19f70 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPointerImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPointerImpl.java
@@ -358,7 +358,7 @@ public class JsonPointerImpl implements JsonPointer {
             JsonObject jsonObject = (JsonObject) jsonValue;
             JsonObjectBuilder objectBuilder = Json.createObjectBuilder();
 
-            if (jsonObject.isEmpty()) {
+            if (jsonObject.isEmpty() && isPositionToAdd(currentPath)) {
                 objectBuilder.add(lastReferenceToken, newValue);
             } else {
                 for (Map.Entry<String, JsonValue> entry : jsonObject.entrySet()) {
@@ -367,8 +367,7 @@ public class JsonPointerImpl implements JsonPointer {
                     objectBuilder.add(entry.getKey(), addInternal(entry.getValue(), newValue, currentPath));
                     currentPath.remove(entry.getKey());
 
-                    if (currentPath.size() == referenceTokens.size() - 1 &&
-                        currentPath.get(currentPath.size() - 1).equals(referenceTokens.get(referenceTokens.size() - 2))) {
+                    if (isPositionToAdd(currentPath)) {
                         objectBuilder.add(lastReferenceToken, newValue);
                     }
                 }
@@ -379,9 +378,7 @@ public class JsonPointerImpl implements JsonPointer {
             JsonArrayBuilder arrayBuilder = Json.createArrayBuilder();
 
             int arrayIndex = -1;
-            if (currentPath.size() == referenceTokens.size() - 1 &&
-                currentPath.get(currentPath.size() - 1).equals(referenceTokens.get(referenceTokens.size() - 2))) {
-
+            if (isPositionToAdd(currentPath)) {
                 arrayIndex = getArrayIndex(lastReferenceToken, jsonArray, true);
             }
 
@@ -404,6 +401,11 @@ public class JsonPointerImpl implements JsonPointer {
         return jsonValue;
     }
 
+    private boolean isPositionToAdd(List<String> currentPath) {
+        return currentPath.size() == referenceTokens.size() - 1 &&
+                currentPath.get(currentPath.size() - 1).equals(referenceTokens.get(referenceTokens.size() - 2));
+    }
+
     private JsonValue remove(JsonValue jsonValue, int currentPosition, int referencePosition) {
         if (jsonValue instanceof JsonObject) {
             JsonObject jsonObject = (JsonObject) jsonValue;
diff --git a/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPatchTest.java b/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPatchTest.java
index 6c96329d..59696e87 100644
--- a/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPatchTest.java
+++ b/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPatchTest.java
@@ -27,6 +27,7 @@ import javax.json.JsonArrayBuilder;
 import javax.json.JsonException;
 import javax.json.JsonObject;
 import javax.json.JsonPatch;
+import javax.json.JsonPatchBuilder;
 import javax.json.JsonStructure;
 import javax.json.JsonValue;
 import java.io.StringReader;
@@ -59,6 +60,31 @@ public class JsonPatchTest {
         assertEquals("{\"foo\":\"bar\",\"baz\":\"qux\"}", toJsonString(patched));
     }
 
+    /**
+     * {@linkplain} https://issues.apache.org/jira/browse/JOHNZON-172
+     */
+    @Test
+    public void testAddToRootContainingEmptyJsonObject() {
+        JsonObject object = Json.createObjectBuilder()
+                               .add("request", Json.createObjectBuilder()
+                                                   .add("test", JsonValue.EMPTY_JSON_OBJECT))
+                               .build();
+
+        JsonPatchImpl patch = new JsonPatchImpl(new JsonPatchImpl.PatchValue(JsonPatch.Operation.ADD,
+                                                                             "/name",
+                                                                             null,
+                                                                             new JsonStringImpl("aName")));
+
+        JsonObject patched = patch.apply(object);
+        assertNotNull(patched);
+
+        JsonObject requestJson = patched.getJsonObject("request");
+        assertNotNull(requestJson);
+        assertEquals(JsonValue.EMPTY_JSON_OBJECT, requestJson.getJsonObject("test"));
+
+        assertEquals("aName", patched.getString("name"));
+    }
+
     @Test
     public void testAddArrayElementWithIndex() {
 
