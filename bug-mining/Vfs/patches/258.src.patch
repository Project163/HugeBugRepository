diff --git a/commons-vfs2-jackrabbit2/src/main/java/org/apache/commons/vfs2/provider/webdav4/Webdav4FileObject.java b/commons-vfs2-jackrabbit2/src/main/java/org/apache/commons/vfs2/provider/webdav4/Webdav4FileObject.java
index 824c8a4c..88c5a684 100644
--- a/commons-vfs2-jackrabbit2/src/main/java/org/apache/commons/vfs2/provider/webdav4/Webdav4FileObject.java
+++ b/commons-vfs2-jackrabbit2/src/main/java/org/apache/commons/vfs2/provider/webdav4/Webdav4FileObject.java
@@ -20,6 +20,7 @@ import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.HttpURLConnection;
+import java.net.URI;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -78,6 +79,7 @@ import org.w3c.dom.Node;
  * @since 2.5.0
  */
 public class Webdav4FileObject extends Http4FileObject<Webdav4FileSystem> {
+
     /**
      * An OutputStream that writes to a Webdav resource.
      * <p>
@@ -484,6 +486,12 @@ public class Webdav4FileObject extends Http4FileObject<Webdav4FileSystem> {
         return new Webdav4FileContentInfoFactory();
     }
 
+    // Just for the unit test in the same package (package-private) to access this during validation.
+    @Override
+    protected URI getInternalURI() throws FileSystemException {
+        return super.getInternalURI();
+    }
+
     DavPropertySet getProperties(final GenericURLFileName name) throws FileSystemException {
         return getProperties(name, DavConstants.PROPFIND_ALL_PROP, new DavPropertyNameSet(), false);
     }
diff --git a/commons-vfs2-jackrabbit2/src/test/java/org/apache/commons/vfs2/provider/webdav4/Webdav4FileObjectTest.java b/commons-vfs2-jackrabbit2/src/test/java/org/apache/commons/vfs2/provider/webdav4/Webdav4FileObjectTest.java
new file mode 100644
index 00000000..c46b0afe
--- /dev/null
+++ b/commons-vfs2-jackrabbit2/src/test/java/org/apache/commons/vfs2/provider/webdav4/Webdav4FileObjectTest.java
@@ -0,0 +1,63 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.vfs2.provider.webdav4;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.net.URI;
+
+import org.apache.commons.vfs2.FileObject;
+import org.apache.commons.vfs2.FileSystemException;
+import org.apache.commons.vfs2.FileSystemManager;
+import org.apache.commons.vfs2.VFS;
+import org.junit.Test;
+
+public class Webdav4FileObjectTest {
+
+    private static final String WEBDAV4_URL = "webdav4://www.apache.org/licenses/LICENSE-2.0.txt";
+    private static final String INTERNAL_WEBDAV4_URL = "http://www.apache.org/licenses/LICENSE-2.0.txt";
+
+    private static final String WEBDAV4S_URL = "webdav4s://www.apache.org/licenses/LICENSE-2.0.txt";
+    private static final String INTERNAL_WEBDAV4S_URL = "https://www.apache.org/licenses/LICENSE-2.0.txt";
+
+    @Test
+    public void testWebdav4FileObjectURLs() throws FileSystemException {
+        final FileSystemManager fsm = VFS.getManager();
+        try (final FileObject file = fsm.resolveFile(WEBDAV4_URL)) {
+
+            assertEquals(WEBDAV4_URL, file.getURL().toString());
+            assertTrue(file instanceof Webdav4FileObject);
+
+            final Webdav4FileObject webdav4File = (Webdav4FileObject) file;
+            assertEquals(URI.create(INTERNAL_WEBDAV4_URL), webdav4File.getInternalURI());
+        }
+    }
+
+    @Test
+    public void testWebdav4sFileObjectURLs() throws FileSystemException {
+        final FileSystemManager fsm = VFS.getManager();
+        try (final FileObject file = fsm.resolveFile(WEBDAV4S_URL)) {
+
+            assertEquals(WEBDAV4S_URL, file.getURL().toString());
+            assertTrue(file instanceof Webdav4FileObject);
+
+            final Webdav4FileObject webdav4File = (Webdav4FileObject) file;
+            assertEquals(URI.create(INTERNAL_WEBDAV4S_URL), webdav4File.getInternalURI());
+        }
+    }
+}
