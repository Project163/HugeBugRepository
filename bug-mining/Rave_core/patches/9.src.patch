diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/Page.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/Page.java
index e40cf96d..26b560a9 100644
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/Page.java
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/Page.java
@@ -78,6 +78,7 @@ public class Page implements BasicEntity, Serializable {
     private Page parentPage;
 
     @OneToMany(fetch = FetchType.EAGER, cascade=CascadeType.ALL, mappedBy="parentPage")
+    @OrderBy("renderSequence")
     private List<Page> subPages;
 
     @Basic(optional=false) @Column(name="render_sequence")
diff --git a/rave-components/rave-core/src/test/java/org/apache/rave/portal/repository/impl/JpaPageRepositoryTest.java b/rave-components/rave-core/src/test/java/org/apache/rave/portal/repository/impl/JpaPageRepositoryTest.java
index 27fea677..e6c8086e 100644
--- a/rave-components/rave-core/src/test/java/org/apache/rave/portal/repository/impl/JpaPageRepositoryTest.java
+++ b/rave-components/rave-core/src/test/java/org/apache/rave/portal/repository/impl/JpaPageRepositoryTest.java
@@ -164,6 +164,15 @@ public class JpaPageRepositoryTest {
         assertThat(p.getPageType(), is(PageType.PERSON_PROFILE));
         assertThat(p.getParentPage(), is(nullValue(Page.class)));
         assertThat(p.getSubPages().isEmpty(), is(false));
+
+        // verify that the sub pages are in proper order
+        Long lastRenderSequence = -1L;
+        for (Page subPage : p.getSubPages()) {
+            Long currentRenderSequence = subPage.getRenderSequence();
+            assertThat(currentRenderSequence > lastRenderSequence, is(true));
+            lastRenderSequence = currentRenderSequence;
+        }
+        
     }
 
     @Test
