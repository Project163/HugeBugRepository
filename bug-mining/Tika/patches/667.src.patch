diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java
index 69724d27c..2f982c559 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java
@@ -405,10 +405,13 @@ public class WordExtractor extends AbstractPOIFSExtractor {
 
           if((text.startsWith("HYPERLINK") || text.startsWith(" HYPERLINK"))
                  && text.indexOf('"') > -1) {
-             String url = text.substring(
-                   text.indexOf('"') + 1,
-                   text.lastIndexOf('"')
-             );
+              int start = text.indexOf('"') + 1;
+              int end = findHyperlinkEnd(text, start);
+              String url = "";
+              if (start >= 0 && start < end && end <= text.length()) {
+                  url = text.substring(start, end);
+              }
+
              xhtml.startElement("a", "href", url);
              for(CharacterRun cr : texts) {
                 handleCharacterRun(cr, skipStyling, xhtml);
@@ -437,6 +440,31 @@ public class WordExtractor extends AbstractPOIFSExtractor {
        return i-index;
     }
 
+    //temporary work around for TIKA-1512
+    private int findHyperlinkEnd(String text, int start) {
+        int end = text.lastIndexOf('"');
+        if (end > start) {
+            return end;
+        }
+        end = text.lastIndexOf('\u201D');//smart right double quote
+        if (end > start) {
+            return end;
+        }
+        end = text.lastIndexOf('\r');
+        if (end > start) {
+            return end;
+        }
+        //if nothing so far, take the full length of the string
+        //If the full string is > 256 characters, it appears
+        //that the url is truncated in the .doc file.  This
+        //will return the value as it is in the file, which
+        //may be incorrect; but it is the same behavior as opening
+        //the link in MSWord.
+        //This code does not currently check that length is actually >= 256.
+        //we might want to add that?
+        return text.length();
+    }
+
     private void handlePictureCharacterRun(CharacterRun cr, Picture picture, PicturesSource pictures, XHTMLContentHandler xhtml)
           throws SAXException, IOException, TikaException {
        if(!isRendered(cr) || picture == null) {
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java
index a8f5753f2..6de5b6d50 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java
@@ -33,6 +33,7 @@ import org.apache.tika.metadata.OfficeOpenXMLExtended;
 import org.apache.tika.metadata.TikaCoreProperties;
 import org.apache.tika.parser.ParseContext;
 import org.apache.tika.sax.BodyContentHandler;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.xml.sax.ContentHandler;
 
@@ -397,4 +398,30 @@ public class WordParserTest extends TikaTest {
         assertContains("<p>1. Organisering av vakten:</p>", xml);
 
     }
+
+    @Test
+    public void testHyperlinkStringIOOBESmartQuote() throws Exception {
+        //TIKA-1512, one cause: closing double quote is a smart quote
+        //test file contributed by user
+        XMLResult result = getXML("testWORD_closingSmartQInHyperLink.doc");
+        assertContains("href=\"https://issues.apache.org/jira/browse/TIKA-1512", result.xml);
+    }
+
+    @Test
+    @Ignore //until we determine whether we can include test docs or not
+    public void testHyperlinkStringLongNoCloseQuote() throws Exception {
+        //TIKA-1512, one cause: no closing quote on really long string
+        //test file derived from govdocs1 012152.doc
+        XMLResult result = getXML("testWORD_longHyperLinkNoCloseQuote.doc");
+        assertContains("href=\"http://www.lexis.com", result.xml);
+    }
+
+    @Test
+    @Ignore //until we determine whether we can include test docs or not
+    public void testHyperlinkStringLongCarriageReturn() throws Exception {
+        //TIKA-1512, one cause: no closing quote, but carriage return
+        //test file derived from govdocs1 040044.doc
+        XMLResult result = getXML("testWORD_hyperLinkCarriageReturn.doc");
+        assertContains("href=\"http://www.nib.org", result.xml);
+    }
 }
diff --git a/tika-parsers/src/test/resources/test-documents/testWORD_closingSmartQInHyperLink.doc b/tika-parsers/src/test/resources/test-documents/testWORD_closingSmartQInHyperLink.doc
new file mode 100644
index 000000000..7445be4b4
Binary files /dev/null and b/tika-parsers/src/test/resources/test-documents/testWORD_closingSmartQInHyperLink.doc differ
