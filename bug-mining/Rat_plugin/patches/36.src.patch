diff --git a/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatCheckMojo.java b/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatCheckMojo.java
index 6f3927a7..3537cbd2 100644
--- a/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatCheckMojo.java
+++ b/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatCheckMojo.java
@@ -105,7 +105,7 @@ public class RatCheckMojo extends AbstractRatMojo {
         Writer fw = null;
         try {
             fw = new OutputStreamWriter(
-                   new FileOutputStream(reportFile), 
+                   new FileOutputStream(reportFile),
                    Charset.forName("UTF-8"));
             final ClaimStatistic statistic = createReport(fw, getStyleSheet());
             fw.close();
diff --git a/apache-rat-plugin/src/test/java/org/apache/rat/mp/RatCheckMojoTest.java b/apache-rat-plugin/src/test/java/org/apache/rat/mp/RatCheckMojoTest.java
index 1ed062ef..4e6e9155 100644
--- a/apache-rat-plugin/src/test/java/org/apache/rat/mp/RatCheckMojoTest.java
+++ b/apache-rat-plugin/src/test/java/org/apache/rat/mp/RatCheckMojoTest.java
@@ -28,6 +28,12 @@ import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.lang.reflect.Field;
+import java.nio.charset.Charset;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import static junit.framework.TestCase.assertTrue;
+import org.apache.rat.document.impl.guesser.BinaryGuesser;
 
 import static org.apache.rat.mp.RatTestHelpers.ensureRatReportIsCorrect;
 import static org.apache.rat.mp.RatTestHelpers.getSourceDirectory;
@@ -35,6 +41,7 @@ import static org.apache.rat.mp.RatTestHelpers.newArtifactFactory;
 import static org.apache.rat.mp.RatTestHelpers.newArtifactRepository;
 import static org.apache.rat.mp.RatTestHelpers.newArtifactResolver;
 import static org.apache.rat.mp.RatTestHelpers.newSiteRenderer;
+import org.w3c.dom.Document;
 
 /**
  * Test case for the {@link RatCheckMojo} and {@link RatReportMojo}.
@@ -202,4 +209,81 @@ public class RatCheckMojoTest extends AbstractMojoTestCase {
         assertFalse(firstLineModified.contains("--"));
     }
 
+    /**
+     * Test correct generation of XML file if non-UTF8 file.encoding is set.
+     *
+     * @throws Exception The test failed.
+     */
+    public void testIt4() throws Exception {
+        final RatCheckMojo mojo = newRatCheckMojo("it4");
+        final File ratTxtFile = getRatTxtFile(mojo);
+        try {
+            setVariableValueToObject(mojo, "reportStyle", "xml");
+            String origEncoding = overrideFileEncoding("ISO-8859-1");
+            mojo.execute();
+            overrideFileEncoding(origEncoding);
+            fail("Expected RatCheckException");
+        } catch (RatCheckException e) {
+            final String msg = e.getMessage();
+            // default value is "${project.build.directory}/rat.txt"
+            final String REPORTFILE = "rat.txt";
+
+            assertTrue("report filename was not contained in '" + msg + "'",
+                    msg.contains(REPORTFILE));
+            assertFalse("no null allowed in '" + msg + "'", (msg.toUpperCase()
+                    .contains("NULL")));
+        }
+        DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
+        FileInputStream fis = new FileInputStream(ratTxtFile);
+        boolean documentParsed = false;
+        try {
+            Document doc = db.parse(fis);
+            boolean byteSequencePresent = doc.getElementsByTagName("header-sample")
+                    .item(0)
+                    .getTextContent()
+                    .contains("\u00E4\u00F6\u00FC\u00C4\u00D6\u00DC\u00DF");
+            assertTrue("Report should contain test umlauts", byteSequencePresent);
+            documentParsed = true;
+        } catch (Exception ex) {
+            documentParsed = false;
+        } finally {
+            fis.close();
+        }
+        assertTrue("Report file could not be parsed as XML", documentParsed);
+    }
+
+
+    private String overrideFileEncoding(String newEncoding) {
+        String current = System.getProperty("file.encoding");
+        System.setProperty("file.encoding", newEncoding);
+        setBinaryGuesserCharset(newEncoding);
+        clearDefaultCharset();
+        return current;
+    }
+
+    private void clearDefaultCharset() {
+        try {
+            Field f = Charset.class.getDeclaredField("defaultCharset");
+            f.setAccessible(true);
+            f.set(null, null);
+        } catch (Exception ex) {
+            // This is for unittesting - there is no good reason not to rethrow
+            // it. This could be happening in JDK 9, where the unittests need
+            // run with the java.base module opened
+            throw new RuntimeException(ex);
+        }
+    }
+
+    private void setBinaryGuesserCharset(String charset) {
+        try {
+            Field f = BinaryGuesser.class.getDeclaredField("CHARSET_FROM_FILE_ENCODING_OR_UTF8");
+            f.setAccessible(true);
+            f.set(null, Charset.forName(charset));
+        } catch (Exception ex) {
+            // This is for unittesting - there is no good reason not to rethrow
+            // it. This could be happening in JDK 9, where the unittests need
+            // run with the java.base module opened
+            throw new RuntimeException(ex);
+        }
+    }
 }
diff --git a/apache-rat-plugin/src/test/resources/unit/it4/iso-8859-1.html b/apache-rat-plugin/src/test/resources/unit/it4/iso-8859-1.html
new file mode 100644
index 00000000..d16312b8
--- /dev/null
+++ b/apache-rat-plugin/src/test/resources/unit/it4/iso-8859-1.html
@@ -0,0 +1,14 @@
+<!DOCTYPE html>
+<!--
+Demodata with ISO-8859-1 encoded characters:
+The german umlauts: äöüÄÖÜß
+-->
+<html>
+    <head>
+        <meta charset="windows-1252" />
+        <title>Demo Data</title>
+    </head>
+    <body>
+        
+    </body>
+</html>
diff --git a/apache-rat-plugin/src/test/resources/unit/it4/pom.xml b/apache-rat-plugin/src/test/resources/unit/it4/pom.xml
new file mode 100644
index 00000000..d24f1452
--- /dev/null
+++ b/apache-rat-plugin/src/test/resources/unit/it4/pom.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project
+    xmlns="http://maven.apache.org/POM/4.0.0"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>org.apache.rat.test</groupId>
+  <artifactId>it4</artifactId>
+  <version>1.0</version>
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.rat</groupId>
+        <artifactId>apache-rat-plugin</artifactId>
+        <version>@pom.version@</version>
+        <configuration>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+</project>
