diff --git a/apache-rat-core/src/main/java/org/apache/rat/annotation/AbstractLicenseAppender.java b/apache-rat-core/src/main/java/org/apache/rat/annotation/AbstractLicenseAppender.java
index 6870bcac..27dd84f7 100644
--- a/apache-rat-core/src/main/java/org/apache/rat/annotation/AbstractLicenseAppender.java
+++ b/apache-rat-core/src/main/java/org/apache/rat/annotation/AbstractLicenseAppender.java
@@ -30,6 +30,9 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.Writer;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.StandardCopyOption;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
@@ -229,8 +232,7 @@ public abstract class AbstractLicenseAppender {
         boolean expectsMSVSSF = expectsMSVisualStudioSolutionFileHeader(type);
 
         File newDocument = new File(document.getAbsolutePath() + ".new");
-        FileWriter writer = new FileWriter(newDocument);
-        try {
+        try (FileWriter writer = new FileWriter(newDocument)){
             if (!attachLicense(writer, document,
                     expectsHashPling, expectsAtEcho, expectsPackage,
                     expectsXMLDecl, expectsPhpPI, expectsMSVSSF)) {
@@ -239,27 +241,28 @@ public abstract class AbstractLicenseAppender {
                 // for Java just place the license at the front, for XML add
                 // an XML decl first - don't know how to handle PHP
                 if (expectsPackage || expectsXMLDecl) {
-                    writer = new FileWriter(newDocument);
-                    if (expectsXMLDecl) {
-                        writer.write("<?xml version='1.0'?>");
-                        writer.write(LINE_SEP);
+                    try (FileWriter writer2  = new FileWriter(newDocument)) {
+                        if (expectsXMLDecl) {
+                            writer2.write("<?xml version='1.0'?>");
+                            writer2.write(LINE_SEP);
+                        }
+                        attachLicense(writer2, document,
+                                false, false, false, false, false, false);
                     }
-                    attachLicense(writer, document,
-                            false, false, false, false, false, false);
                 }
             }
-        } finally {
-            IOUtils.closeQuietly(writer);
-        }
+        } 
 
         if (isForced) {
-            boolean deleted = document.delete();
-            if (!deleted) {
-                log.error("Could not delete original file to prepare renaming.");
-            }
-            boolean renamed = newDocument.renameTo(document.getAbsoluteFile());
-            if (!renamed) {
-                log.error("Failed to rename new file, original file remains unchanged.");
+            Path docPath = document.toPath();
+           boolean isExecutable = Files.isExecutable(docPath);
+            try {
+                Files.move(newDocument.toPath(), docPath, StandardCopyOption.REPLACE_EXISTING);
+                if (isExecutable && !document.setExecutable(true)) {
+                    log.warn(String.format("Could not set %s as executable.", document));
+                }
+            } catch (IOException e) {
+                log.error(String.format("Failed to rename new file to %s, Original file is unchanged.", document ));
             }
         }
     }
diff --git a/apache-rat-core/src/test/java/org/apache/rat/annotation/TestLicenseAppender.java b/apache-rat-core/src/test/java/org/apache/rat/annotation/TestLicenseAppender.java
index 188ca794..44b05116 100644
--- a/apache-rat-core/src/test/java/org/apache/rat/annotation/TestLicenseAppender.java
+++ b/apache-rat-core/src/test/java/org/apache/rat/annotation/TestLicenseAppender.java
@@ -20,15 +20,18 @@ package org.apache.rat.annotation;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 import java.io.BufferedReader;
 import java.io.File;
+import java.io.FileInputStream;
 import java.io.FileReader;
 import java.io.FileWriter;
 import java.io.IOException;
 import java.io.Writer;
 
 import org.apache.commons.io.FileUtils;
+import org.apache.commons.io.IOUtils;
 import org.apache.rat.test.utils.Resources;
 import org.apache.rat.utils.DefaultLog;
 import org.junit.jupiter.api.Test;
@@ -42,6 +45,7 @@ public class TestLicenseAppender {
 
     private static final String FIRST_LICENSE_LINE = " Licensed to the Apache Software Foundation (ASF) under one";
 
+    @FunctionalInterface
     private interface FileCreator {
         void createFile(Writer w) throws IOException;
     }
@@ -674,4 +678,70 @@ public class TestLicenseAppender {
                     }
                 });
     }
+    
+    @Test
+    public void testForced() throws IOException {
+        String filename = "tmp.php";
+        final String firstLine = "<?php";
+        
+        FileCreator phpCreator = (writer) -> {
+            writer.write(firstLine + "\n");
+            writer.write("echo 'Hello World'\n");
+            writer.write("?>\n");
+        };
+
+        String name = getTemporaryFileWithName(filename);
+        try {
+        createTestFile(name, phpCreator);
+
+        ApacheV2LicenseAppender appender = new ApacheV2LicenseAppender(DefaultLog.INSTANCE);
+        appender.setForce(true);
+        appender.append(new File(name));
+        
+        assertFalse(new File(name+".new").exists());
+        assertTrue(new File(name).exists());
+        
+        try(FileInputStream inputStream = new FileInputStream(name)) {
+            String everything = IOUtils.toString(inputStream);
+            assertTrue(everything.contains("Licensed to the Apache Software Foundation "));
+        }
+        } finally {
+            new File(name+".new").delete();
+            FileUtils.delete( new File(name));
+        }
+    }
+    
+    @Test
+    public void testExecutePermsPreserved() throws IOException {
+        String filename = "tmp.php";
+        final String firstLine = "<?php";
+
+        FileCreator phpCreator = (writer) -> {
+            writer.write(firstLine + "\n");
+            writer.write("echo 'Hello World'\n");
+            writer.write("?>\n");
+        };
+
+        String name = getTemporaryFileWithName(filename);
+        try {
+            createTestFile(name, phpCreator);
+            assertTrue(new File(name).setExecutable(true), "Unable to set executable flag");
+
+            ApacheV2LicenseAppender appender = new ApacheV2LicenseAppender(DefaultLog.INSTANCE);
+            appender.setForce(true);
+            appender.append(new File(name));
+
+            assertFalse(new File(name + ".new").exists());
+            assertTrue(new File(name).exists());
+
+            try (FileInputStream inputStream = new FileInputStream(name)) {
+                String everything = IOUtils.toString(inputStream);
+                assertTrue(everything.contains("Licensed to the Apache Software Foundation "));
+            }
+            assertTrue(new File(name).canExecute());
+        } finally {
+            new File(name + ".new").delete();
+            FileUtils.delete(new File(name));
+        }
+}
 }
