diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java
index f423e84e0..39e9fc875 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java
@@ -18,6 +18,7 @@ package org.apache.tika.parser.image;
 
 import java.io.File;
 import java.io.IOException;
+import java.text.DecimalFormat;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Iterator;
@@ -57,6 +58,7 @@ public class ImageMetadataExtractor {
 
     private final Metadata metadata;
     private DirectoryHandler[] handlers;
+    private static final DecimalFormat GEO_DECIMAL_FORMAT = new DecimalFormat("#.######"); // 6 dp seems to be reasonable
 
     /**
      * @param metadata to extract to, using default directory handlers
@@ -438,8 +440,8 @@ public class ImageMetadataExtractor {
         public void handle(Directory directory, Metadata metadata) throws MetadataException {
             GeoLocation geoLocation = ((GpsDirectory) directory).getGeoLocation();
             if (geoLocation != null) {
-                metadata.set(TikaCoreProperties.LATITUDE, geoLocation.getLatitude());
-                metadata.set(TikaCoreProperties.LONGITUDE, geoLocation.getLongitude());
+                metadata.set(TikaCoreProperties.LATITUDE, GEO_DECIMAL_FORMAT.format(new Double(geoLocation.getLatitude())));
+                metadata.set(TikaCoreProperties.LONGITUDE, GEO_DECIMAL_FORMAT.format(new Double(geoLocation.getLongitude())));
             }
         }
     }
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/jpeg/JpegParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/jpeg/JpegParserTest.java
index dc57b1f4b..4d91b717d 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/jpeg/JpegParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/jpeg/JpegParserTest.java
@@ -17,7 +17,6 @@
 package org.apache.tika.parser.jpeg;
 
 import java.io.InputStream;
-import java.text.DecimalFormat;
 import java.util.Arrays;
 import java.util.List;
 
@@ -33,8 +32,6 @@ import org.xml.sax.helpers.DefaultHandler;
 public class JpegParserTest extends TestCase {
     private final Parser parser = new JpegParser();
     
-    private DecimalFormat geoDecimalFormatter = new DecimalFormat("#.#####");
-
     public void testJPEG() throws Exception {
         Metadata metadata = new Metadata();
         metadata.set(Metadata.CONTENT_TYPE, "image/jpeg");
@@ -93,8 +90,8 @@ public class JpegParserTest extends TestCase {
         parser.parse(stream, new DefaultHandler(), metadata, new ParseContext());
         
         // Geo tags
-        assertEquals("12.54321", geoDecimalFormatter.format(new Double(metadata.get(Metadata.LATITUDE))));
-        assertEquals("-54.1234", geoDecimalFormatter.format(new Double(metadata.get(Metadata.LONGITUDE))));
+        assertEquals("12.54321", metadata.get(Metadata.LATITUDE));
+        assertEquals("-54.1234", metadata.get(Metadata.LONGITUDE));
         
         // Core EXIF/TIFF tags
         assertEquals("100", metadata.get(Metadata.IMAGE_WIDTH));
@@ -139,8 +136,8 @@ public class JpegParserTest extends TestCase {
        parser.parse(stream, new DefaultHandler(), metadata, new ParseContext());
 
        // Geo tags should be there with 5dp, and not rounded
-       assertEquals("51.57576", geoDecimalFormatter.format(new Double(metadata.get(Metadata.LATITUDE))));
-       assertEquals("-1.56789", geoDecimalFormatter.format(new Double(metadata.get(Metadata.LONGITUDE))));
+       assertEquals("51.575762", metadata.get(Metadata.LATITUDE));
+       assertEquals("-1.567886", metadata.get(Metadata.LONGITUDE));
     }
     
     public void testJPEGTitleAndDescription() throws Exception {
