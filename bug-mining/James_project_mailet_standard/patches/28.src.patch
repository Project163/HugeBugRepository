diff --git a/mailet/standard/src/main/java/org/apache/james/transport/mailets/ClamAVScan.java b/mailet/standard/src/main/java/org/apache/james/transport/mailets/ClamAVScan.java
index 9233b21f19..79c6e5307d 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/mailets/ClamAVScan.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/mailets/ClamAVScan.java
@@ -821,7 +821,7 @@ public class ClamAVScan extends GenericMailet {
             PrintWriter out = new PrintWriter(sout, true);
 
             out.print("Mail details:");
-            out.print(" MAIL FROM: " + mail.getSender());
+            out.print(" MAIL FROM: " + mail.getMaybeSender().asString());
             Iterator<MailAddress> rcptTo = mail.getRecipients().iterator();
             out.print(", RCPT TO: " + rcptTo.next());
             while (rcptTo.hasNext()) {
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/mailets/ContactExtractor.java b/mailet/standard/src/main/java/org/apache/james/transport/mailets/ContactExtractor.java
index f52bbab97f..64e05245b2 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/mailets/ContactExtractor.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/mailets/ContactExtractor.java
@@ -18,7 +18,6 @@
  ****************************************************************/
 package org.apache.james.transport.mailets;
 
-import java.io.IOException;
 import java.util.Optional;
 import java.util.function.Function;
 import java.util.stream.Stream;
@@ -101,11 +100,11 @@ public class ContactExtractor extends GenericMailet implements Mailet {
     }
 
     @VisibleForTesting
-    Optional<String> extractContacts(Mail mail) throws MessagingException, IOException {
+    Optional<String> extractContacts(Mail mail) throws MessagingException {
         ImmutableList<String> allRecipients = getAllRecipients(mail.getMessage());
 
         if (hasRecipient(allRecipients)) {
-            return Optional.of(mail.getSender())
+            return mail.getMaybeSender().asOptional()
                 .map(MailAddress::asString)
                 .map(sender -> new ExtractedContacts(sender, allRecipients))
                 .map(Throwing.function(extractedContacts -> objectMapper.writeValueAsString(extractedContacts)));
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/mailets/ServerTime.java b/mailet/standard/src/main/java/org/apache/james/transport/mailets/ServerTime.java
index bf7ed37a3f..7dc52d388d 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/mailets/ServerTime.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/mailets/ServerTime.java
@@ -46,6 +46,10 @@ public class ServerTime extends GenericMailet {
      */
     @Override
     public void service(Mail mail) throws javax.mail.MessagingException {
+        if (!mail.hasSender()) {
+            return;
+        }
+
         MimeMessage response = (MimeMessage)mail.getMessage().reply(false);
         response.setSubject("The time is now...");
         String textBuffer = "This mail server thinks it's " + (new java.util.Date()).toString() + ".";
@@ -61,7 +65,7 @@ public class ServerTime extends GenericMailet {
         }
 
         if (response.getAllRecipients() == null) {
-            response.setRecipients(MimeMessage.RecipientType.TO, mail.getSender().toString());
+            response.setRecipients(MimeMessage.RecipientType.TO, mail.getMaybeSender().get().toString());
         }
 
         response.saveChanges();
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/matchers/AbstractQuotaMatcher.java b/mailet/standard/src/main/java/org/apache/james/transport/matchers/AbstractQuotaMatcher.java
index e097e8e5c9..219fadd0fa 100755
--- a/mailet/standard/src/main/java/org/apache/james/transport/matchers/AbstractQuotaMatcher.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/matchers/AbstractQuotaMatcher.java
@@ -17,8 +17,6 @@
  * under the License.                                           *
  ****************************************************************/
 
-
-
 package org.apache.james.transport.matchers;
 
 import java.util.ArrayList;
@@ -27,6 +25,7 @@ import java.util.Collection;
 import javax.mail.MessagingException;
 
 import org.apache.james.core.MailAddress;
+import org.apache.james.core.MaybeSender;
 import org.apache.mailet.Experimental;
 import org.apache.mailet.Mail;
 import org.apache.mailet.base.GenericMatcher;
@@ -57,7 +56,7 @@ public abstract class AbstractQuotaMatcher extends GenericMatcher {
     @Override
     public final Collection<MailAddress> match(Mail mail) throws MessagingException {
         Collection<MailAddress> matching = null;
-        if (isSenderChecked(mail.getSender())) {
+        if (isSenderChecked(mail.getMaybeSender())) {
             matching = new ArrayList<>();
             for (MailAddress recipient : mail.getRecipients()) {
                 if (isRecipientChecked(recipient) && isOverQuota(recipient, mail)) {
@@ -97,9 +96,15 @@ public abstract class AbstractQuotaMatcher extends GenericMatcher {
      * to its check.
      *
      * @param sender the sender to check
-     */    
-    protected boolean isSenderChecked(MailAddress sender) throws MessagingException {
-        return !(sender == null || getMailetContext().getPostmaster().equals(sender));
+     */
+    private boolean isSenderChecked(MaybeSender sender) {
+        return sender.asOptional()
+            .filter(mailAddress -> !isPostmaster(mailAddress))
+            .isPresent();
+    }
+
+    private boolean isPostmaster(MailAddress mailAddress) {
+        return getMailetContext().getPostmaster().equals(mailAddress);
     }
 
     /** 
@@ -111,7 +116,7 @@ public abstract class AbstractQuotaMatcher extends GenericMatcher {
      * @param recipient the recipient to check
      */    
     protected boolean isRecipientChecked(MailAddress recipient) throws MessagingException {
-        return !(getMailetContext().getPostmaster().equals(recipient));
+        return !(isPostmaster(recipient));
     }
 
     /** 
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/matchers/RecipientIs.java b/mailet/standard/src/main/java/org/apache/james/transport/matchers/RecipientIs.java
index 5d5310597e..69a4b440ac 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/matchers/RecipientIs.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/matchers/RecipientIs.java
@@ -20,6 +20,7 @@
 package org.apache.james.transport.matchers;
 
 import java.util.Collection;
+import java.util.Optional;
 
 import javax.mail.MessagingException;
 
@@ -43,7 +44,7 @@ import com.google.common.base.Strings;
  */
 public class RecipientIs extends GenericRecipientMatcher {
 
-    private Collection<MailAddress> recipients;
+    private Collection<Optional<MailAddress>> recipients;
 
     @Override
     public void init() throws javax.mail.MessagingException {
@@ -58,6 +59,6 @@ public class RecipientIs extends GenericRecipientMatcher {
 
     @Override
     public boolean matchRecipient(MailAddress recipient) {
-        return recipients.contains(recipient);
+        return recipients.contains(Optional.of(recipient));
     }
 }
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderHostIs.java b/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderHostIs.java
index c9caffbb71..48eaf0ff93 100755
--- a/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderHostIs.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderHostIs.java
@@ -78,7 +78,9 @@ public class SenderHostIs extends GenericMatcher {
     @Override
     public Collection<MailAddress> match(Mail mail) {
         try {
-            if (hasSender(mail) && senderHosts.contains(mail.getSender().getDomain())) {
+            if (mail.getMaybeSender().asOptional()
+                    .map(mailAddress -> senderHosts.contains(mailAddress.getDomain()))
+                    .orElse(false)) {
                 return mail.getRecipients();
             }
         } catch (Exception e) {
@@ -87,9 +89,4 @@ public class SenderHostIs extends GenericMatcher {
 
         return null;    //No match.
     }
-
-    private boolean hasSender(Mail mail) {
-        return mail.getSender() != null
-            && !mail.getSender().isNullSender();
-    }
 }
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderHostIsLocal.java b/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderHostIsLocal.java
index a248c080c7..996f2d0739 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderHostIsLocal.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderHostIsLocal.java
@@ -39,18 +39,17 @@ import org.apache.mailet.base.GenericMatcher;
 public class SenderHostIsLocal extends GenericMatcher {
     @Override
     public Collection<MailAddress> match(Mail mail) {
-        if (mail.getSender() != null && isLocalServer(mail)) {
+        if (mail.getMaybeSender().asOptional()
+                .map(this::isLocalServer)
+                .orElse(false)) {
             return mail.getRecipients();
         }
         return null;
         
     }
 
-    private boolean isLocalServer(Mail mail) {
-        if (mail.getSender().isNullSender()) {
-            return false;
-        }
-        return this.getMailetContext().isLocalServer(mail.getSender().getDomain());
+    private boolean isLocalServer(MailAddress sender) {
+        return this.getMailetContext().isLocalServer(sender.getDomain());
     }
 
 }
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderIs.java b/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderIs.java
index 821692d875..0d42e4268e 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderIs.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderIs.java
@@ -47,10 +47,10 @@ import com.google.common.base.Strings;
  */
 public class SenderIs extends GenericMatcher {
 
-    private Set<MailAddress> senders;
+    private Set<Optional<MailAddress>> senders;
 
     @VisibleForTesting
-    Set<MailAddress> getSenders() {
+    Set<Optional<MailAddress>> getSenders() {
         return senders;
     }
 
@@ -67,8 +67,7 @@ public class SenderIs extends GenericMatcher {
 
     @Override
     public Collection<MailAddress> match(Mail mail) {
-        MailAddress sanitizedSender = Optional.ofNullable(mail.getSender()).orElse(MailAddress.nullSender());
-        if (senders.contains(sanitizedSender)) {
+        if (senders.contains(mail.getMaybeSender().asOptional())) {
             return mail.getRecipients();
         } else {
             return null;
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderIsLocal.java b/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderIsLocal.java
index 925c5961ef..fcd388beca 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderIsLocal.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderIsLocal.java
@@ -19,7 +19,6 @@
 package org.apache.james.transport.matchers;
 
 import java.util.Collection;
-import java.util.Optional;
 
 import org.apache.james.core.MailAddress;
 import org.apache.mailet.Mail;
@@ -32,17 +31,16 @@ public class SenderIsLocal extends GenericMatcher {
 
     @Override
     public final Collection<MailAddress> match(Mail mail) {
-        if (isLocal(mail.getSender())) {
+        if (mail.getMaybeSender().asOptional()
+                .map(this::isLocal)
+                .orElse(false)) {
             return mail.getRecipients();
         }
         return null;
     }
 
     private boolean isLocal(MailAddress mailAddress) {
-        return Optional.ofNullable(mailAddress)
-            .filter(address -> !address.isNullSender())
-            .map(address -> getMailetContext().isLocalEmail(address))
-            .orElse(false);
+        return getMailetContext().isLocalEmail(mailAddress);
     }
 
 }
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderIsNull.java b/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderIsNull.java
index 6fba3c2eff..1b48fdaa03 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderIsNull.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderIsNull.java
@@ -35,18 +35,12 @@ import org.apache.mailet.base.GenericMatcher;
  * @since 2.2.0
  */
 public class SenderIsNull extends GenericMatcher {
-
     @Override
     public Collection<MailAddress> match(Mail mail) {
-        if (isNullSender(mail)) {
-            return mail.getRecipients();
-        } else {
+        if (mail.hasSender()) {
             return null;
+        } else {
+            return mail.getRecipients();
         }
     }
-
-    private boolean isNullSender(Mail mail) {
-        return mail.getSender() == null
-            || mail.getSender().isNullSender();
-    }
 }
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderIsRegex.java b/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderIsRegex.java
index a72272f3ba..ef308d56bd 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderIsRegex.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/matchers/SenderIsRegex.java
@@ -74,11 +74,7 @@ public class SenderIsRegex extends GenericMatcher {
 
     @Override
     public Collection<MailAddress> match(Mail mail) {
-        MailAddress mailAddress = mail.getSender();
-        if (mailAddress == null) {
-            return null;
-        }
-        String senderString = mailAddress.asString();
+        String senderString = mail.getMaybeSender().asString();
         if (pattern.matcher(senderString).matches()) {
             return mail.getRecipients();
         }
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/matchers/utils/MailAddressCollectionReader.java b/mailet/standard/src/main/java/org/apache/james/transport/matchers/utils/MailAddressCollectionReader.java
index e0ea2fd717..733d4dc9d1 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/matchers/utils/MailAddressCollectionReader.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/matchers/utils/MailAddressCollectionReader.java
@@ -19,6 +19,7 @@
 
 package org.apache.james.transport.matchers.utils;
 
+import java.util.Optional;
 import java.util.Set;
 
 import javax.mail.internet.AddressException;
@@ -33,7 +34,7 @@ import com.google.common.base.Strings;
 
 public class MailAddressCollectionReader {
 
-    public static Set<MailAddress> read(String condition) {
+    public static Set<Optional<MailAddress>> read(String condition) {
         Preconditions.checkArgument(!Strings.isNullOrEmpty(condition));
         return Splitter.onPattern("(,| |\t)").splitToList(condition)
             .stream()
@@ -42,12 +43,12 @@ public class MailAddressCollectionReader {
             .collect(Guavate.toImmutableSet());
     }
 
-    private static MailAddress getMailAddress(String s) {
+    private static Optional<MailAddress> getMailAddress(String s) {
         try {
             if (s.equals(MailAddress.NULL_SENDER_AS_STRING)) {
-                return MailAddress.nullSender();
+                return Optional.empty();
             }
-            return new MailAddress(s);
+            return Optional.of(new MailAddress(s));
         } catch (AddressException e) {
             throw new RuntimeException(e);
         }
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsTest.java
index ac9ae53794..385bd688f7 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsTest.java
@@ -23,6 +23,8 @@ package org.apache.james.transport.matchers;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
+import java.util.Optional;
+
 import javax.mail.MessagingException;
 
 import org.apache.james.core.MailAddress;
@@ -154,7 +156,8 @@ class SenderIsTest {
                 .condition(mailAddress + ", " + SENDER_NAME)
                 .build());
 
-        assertThat(matcher.getSenders()).containsExactly(new MailAddress(mailAddress), new MailAddress(SENDER_NAME));
+        assertThat(matcher.getSenders()).containsExactly(Optional.of(new MailAddress(mailAddress)),
+            Optional.of(new MailAddress(SENDER_NAME)));
     }
 
     @Test
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/util/MailAddressCollectionReaderTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/util/MailAddressCollectionReaderTest.java
index 6bad784c47..e75aa2eda1 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/util/MailAddressCollectionReaderTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/util/MailAddressCollectionReaderTest.java
@@ -22,6 +22,8 @@ package org.apache.james.transport.matchers.util;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
+import java.util.Optional;
+
 import org.apache.james.core.MailAddress;
 import org.apache.james.transport.matchers.utils.MailAddressCollectionReader;
 import org.junit.jupiter.api.Test;
@@ -57,13 +59,13 @@ class MailAddressCollectionReaderTest {
         MailAddress mailAddress = new MailAddress("valid@apache.org");
 
         assertThat(MailAddressCollectionReader.read(mailAddress.toString()))
-            .containsExactly(mailAddress);
+            .containsExactly(Optional.of(mailAddress));
     }
 
     @Test
     void readShouldParseNullSender() {
         assertThat(MailAddressCollectionReader.read("<>"))
-            .containsExactly(MailAddress.nullSender());
+            .containsExactly(Optional.empty());
     }
 
     @Test
@@ -72,7 +74,7 @@ class MailAddressCollectionReaderTest {
         MailAddress mailAddress2 = new MailAddress("bis@apache.org");
 
         assertThat(MailAddressCollectionReader.read(mailAddress1.toString() + "," + mailAddress2.toString()))
-            .containsExactly(mailAddress1, mailAddress2);
+            .containsExactly(Optional.of(mailAddress1), Optional.of(mailAddress2));
     }
 
     @Test
@@ -81,7 +83,7 @@ class MailAddressCollectionReaderTest {
         MailAddress mailAddress2 = new MailAddress("bis@apache.org");
 
         assertThat(MailAddressCollectionReader.read(mailAddress1.toString() + " " + mailAddress2.toString()))
-            .containsExactly(mailAddress1, mailAddress2);
+            .containsExactly(Optional.of(mailAddress1), Optional.of(mailAddress2));
     }
 
     @Test
@@ -90,7 +92,7 @@ class MailAddressCollectionReaderTest {
         MailAddress mailAddress2 = new MailAddress("bis@apache.org");
 
         assertThat(MailAddressCollectionReader.read(mailAddress1.toString() + "\t" + mailAddress2.toString()))
-            .containsExactly(mailAddress1, mailAddress2);
+            .containsExactly(Optional.of(mailAddress1), Optional.of(mailAddress2));
     }
 
 
@@ -100,7 +102,7 @@ class MailAddressCollectionReaderTest {
         MailAddress mailAddress2 = new MailAddress("bis@apache.org");
 
         assertThat(MailAddressCollectionReader.read(mailAddress1.toString() + ",\t  \t,\t \t " + mailAddress2.toString()))
-            .containsExactly(mailAddress1, mailAddress2);
+            .containsExactly(Optional.of(mailAddress1), Optional.of(mailAddress2));
     }
 
     @Test
@@ -108,7 +110,7 @@ class MailAddressCollectionReaderTest {
         MailAddress mailAddress = new MailAddress("valid@apache.org");
 
         assertThat(MailAddressCollectionReader.read(mailAddress.toString() + ", " + mailAddress.toString()))
-            .containsExactly(mailAddress);
+            .containsExactly(Optional.of(mailAddress));
     }
 
 
