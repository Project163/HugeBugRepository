diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/wordperfect/WP5DocumentAreaExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/wordperfect/WP5DocumentAreaExtractor.java
index bd5972521..01e5a0b47 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/wordperfect/WP5DocumentAreaExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/wordperfect/WP5DocumentAreaExtractor.java
@@ -17,7 +17,10 @@
 package org.apache.tika.parser.wordperfect;
 
 import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
 
+import org.apache.commons.collections4.MapUtils;
 import org.apache.tika.sax.XHTMLContentHandler;
 import org.xml.sax.SAXException;
 
@@ -28,8 +31,32 @@ import org.xml.sax.SAXException;
  */
 class WP5DocumentAreaExtractor extends WPDocumentAreaExtractor {
     
-    protected void extract(int c, WPInputStream in, StringBuilder out, XHTMLContentHandler xhtml)
-            throws IOException, SAXException {
+    /* 192-207 characters represent fixed-length multi-byte functions.  
+     * Those that are not handled explicitely in the code below should be
+     * skipped according to their size (minus the first char if already read).
+     */
+    private static final Map<Integer, Integer> FIXED_LENGTH_FUNCTION_SIZES = 
+            MapUtils.putAll(new HashMap<Integer, Integer>(), new Integer[] {
+        192, 4,  // Extended character
+        193, 9,  // Center/Align/ Tab/Left Margin Release
+        194, 11, // Indent
+        195, 3,  // Attribute ON
+        196, 3,  // Attribute OFF
+        197, 5,  // Block Protect
+        198, 6,  // End of Indent
+        199, 7,  // Different Display Character when Hyphenated
+        200, 4,  // (Reserved)
+        201, 5,  // (Reserved)
+        202, 6,  // (Reserved)
+        203, 6,  // (Reserved)
+        204, 8,  // (Reserved)
+        205, 10, // (Reserved)
+        206, 10, // (Reserved)
+        207, 12, // (Reserved)
+    });
+    
+    protected void extract(int c, WPInputStream in, StringBuilder out, 
+            XHTMLContentHandler xhtml) throws IOException, SAXException {
 
         // 0-31: control characters
         if (c == 10) {
@@ -65,8 +92,9 @@ class WP5DocumentAreaExtractor extends WPDocumentAreaExtractor {
             in.readWP(); // closing character
             WP5Charsets.append(out, charset, charval);
         } else if (c >= 193 && c <= 207) {
-            skipUntilChar(in, c); // opening/closing chars are same
-
+            // removing 1 from function length since first char already read
+            in.skipWPByte(FIXED_LENGTH_FUNCTION_SIZES.get(c) - 1);
+            
         // 208-255: variable-length multi-byte function
         } else if (c >= 208 && c <= 255) {
             // Variable-Length Multi-Byte Functions
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/wordperfect/WP6DocumentAreaExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/wordperfect/WP6DocumentAreaExtractor.java
index 862c858a6..5083711a7 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/wordperfect/WP6DocumentAreaExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/wordperfect/WP6DocumentAreaExtractor.java
@@ -17,7 +17,10 @@
 package org.apache.tika.parser.wordperfect;
 
 import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
 
+import org.apache.commons.collections4.MapUtils;
 import org.apache.tika.sax.XHTMLContentHandler;
 import org.xml.sax.SAXException;
 
@@ -27,6 +30,29 @@ import org.xml.sax.SAXException;
  * @author Pascal Essiembre
  */
 class WP6DocumentAreaExtractor extends WPDocumentAreaExtractor {
+
+    /* 240-254 characters represent fixed-length multi-byte functions.  
+     * Those that are not handled explicitely in the code below should be
+     * skipped according to their size (minus the first char if already read).
+     */
+    private static final Map<Integer, Integer> FIXED_LENGTH_FUNCTION_SIZES = 
+            MapUtils.putAll(new HashMap<Integer, Integer>(), new Integer[] {
+        240, 4,  // Extended Character
+        241, 5,  // Undo
+        242, 3,  // Attribute On
+        243, 3,  // Attribute Off
+        244, 3,  // (Reserved)
+        245, 3,  // (Reserved)
+        246, 4,  // (Reserved)
+        247, 4,  // (Reserved)
+        248, 4,  // (Reserved)
+        249, 5,  // (Reserved)
+        250, 5,  // (Reserved)
+        251, 6,  // (Reserved)
+        252, 6,  // (Reserved)
+        253, 8,  // (Reserved)
+        254, 8,  // (Reserved)
+    });    
     
     protected void extract(int c, WPInputStream in, StringBuilder out, XHTMLContentHandler xhtml)
             throws IOException, SAXException {
@@ -50,8 +76,9 @@ class WP6DocumentAreaExtractor extends WPDocumentAreaExtractor {
             out.append('\t');
         } else if (c >= 180 && c <= 207) {
             endParagraph(out, xhtml);
+            
+        // 208-239: variable-length multi-byte function
         } else if (c >= 208 && c <= 239) {
-            // Variable-Length Multi-Byte Functions
             int subgroup = in.readWP();
             int functionSize = in.readWPShort();
             for (int i = 0; i < functionSize - 4; i++) {
@@ -85,9 +112,14 @@ class WP6DocumentAreaExtractor extends WPDocumentAreaExtractor {
             int charset = in.readWP();
             in.readWP(); // closing character
             WP6Charsets.append(out, charset, charval);
+            
+        // 241-254: fixed-length multi-byte function
         } else if (c >= 241 && c <= 254) {
-            skipUntilChar(in, c);
+            // removing 1 from function length since first char already read
+            in.skipWPByte(FIXED_LENGTH_FUNCTION_SIZES.get(c) - 1);            
         } else if (c == 255) {
+            // Should not be used so this line should not be called.
+            // We still have this code in case a future version uses it.
             skipUntilChar(in, c);
         }
         
