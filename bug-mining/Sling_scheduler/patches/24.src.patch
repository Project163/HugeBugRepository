diff --git a/src/main/java/org/apache/sling/commons/scheduler/impl/WhiteboardHandler.java b/src/main/java/org/apache/sling/commons/scheduler/impl/WhiteboardHandler.java
index 4d7c5bb..52c6948 100644
--- a/src/main/java/org/apache/sling/commons/scheduler/impl/WhiteboardHandler.java
+++ b/src/main/java/org/apache/sling/commons/scheduler/impl/WhiteboardHandler.java
@@ -131,9 +131,9 @@ public class WhiteboardHandler {
             } else {
                 name = "Registered Service";
             }
+            // now append service id to create a unique identifier
+            name = name + "." + getLongProperty(ref, Constants.SERVICE_ID);
         }
-        // now append service id to create a unique identifier
-        name = name + "." + getLongProperty(ref, Constants.SERVICE_ID);
         return name;
     }
 
diff --git a/src/test/java/org/apache/sling/commons/scheduler/impl/WhiteboardHandlerTest.java b/src/test/java/org/apache/sling/commons/scheduler/impl/WhiteboardHandlerTest.java
index 742a73e..7bb674c 100644
--- a/src/test/java/org/apache/sling/commons/scheduler/impl/WhiteboardHandlerTest.java
+++ b/src/test/java/org/apache/sling/commons/scheduler/impl/WhiteboardHandlerTest.java
@@ -81,7 +81,7 @@ public class WhiteboardHandlerTest {
         final ServiceRegistration<?> reg = context.registerService(Runnable.class.getName(), service, serviceProps);
         final ServiceReference<?> reference = reg.getReference();
         handler.register(reference, service);
-        JobKey jobKey = JobKey.jobKey(schedulerName + "." + reference.getProperty(Constants.SERVICE_ID));
+        JobKey jobKey = JobKey.jobKey(schedulerName);
 
         assertNotNull(quartzScheduler.getSchedulers().get("testName").getScheduler().getJobDetail(jobKey));
     }
@@ -109,7 +109,7 @@ public class WhiteboardHandlerTest {
         final ServiceRegistration<?> reg = context.registerService(Runnable.class.getName(), service, serviceProps);
         ServiceReference<?> reference = reg.getReference();
         handler.register(reference, service);
-        JobKey jobKey = JobKey.jobKey(schedulerName + "." + reference.getProperty(Constants.SERVICE_ID));
+        JobKey jobKey = JobKey.jobKey(schedulerName);
 
         assertNotNull(quartzScheduler.getSchedulers().get("testName").getScheduler().getJobDetail(jobKey));
 
@@ -138,12 +138,12 @@ public class WhiteboardHandlerTest {
         final ServiceRegistration<?> reg = context.registerService(Runnable.class.getName(), service, serviceProps);
         final ServiceReference<?> reference = reg.getReference();
         handler.register(reference, service);
-        JobKey jobKey = JobKey.jobKey(schedulerName + "." + reference.getProperty(Constants.SERVICE_ID));
+        JobKey jobKey = JobKey.jobKey(schedulerName);
 
         JobDetail jobDetail = quartzScheduler.getSchedulers().get("testName").getScheduler().getJobDetail(jobKey);
         assertNotNull(jobDetail);
         assertEquals(schedulerName, jobDetail.getJobDataMap().getString(QuartzScheduler.DATA_MAP_PROVIDED_NAME));
-        assertEquals(schedulerName + "." + reference.getProperty(Constants.SERVICE_ID),
+        assertEquals(schedulerName,
                 jobDetail.getJobDataMap().getString(QuartzScheduler.DATA_MAP_NAME));
     }
 
