diff --git a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/AbstractRestApi.java b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/AbstractRestApi.java
new file mode 100644
index 00000000..b7e963ca
--- /dev/null
+++ b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/AbstractRestApi.java
@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.rave.portal.web.api.rest;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.http.HttpStatus;
+import org.springframework.security.access.AccessDeniedException;
+import org.springframework.util.ClassUtils;
+import org.springframework.web.bind.annotation.ExceptionHandler;
+
+/**
+ * Abstract class containing common functionality that should be shared across
+ * all Rest Api classes
+ *  
+ * @author carlucci
+ */
+public abstract class AbstractRestApi {
+    private Logger logger = LoggerFactory.getLogger(getClass());
+    
+     /**
+     * Return a 403 response code when any org.springframework.security.access.AccessDeniedException
+     * is thrown from any of the API methods due to security restrictions     
+     * 
+     * @param ex the AccessDeniedException
+     * @param request the http request
+     * @param response the http response
+     */
+    @ExceptionHandler(AccessDeniedException.class) 
+    public void handleAccessDeniedException(Exception ex, HttpServletRequest request, HttpServletResponse response) {
+        logger.info("AccessDeniedException: " + request.getUserPrincipal().getName() + " attempted to access resource " + request.getRequestURL(), ex);
+        response.setStatus(HttpStatus.FORBIDDEN.value());    
+    }
+    
+    // TODO RAVE-240 - when we implement security we can implement different exception
+    //        handlers for different errors (unauthorized, resource not found, etc)
+    @ExceptionHandler(Exception.class)
+    public String handleException(Exception ex, HttpServletRequest request, HttpServletResponse response) {
+        // RAVE-240 lowered the log level to info
+        logger.info("Error occured while accessing " + request.getRequestURL(), ex);
+        response.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
+        return ClassUtils.getShortName(ex.getClass());
+    }    
+}
\ No newline at end of file
diff --git a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/PageApi.java b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/PageApi.java
index 9f6499a6..ec5f634d 100644
--- a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/PageApi.java
+++ b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/PageApi.java
@@ -27,12 +27,9 @@ import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
 import org.springframework.stereotype.Controller;
-import org.springframework.util.ClassUtils;
 import org.springframework.web.bind.annotation.*;
 
-import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import org.springframework.security.access.AccessDeniedException;
 
 /**
  * Handler for all services exposed under the /api/rest/page path.
@@ -41,8 +38,8 @@ import org.springframework.security.access.AccessDeniedException;
  */
 @Controller(value="restPageApi")
 @RequestMapping("/api/rest/page/*")
-public class PageApi {
-    private static Logger logger = LoggerFactory.getLogger(PageApi.class);
+public class PageApi extends AbstractRestApi {
+    private Logger logger = LoggerFactory.getLogger(getClass());
     private PageService pageService;
     
     @Autowired
@@ -62,6 +59,7 @@ public class PageApi {
     @ResponseBody
     @RequestMapping(value = "{pageId}", method = RequestMethod.GET)
     public Page getPage(@PathVariable long pageId, @RequestParam(required=false) boolean export) {
+        logger.debug("GET received for /api/rest/page/" + pageId);        
         Page page = pageService.getPage(pageId);
         if(export) {
             modifyForExport(page);
@@ -69,33 +67,6 @@ public class PageApi {
         return page;
     }
 
-    /**
-     * Return a 403 response code when any org.springframework.security.access.AccessDeniedException
-     * is thrown from any of the API methods due to security restrictions
-     * 
-     * TODO: this should probably be moved up to an AbstractRestApi class since
-     * it seems common enough for all RestApi controllers
-     * 
-     * @param ex the AccessDeniedException
-     * @param request the http request
-     * @param response the http response
-     */
-    @ExceptionHandler(AccessDeniedException.class) 
-    public void handleAccessDeniedException(Exception ex, HttpServletRequest request, HttpServletResponse response) {
-        logger.info("AccessDeniedException: " + request.getUserPrincipal().getName() + " attempted to access resource " + request.getRequestURL(), ex);
-        response.setStatus(HttpStatus.FORBIDDEN.value());    
-    }
-    
-    // TODO RAVE-240 - when we implement security we can implement different exception
-    //        handlers for different errors (unauthorized, resource not found, etc)
-    @ExceptionHandler(Exception.class)
-    public String handleException(Exception ex, HttpServletRequest request, HttpServletResponse response) {
-        // RAVE-240 lowered the log level to info
-        logger.info("Error occured while accessing " + request.getRequestURL(), ex);
-        response.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
-        return ClassUtils.getShortName(ex.getClass());
-    }
-
     private static void modifyForExport(Page page) {
         page.setOwner(null);
         for(Region r : page.getRegions()){
diff --git a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/RegionWidgetApi.java b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/RegionWidgetApi.java
index 7fdff662..b40e6ffc 100644
--- a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/RegionWidgetApi.java
+++ b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/RegionWidgetApi.java
@@ -37,8 +37,9 @@ import org.apache.rave.portal.model.RegionWidget;
  */
 @Controller
 @RequestMapping("/api/rest/regionWidgets")
-public class RegionWidgetApi {
+public class RegionWidgetApi extends AbstractRestApi {
     private static Logger logger = LoggerFactory.getLogger(RegionWidgetApi.class);
+    
 
     private RegionWidgetService regionWidgetService;
 
diff --git a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/WidgetApi.java b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/WidgetApi.java
index 37f79df8..ce27a804 100644
--- a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/WidgetApi.java
+++ b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/WidgetApi.java
@@ -30,7 +30,7 @@ import org.springframework.web.bind.annotation.RequestMethod;
  */
 @Controller
 @RequestMapping("/api/rest/widgets")
-public class WidgetApi {
+public class WidgetApi extends AbstractRestApi {
     private static Logger logger = LoggerFactory.getLogger(WidgetApi.class);
 
     @RequestMapping(value = "/", method = RequestMethod.GET)
diff --git a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/api/rest/AbstractRestApiTest.java b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/api/rest/AbstractRestApiTest.java
new file mode 100644
index 00000000..fea990fb
--- /dev/null
+++ b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/api/rest/AbstractRestApiTest.java
@@ -0,0 +1,75 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.rave.portal.web.api.rest;
+
+import java.security.Principal;
+import org.springframework.http.HttpStatus;
+import org.springframework.mock.web.MockHttpServletRequest;
+import org.springframework.mock.web.MockHttpServletResponse;
+import org.springframework.security.access.AccessDeniedException;
+import org.springframework.util.ClassUtils;
+import org.junit.Before;
+import org.junit.Test;
+import static org.junit.Assert.*;
+import static org.easymock.EasyMock.*;
+import static org.hamcrest.CoreMatchers.*;
+
+
+/**
+ *
+ * @author carlucci
+ */
+public class AbstractRestApiTest {
+    private AbstractRestApiImpl abstractRestApiImpl;
+    private MockHttpServletRequest request;
+    private MockHttpServletResponse response;
+       
+    
+    @Before
+    public void setUp() {
+        request = new MockHttpServletRequest();
+        response = new MockHttpServletResponse();
+        abstractRestApiImpl = new AbstractRestApiImpl();
+    }
+       
+    @Test
+    public void testHandleException() {
+        RuntimeException re = new RuntimeException("error");        
+        String value = abstractRestApiImpl.handleException(re, request, response);
+        
+        assertThat(value, is(ClassUtils.getShortName(re.getClass())));
+        assertThat(response.getStatus(), is(HttpStatus.INTERNAL_SERVER_ERROR.value()));   
+    }
+    
+    @Test
+    public void testHandleAccessDeniedException() {
+        Principal principal = createMock(Principal.class);                
+        request.setUserPrincipal(principal);
+        AccessDeniedException ade = new AccessDeniedException("error");        
+        
+        expect(principal.getName()).andReturn("theuser");
+        replay(principal);        
+        abstractRestApiImpl.handleAccessDeniedException(ade, request, response);        
+        assertThat(response.getStatus(), is(HttpStatus.FORBIDDEN.value()));   
+        verify(principal);
+    }    
+
+    class AbstractRestApiImpl extends AbstractRestApi { }
+}
diff --git a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/api/rest/PageApiTest.java b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/api/rest/PageApiTest.java
index 662eb1bf..12640db4 100644
--- a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/api/rest/PageApiTest.java
+++ b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/api/rest/PageApiTest.java
@@ -42,14 +42,12 @@ import static org.hamcrest.CoreMatchers.*;
 public class PageApiTest {    
     private PageApi pageApi;    
     private PageService pageService;
-    private MockHttpServletRequest request;
     private MockHttpServletResponse response;
     
     private final long PAGE_ID = 1L;
     
     @Before
     public void setUp() {
-        request = new MockHttpServletRequest();
         response = new MockHttpServletResponse();
         pageService = createMock(PageService.class);
         pageApi = new PageApi(pageService);     
@@ -97,27 +95,5 @@ public class PageApiTest {
         
         assertThat(response.getStatus(), is(HttpStatus.NO_CONTENT.value()));   
         verify(pageService);
-    }
-    
-    @Test
-    public void testHandleException() {
-        RuntimeException re = new RuntimeException("error");        
-        String value = pageApi.handleException(re, request, response);
-        
-        assertThat(value, is(ClassUtils.getShortName(re.getClass())));
-        assertThat(response.getStatus(), is(HttpStatus.INTERNAL_SERVER_ERROR.value()));   
-    }
-    
-    @Test
-    public void testHandleAccessDeniedException() {
-        Principal principal = createMock(Principal.class);                
-        request.setUserPrincipal(principal);
-        AccessDeniedException ade = new AccessDeniedException("error");        
-        
-        expect(principal.getName()).andReturn("theuser");
-        replay(principal);        
-        pageApi.handleAccessDeniedException(ade, request, response);        
-        assertThat(response.getStatus(), is(HttpStatus.FORBIDDEN.value()));   
-        verify(principal);
-    }    
+    }  
 }
