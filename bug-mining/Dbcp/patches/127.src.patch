diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 29dc53fa..ec6e8b91 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -79,6 +79,9 @@ The <action> type attribute can be add,update,fix,remove.
       <action dev="psteitz" type="add" issue="DBCP-426" due-to="Kasper SÃ¸rensen">
         Added invalidateConnection method to BasicDataSource.
       </action>
+      <action issue="DBCP-428" dev="psteitz" type="fix" due-to="Vladimir Konkov">
+        Unsuccessful Connection enlistment in XA Transaction ignored by TransactionContext.
+      </action>
     </release>
     <release version="2.0.1" date="24 May 2014" description="This is a bug fix release.">
       <action dev="markt" type="fix">
diff --git a/src/main/java/org/apache/commons/dbcp2/managed/TransactionContext.java b/src/main/java/org/apache/commons/dbcp2/managed/TransactionContext.java
index 68d56767..256d6a73 100644
--- a/src/main/java/org/apache/commons/dbcp2/managed/TransactionContext.java
+++ b/src/main/java/org/apache/commons/dbcp2/managed/TransactionContext.java
@@ -90,7 +90,9 @@ public class TransactionContext {
         Transaction transaction = getTransaction();
         try {
             XAResource xaResource = transactionRegistry.getXAResource(sharedConnection);
-            transaction.enlistResource(xaResource);
+            if ( !transaction.enlistResource(xaResource) ) {
+                throw new SQLException("Unable to enlist connection in transaction: enlistResource returns 'false'.");
+            }
         } catch (RollbackException e) {
             // transaction was rolled back... proceed as if there never was a transaction
         } catch (SystemException e) {
diff --git a/src/test/java/org/apache/commons/dbcp2/managed/TestTransactionContext.java b/src/test/java/org/apache/commons/dbcp2/managed/TestTransactionContext.java
new file mode 100644
index 00000000..fddefbde
--- /dev/null
+++ b/src/test/java/org/apache/commons/dbcp2/managed/TestTransactionContext.java
@@ -0,0 +1,68 @@
+/**
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.commons.dbcp2.managed;
+
+import java.sql.SQLException;
+import javax.transaction.xa.XAResource;
+
+import org.junit.Test;
+import org.apache.geronimo.transaction.manager.TransactionManagerImpl;
+import org.apache.geronimo.transaction.manager.TransactionImpl;
+
+/**
+ * TestSuite for TransactionContext  
+ */
+public class TestTransactionContext {
+    
+    /**
+     * JIRA: DBCP-428
+     */
+    @Test(expected=SQLException.class)
+    public void testSetSharedConnectionEnlistFailure() throws Exception {
+        final BasicManagedDataSource basicManagedDataSource = new BasicManagedDataSource();
+        basicManagedDataSource.setTransactionManager(new TransactionManagerImpl());
+        basicManagedDataSource.setDriverClassName("org.apache.commons.dbcp2.TesterDriver");
+        basicManagedDataSource.setUrl("jdbc:apache:commons:testdriver");
+        basicManagedDataSource.setUsername("username");
+        basicManagedDataSource.setPassword("password");
+        basicManagedDataSource.setMaxIdle(1);
+        final ManagedConnection<?> conn = (ManagedConnection<?>) basicManagedDataSource.getConnection();
+        final UncooperativeTransaction transaction = new UncooperativeTransaction(); 
+        final TransactionContext transactionContext =
+                new TransactionContext(basicManagedDataSource.getTransactionRegistry(), transaction);
+        transactionContext.setSharedConnection(conn);
+    }
+    
+    /**
+     * Transaction that always fails enlistResource.
+     */
+    private class UncooperativeTransaction extends TransactionImpl {
+        public UncooperativeTransaction() {
+            super(null, null);
+        }
+        @Override
+        public synchronized boolean enlistResource(XAResource xaRes) {
+            return false;
+        }
+    }
+    
+    
+    
+
+}
+
