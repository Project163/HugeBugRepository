diff --git a/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java b/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java
index 0b6d66ef..b24b4bed 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java
@@ -1701,37 +1701,37 @@ public class Interpreter extends InterpreterBase {
             throw new JexlException.Cancel(node);
         }
         final JexlOperator operator = node != null && node.jjtGetParent() instanceof ASTArrayAccess
-                                      ? JexlOperator.ARRAY_GET : JexlOperator.PROPERTY_GET;
+                ? JexlOperator.ARRAY_GET : JexlOperator.PROPERTY_GET;
         Object result = operators.tryOverload(node, operator, object, attribute);
         if (result != JexlEngine.TRY_FAILED) {
             return result;
         }
-        // attempt to reuse last executor cached in volatile JexlNode.value
-        if (node != null && cache) {
-            Object cached = node.jjtGetValue();
-            if (cached instanceof JexlPropertyGet) {
-                JexlPropertyGet vg = (JexlPropertyGet) cached;
-                Object value = vg.tryInvoke(object, attribute);
-                if (!vg.tryFailed(value)) {
-                    return value;
+        Exception xcause = null;
+        try {
+            // attempt to reuse last executor cached in volatile JexlNode.value
+            if (node != null && cache) {
+                Object cached = node.jjtGetValue();
+                if (cached instanceof JexlPropertyGet) {
+                    JexlPropertyGet vg = (JexlPropertyGet) cached;
+                    Object value = vg.tryInvoke(object, attribute);
+                    if (!vg.tryFailed(value)) {
+                        return value;
+                    }
                 }
             }
-        }
-        // resolve that property
-        Exception xcause = null;
-        List<PropertyResolver> resolvers = uberspect.getResolvers(operator, object);
-        JexlPropertyGet vg = uberspect.getPropertyGet(resolvers, object, attribute);
-        if (vg != null) {
-            try {
+            // resolve that property
+            List<PropertyResolver> resolvers = uberspect.getResolvers(operator, object);
+            JexlPropertyGet vg = uberspect.getPropertyGet(resolvers, object, attribute);
+            if (vg != null) {
                 Object value = vg.invoke(object);
                 // cache executor in volatile JexlNode.value
                 if (node != null && cache && vg.isCacheable()) {
                     node.jjtSetValue(vg);
                 }
                 return value;
-            } catch (Exception xany) {
-                xcause = xany;
             }
+        } catch (Exception xany) {
+            xcause = xany;
         }
         // lets fail
         if (node != null) {
@@ -1775,39 +1775,39 @@ public class Interpreter extends InterpreterBase {
         if (result != JexlEngine.TRY_FAILED) {
             return;
         }
-        // attempt to reuse last executor cached in volatile JexlNode.value
-        if (node != null && cache) {
-            Object cached = node.jjtGetValue();
-            if (cached instanceof JexlPropertySet) {
-                JexlPropertySet setter = (JexlPropertySet) cached;
-                Object eval = setter.tryInvoke(object, attribute, value);
-                if (!setter.tryFailed(eval)) {
-                    return;
+        Exception xcause = null;
+        try {
+            // attempt to reuse last executor cached in volatile JexlNode.value
+            if (node != null && cache) {
+                Object cached = node.jjtGetValue();
+                if (cached instanceof JexlPropertySet) {
+                    JexlPropertySet setter = (JexlPropertySet) cached;
+                    Object eval = setter.tryInvoke(object, attribute, value);
+                    if (!setter.tryFailed(eval)) {
+                        return;
+                    }
                 }
             }
-        }
-        Exception xcause = null;
-        List<PropertyResolver> resolvers = uberspect.getResolvers(operator, object);
-        JexlPropertySet vs = uberspect.getPropertySet(resolvers, object, attribute, value);
-        // if we can't find an exact match, narrow the value argument and try again
-        if (vs == null) {
-            // replace all numbers with the smallest type that will fit
-            Object[] narrow = {value};
-            if (arithmetic.narrowArguments(narrow)) {
-                vs = uberspect.getPropertySet(resolvers, object, attribute, narrow[0]);
+            List<PropertyResolver> resolvers = uberspect.getResolvers(operator, object);
+            JexlPropertySet vs = uberspect.getPropertySet(resolvers, object, attribute, value);
+            // if we can't find an exact match, narrow the value argument and try again
+            if (vs == null) {
+                // replace all numbers with the smallest type that will fit
+                Object[] narrow = {value};
+                if (arithmetic.narrowArguments(narrow)) {
+                    vs = uberspect.getPropertySet(resolvers, object, attribute, narrow[0]);
+                }
             }
-        }
-        if (vs != null) {
-            try {
+            if (vs != null) {
                 // cache executor in volatile JexlNode.value
                 vs.invoke(object, value);
                 if (node != null && cache && vs.isCacheable()) {
                     node.jjtSetValue(vs);
                 }
                 return;
-            } catch (Exception xany) {
-                xcause = xany;
             }
+        } catch (Exception xany) {
+            xcause = xany;
         }
         // lets fail
         if (node != null) {
diff --git a/src/main/java/org/apache/commons/jexl3/internal/Operators.java b/src/main/java/org/apache/commons/jexl3/internal/Operators.java
index ed5fd38d..2983fdd3 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/Operators.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/Operators.java
@@ -71,17 +71,17 @@ public class Operators {
         if (operators != null && operators.overloads(operator)) {
             final JexlArithmetic arithmetic = interpreter.arithmetic;
             final boolean cache = interpreter.cache;
-            if (cache) {
-                Object cached = node.jjtGetValue();
-                if (cached instanceof JexlMethod) {
-                    JexlMethod me = (JexlMethod) cached;
-                    Object eval = me.tryInvoke(operator.getMethodName(), arithmetic, args);
-                    if (!me.tryFailed(eval)) {
-                        return eval;
+            try {
+                if (cache) {
+                    Object cached = node.jjtGetValue();
+                    if (cached instanceof JexlMethod) {
+                        JexlMethod me = (JexlMethod) cached;
+                        Object eval = me.tryInvoke(operator.getMethodName(), arithmetic, args);
+                        if (!me.tryFailed(eval)) {
+                            return eval;
+                        }
                     }
                 }
-            }
-            try {
                 JexlMethod vm = operators.getOperator(operator, args);
                 if (vm != null) {
                     Object result = vm.invoke(arithmetic, args);
diff --git a/src/test/java/org/apache/commons/jexl3/IssuesTest.java b/src/test/java/org/apache/commons/jexl3/IssuesTest.java
index b39d3d90..cd2efab2 100644
--- a/src/test/java/org/apache/commons/jexl3/IssuesTest.java
+++ b/src/test/java/org/apache/commons/jexl3/IssuesTest.java
@@ -1263,4 +1263,32 @@ public class IssuesTest extends JexlTestCase {
             Assert.assertTrue(NullPointerException.class.equals(th.getClass()));
         }
     }
+
+    @Test
+    public void test217() throws Exception {
+        JexlEvalContext jc = new JexlEvalContext();
+        jc.set("foo", new int[]{0, 1, 2, 42});
+        JexlEngine jexl;
+        JexlScript e;
+        Object r;
+        jexl = new JexlBuilder().strict(false).silent(false).create();
+        e = jexl.createScript("foo[3]"); 
+        r = e.execute(jc);
+        Assert.assertEquals(42, r);
+        
+        // cache and fail?
+        jc.set("foo", new int[]{0, 1});
+        jc.setStrict(true);
+        try {
+            r = e.execute(jc);
+            Assert.fail("should have thrown an exception");
+        } catch(JexlException xjexl) {
+            Throwable th = xjexl.getCause();
+            Assert.assertTrue(ArrayIndexOutOfBoundsException.class.equals(th.getClass()));
+        }
+        //
+        jc.setStrict(false);
+        r = e.execute(jc);
+        Assert.assertNull("oob adverted", r);
+    }
 }
