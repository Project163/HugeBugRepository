diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/DynamicMappingGenerator.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/DynamicMappingGenerator.java
index fff01e6c..f8598dee 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/DynamicMappingGenerator.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/DynamicMappingGenerator.java
@@ -68,7 +68,8 @@ public class DynamicMappingGenerator implements MappingGenerator {
     }
 
     private enum WritingState {
-        NONE, WROTE_START_OBJECT, PRIMITIVE
+        NONE, WROTE_START_OBJECT,
+        DONT_WRITE_END
     }
 
     private static class InObjectOrPrimitiveJsonGenerator implements JsonGenerator {
@@ -105,6 +106,10 @@ public class DynamicMappingGenerator implements MappingGenerator {
 
         @Override
         public JsonGenerator writeStartArray() {
+            if (keyIfNoObject != null && state == WritingState.NONE) {
+                state = WritingState.DONT_WRITE_END; // skip writeEnd since the impl will do it
+                return delegate.writeStartArray(keyIfNoObject);
+            }
             return delegate.writeStartArray();
         }
 
@@ -182,7 +187,7 @@ public class DynamicMappingGenerator implements MappingGenerator {
         @Override
         public JsonGenerator write(final JsonValue value) {
             if (isWritingPrimitive()) {
-                state = WritingState.PRIMITIVE;
+                state = WritingState.DONT_WRITE_END;
                 return delegate.write(keyIfNoObject, value);
             }
             return delegate.write(value);
@@ -191,7 +196,7 @@ public class DynamicMappingGenerator implements MappingGenerator {
         @Override
         public JsonGenerator write(final String value) {
             if (isWritingPrimitive()) {
-                state = WritingState.PRIMITIVE;
+                state = WritingState.DONT_WRITE_END;
                 return delegate.write(keyIfNoObject, value);
             }
             return delegate.write(value);
@@ -200,7 +205,7 @@ public class DynamicMappingGenerator implements MappingGenerator {
         @Override
         public JsonGenerator write(final BigDecimal value) {
             if (isWritingPrimitive()) {
-                state = WritingState.PRIMITIVE;
+                state = WritingState.DONT_WRITE_END;
                 return delegate.write(keyIfNoObject, value);
             }
             return delegate.write(value);
@@ -209,7 +214,7 @@ public class DynamicMappingGenerator implements MappingGenerator {
         @Override
         public JsonGenerator write(final BigInteger value) {
             if (isWritingPrimitive()) {
-                state = WritingState.PRIMITIVE;
+                state = WritingState.DONT_WRITE_END;
                 return delegate.write(keyIfNoObject, value);
             }
             return delegate.write(value);
@@ -218,7 +223,7 @@ public class DynamicMappingGenerator implements MappingGenerator {
         @Override
         public JsonGenerator write(final int value) {
             if (isWritingPrimitive()) {
-                state = WritingState.PRIMITIVE;
+                state = WritingState.DONT_WRITE_END;
                 return delegate.write(keyIfNoObject, value);
             }
             return delegate.write(value);
@@ -227,7 +232,7 @@ public class DynamicMappingGenerator implements MappingGenerator {
         @Override
         public JsonGenerator write(final long value) {
             if (isWritingPrimitive()) {
-                state = WritingState.PRIMITIVE;
+                state = WritingState.DONT_WRITE_END;
                 return delegate.write(keyIfNoObject, value);
             }
             return delegate.write(value);
@@ -236,7 +241,7 @@ public class DynamicMappingGenerator implements MappingGenerator {
         @Override
         public JsonGenerator write(final double value) {
             if (isWritingPrimitive()) {
-                state = WritingState.PRIMITIVE;
+                state = WritingState.DONT_WRITE_END;
                 return delegate.write(keyIfNoObject, value);
             }
             return delegate.write(value);
@@ -245,7 +250,7 @@ public class DynamicMappingGenerator implements MappingGenerator {
         @Override
         public JsonGenerator write(boolean value) {
             if (isWritingPrimitive()) {
-                state = WritingState.PRIMITIVE;
+                state = WritingState.DONT_WRITE_END;
                 return delegate.write(keyIfNoObject, value);
             }
             return delegate.write(value);
@@ -254,7 +259,7 @@ public class DynamicMappingGenerator implements MappingGenerator {
         @Override
         public JsonGenerator writeNull() {
             if (isWritingPrimitive()) {
-                state = WritingState.PRIMITIVE;
+                state = WritingState.DONT_WRITE_END;
                 return delegate.writeNull(keyIfNoObject);
             }
             return delegate.writeNull();
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java
index 1f5a0a38..b7d16298 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java
@@ -371,8 +371,23 @@ public class MappingGeneratorImpl implements MappingGenerator {
             writeMapBody((Map<?, ?>) value, itemConverter);
             generator.writeEnd();
         } else if (primitive || (dynamic && Mappings.isPrimitive(type))) {
-            writePrimitives(key, type, value, generator);
+            if (objectConverter != null) {
+                final DynamicMappingGenerator dynamicMappingGenerator = new DynamicMappingGenerator(this,
+                        () -> this.generator.writeStartObject(key), this.generator::writeEnd, key);
+                objectConverter.writeJson(value, dynamicMappingGenerator);
+                dynamicMappingGenerator.flushIfNeeded();
+            } else {
+                writePrimitives(key, type, value, generator);
+            }
         } else {
+            if (objectConverter != null) {
+                final DynamicMappingGenerator dynamicMappingGenerator = new DynamicMappingGenerator(this,
+                        () -> this.generator.writeStartObject(key), this.generator::writeEnd, key);
+                objectConverter.writeJson(value, dynamicMappingGenerator);
+                dynamicMappingGenerator.flushIfNeeded();
+                return;
+            }
+
             final Adapter converter = config.findAdapter(type);
             if (converter != null) {
                 final Object adapted = doConvertFrom(value, converter);
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
index 198c5732..63549a42 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
@@ -335,7 +335,9 @@ public class MappingParserImpl implements MappingParser {
                         }
                     }
                 }
-                final Object convertedValue = toValue(existingInstance, jsonValue, value.converter, value.itemConverter, value.paramType, value.objectConverter,
+                final Object convertedValue = toValue(
+                        existingInstance, jsonValue, value.converter, value.itemConverter,
+                        value.paramType, value.objectConverter,
                         new JsonPointerTracker(jsonPointer, setter.getKey()), inType);
                 if (convertedValue != null) {
                     setterMethod.write(t, convertedValue);
@@ -727,12 +729,7 @@ public class MappingParserImpl implements MappingParser {
                            final JsonPointerTracker jsonPointer, final Type rootType) {
 
         if (objectConverter != null) {
-            
-            if (jsonValue instanceof JsonArray) {
-                return buildArray(type, jsonValue.asJsonArray(), itemConverter, objectConverter, jsonPointer, rootType);
-            } else {
-                return objectConverter.fromJson(jsonValue, type, this);
-            }
+            return objectConverter.fromJson(jsonValue, type, this);
         }
 
         try {
