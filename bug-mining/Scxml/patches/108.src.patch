diff --git a/src/main/java/org/apache/commons/scxml2/env/javascript/JSBindings.java b/src/main/java/org/apache/commons/scxml2/env/javascript/JSBindings.java
index ec48c12f..85bef0f7 100644
--- a/src/main/java/org/apache/commons/scxml2/env/javascript/JSBindings.java
+++ b/src/main/java/org/apache/commons/scxml2/env/javascript/JSBindings.java
@@ -326,7 +326,7 @@ public class JSBindings implements Bindings {
      * </p>
      * @return true if a global bindings (i.e. nashorn Global instance) was ever set by the script engine
      */
-    private boolean hasGlobalBindings() {
+    boolean hasGlobalBindings() {
         if (bindings.containsKey(NASHORN_GLOBAL)) {
             return true;
         }
@@ -338,7 +338,7 @@ public class JSBindings implements Bindings {
      * Return the global bindings (i.e. nashorn Global instance) set by the script engine if existing.
      * @return the global bindings (i.e. nashorn Global instance) set by the script engine, or null if not existing.
      */
-    private Bindings getGlobalBindings() {
+    Bindings getGlobalBindings() {
         if (bindings.containsKey(NASHORN_GLOBAL)) {
             return (Bindings) bindings.get(NASHORN_GLOBAL);
         }
diff --git a/src/main/java/org/apache/commons/scxml2/env/javascript/JSContext.java b/src/main/java/org/apache/commons/scxml2/env/javascript/JSContext.java
index 95f59bef..d63d25a9 100644
--- a/src/main/java/org/apache/commons/scxml2/env/javascript/JSContext.java
+++ b/src/main/java/org/apache/commons/scxml2/env/javascript/JSContext.java
@@ -17,6 +17,8 @@
 
 package org.apache.commons.scxml2.env.javascript;
 
+import java.util.Map;
+
 import org.apache.commons.scxml2.Context;
 import org.apache.commons.scxml2.env.SimpleContext;
 
@@ -43,6 +45,15 @@ public class JSContext extends SimpleContext {
         super();
     }
 
+    /**
+     * Constructor with initial vars.
+     * @param parent The parent context
+     * @param initialVars The initial set of variables.
+     */
+    public JSContext(final Context parent, final Map<String, Object> initialVars) {
+        super(parent, initialVars);
+    }
+
     /**
      * Child constructor. Just invokes the identical SimpleContext
      * constructor.
@@ -50,7 +61,7 @@ public class JSContext extends SimpleContext {
      * @param parent Parent context for this context.
      *
      */
-    public JSContext(Context parent) {
+    public JSContext(final Context parent) {
         super(parent);
     }
 
diff --git a/src/main/java/org/apache/commons/scxml2/env/javascript/JSEvaluator.java b/src/main/java/org/apache/commons/scxml2/env/javascript/JSEvaluator.java
index 4c64ea21..8b47e931 100644
--- a/src/main/java/org/apache/commons/scxml2/env/javascript/JSEvaluator.java
+++ b/src/main/java/org/apache/commons/scxml2/env/javascript/JSEvaluator.java
@@ -30,6 +30,7 @@ import org.apache.commons.scxml2.Evaluator;
 import org.apache.commons.scxml2.EvaluatorProvider;
 import org.apache.commons.scxml2.SCXMLExpressionException;
 import org.apache.commons.scxml2.XPathBuiltin;
+import org.apache.commons.scxml2.env.EffectiveContextMap;
 import org.apache.commons.scxml2.model.SCXML;
 
 /**
@@ -71,6 +72,10 @@ public class JSEvaluator implements Evaluator {
         }
     }
 
+    /** Error message if evaluation context is not a JexlContext. */
+    private static final String ERR_CTX_TYPE = "Error evaluating JavaScript "
+        + "expression, Context must be a org.apache.commons.scxml2.env.javascript.JSContext";
+
     /** Pattern for recognizing the SCXML In() special predicate. */
     private static final Pattern IN_FN = Pattern.compile("In\\(");
     /** Pattern for recognizing the Commons SCXML Data() builtin function. */
@@ -124,8 +129,17 @@ public class JSEvaluator implements Evaluator {
      * @throws SCXMLExpressionException Thrown if the expression was invalid.
      */
     @Override
-    public Object eval(Context context,String expression) throws SCXMLExpressionException {
+    public Object eval(Context context, String expression) throws SCXMLExpressionException {
+        if (expression == null) {
+            return null;
+        }
+
+        if (!(context instanceof JSContext)) {
+            throw new SCXMLExpressionException(ERR_CTX_TYPE);
+        }
+
         try {
+            JSContext effectiveContext = getEffectiveContext((JSContext) context);
 
             // ... initialize
             ScriptEngine engine   = factory.getEngineByName("JavaScript");
@@ -137,9 +151,15 @@ public class JSEvaluator implements Evaluator {
             jsExpression = LOCATION_FN.matcher(jsExpression).replaceAll("_builtin.Location(");
 
             // ... evaluate
-            JSBindings jsBindings = new JSBindings(context, bindings);
-            jsBindings.put("_builtin", new JSFunctions(context));
-            return engine.eval(jsExpression,jsBindings);
+            JSBindings jsBindings = new JSBindings(effectiveContext, bindings);
+            jsBindings.put("_builtin", new JSFunctions(effectiveContext));
+
+            Object ret = engine.eval(jsExpression, jsBindings);
+
+            // copy global bindings attributes to context, so callers may get access to the evaluated variables.
+            copyGlobalBindingsToContext(jsBindings, (JSContext) effectiveContext);
+
+            return ret;
 
         } catch (Exception x) {
             throw new SCXMLExpressionException("Error evaluating ['" + expression + "'] " + x);
@@ -159,15 +179,15 @@ public class JSEvaluator implements Evaluator {
      *                                  not return a boolean.
      */
     @Override
-    public Boolean evalCond(Context context,String expression) throws SCXMLExpressionException {
-        final Object result = eval(context,expression);
+    public Boolean evalCond(Context context, String expression) throws SCXMLExpressionException {
+        final Object result = eval(context, expression);
 
         if (result == null) {
-           return Boolean.FALSE;
+            return Boolean.FALSE;
         }
 
         if (result instanceof Boolean) {
-           return (Boolean)result;
+            return (Boolean)result;
         }
 
         throw new SCXMLExpressionException("Invalid boolean expression: " + expression);
@@ -186,13 +206,13 @@ public class JSEvaluator implements Evaluator {
      * @throws SCXMLExpressionException Thrown if the expression was invalid.
      */
     @Override
-    public Object evalLocation(Context context,String expression) throws SCXMLExpressionException {
+    public Object evalLocation(Context context, String expression) throws SCXMLExpressionException {
         if (expression == null) {
             return null;
-        }
-        else if (context.has(expression)) {
+        } else if (context.has(expression)) {
             return expression;
         }
+
         return eval(context, expression);
     }
 
@@ -203,23 +223,21 @@ public class JSEvaluator implements Evaluator {
                            final String attr) throws SCXMLExpressionException {
 
         Object loc = evalLocation(ctx, location);
-        if (loc != null) {
 
+        if (loc != null) {
             if (XPathBuiltin.isXPathLocation(ctx, loc)) {
                 XPathBuiltin.assign(ctx, loc, data, type, attr);
-            }
-            else {
+            } else {
                 StringBuilder sb = new StringBuilder(location).append("=").append(ASSIGN_VARIABLE_NAME);
+
                 try {
                     ctx.getVars().put(ASSIGN_VARIABLE_NAME, data);
                     eval(ctx, sb.toString());
-                }
-                finally {
+                } finally {
                     ctx.getVars().remove(ASSIGN_VARIABLE_NAME);
                 }
             }
-        }
-        else {
+        } else {
             throw new SCXMLExpressionException("evalAssign - cannot resolve location: '" + location + "'");
         }
     }
@@ -239,8 +257,37 @@ public class JSEvaluator implements Evaluator {
      * @throws SCXMLExpressionException Thrown if the script was invalid.
      */
     @Override
-    public Object evalScript(Context ctx, String script)
-    throws SCXMLExpressionException {
+    public Object evalScript(Context ctx, String script) throws SCXMLExpressionException {
         return eval(ctx, script);
     }
+
+    /**
+     * Create a new context which is the summation of contexts from the
+     * current state to document root, child has priority over parent
+     * in scoping rules.
+     *
+     * @param nodeCtx The JexlContext for this state.
+     * @return The effective JexlContext for the path leading up to
+     *         document root.
+     */
+    protected JSContext getEffectiveContext(final JSContext nodeCtx) {
+        return new JSContext(nodeCtx, new EffectiveContextMap(nodeCtx));
+    }
+
+    /**
+     * Copy the global Bindings (i.e. nashorn Global instance) attributes to {@code jsContext}
+     * in order to make sure all the new global variables set by the JavaScript engine after evaluation
+     * available from {@link JSContext} instance as well.
+     * @param jsBindings
+     * @param jsContext
+     */
+    private void copyGlobalBindingsToContext(final JSBindings jsBindings, final JSContext jsContext) {
+        Bindings globalBindings = jsBindings.getGlobalBindings();
+
+        if (globalBindings != null) {
+            for (String key : globalBindings.keySet()) {
+                jsContext.set(key, globalBindings.get(key));
+            }
+        }
+    }
 }
diff --git a/src/test/java/org/apache/commons/scxml2/env/javascript/JSEvaluatorTest.java b/src/test/java/org/apache/commons/scxml2/env/javascript/JSEvaluatorTest.java
index 45cae01b..28d923e4 100644
--- a/src/test/java/org/apache/commons/scxml2/env/javascript/JSEvaluatorTest.java
+++ b/src/test/java/org/apache/commons/scxml2/env/javascript/JSEvaluatorTest.java
@@ -19,6 +19,10 @@ package org.apache.commons.scxml2.env.javascript;
 
 import java.io.StringReader;
 
+import javax.xml.xpath.XPath;
+import javax.xml.xpath.XPathConstants;
+import javax.xml.xpath.XPathFactory;
+
 import org.apache.commons.scxml2.Context;
 import org.apache.commons.scxml2.Evaluator;
 import org.apache.commons.scxml2.SCXMLExecutor;
@@ -31,10 +35,6 @@ import org.junit.Test;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
 
-import javax.xml.xpath.XPath;
-import javax.xml.xpath.XPathConstants;
-import javax.xml.xpath.XPathFactory;
-
 /** JUnit 3 test case for the JSEvaluator expression evaluator
  *  class. Includes basic tests for:
  *  <ul>
@@ -145,6 +145,21 @@ public class JSEvaluatorTest {
         Assert.assertTrue   (((Boolean) evaluator.eval(context, "1+1 == 2")).booleanValue());
     }
 
+    @Test
+    public void testScript() throws SCXMLExpressionException {
+        Evaluator evaluator = new JSEvaluator();
+        context.set("x", 3);
+        context.set("y", 0);
+        String script = 
+            "if ((x * 2.0) == 5.0) {" +
+                "y = 1.0;\n" +
+            "} else {\n" +
+                "y = 2.0;\n" +
+            "}";
+        Assert.assertEquals(2.0, evaluator.evalScript(context, script));
+        Assert.assertEquals(2.0, context.get("y"));
+    }
+
     /**
      * Tests handling of illegal expressions.
      *
