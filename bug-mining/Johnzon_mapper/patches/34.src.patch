diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
index 7854d3be..68e08688 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
@@ -40,7 +40,6 @@ import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Comparator;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
@@ -58,12 +57,11 @@ public class Mapper implements Closeable {
     protected final Collection<Closeable> closeables;
 
     Mapper(final JsonReaderFactory readerFactory, final JsonGeneratorFactory generatorFactory, MapperConfig config,
-                  final Comparator<String> attributeOrder,
                   final Collection<Closeable> closeables) {
         this.readerFactory = readerFactory;
         this.generatorFactory = generatorFactory;
         this.config = config;
-        this.mappings = new Mappings(attributeOrder, config.getAccessMode(), config.getVersion(), config.getAdapters());
+        this.mappings = new Mappings(config);
         this.readerHandler = ReaderHandler.create(readerFactory);
         this.closeables = closeables;
     }
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
index d619d856..d354950d 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
@@ -191,8 +191,7 @@ public class MapperBuilder {
                         version, close,
                         skipNull, skipEmptyArray,
                         treatByteArrayAsBase64, treatByteArrayAsBase64URL, readAttributeBeforeWrite,
-                        accessMode, encoding),
-                attributeOrder,
+                        accessMode, encoding, attributeOrder),
                 closeables);
     }
 
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
index d650769a..08bd77de 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
@@ -25,6 +25,7 @@ import org.apache.johnzon.mapper.internal.ConverterAdapter;
 
 import java.lang.reflect.Type;
 import java.nio.charset.Charset;
+import java.util.Comparator;
 import java.util.Map;
 import java.util.concurrent.ConcurrentMap;
 
@@ -44,14 +45,19 @@ class MapperConfig implements Cloneable {
     private final Charset encoding;
     private final ConcurrentMap<AdapterKey, Adapter<?, ?>> adapters;
     private final Map<Class<?>, ObjectConverter<?>> objectConverters;
+    private final Comparator<String> attributeOrder;
 
+    //disable checkstyle for 10+ parameters
+    //CHECKSTYLE:OFF
     public MapperConfig(final ConcurrentMap<AdapterKey, Adapter<?, ?>> adapters,
                         final Map<Class<?>, ObjectConverter<?>> objectConverters,
                         final int version, final boolean close,
                         final boolean skipNull, final boolean skipEmptyArray,
                         final boolean treatByteArrayAsBase64, final boolean treatByteArrayAsBase64URL,
                         final boolean readAttributeBeforeWrite,
-                        final AccessMode accessMode, final Charset encoding) {
+                        final AccessMode accessMode, final Charset encoding,
+                        final Comparator<String> attributeOrder) {
+    //CHECKSTYLE:ON
         this.objectConverters = objectConverters;
         this.version = version;
         this.close = close;
@@ -63,6 +69,7 @@ class MapperConfig implements Cloneable {
         this.accessMode = accessMode;
         this.encoding = encoding;
         this.adapters = adapters;
+        this.attributeOrder = attributeOrder;
     }
 
     public Adapter findAdapter(final Type aClass) {
@@ -124,4 +131,8 @@ class MapperConfig implements Cloneable {
     public Map<Class<?>, ObjectConverter<?>> getObjectConverters() {
         return objectConverters;
     }
+
+    public Comparator<String> getAttributeOrder() {
+        return attributeOrder;
+    }
 }
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mappings.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mappings.java
index f95a51ee..52a6ecab 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mappings.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mappings.java
@@ -175,17 +175,12 @@ public class Mappings {
 
     protected final ConcurrentMap<Type, ClassMapping> classes = new ConcurrentHashMap<Type, ClassMapping>();
     protected final ConcurrentMap<Type, CollectionMapping> collections = new ConcurrentHashMap<Type, CollectionMapping>();
-    protected final Comparator<String> fieldOrdering;
-    protected final ConcurrentMap<AdapterKey, Adapter<?, ?>> adapters;
-    private final AccessMode accessMode;
-    private final int version;
-
-    public Mappings(final Comparator<String> attributeOrder, final AccessMode accessMode,
-                    final int version, final ConcurrentMap<AdapterKey, Adapter<?, ?>> adapters) {
-        this.fieldOrdering = attributeOrder;
-        this.accessMode = accessMode;
-        this.version = version;
-        this.adapters = adapters;
+
+    protected final MapperConfig config;
+
+
+    public Mappings(final MapperConfig config) {
+        this.config = config;
     }
 
     public <T> CollectionMapping findCollectionMapping(final ParameterizedType genericType) {
@@ -287,8 +282,10 @@ public class Mappings {
         }
         final Class<?> clazz = findModelClass(inClazz);
 
+        AccessMode accessMode = config.getAccessMode();
+
         Comparator<String> fieldComparator = accessMode.fieldComparator(inClazz);
-        fieldComparator = fieldComparator == null ? fieldOrdering : fieldComparator;
+        fieldComparator = fieldComparator == null ? config.getAttributeOrder() : fieldComparator;
 
         final Map<String, Getter> getters = fieldComparator == null ? newOrderedMap(Getter.class) : new TreeMap<String, Getter>(fieldComparator);
         final Map<String, Setter> setters = fieldComparator == null ? newOrderedMap(Setter.class) : new TreeMap<String, Setter>(fieldComparator);
@@ -344,7 +341,7 @@ public class Mappings {
     }
 
     private <T> Map<String, T> newOrderedMap(final Class<T> value) {
-        return fieldOrdering != null ? new TreeMap<String, T>(fieldOrdering) : new HashMap<String, T>();
+        return config.getAttributeOrder() != null ? new TreeMap<String, T>(config.getAttributeOrder()) : new HashMap<String, T>();
     }
 
     private void addSetterIfNeeded(final Map<String, Setter> setters,
@@ -426,7 +423,7 @@ public class Mappings {
         final String key = path[0];
 
         final Getter getter = getters.get(key);
-        final MapBuilderReader newReader = new MapBuilderReader(objectGetters, path, version);
+        final MapBuilderReader newReader = new MapBuilderReader(objectGetters, path, config.getVersion());
         getters.put(key, new Getter(getter == null ? newReader : new CompositeReader(getter.reader, newReader), false, false, false, true, null, -1));
 
         final Setter newSetter = setters.get(key);
@@ -466,6 +463,8 @@ public class Mappings {
         }
         if (converter == null && Class.class.isInstance(typeToTest)) {
             final Class type = Class.class.cast(typeToTest);
+            ConcurrentMap<AdapterKey, Adapter<?, ?>> adapters = config.getAdapters();
+
             if (Date.class.isAssignableFrom(type) && copyDate) {
                 converter = new DateWithCopyConverter(Adapter.class.cast(adapters.get(new AdapterKey(Date.class, String.class))));
             } else if (type.isEnum()) {
