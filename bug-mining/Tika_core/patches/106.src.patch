diff --git a/tika-core/src/main/java/org/apache/tika/io/TaggedInputStream.java b/tika-core/src/main/java/org/apache/tika/io/TaggedInputStream.java
index f63e6118e..a5810a3fd 100644
--- a/tika-core/src/main/java/org/apache/tika/io/TaggedInputStream.java
+++ b/tika-core/src/main/java/org/apache/tika/io/TaggedInputStream.java
@@ -18,6 +18,8 @@ package org.apache.tika.io;
 
  import java.io.IOException;
 import java.io.InputStream;
+import java.io.Serializable;
+import java.util.UUID;
 
 /**
  * An input stream decorator that tags potential exceptions so that the
@@ -58,6 +60,11 @@ import java.io.InputStream;
  */
 public class TaggedInputStream extends ProxyInputStream {
 
+    /**
+     * The unique (serializable) tag of this stream.
+     */
+    private final Serializable tag = UUID.randomUUID();
+
     /**
      * Creates a tagging decorator for the given input stream.
      *
@@ -90,7 +97,7 @@ public class TaggedInputStream extends ProxyInputStream {
     public boolean isCauseOf(IOException exception) {
         if (exception instanceof TaggedIOException) {
             TaggedIOException tagged = (TaggedIOException) exception;
-            return this == tagged.getTag();
+            return tag.equals(tagged.getTag());
         } else {
             return false;
         }
@@ -109,7 +116,7 @@ public class TaggedInputStream extends ProxyInputStream {
     public void throwIfCauseOf(Exception exception) throws IOException {
         if (exception instanceof TaggedIOException) {
             TaggedIOException tagged = (TaggedIOException) exception;
-            if (this == tagged.getTag()) {
+            if (tag.equals(tagged.getTag())) {
                 throw tagged.getCause();
             }
         }
@@ -123,10 +130,10 @@ public class TaggedInputStream extends ProxyInputStream {
      */
     @Override
     protected void handleIOException(IOException e) throws IOException {
-        throw new TaggedIOException(e, this);
+        throw new TaggedIOException(e, tag);
     }
 
     public String toString() {
-        return "Tika Tagged InputStream wrapping " + in.toString(); 
+        return "Tika Tagged InputStream wrapping " + in;
     }
 }
diff --git a/tika-core/src/test/java/org/apache/tika/io/TaggedInputStreamTest.java b/tika-core/src/test/java/org/apache/tika/io/TaggedInputStreamTest.java
new file mode 100644
index 000000000..36e0e8366
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/io/TaggedInputStreamTest.java
@@ -0,0 +1,55 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tika.io;
+
+import org.junit.Test;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.ObjectOutputStream;
+
+import static org.junit.Assert.fail;
+
+public class TaggedInputStreamTest {
+
+    @Test
+    public void createdIOExceptionIsSerializable() {
+        try {
+            new TaggedInputStream(null).handleIOException(new IOException("Dummy"));
+        } catch (IOException e) {
+            assertCanSerialize(e);
+        }
+    }
+
+    private static void assertCanSerialize(Object e) {
+        ByteArrayOutputStream out = new ByteArrayOutputStream();
+        ObjectOutputStream oos = null;
+        try {
+            oos = new ObjectOutputStream(out);
+            oos.writeObject(e);
+        } catch (IOException e1) {
+            fail(e1.getMessage());
+        } finally {
+            if (oos != null)
+                try {
+                    oos.close();
+                } catch (IOException ignore) {
+                }
+        }
+    }
+
+}
\ No newline at end of file
