diff --git a/src/java/org/apache/commons/fileupload/FileUploadBase.java b/src/java/org/apache/commons/fileupload/FileUploadBase.java
index 52a2fb63..ae330e83 100644
--- a/src/java/org/apache/commons/fileupload/FileUploadBase.java
+++ b/src/java/org/apache/commons/fileupload/FileUploadBase.java
@@ -391,7 +391,7 @@ public abstract class FileUploadBase {
         ParameterParser parser = new ParameterParser();
         parser.setLowerCaseNames(true);
         // Parameter parser can handle null input
-        Map params = parser.parse(contentType, ';');
+        Map params = parser.parse(contentType, new char[] {';', ','});
         String boundaryStr = (String) params.get("boundary");
 
         if (boundaryStr == null) {
diff --git a/src/java/org/apache/commons/fileupload/ParameterParser.java b/src/java/org/apache/commons/fileupload/ParameterParser.java
index cd220e2d..565cf7e4 100644
--- a/src/java/org/apache/commons/fileupload/ParameterParser.java
+++ b/src/java/org/apache/commons/fileupload/ParameterParser.java
@@ -214,6 +214,36 @@ public class ParameterParser {
         this.lowerCaseNames = b;
     }
 
+    /**
+     * Extracts a map of name/value pairs from the given string. Names are
+     * expected to be unique. Multiple separators may be specified and 
+     * the earliest found in the input string is used.
+     *
+     * @param str the string that contains a sequence of name/value pairs
+     * @param separator the name/value pairs separators
+     *
+     * @return a map of name/value pairs
+     */
+    public Map parse(final String str, char[] separators) {
+        if (separators == null || separators.length == 0) {
+            return new HashMap();
+        }
+        char separator = separators[0];
+        if (str != null) {
+            int idx = str.length();
+            for (int i=0; i<separators.length; i++) {
+                int tmp = str.indexOf(separators[i]);
+                if (tmp != -1) {
+                    if (tmp < idx) {
+                        idx = tmp;
+                        separator = separators[i];
+                    }
+                }
+            }
+        }
+        return parse(str, separator);
+    }
+
     /**
      * Extracts a map of name/value pairs from the given string. Names are
      * expected to be unique.
diff --git a/src/test/org/apache/commons/fileupload/ParameterParserTest.java b/src/test/org/apache/commons/fileupload/ParameterParserTest.java
index 1c8ee44f..dc75fb13 100644
--- a/src/test/org/apache/commons/fileupload/ParameterParserTest.java
+++ b/src/test/org/apache/commons/fileupload/ParameterParserTest.java
@@ -60,6 +60,12 @@ public class ParameterParserTest extends TestCase
         assertEquals("stuff; stuff", params.get("test2"));
         assertEquals("\"stuff", params.get("test3"));
 
+        params = parser.parse(s, new char[] { ',', ';' });
+        assertEquals(null, params.get("test"));
+        assertEquals("stuff", params.get("test1"));
+        assertEquals("stuff; stuff", params.get("test2"));
+        assertEquals("\"stuff", params.get("test3"));
+
         s = "  test  , test1=stuff   ,  , test2=, test3, ";
         params = parser.parse(s, ',');
         assertEquals(null, params.get("test"));
@@ -103,4 +109,21 @@ public class ParameterParserTest extends TestCase
         assertEquals("stuff\\\\", params.get("param"));
         assertNull(params.get("anotherparam"));
     }
+
+    // See: http://issues.apache.org/jira/browse/FILEUPLOAD-139
+    public void testFileUpload139() 
+    {
+        ParameterParser parser = new ParameterParser();
+        String s = "Content-type: multipart/form-data , boundary=AaB03x";
+        Map params = parser.parse(s, new char[] { ',', ';' });
+        assertEquals("AaB03x", params.get("boundary"));
+
+        s = "Content-type: multipart/form-data, boundary=AaB03x";
+        params = parser.parse(s, new char[] { ';', ',' });
+        assertEquals("AaB03x", params.get("boundary"));
+
+        s = "Content-type: multipart/mixed, boundary=BbC04y";
+        params = parser.parse(s, new char[] { ',', ';' });
+        assertEquals("BbC04y", params.get("boundary"));
+    }
 }
