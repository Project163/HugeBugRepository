diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index be178a1e..b5f457bd 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -157,6 +157,10 @@ The <action> type attribute can be add,update,fix,remove.
         made to commit the current transaction for a connection when no
         transaction has been started.
       </action>
+      <action dev="markt" issue="DBCP-372" type="fix">
+        Using batchUpdate() should not invalidate the PreparedStatement when it
+        is returned to the pool.
+      </action>
     </release>
     <release version="1.4.1" date="TBD" description="TBD">
       <action dev="psteitz" issue="DBCP-334" type="update" due-to="Alberto Mozzone">
diff --git a/src/main/java/org/apache/commons/dbcp2/PoolablePreparedStatement.java b/src/main/java/org/apache/commons/dbcp2/PoolablePreparedStatement.java
index 9891face..b1e44836 100644
--- a/src/main/java/org/apache/commons/dbcp2/PoolablePreparedStatement.java
+++ b/src/main/java/org/apache/commons/dbcp2/PoolablePreparedStatement.java
@@ -121,6 +121,11 @@ public class PoolablePreparedStatement<K, S extends PoolablePreparedStatement<K,
 
     @Override
     public void passivate() throws SQLException {
+        // DBCP-372. clearBatch with throw an exception if called when the
+        // connection is marked as closed.
+        if (batchAdded) {
+            clearBatch();
+        }
         setClosedInternal(true);
         if(getConnectionInternal() != null) {
             getConnectionInternal().removeTrace(this);
@@ -138,9 +143,6 @@ public class PoolablePreparedStatement<K, S extends PoolablePreparedStatement<K,
             }
             clearTrace();
         }
-        if (batchAdded) {
-            clearBatch();
-        }
 
         super.passivate();
     }
diff --git a/src/test/java/org/apache/commons/dbcp2/TestPStmtPooling.java b/src/test/java/org/apache/commons/dbcp2/TestPStmtPooling.java
index cf7bc4fe..f905406e 100644
--- a/src/test/java/org/apache/commons/dbcp2/TestPStmtPooling.java
+++ b/src/test/java/org/apache/commons/dbcp2/TestPStmtPooling.java
@@ -19,6 +19,7 @@ package org.apache.commons.dbcp2;
 
 import java.sql.Connection;
 import java.sql.Driver;
+import java.sql.PreparedStatement;
 import java.sql.Statement;
 import java.sql.SQLException;
 
@@ -30,6 +31,7 @@ import junit.framework.TestSuite;
 
 import org.apache.commons.pool2.ObjectPool;
 import org.apache.commons.pool2.impl.GenericObjectPool;
+import org.junit.Assert;
 
 /**
  * TestSuite for BasicDataSource with prepared statement pooling enabled
@@ -141,4 +143,30 @@ public class TestPStmtPooling extends TestCase {
             assertTrue(ex.getMessage().endsWith("invalid PoolingConnection."));
         }
     }
+
+    public void testBatchUpdate() throws Exception {
+        @SuppressWarnings("unused") // Ensure TesterDriver is registered
+        Driver d = new TesterDriver();
+        ConnectionFactory connFactory = new DriverManagerConnectionFactory(
+                "jdbc:apache:commons:testdriver","u1","p1");
+
+        PoolableConnectionFactory pcf =
+            new PoolableConnectionFactory(connFactory, null);
+        pcf.setPoolStatements(true);
+        pcf.setDefaultReadOnly(false);
+        pcf.setDefaultAutoCommit(true);
+        ObjectPool<PoolableConnection> connPool = new GenericObjectPool<>(pcf);
+        pcf.setPool(connPool);
+
+        DataSource ds = new PoolingDataSource<>(connPool);
+
+        Connection conn = ds.getConnection();
+        PreparedStatement ps = conn.prepareStatement("select 1 from dual");
+        Statement inner = ((DelegatingPreparedStatement) ps).getInnermostDelegate();
+        // Check DBCP-372
+        ps.addBatch();
+        ps.close();
+        conn.close();
+        Assert.assertFalse(inner.isClosed());
+    }
 }
diff --git a/src/test/java/org/apache/commons/dbcp2/TesterStatement.java b/src/test/java/org/apache/commons/dbcp2/TesterStatement.java
index 75466b88..b65448f9 100644
--- a/src/test/java/org/apache/commons/dbcp2/TesterStatement.java
+++ b/src/test/java/org/apache/commons/dbcp2/TesterStatement.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -25,7 +25,7 @@ import java.sql.Statement;
 
 /**
  * A dummy {@link Statement}, for testing purposes.
- * 
+ *
  * @author Rodney Waldhoff
  * @author Dirk Verbeeck
  * @version $Revision$ $Date$
@@ -40,7 +40,7 @@ public class TesterStatement implements Statement {
         _resultSetType = resultSetType;
         _resultSetConcurrency = resultSetConcurrency;
     }
-    
+
     protected Connection _connection = null;
     protected boolean _open = true;
     protected int _rowsUpdated = 1;
@@ -61,20 +61,20 @@ public class TesterStatement implements Statement {
         checkOpen();
         if("null".equals(sql)) {
             return null;
-        } 
+        }
         if("invalid".equals(sql)) {
             throw new SQLException("invalid query");
         }
         if ("broken".equals(sql)) {
             throw new SQLException("broken connection");
-        }  
+        }
         if("select username".equals(sql)) {
             String username = ((TesterConnection) _connection).getUsername();
             Object[][] data = {{username}};
             return new TesterResultSet(this, data);
         } else {
             // Simulate timeout if queryTimout is set to less than 5 seconds
-            if (_queryTimeout > 0 && _queryTimeout < 5) { 
+            if (_queryTimeout > 0 && _queryTimeout < 5) {
                 throw new SQLException("query timeout");
             }
             return new TesterResultSet(this);
@@ -178,7 +178,7 @@ public class TesterStatement implements Statement {
     public ResultSet getResultSet() throws SQLException {
         checkOpen();
         if (_resultSet == null) {
-            _resultSet = new TesterResultSet(this); 
+            _resultSet = new TesterResultSet(this);
         }
         return _resultSet;
     }
@@ -325,7 +325,7 @@ public class TesterStatement implements Statement {
 
     @Override
     public boolean isClosed() throws SQLException {
-        throw new SQLException("Not implemented.");
+        return !_open;
     }
 
     @Override
