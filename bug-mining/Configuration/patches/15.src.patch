diff --git a/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java b/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java
index b5a45a68..2f06360a 100644
--- a/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java
+++ b/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java
@@ -410,7 +410,15 @@ public class HierarchicalConfiguration extends AbstractConfiguration implements
             return new HierarchicalConfiguration();
         }
 
-        HierarchicalConfiguration result = new HierarchicalConfiguration();
+        final HierarchicalConfiguration parent = this;
+        HierarchicalConfiguration result = new HierarchicalConfiguration()
+        {
+            // Override interpolate to always interpolate on the parent
+            protected Object interpolate(Object value)
+            {
+                return parent.interpolate(value);
+            }
+        };
         CloneVisitor visitor = new CloneVisitor();
 
         for (Iterator it = nodes.iterator(); it.hasNext();)
diff --git a/src/test/org/apache/commons/configuration/TestHierarchicalConfiguration.java b/src/test/org/apache/commons/configuration/TestHierarchicalConfiguration.java
index c0481ed7..4957f6c7 100644
--- a/src/test/org/apache/commons/configuration/TestHierarchicalConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestHierarchicalConfiguration.java
@@ -668,6 +668,26 @@ public class TestHierarchicalConfiguration extends TestCase
 		checkContent(copy);
 	}
 
+    /**
+     * Tests interpolation facilities.
+     */
+    public void testInterpolation()
+    {
+        config.addProperty("base.dir", "/home/foo");
+        config.addProperty("test.absolute.dir.dir1", "${base.dir}/path1");
+        config.addProperty("test.absolute.dir.dir2", "${base.dir}/path2");
+        config.addProperty("test.absolute.dir.dir3", "${base.dir}/path3");
+
+        Configuration sub = config.subset("test.absolute.dir");
+        for (int i = 1; i < 4; i++)
+        {
+            assertEquals("Wrong interpolation in parent", "/home/foo/path" + i,
+                    config.getString("test.absolute.dir.dir" + i));
+            assertEquals("Wrong interpolation in subnode",
+                    "/home/foo/path" + i, sub.getString("dir" + i));
+        }
+    }
+
 	/**
      * Tests the copy constructor when a null reference is passed.
      */
@@ -679,7 +699,7 @@ public class TestHierarchicalConfiguration extends TestCase
 
 	/**
      * Helper method for testing the getKeys(String) method.
-     * 
+     *
      * @param prefix the key to pass into getKeys()
      * @param expected the expected result
      */
@@ -746,7 +766,7 @@ public class TestHierarchicalConfiguration extends TestCase
 	/**
      * Checks the content of the passed in configuration object. Used by some
      * tests that copy a configuration.
-     * 
+     *
      * @param c the configuration to check
      */
 	private void checkContent(Configuration c)
diff --git a/src/test/org/apache/commons/configuration/TestSubnodeConfiguration.java b/src/test/org/apache/commons/configuration/TestSubnodeConfiguration.java
index 958466f1..9629baf3 100644
--- a/src/test/org/apache/commons/configuration/TestSubnodeConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestSubnodeConfiguration.java
@@ -292,6 +292,27 @@ public class TestSubnodeConfiguration extends TestCase
                 config.getString("tablespace"));
     }
 
+    /**
+     * An additional test for interpolation when the configurationAt() method is
+     * involved.
+     */
+    public void testInterpolationFromConfigurationAt()
+    {
+        parent.addProperty("base.dir", "/home/foo");
+        parent.addProperty("test.absolute.dir.dir1", "${base.dir}/path1");
+        parent.addProperty("test.absolute.dir.dir2", "${base.dir}/path2");
+        parent.addProperty("test.absolute.dir.dir3", "${base.dir}/path3");
+
+        Configuration sub = parent.configurationAt("test.absolute.dir");
+        for (int i = 1; i < 4; i++)
+        {
+            assertEquals("Wrong interpolation in parent", "/home/foo/path" + i,
+                    parent.getString("test.absolute.dir.dir" + i));
+            assertEquals("Wrong interpolation in subnode",
+                    "/home/foo/path" + i, sub.getString("dir" + i));
+        }
+    }
+
     /**
      * Initializes the parent configuration. This method creates the typical
      * structure of tables and fields nodes.
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 05cd11b1..70e2a1fc 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,13 @@
 
   <body>
     <release version="1.4-dev" date="in SVN">
+      <action dev="oheger" type="update" issue="CONFIGURATION-242">
+        The configuration returned by HierarchicalConfiguration.subset()
+        performed variable interpolation only in the keys that belong to the
+        subset. Now the parent configuration is searched, too, to resolve the
+        value of the referenced property. This is consistent with the way
+        SubnodeConfiguration works.
+      </action>
       <action dev="oheger" type="update" issue="CONFIGURATION-234">
         DefaultConfigurationBuilder now internally uses the standard expression
         engine for hierarchical configurations. So the dependency to Commons
