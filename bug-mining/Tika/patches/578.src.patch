diff --git a/tika-server/src/main/java/org/apache/tika/server/TikaLoggingFilter.java b/tika-server/src/main/java/org/apache/tika/server/TikaLoggingFilter.java
new file mode 100644
index 000000000..2344276fd
--- /dev/null
+++ b/tika-server/src/main/java/org/apache/tika/server/TikaLoggingFilter.java
@@ -0,0 +1,49 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.tika.server;
+
+import java.io.IOException;
+
+import javax.ws.rs.container.ContainerRequestContext;
+import javax.ws.rs.container.ContainerRequestFilter;
+import javax.ws.rs.container.PreMatching;
+import javax.ws.rs.ext.Provider;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+@Provider
+@PreMatching
+public class TikaLoggingFilter implements ContainerRequestFilter {
+	private static final Log logger = LogFactory.getLog(TikaServerCli.class);
+	private boolean infoLevel;
+	public TikaLoggingFilter(boolean infoLevel) {
+		this.infoLevel = infoLevel;
+	}
+	@Override
+	public void filter(ContainerRequestContext requestContext) throws IOException {
+		String requestUri = requestContext.getUriInfo().getRequestUri().toString();
+		String logMessage = "Request URI: " + requestUri;
+		if (infoLevel) {
+			logger.info(logMessage);
+		} else {
+			logger.debug(logMessage);
+		}
+	}
+  
+}
diff --git a/tika-server/src/main/java/org/apache/tika/server/TikaServerCli.java b/tika-server/src/main/java/org/apache/tika/server/TikaServerCli.java
index ff166faad..550e48616 100644
--- a/tika-server/src/main/java/org/apache/tika/server/TikaServerCli.java
+++ b/tika-server/src/main/java/org/apache/tika/server/TikaServerCli.java
@@ -18,7 +18,10 @@
 package org.apache.tika.server;
 
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.CommandLineParser;
@@ -39,11 +42,14 @@ public class TikaServerCli {
   private static final Log logger = LogFactory.getLog(TikaServerCli.class);
   public static final int DEFAULT_PORT = 9998;
   public static final String DEFAULT_HOST = "localhost";
-
+  public static final Set<String> LOG_LEVELS = 
+		  new HashSet<String>(Arrays.asList("debug", "info"));
+  
   private static Options getOptions() {
     Options options = new Options();
     options.addOption("h", "host", true, "host name (default = " + DEFAULT_HOST + ')');
     options.addOption("p", "port", true, "listen port (default = " + DEFAULT_PORT + ')');
+    options.addOption("l", "log", true, "request URI log level ('debug' or 'info')");
     options.addOption("?", "help", false, "this help message");
 
     return options;
@@ -77,6 +83,16 @@ public class TikaServerCli {
         port = Integer.valueOf(line.getOptionValue("port"));
       }
       
+      TikaLoggingFilter logFilter = null;
+      if (line.hasOption("log")) {
+        String logLevel = line.getOptionValue("log");
+        if (LOG_LEVELS.contains(logLevel)) {
+            boolean isInfoLevel = "info".equals(logLevel);
+            logFilter = new TikaLoggingFilter(isInfoLevel);
+        } else {
+        	logger.info("Unsupported request URI log level: " + logLevel);
+        }
+      }
       // The Tika Configuration to use throughout
       TikaConfig tika = TikaConfig.getDefaultConfig();
 
@@ -101,6 +117,9 @@ public class TikaServerCli {
       providers.add(new CSVMessageBodyWriter());
       providers.add(new JSONMessageBodyWriter());
       providers.add(new TikaExceptionMapper());
+      if (logFilter != null) {
+    	  providers.add(logFilter);
+      }
       sf.setProviders(providers);
       
       sf.setAddress("http://" + host + ":" + port + "/");
