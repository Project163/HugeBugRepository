diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JohnzonJsonParser.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JohnzonJsonParser.java
index febff3da..cb0a40fd 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JohnzonJsonParser.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JohnzonJsonParser.java
@@ -30,6 +30,7 @@ import javax.json.stream.JsonParser;
  * JsonParser with extended functionality
  */
 public interface JohnzonJsonParser extends JsonParser {
+    boolean isFitLong();
 
     boolean isNotTooLong();
 
@@ -49,6 +50,12 @@ public interface JohnzonJsonParser extends JsonParser {
             this.jsonParser = jsonParser;
         }
 
+        @Override
+        public boolean isFitLong() {
+            return JohnzonJsonParser.class.isInstance(jsonParser) ?
+                    JohnzonJsonParser.class.cast(jsonParser).isFitLong() : false;
+        }
+
         @Override
         public boolean isNotTooLong() {
             return true;
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonArrayImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonArrayImpl.java
index e247d338..73206c07 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonArrayImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonArrayImpl.java
@@ -211,7 +211,7 @@ class JsonArrayImpl extends AbstractList<JsonValue> implements JsonArray, Serial
      * get() on an ArrayList works even faster than ArrayList#iterator!
      */
     private class JsonArrayIterator implements Iterator<JsonValue> {
-        int cursor = 0;
+        private int cursor = 0;
 
         @Override
         public boolean hasNext() {
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonInMemoryParser.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonInMemoryParser.java
index 014d2760..fcea38ae 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonInMemoryParser.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonInMemoryParser.java
@@ -280,6 +280,11 @@ class JsonInMemoryParser extends JohnzonJsonParserImpl {
         return JsonNumber.class.cast(currentValue).longValue();
     }
 
+    @Override
+    public boolean isFitLong() {
+        return JsonLongImpl.class.isInstance(currentValue);
+    }
+
     @Override
     public BigDecimal getBigDecimal() {
         if (currentEvent != Event.VALUE_NUMBER) {
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonReaderImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonReaderImpl.java
index 531e371a..1e3bec46 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonReaderImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonReaderImpl.java
@@ -248,7 +248,7 @@ public class JsonReaderImpl implements JsonReader {
                     break;
 
                 case VALUE_NUMBER:
-                    if (parser.isIntegralNumber()) {
+                    if (parser.isFitLong()) {
                         builder.add(new JsonLongImpl(parser.getLong()));
                     } else {
                         builder.add(new JsonNumberImpl(parser.getBigDecimal()));
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonStreamParserImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonStreamParserImpl.java
index 79f72aed..9561cd73 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonStreamParserImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonStreamParserImpl.java
@@ -946,6 +946,14 @@ public class JsonStreamParserImpl extends JohnzonJsonParserImpl implements JsonC
 
     }
 
+    @Override
+    public boolean isFitLong() { // not exact but good enough for most cases
+        // no buffer overflow - assumes a buffer can hold a long
+        // + length <= since max long is 9223372036854775807 and min is -9223372036854775808
+        final int len = endOfValueInBuffer - startOfValueInBuffer;
+        return fallBackCopyBufferLength <= 0 && len > 0 && len <= 18;
+    }
+
     @Override
     public BigDecimal getBigDecimal() {
         if (previousEvent != VALUE_NUMBER) {
@@ -954,23 +962,10 @@ public class JsonStreamParserImpl extends JohnzonJsonParserImpl implements JsonC
             //            return currentBigDecimalNumber;
         } else if (isCurrentNumberIntegral && currentIntegralNumber != Integer.MIN_VALUE) {
             return new BigDecimal(currentIntegralNumber);
-        } else if (isCurrentNumberIntegral) {
-            //if there a content in the value buffer read from them, if not use main buffer
-            final Long retVal = fallBackCopyBufferLength > 0 ? parseLongFromChars(fallBackCopyBuffer, 0, fallBackCopyBufferLength)
-                    : parseLongFromChars(buffer, startOfValueInBuffer, endOfValueInBuffer);
-            if (retVal == null) {
-                return (/*currentBigDecimalNumber = */fallBackCopyBufferLength > 0 ? new BigDecimal(fallBackCopyBuffer, 0,
-                        fallBackCopyBufferLength) : new BigDecimal(buffer, startOfValueInBuffer,
-                        (endOfValueInBuffer - startOfValueInBuffer)));
-            } else {
-                return (/*currentBigDecimalNumber = */new BigDecimal(retVal.longValue()));
-            }
-        } else {
-            //if there a content in the value buffer read from them, if not use main buffer
-            return (/*currentBigDecimalNumber = */fallBackCopyBufferLength > 0 ? new BigDecimal(fallBackCopyBuffer, 0,
-                    fallBackCopyBufferLength) : new BigDecimal(buffer, startOfValueInBuffer, (endOfValueInBuffer - startOfValueInBuffer)));
         }
-
+        //if there a content in the value buffer read from them, if not use main buffer
+        return (/*currentBigDecimalNumber = */fallBackCopyBufferLength > 0 ? new BigDecimal(fallBackCopyBuffer, 0,
+                fallBackCopyBufferLength) : new BigDecimal(buffer, startOfValueInBuffer, (endOfValueInBuffer - startOfValueInBuffer)));
     }
 
     @Override
diff --git a/johnzon-core/src/test/java/org/apache/johnzon/core/BufferStrategyFactoryTest.java b/johnzon-core/src/test/java/org/apache/johnzon/core/BufferStrategyFactoryTest.java
index 895eb835..f1226972 100644
--- a/johnzon-core/src/test/java/org/apache/johnzon/core/BufferStrategyFactoryTest.java
+++ b/johnzon-core/src/test/java/org/apache/johnzon/core/BufferStrategyFactoryTest.java
@@ -77,7 +77,7 @@ public class BufferStrategyFactoryTest {
     }
 
     public static final class DummyBufferStrategy implements BufferStrategy {
-        static AtomicInteger counter = new AtomicInteger(0);
+        private static AtomicInteger counter = new AtomicInteger(0);
         private BufferStrategy delegate = BufferStrategyFactory.valueOf("BY_INSTANCE");
 
         @Override
