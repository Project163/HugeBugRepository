diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 38b7eb45..37997df0 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -73,6 +73,9 @@ The <action> type attribute can be add,update,fix,remove.
         Added check in PoolingDataSource constructor to ensure that the connection factory
         and pool are properly linked.
       </action>
+      <action issue="DBCP-417" dev="psteitz" type="fix">
+        Fixed connection leak when managed connections are closed during transactions.
+      </action>
     </release>
     <release version="2.0" date="3 March 2014" description=
 "This release includes new features as well as bug fixes and enhancements.
diff --git a/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java b/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java
index 9e5b6168..9b37a3d8 100644
--- a/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java
+++ b/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java
@@ -196,7 +196,7 @@ public class ManagedConnection<C extends Connection> extends DelegatingConnectio
                 setDelegate(null);
 
                 if (!delegate.isClosed()) {
-                    super.close();
+                    delegate.close();
                 }
             } catch (SQLException ignored) {
                 // Not a whole lot we can do here as connection is closed
diff --git a/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSource.java b/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSource.java
index 87f14c1d..43b4b89f 100644
--- a/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSource.java
+++ b/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSource.java
@@ -114,7 +114,7 @@ public class TestManagedDataSource extends TestConnectionPool {
     }
 
     /**
-     * Verify that conection sharing is working (or not working) as expected.
+     * Verify that connection sharing is working (or not working) as expected.
      */
     public void testSharedConnection() throws Exception {
         DelegatingConnection<?> connectionA = (DelegatingConnection<?>) newConnection();
@@ -128,7 +128,18 @@ public class TestManagedDataSource extends TestConnectionPool {
         connectionA.close();
         connectionB.close();
     }
+    
+    public void testConnectionReturnOnCommit() throws Exception {
+        transactionManager.begin();
+        DelegatingConnection<?> connectionA = (DelegatingConnection<?>) newConnection();
+        connectionA.close();
+        transactionManager.commit();
+        assertEquals(1, pool.getBorrowedCount());
+        assertEquals(1, pool.getReturnedCount());
+        assertEquals(0, pool.getNumActive());
+    }
 
+    
     public void testManagedConnectionEqualsSameDelegateNoUnderlyingAccess() throws Exception {
         // Get a maximal set of connections from the pool
         Connection[] c = new Connection[getMaxTotal()];
diff --git a/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java b/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java
index ffa3d62a..f82d9a91 100644
--- a/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java
+++ b/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java
@@ -344,5 +344,10 @@ public class TestManagedDataSourceInTx extends TestManagedDataSource {
 
         resultSet.getStatement().getConnection().close();
     }
+    
+    public void testConnectionReturnOnCommit() throws Exception {
+         // override with no-op test
+         return;
+    }
 
 }
