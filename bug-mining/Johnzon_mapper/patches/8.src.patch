diff --git a/johnzon-mapper/pom.xml b/johnzon-mapper/pom.xml
index c28ec274..a8bc0421 100644
--- a/johnzon-mapper/pom.xml
+++ b/johnzon-mapper/pom.xml
@@ -34,6 +34,13 @@
       <artifactId>johnzon-core</artifactId>
       <version>${project.version}</version>
     </dependency>
+
+    <dependency>
+      <groupId>com.github.stefanbirkner</groupId>
+      <artifactId>system-rules</artifactId>
+      <version>1.8.0</version>
+      <scope>test</scope>
+    </dependency>
   </dependencies>
 
   <properties>
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
index 9ad78387..90afc74f 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
@@ -101,12 +101,6 @@ public class MapperBuilder {
         if (readerFactory == null || generatorFactory == null) {
             final JsonProvider provider = JsonProvider.provider();
             final Map<String, Object> config = new HashMap<String, Object>();
-            if (maxSize > 0) {
-                config.put("org.apache.johnzon.max-string-length", maxSize);
-            }
-            if (bufferSize > 0) {
-                config.put("org.apache.johnzon.default-char-buffer", bufferSize);
-            }
             if (bufferStrategy != null) {
                 config.put("org.apache.johnzon.buffer-strategy", bufferStrategy);
             }
@@ -122,6 +116,12 @@ public class MapperBuilder {
             if (supportsComments) {
                 config.put("org.apache.johnzon.supports-comments", "true");
             }
+            if (maxSize > 0) {
+                config.put("org.apache.johnzon.max-string-length", maxSize);
+            }
+            if (bufferSize > 0) {
+                config.put("org.apache.johnzon.default-char-buffer", bufferSize);
+            }
             if (readerFactory == null) {
                 readerFactory = provider.createReaderFactory(config);
             }
diff --git a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/NoWarningTest.java b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/NoWarningTest.java
new file mode 100644
index 00000000..b1350cbb
--- /dev/null
+++ b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/NoWarningTest.java
@@ -0,0 +1,52 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.johnzon.mapper;
+
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.contrib.java.lang.system.StandardErrorStreamLog;
+import org.junit.contrib.java.lang.system.StandardOutputStreamLog;
+
+import static org.junit.Assert.assertTrue;
+
+public class NoWarningTest {
+    @Rule
+    public final StandardOutputStreamLog out = new StandardOutputStreamLog();
+
+    @Rule
+    public final StandardErrorStreamLog err = new StandardErrorStreamLog();
+
+    @Test
+    public void noWarn() {
+        new MapperBuilder()
+                .setEncoding("UTF-8")
+                .setSupportConstructors(true)
+                .setAccessModeName("field")
+                .setBufferStrategy("queue")
+                .setDoCloseOnStreams(true)
+                .setBufferSize(45678)
+                .setMaxSize(789465)
+                .setSkipNull(true)
+                .setSupportsComments(true)
+                .build();
+        // no warn log
+        assertTrue(out.getLog().isEmpty());
+        assertTrue(err.getLog().isEmpty());
+    }
+}
