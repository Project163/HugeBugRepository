diff --git a/tika-core/src/main/java/org/apache/tika/detect/DefaultDetector.java b/tika-core/src/main/java/org/apache/tika/detect/DefaultDetector.java
index ab6e97c60..f87c86c68 100644
--- a/tika-core/src/main/java/org/apache/tika/detect/DefaultDetector.java
+++ b/tika-core/src/main/java/org/apache/tika/detect/DefaultDetector.java
@@ -17,6 +17,7 @@
 package org.apache.tika.detect;
 
 import java.util.Collection;
+import java.util.Comparator;
 import java.util.List;
 
 import javax.imageio.spi.ServiceRegistry;
@@ -48,14 +49,31 @@ public class DefaultDetector extends CompositeDetector {
      * so put the Tika parsers last so that non-Tika (user supplied)
      * parsers can take precedence.
      *
+     * If an {@link OverrideDetector} is loaded, it takes precedence over
+     * all other detectors.
+     *
      * @param loader service loader
      * @return ordered list of statically loadable detectors
      */
     private static List<Detector> getDefaultDetectors(
             MimeTypes types, ServiceLoader loader) {
         List<Detector> detectors = loader.loadStaticServiceProviders(Detector.class);
+
         ServiceLoaderUtils.sortLoadedClasses(detectors);
-        
+        //look for the override index and put that first
+        int overrideIndex = -1;
+        int i = 0;
+        for (Detector detector : detectors) {
+            if (detector instanceof OverrideDetector) {
+                overrideIndex = i;
+                break;
+            }
+            i++;
+        }
+        if (overrideIndex > -1) {
+            Detector detector = detectors.remove(overrideIndex);
+            detectors.add(0, detector);
+        }
         // Finally the Tika MimeTypes as a fallback
         detectors.add(types);
         return detectors;
diff --git a/tika-core/src/main/java/org/apache/tika/utils/CompareUtils.java b/tika-core/src/main/java/org/apache/tika/utils/CompareUtils.java
index e7e1d9d58..c35d3ef5d 100644
--- a/tika-core/src/main/java/org/apache/tika/utils/CompareUtils.java
+++ b/tika-core/src/main/java/org/apache/tika/utils/CompareUtils.java
@@ -37,10 +37,10 @@ public class CompareUtils {
 
         // If both classes are Tika's class or both are not Tika's class, compare by name String.
         if (tika1 == tika2) {
-            return n1.compareTo(n2);
+            return n2.compareTo(n1);
         }
 
         // Otherwise one of these two class is Tika's class. Then the Tika's class comes before non-Tika's class.
-        return tika1 ? -1 : 1;
+        return tika1 ? 1 : -1;
     }
 }
diff --git a/tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml b/tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml
index 520483da5..d44987ea5 100644
--- a/tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml
+++ b/tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml
@@ -4105,6 +4105,7 @@
   </mime-type>
   <mime-type type="application/x-mspublisher">
     <glob pattern="*.pub"/>
+    <sub-class-of type="application/x-tika-msoffice"/>
   </mime-type>
   <mime-type type="application/x-msschedule">
     <glob pattern="*.scd"/>
@@ -4629,9 +4630,12 @@
   </mime-type>
 
   <!-- Note - password protected OOXML files are actually stored in -->
-  <!--  an OLE2 (application/x-tika-msoffice) container -->
+  <!--  an OLE2 (application/x-tika-msoffice) container. -->
+  <!--  The are logically subclasses of (application/x-tika-ooxml),
+        but their containers are literally subclasses
+        of (application/x-tika-msoffice) -->
   <mime-type type="application/x-tika-ooxml-protected">
-    <sub-class-of type="application/x-tika-ooxml"/>
+    <sub-class-of type="application/x-tika-msoffice"/>
     <_comment>Password Protected OOXML File</_comment>
   </mime-type>
 
diff --git a/tika-core/src/test/java/org/apache/custom/detect/MyCustomDetector.java b/tika-core/src/test/java/org/apache/custom/detect/MyCustomDetector.java
new file mode 100644
index 000000000..e20d5891b
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/custom/detect/MyCustomDetector.java
@@ -0,0 +1,31 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.custom.detect;
+
+import org.apache.tika.detect.Detector;
+import org.apache.tika.metadata.Metadata;
+import org.apache.tika.mime.MediaType;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+public class MyCustomDetector implements Detector {
+    @Override
+    public MediaType detect(InputStream input, Metadata metadata) throws IOException {
+        return MediaType.OCTET_STREAM;
+    }
+}
diff --git a/tika-core/src/test/java/org/apache/tika/detect/FileCommandDetectorTest.java b/tika-core/src/test/java/org/apache/tika/detect/FileCommandDetectorTest.java
index b5d49ecd0..21a24ab6b 100644
--- a/tika-core/src/test/java/org/apache/tika/detect/FileCommandDetectorTest.java
+++ b/tika-core/src/test/java/org/apache/tika/detect/FileCommandDetectorTest.java
@@ -1,3 +1,19 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package org.apache.tika.detect;
 
 import org.apache.tika.config.TikaConfig;
diff --git a/tika-core/src/test/java/org/apache/tika/utils/ServiceLoaderUtilsTest.java b/tika-core/src/test/java/org/apache/tika/utils/ServiceLoaderUtilsTest.java
new file mode 100644
index 000000000..5cd3c8d01
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/utils/ServiceLoaderUtilsTest.java
@@ -0,0 +1,63 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tika.utils;
+
+import org.apache.custom.detect.MyCustomDetector;
+import org.apache.tika.detect.Detector;
+import org.apache.tika.detect.EmptyDetector;
+import org.apache.tika.detect.FileCommandDetector;
+import org.apache.tika.detect.OverrideDetector;
+import org.apache.tika.detect.ZeroSizeFileDetector;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Random;
+
+import static org.junit.Assert.assertEquals;
+
+public class ServiceLoaderUtilsTest {
+
+    @Test
+    public void testSort() throws Exception {
+        //OverrideDetector is moved to index 0
+        //by the private service loading in DefaultDetector.
+        //This tests that a custom detector always comes first
+        //and then reverse alphabetical order
+        Detector[] detectors = new Detector[]{
+                new MyCustomDetector(),
+                new ZeroSizeFileDetector(),
+                new OverrideDetector(),
+                new FileCommandDetector(),
+                new EmptyDetector(),
+        };
+        List<Detector> expected = Arrays.asList(detectors);
+        List<Detector> shuffled = new ArrayList<>();
+        shuffled.addAll(expected);
+        Random random = new Random(42);
+        for (int i = 0; i < 10; i++) {
+            Collections.shuffle(shuffled, random);
+            ServiceLoaderUtils.sortLoadedClasses(shuffled);
+            assertEquals("failed on iteration "+i, expected, shuffled);
+
+        }
+    }
+
+
+}
