diff --git a/rave-components/rave-core/pom.xml b/rave-components/rave-core/pom.xml
index 5ea50c9a..7d236cbe 100644
--- a/rave-components/rave-core/pom.xml
+++ b/rave-components/rave-core/pom.xml
@@ -82,6 +82,10 @@
             <groupId>org.springframework.security</groupId>
             <artifactId>spring-security-web</artifactId>
         </dependency>
+        <dependency>
+            <groupId>org.springframework.security</groupId>
+            <artifactId>spring-security-openid</artifactId>
+        </dependency>
 
         <!-- Jackson JSON Mapper -->
         <dependency>
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/UserRepository.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/UserRepository.java
index 8672764f..db2ca727 100644
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/UserRepository.java
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/UserRepository.java
@@ -40,6 +40,14 @@ public interface UserRepository extends Repository<User> {
      * @return {@link org.apache.rave.portal.model.User} if one exists, otherwise {@literal null}
      */
     User getByUserEmail(String userEmail);
+    
+    /**
+     * Gets a {@link org.apache.rave.portal.model.User} by openId
+     *
+     * @param openId the (unique) openIdURL of the user
+     * @return {@link org.apache.rave.portal.model.User} if one exists, otherwise {@literal null}
+     */
+	User getByOpenId(String openId);
 
     /**
      * List of {@link org.apache.rave.portal.model.User}'s with a limited resultset
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/UserService.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/UserService.java
index 50dc0d0c..d53cb323 100644
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/UserService.java
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/UserService.java
@@ -25,9 +25,11 @@ import java.util.List;
 import org.apache.rave.portal.model.Person;
 import org.apache.rave.portal.model.User;
 import org.apache.rave.portal.model.util.SearchResult;
+import org.springframework.security.core.userdetails.AuthenticationUserDetailsService;
 import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.openid.OpenIDAuthenticationToken;
 
-public interface UserService extends UserDetailsService {
+public interface UserService extends UserDetailsService, AuthenticationUserDetailsService<OpenIDAuthenticationToken> {
     /**
      * Get the currently authenticated user.
      *
@@ -195,4 +197,13 @@ public interface UserService extends UserDetailsService {
      */
 	boolean acceptFriendRequest(String friendUsername, String username);
 
+
+    /**
+     * Return a user object by the openId.
+     *
+     * @param openId OpenId url of the user
+     * @return {@link org.apache.rave.portal.model.User} if one exists, otherwise {@literal null}
+     */
+	User getUserByOpenId(String openId);
+
 }
\ No newline at end of file
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultNewAccountService.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultNewAccountService.java
index 64bc5d6a..822d223e 100644
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultNewAccountService.java
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultNewAccountService.java
@@ -62,6 +62,7 @@ public class DefaultNewAccountService implements NewAccountService {
         final String displayName = newUser.getDisplayName();
         final String status = newUser.getStatus();
         final String aboutMe = newUser.getAboutMe();
+        final String openId = newUser.getOpenId();
 
         throwExceptionIfUserExists(userName, email);
 
@@ -84,6 +85,7 @@ public class DefaultNewAccountService implements NewAccountService {
         user.setDisplayName(displayName);
         user.setStatus(status);
         user.setAboutMe(aboutMe);
+        user.setOpenId(openId);
 
         userService.registerNewUser(user);
     }
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultUserService.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultUserService.java
index fc46cc2c..06fb9ad2 100644
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultUserService.java
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultUserService.java
@@ -56,6 +56,7 @@ import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.security.core.userdetails.UsernameNotFoundException;
 import org.springframework.security.crypto.codec.Base64;
 import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.security.openid.OpenIDAuthenticationToken;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
@@ -219,6 +220,11 @@ public class DefaultUserService implements UserService {
     public User getUserByEmail(String userEmail) {
         return userRepository.getByUserEmail(userEmail);
     }
+    
+    @Override
+    public User getUserByOpenId(String openId) {
+        return userRepository.getByOpenId(openId);
+    }
 
     @Override
     @Transactional
@@ -396,4 +402,14 @@ public class DefaultUserService implements UserService {
     	return personRepository.acceptFriendRequest(friendUsername,username);
     }
 
+	@Override
+	public UserDetails loadUserDetails(OpenIDAuthenticationToken token) throws UsernameNotFoundException {
+		final String openId = token.getIdentityUrl();
+		User user = this.getUserByOpenId(openId);
+		if (user == null) {
+			log.info("Open ID User with URL "+openId+" was not found!");
+			throw new UsernameNotFoundException("Open ID User with URL "+openId+" was not found!");
+		}
+		return user;
+	}
 }
diff --git a/rave-components/rave-core/src/test/java/org/apache/rave/portal/service/impl/DefaultUserServiceTest.java b/rave-components/rave-core/src/test/java/org/apache/rave/portal/service/impl/DefaultUserServiceTest.java
index 2b04b39d..491ccbf1 100644
--- a/rave-components/rave-core/src/test/java/org/apache/rave/portal/service/impl/DefaultUserServiceTest.java
+++ b/rave-components/rave-core/src/test/java/org/apache/rave/portal/service/impl/DefaultUserServiceTest.java
@@ -67,6 +67,9 @@ import org.springframework.security.core.context.SecurityContextHolder;
 import org.springframework.security.core.context.SecurityContextImpl;
 import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.security.openid.OpenIDAttribute;
+import org.springframework.security.openid.OpenIDAuthenticationStatus;
+import org.springframework.security.openid.OpenIDAuthenticationToken;
 
 public class DefaultUserServiceTest {
 
@@ -83,6 +86,8 @@ public class DefaultUserServiceTest {
 
     private static final String USER_NAME = "1234";
     private static final String USER_EMAIL = "test@test.com";
+    private static final String OPENID_INVALID = "http://user.myopenid.com/";
+    private static final String OPENID_VALID = "http://rave2011.myopenid.com/";
     private static final Long VALID_WIDGET_ID = 1L;
     private static final Long INVALID_USER_ID = -9999L;
 
@@ -215,8 +220,8 @@ public class DefaultUserServiceTest {
 
      @Test
      public void getUserByEmail_valid() {
-          final User authUser=new UserImpl(USER_ID,USER_NAME);
-          authUser.setEmail(USER_EMAIL);
+        final User authUser=new UserImpl(USER_ID,USER_NAME);
+        authUser.setEmail(USER_EMAIL);
         expect(userRepository.getByUserEmail(USER_EMAIL)).andReturn(authUser).anyTimes();
         replay(userRepository);
 
@@ -224,6 +229,41 @@ public class DefaultUserServiceTest {
         assertThat((User)result, is(sameInstance(authUser)));
         verify(userRepository);
      }
+     
+     @Test
+     public void getUserByOpenId_valid() {
+    	final User authUser=new UserImpl(USER_ID,USER_NAME);
+        authUser.setOpenId(OPENID_VALID);
+        expect(userRepository.getByOpenId(OPENID_VALID)).andReturn(authUser).anyTimes();
+        replay(userRepository);
+
+        UserDetails result = service.getUserByOpenId(OPENID_VALID);
+        assertThat((User)result, is(sameInstance(authUser)));
+        verify(userRepository);
+     }
+     
+     @Test
+     public void loadUserDetails_valid() {
+     	final User authUser=new UserImpl(USER_ID,USER_NAME);
+        authUser.setOpenId(OPENID_VALID);
+        expect(userRepository.getByOpenId(OPENID_VALID)).andReturn(authUser).anyTimes();
+        replay(userRepository);
+         OpenIDAuthenticationToken postAuthToken = new OpenIDAuthenticationToken(OpenIDAuthenticationStatus.SUCCESS,OPENID_VALID, 
+         		"Some message", new ArrayList<OpenIDAttribute>());
+         UserDetails result = service.loadUserDetails(postAuthToken);
+         assertThat((User)result, is(sameInstance(authUser)));
+         verify(userRepository);
+     }
+     
+     @Test(expected = UsernameNotFoundException.class)
+     public void loadUserDetails_invalid_exception() {
+         expect(userRepository.getByOpenId(OPENID_INVALID)).andReturn(null);
+         replay(userRepository);
+         OpenIDAuthenticationToken postAuthToken = new OpenIDAuthenticationToken(OpenIDAuthenticationStatus.SUCCESS,OPENID_INVALID, 
+         		"Some message", new ArrayList<OpenIDAttribute>());
+         service.loadUserDetails(postAuthToken);
+         verify(userRepository);
+     }
 
 
     @Test
