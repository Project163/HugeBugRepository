diff --git a/src/main/java/org/apache/commons/jexl3/internal/introspection/BooleanGetExecutor.java b/src/main/java/org/apache/commons/jexl3/internal/introspection/BooleanGetExecutor.java
index 4369e69a..76d1c931 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/introspection/BooleanGetExecutor.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/introspection/BooleanGetExecutor.java
@@ -17,6 +17,7 @@
 
 package org.apache.commons.jexl3.internal.introspection;
 import java.lang.reflect.InvocationTargetException;
+import org.apache.commons.jexl3.JexlException;
 /**
  * Specialized executor to get a boolean property from an object.
  * @since 2.0
@@ -73,10 +74,10 @@ public final class BooleanGetExecutor extends AbstractExecutor.Get {
             && objectClass.equals(obj.getClass())) {
             try {
                 return method.invoke(obj, (Object[]) null);
-            } catch (InvocationTargetException xinvoke) {
-                return TRY_FAILED; // fail
             } catch (IllegalAccessException xill) {
                 return TRY_FAILED;// fail
+            } catch (InvocationTargetException xinvoke) {
+                throw JexlException.tryFailed(xinvoke); // throw
             }
         }
         return TRY_FAILED;
diff --git a/src/main/java/org/apache/commons/jexl3/internal/introspection/ConstructorMethod.java b/src/main/java/org/apache/commons/jexl3/internal/introspection/ConstructorMethod.java
index 6b23937b..e787b4b5 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/introspection/ConstructorMethod.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/introspection/ConstructorMethod.java
@@ -19,6 +19,7 @@ package org.apache.commons.jexl3.internal.introspection;
 import java.beans.IntrospectionException;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
+import org.apache.commons.jexl3.JexlException;
 import org.apache.commons.jexl3.introspection.JexlMethod;
 
 /**
@@ -73,8 +74,8 @@ public final class ConstructorMethod implements JexlMethod {
             }
         }
         if (invoke) {
-            return ctor.newInstance(params);
-        }
+                return ctor.newInstance(params);
+            }
         throw new IntrospectionException("constructor resolution error");
     }
 
@@ -101,7 +102,7 @@ public final class ConstructorMethod implements JexlMethod {
         } catch (IllegalArgumentException xargument) {
             return Uberspect.TRY_FAILED;
         } catch (InvocationTargetException xinvoke) {
-            return Uberspect.TRY_FAILED;
+            throw JexlException.tryFailed(xinvoke); // throw
         }
         return Uberspect.TRY_FAILED;
     }
diff --git a/src/main/java/org/apache/commons/jexl3/internal/introspection/DuckGetExecutor.java b/src/main/java/org/apache/commons/jexl3/internal/introspection/DuckGetExecutor.java
index 04b6c06c..68be2c24 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/introspection/DuckGetExecutor.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/introspection/DuckGetExecutor.java
@@ -17,6 +17,7 @@
 package org.apache.commons.jexl3.internal.introspection;
 
 import java.lang.reflect.InvocationTargetException;
+import org.apache.commons.jexl3.JexlException;
 
 /**
  * Specialized executor to get a property from an object.
@@ -70,21 +71,21 @@ public final class DuckGetExecutor extends AbstractExecutor.Get {
     @Override
     public Object tryInvoke(Object obj, Object key) {
         if (obj != null
-            && objectClass.equals(obj.getClass())
-            // ensure method name matches the property name
-            && method != null
-            && ((property == null && key == null)
-                 || (property != null && property.equals(key)))) {
+                && objectClass.equals(obj.getClass())
+                // ensure method name matches the property name
+                && method != null
+                && ((property == null && key == null)
+                || (property != null && property.equals(key)))) {
             try {
                 Object[] args = {property};
                 return method.invoke(obj, args);
-            } catch (InvocationTargetException xinvoke) {
-                return TRY_FAILED; // fail
             } catch (IllegalAccessException xill) {
                 return TRY_FAILED;// fail
             } catch (IllegalArgumentException xarg) {
                 return TRY_FAILED;// fail
-            }
+            } catch (InvocationTargetException xinvoke) {
+                throw JexlException.tryFailed(xinvoke); // throw
+            }  
         }
         return TRY_FAILED;
     }
diff --git a/src/main/java/org/apache/commons/jexl3/internal/introspection/DuckSetExecutor.java b/src/main/java/org/apache/commons/jexl3/internal/introspection/DuckSetExecutor.java
index 93d435ae..cb422013 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/introspection/DuckSetExecutor.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/introspection/DuckSetExecutor.java
@@ -17,6 +17,7 @@
 package org.apache.commons.jexl3.internal.introspection;
 
 import java.lang.reflect.InvocationTargetException;
+import org.apache.commons.jexl3.JexlException;
 
 /**
  * Specialized executor to set a property of an object.
@@ -80,8 +81,8 @@ public final class DuckSetExecutor extends AbstractExecutor.Set {
     public Object invoke(Object obj, Object value) throws IllegalAccessException, InvocationTargetException {
         Object[] pargs = {property, value};
         if (method != null) {
-            method.invoke(obj, pargs);
-        }
+                method.invoke(obj, pargs);
+            }
         return value;
     }
 
@@ -97,13 +98,13 @@ public final class DuckSetExecutor extends AbstractExecutor.Set {
                 Object[] args = {property, value};
                 method.invoke(obj, args);
                 return value;
-            } catch (InvocationTargetException xinvoke) {
-                return TRY_FAILED; // fail
             } catch (IllegalAccessException xill) {
                 return TRY_FAILED;// fail
             } catch (IllegalArgumentException xarg) {
                 return TRY_FAILED;// fail
-            }
+            } catch (InvocationTargetException xinvoke) {
+                throw JexlException.tryFailed(xinvoke); // throw
+            } 
         }
         return TRY_FAILED;
     }
diff --git a/src/main/java/org/apache/commons/jexl3/internal/introspection/MapSetExecutor.java b/src/main/java/org/apache/commons/jexl3/internal/introspection/MapSetExecutor.java
index 77180d89..abaa081a 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/introspection/MapSetExecutor.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/introspection/MapSetExecutor.java
@@ -17,7 +17,6 @@
 
 package org.apache.commons.jexl3.internal.introspection;
 import java.util.Map;
-import java.lang.reflect.InvocationTargetException;
 
 /**
  * Specialized executor to set a property in a Map.
@@ -67,7 +66,7 @@ public final class MapSetExecutor extends AbstractExecutor.Set {
     }
 
     @Override
-    public Object invoke(final Object obj, Object value) throws IllegalAccessException, InvocationTargetException {
+    public Object invoke(final Object obj, Object value) {
         @SuppressWarnings("unchecked") // ctor only allows Map instances - see discover() method
         final Map<Object,Object> map = ((Map<Object, Object>) obj);
         map.put(property, value);
diff --git a/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodExecutor.java b/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodExecutor.java
index 17a66e16..d596c9dd 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodExecutor.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodExecutor.java
@@ -19,6 +19,7 @@ package org.apache.commons.jexl3.internal.introspection;
 import org.apache.commons.jexl3.JexlEngine;
 import java.lang.reflect.Array;
 import java.lang.reflect.InvocationTargetException;
+import org.apache.commons.jexl3.JexlException;
 
 /**
  * Specialized executor to invoke a method on an object.
@@ -81,7 +82,7 @@ public final class MethodExecutor extends AbstractExecutor.Method {
     }
 
     @Override
-    public Object invoke(Object o, Object... args) throws IllegalAccessException, InvocationTargetException  {
+    public Object invoke(Object o, Object... args) throws IllegalAccessException, InvocationTargetException {
         if (vaClass != null) {
             args = handleVarArg(args);
         }
@@ -100,12 +101,12 @@ public final class MethodExecutor extends AbstractExecutor.Method {
         if (objectClass.equals(obj.getClass()) && tkey.equals(key)) {
             try {
                 return invoke(obj, args);
-            } catch (InvocationTargetException xinvoke) {
-                return TRY_FAILED; // fail
             } catch (IllegalAccessException xill) {
                 return TRY_FAILED;// fail
             } catch (IllegalArgumentException xarg) {
                 return TRY_FAILED;// fail
+            } catch (InvocationTargetException xinvoke) {
+                throw JexlException.tryFailed(xinvoke); // throw
             }
         }
         return JexlEngine.TRY_FAILED;
diff --git a/src/main/java/org/apache/commons/jexl3/internal/introspection/PropertyGetExecutor.java b/src/main/java/org/apache/commons/jexl3/internal/introspection/PropertyGetExecutor.java
index f747ff89..17337266 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/introspection/PropertyGetExecutor.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/introspection/PropertyGetExecutor.java
@@ -17,6 +17,7 @@
 
 package org.apache.commons.jexl3.internal.introspection;
 import java.lang.reflect.InvocationTargetException;
+import org.apache.commons.jexl3.JexlException;
 
 /**
  * Specialized executor to get a property from an object.
@@ -59,25 +60,24 @@ public final class PropertyGetExecutor extends AbstractExecutor.Get {
     }
 
     @Override
-    public Object invoke(Object o)
-        throws IllegalAccessException, InvocationTargetException {
+    public Object invoke(Object o) throws IllegalAccessException, InvocationTargetException {
         return method == null ? null : method.invoke(o, (Object[]) null);
     }
 
     @Override
     public Object tryInvoke(Object o, Object identifier) {
-        if (o != null && method !=  null
+        if (o != null && method != null
             && property.equals(castString(identifier))
             && objectClass.equals(o.getClass())) {
             try {
                 return method.invoke(o, (Object[]) null);
-            } catch (InvocationTargetException xinvoke) {
-                return TRY_FAILED; // fail
             } catch (IllegalAccessException xill) {
                 return TRY_FAILED;// fail
             } catch (IllegalArgumentException xarg) {
                 return TRY_FAILED;// fail
-            }
+            } catch (InvocationTargetException xinvoke) {
+                throw JexlException.tryFailed(xinvoke); // throw
+            } 
         }
         return TRY_FAILED;
     }
diff --git a/src/main/java/org/apache/commons/jexl3/internal/introspection/PropertySetExecutor.java b/src/main/java/org/apache/commons/jexl3/internal/introspection/PropertySetExecutor.java
index 88edc21a..819860f4 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/introspection/PropertySetExecutor.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/introspection/PropertySetExecutor.java
@@ -18,6 +18,7 @@ package org.apache.commons.jexl3.internal.introspection;
 
 import java.lang.reflect.Array;
 import java.lang.reflect.InvocationTargetException;
+import org.apache.commons.jexl3.JexlException;
 
 /**
  * Specialized executor to set a property in an object.
@@ -79,8 +80,8 @@ public class PropertySetExecutor extends AbstractExecutor.Set {
                     arg = Array.newInstance(componentType, 0);
                 }
             }
-            method.invoke(o, arg);
-        }
+                method.invoke(o, arg);
+            } 
         return arg;
     }
 
@@ -95,13 +96,13 @@ public class PropertySetExecutor extends AbstractExecutor.Set {
             && valueClass.equals(classOf(value))) {
             try {
                 return invoke(o, value);
-            } catch (InvocationTargetException xinvoke) {
-                return TRY_FAILED; // fail
             } catch (IllegalAccessException xill) {
                 return TRY_FAILED;// fail
             } catch (IllegalArgumentException xarg) {
                 return TRY_FAILED;// fail
-            }
+            } catch (InvocationTargetException xinvoke) {
+                throw JexlException.tryFailed(xinvoke); // throw
+            } 
         }
         return TRY_FAILED;
     }
diff --git a/src/main/java/org/apache/commons/jexl3/internal/introspection/Uberspect.java b/src/main/java/org/apache/commons/jexl3/internal/introspection/Uberspect.java
index f9c39d27..83018001 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/introspection/Uberspect.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/introspection/Uberspect.java
@@ -85,7 +85,7 @@ public class Uberspect implements JexlUberspect {
      * Creates a new Uberspect.
      * @param runtimeLogger the logger used for all logging needs
      * @param sty the resolver strategy
-     * @param permissions the introspector permissions
+     * @param perms the introspector permissions
      */
     public Uberspect(Log runtimeLogger, JexlUberspect.ResolverStrategy sty, Permissions perms) {
         rlog = runtimeLogger;
diff --git a/src/main/java/org/apache/commons/jexl3/introspection/JexlMethod.java b/src/main/java/org/apache/commons/jexl3/introspection/JexlMethod.java
index 22c862e4..1ff68789 100644
--- a/src/main/java/org/apache/commons/jexl3/introspection/JexlMethod.java
+++ b/src/main/java/org/apache/commons/jexl3/introspection/JexlMethod.java
@@ -16,6 +16,7 @@
  */
 
 package org.apache.commons.jexl3.introspection;
+import org.apache.commons.jexl3.JexlException;
 
 /**
  * Interface used for regular method invocation.
@@ -48,8 +49,10 @@ public interface JexlMethod {
      * @param params the method arguments
      * @return the result of the method invocation that should be checked by tryFailed to determine if it succeeded
      * or failed.
+     * @throws JexlException.TryFailed if the underlying method was invoked but threw an exception
+     * ({@link java.lang.reflect.InvocationTargetException})
      */
-    Object tryInvoke(String name, Object obj, Object... params);
+    Object tryInvoke(String name, Object obj, Object... params) throws JexlException.TryFailed;
 
     /**
      * Checks whether a tryInvoke return value indicates a failure or not.
diff --git a/src/main/java/org/apache/commons/jexl3/introspection/JexlPropertyGet.java b/src/main/java/org/apache/commons/jexl3/introspection/JexlPropertyGet.java
index 347afeb5..9eb9fb00 100644
--- a/src/main/java/org/apache/commons/jexl3/introspection/JexlPropertyGet.java
+++ b/src/main/java/org/apache/commons/jexl3/introspection/JexlPropertyGet.java
@@ -17,6 +17,8 @@
 
 package org.apache.commons.jexl3.introspection;
 
+import org.apache.commons.jexl3.JexlException;
+
 /**
  * Interface for getting values that appear to be properties.
  * Ex.
@@ -44,8 +46,10 @@ public interface JexlPropertyGet {
      * @param key the property key to get
      * @return the result of the method invocation that should be checked by tryFailed to determine if it succeeded
      * or failed.
+     * @throws JexlException.TryFailed if the underlying method was invoked but threw an exception
+     * ({@link java.lang.reflect.InvocationTargetException})
      */
-    Object tryInvoke(Object obj, Object key);
+    Object tryInvoke(Object obj, Object key) throws JexlException.TryFailed;
 
     /**
      * Checks whether a tryInvoke failed or not.
diff --git a/src/main/java/org/apache/commons/jexl3/introspection/JexlPropertySet.java b/src/main/java/org/apache/commons/jexl3/introspection/JexlPropertySet.java
index d4609c1b..a57464ae 100644
--- a/src/main/java/org/apache/commons/jexl3/introspection/JexlPropertySet.java
+++ b/src/main/java/org/apache/commons/jexl3/introspection/JexlPropertySet.java
@@ -17,6 +17,8 @@
 
 package org.apache.commons.jexl3.introspection;
 
+import org.apache.commons.jexl3.JexlException;
+
 /**
  * Interface used for setting values that appear to be properties.
  * Ex.
@@ -46,8 +48,10 @@ public interface JexlPropertySet {
      * @param value the property value to set
      * @return the result of the method invocation that should be checked by tryFailed to determine if it succeeded
      * or failed.
+     * @throws JexlException.TryFailed if the underlying method was invoked but threw an exception
+     * ({@link java.lang.reflect.InvocationTargetException})
      */
-    Object tryInvoke(Object obj, Object key, Object value);
+    Object tryInvoke(Object obj, Object key, Object value) throws JexlException.TryFailed;
 
     /**
      * Checks whether a tryInvoke failed or not.
