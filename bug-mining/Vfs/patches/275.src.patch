diff --git a/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/http4/MonitoredHttpResponseContentInputStream.java b/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/http4/MonitoredHttpResponseContentInputStream.java
index 42d7364d..d8f6b37c 100644
--- a/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/http4/MonitoredHttpResponseContentInputStream.java
+++ b/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/http4/MonitoredHttpResponseContentInputStream.java
@@ -39,6 +39,17 @@ final class MonitoredHttpResponseContentInputStream extends MonitorInputStream {
         this.httpResponse = httpResponse;
     }
 
+    /**
+     * Prevent closing the stream itself if the httpResponse is closeable.
+     * Closing the stream may consume all remaining data no matter how large (VFS-805).
+     */
+    @Override
+    protected void closeSuper() throws IOException {
+        if (!(httpResponse instanceof CloseableHttpResponse)) {
+            super.closeSuper();
+        }
+    }
+
     @Override
     protected void onClose() throws IOException {
         if (httpResponse instanceof CloseableHttpResponse) {
diff --git a/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/http5/MonitoredHttpResponseContentInputStream.java b/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/http5/MonitoredHttpResponseContentInputStream.java
index bfbba7c2..0140b7d9 100644
--- a/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/http5/MonitoredHttpResponseContentInputStream.java
+++ b/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/http5/MonitoredHttpResponseContentInputStream.java
@@ -20,6 +20,7 @@ import java.io.IOException;
 
 import org.apache.commons.vfs2.util.MonitorInputStream;
 import org.apache.hc.core5.http.ClassicHttpResponse;
+import org.apache.hc.core5.http.io.entity.NullEntity;
 
 /**
  * An InputStream that cleans up the {@code org.apache.hc.core5.http.ClassicHttpResponse} on close.
@@ -38,8 +39,21 @@ final class MonitoredHttpResponseContentInputStream extends MonitorInputStream {
         this.httpResponse = httpResponse;
     }
 
+    /**
+     * Prevent closing the stream itself if the httpResponse is closeable.
+     * Closing the stream may consume all remaining data no matter how large (VFS-805).
+     */
+    @Override
+    protected void closeSuper() throws IOException {
+        // Suppressed close() invocation on the underlying input stream
+    }
+
     @Override
     protected void onClose() throws IOException {
+        // Replace the response's entity with a dummy entity in order to prevent
+        // exhausting all data (VFS-805)
+        httpResponse.setEntity(NullEntity.INSTANCE);
+        // Note that this also calls close on the dummy entity
         httpResponse.close();
     }
 
diff --git a/commons-vfs2/src/main/java/org/apache/commons/vfs2/util/MonitorInputStream.java b/commons-vfs2/src/main/java/org/apache/commons/vfs2/util/MonitorInputStream.java
index ec79ae5c..030a1c53 100644
--- a/commons-vfs2/src/main/java/org/apache/commons/vfs2/util/MonitorInputStream.java
+++ b/commons-vfs2/src/main/java/org/apache/commons/vfs2/util/MonitorInputStream.java
@@ -82,7 +82,7 @@ public class MonitorInputStream extends BufferedInputStream {
         // Close the stream
         IOException exc = null;
         try {
-            super.close();
+            closeSuper();
         } catch (final IOException ioe) {
             exc = ioe;
         }
@@ -108,6 +108,17 @@ public class MonitorInputStream extends BufferedInputStream {
         return atomicCount.get();
     }
 
+    /**
+     * This method exists in order to allow overriding whether to actually close
+     * the underlying stream (VFS-805). There are cases where closing that stream will
+     * consume any amount of remaining data. In such cases closing a different
+     * entity instead (such as an HttpResponse) may be more appropriate.
+     * @throws IOException if an IO error occurs.
+     */
+    protected void closeSuper() throws IOException {
+        super.close();
+    }
+
     /**
      * Called after the stream has been closed. This implementation does nothing.
      *
@@ -121,7 +132,7 @@ public class MonitorInputStream extends BufferedInputStream {
      * Reads a character.
      *
      * @return The character that was read as an integer.
-     * @throws IOException if an error occurs.
+     * @throws IOException if an IO error occurs.
      */
     @Override
     public int read() throws IOException { // lgtm [java/non-sync-override]
@@ -144,7 +155,7 @@ public class MonitorInputStream extends BufferedInputStream {
      * @param offset The offset at which to start reading.
      * @param length The maximum number of bytes to read.
      * @return The number of bytes read.
-     * @throws IOException if an error occurs.
+     * @throws IOException if an IO error occurs.
      */
     @Override
     public int read(final byte[] buffer, final int offset, final int length) throws IOException { // lgtm [java/non-sync-override]
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index afb07f40..a3172bce 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -108,6 +108,9 @@ The <action> type attribute can be add,update,fix,remove.
         - org.apache.commons.vfs2.provider.http4.Http4FileObject.getInternalURI()
         - org.apache.commons.vfs2.provider.http5.Http5FileObject.getInternalURI()
       </action>
+      <action type="fix" issue="VFS-805" dev="ggregory" due-to="Claus Stadler, Gary Gregory">
+        HTTP seek always exhausts response #186.
+      </action>
       <!-- UPDATES  -->
       <action type="update" dev="ggregory" due-to="Gary Gregory">
         Bump Log4j 2.14.0 -> 2.14.1.
