diff --git a/core/src/main/java/org/apache/james/core/MailAddress.java b/core/src/main/java/org/apache/james/core/MailAddress.java
index d31a26d698..c9ab6e0865 100644
--- a/core/src/main/java/org/apache/james/core/MailAddress.java
+++ b/core/src/main/java/org/apache/james/core/MailAddress.java
@@ -113,6 +113,10 @@ public class MailAddress implements java.io.Serializable {
         return NULL_SENDER;
     }
 
+    /**
+     * Prefer using {@link MaybeSender#getMailSender(String)}
+     */
+    @Deprecated
     public static  MailAddress getMailSender(String sender) {
         if (sender == null || sender.trim().length() <= 0) {
             return null;
diff --git a/core/src/main/java/org/apache/james/core/MaybeSender.java b/core/src/main/java/org/apache/james/core/MaybeSender.java
index 6e91fcec53..cdd4474d8f 100644
--- a/core/src/main/java/org/apache/james/core/MaybeSender.java
+++ b/core/src/main/java/org/apache/james/core/MaybeSender.java
@@ -24,10 +24,33 @@ import java.util.Objects;
 import java.util.Optional;
 import java.util.stream.Stream;
 
+import javax.mail.internet.AddressException;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.ImmutableList;
 
 public class MaybeSender {
+    private static final Logger LOGGER = LoggerFactory.getLogger(MaybeSender.class);
+
+    public static MaybeSender getMailSender(String sender) {
+        if (sender == null || sender.trim().isEmpty()) {
+            return MaybeSender.nullSender();
+        }
+        if (sender.equals(MailAddress.NULL_SENDER_AS_STRING)) {
+            return MaybeSender.nullSender();
+        }
+        try {
+            return MaybeSender.of(new MailAddress(sender));
+        } catch (AddressException e) {
+            // Should never happen as long as the user does not modify the header by himself
+            LOGGER.warn("Unable to parse the sender address {}, so we fallback to a null sender", sender, e);
+            return MaybeSender.nullSender();
+        }
+    }
+
     public static MaybeSender nullSender() {
         return new MaybeSender(Optional.empty());
     }
diff --git a/core/src/test/java/org/apache/james/core/MaybeSenderTest.java b/core/src/test/java/org/apache/james/core/MaybeSenderTest.java
index 627aacd470..64238352f6 100644
--- a/core/src/test/java/org/apache/james/core/MaybeSenderTest.java
+++ b/core/src/test/java/org/apache/james/core/MaybeSenderTest.java
@@ -32,6 +32,7 @@ import org.junit.jupiter.api.Test;
 import nl.jqno.equalsverifier.EqualsVerifier;
 
 class MaybeSenderTest {
+    private static final String GOOD_ADDRESS = "server-dev@james.apache.org";
     private static final String MAIL_ADDRESS_STRING = "any@domain.tld";
 
     private MailAddress mailAddress;
@@ -155,4 +156,51 @@ class MaybeSenderTest {
             .isEqualTo("default");
     }
 
+    @Test
+    void getMailSenderShouldReturnNullSenderWhenNullSender() {
+        assertThat(MaybeSender.getMailSender(MailAddress.NULL_SENDER_AS_STRING))
+            .isEqualTo(MaybeSender.nullSender());
+    }
+
+    @Test
+    void getMailSenderShouldReturnParsedAddressWhenNotNullAddress() throws Exception {
+        assertThat(MaybeSender.getMailSender(GOOD_ADDRESS))
+            .isEqualTo(MaybeSender.of(new MailAddress(GOOD_ADDRESS)));
+    }
+
+    @Test
+    void getMailSenderShouldReturnNullSenderWhenNull() {
+        assertThat(MaybeSender.getMailSender(null))
+            .isEqualTo(MaybeSender.nullSender());
+    }
+
+    @Test
+    void getMailSenderShouldReturnNullSenderWhenEmptyString() {
+        assertThat(MaybeSender.getMailSender(""))
+            .isEqualTo(MaybeSender.nullSender());
+    }
+
+    @Test
+    void getMailSenderShouldReturnNullSenderWhenOnlySpaces() {
+        assertThat(MaybeSender.getMailSender("   "))
+            .isEqualTo(MaybeSender.nullSender());
+    }
+
+    @Test
+    void getMailSenderShouldReturnNullSenderWhenBadValue() {
+        assertThat(MaybeSender.getMailSender("this@is@a@bad@address"))
+            .isEqualTo(MaybeSender.nullSender());
+    }
+
+    @Test
+    void equalsShouldReturnFalseWhenOnlyFirstMemberIsANullSender() {
+        assertThat(MaybeSender.getMailSender(GOOD_ADDRESS))
+            .isNotEqualTo(MaybeSender.nullSender());
+    }
+
+    @Test
+    void equalsShouldReturnFalseWhenOnlySecondMemberIsANullSender() {
+        assertThat(MaybeSender.nullSender())
+            .isNotEqualTo(MaybeSender.getMailSender(GOOD_ADDRESS));
+    }
 }
\ No newline at end of file
