diff --git a/tika-core/src/main/java/org/apache/tika/mime/MagicMatch.java b/tika-core/src/main/java/org/apache/tika/mime/MagicMatch.java
index afa0de91f..4917ea542 100644
--- a/tika-core/src/main/java/org/apache/tika/mime/MagicMatch.java
+++ b/tika-core/src/main/java/org/apache/tika/mime/MagicMatch.java
@@ -57,7 +57,7 @@ class MagicMatch implements Clause {
 
     public boolean eval(byte[] data) {
         try {
-            return getDetector().detect(new UnsynchronizedByteArrayInputStream(data), new Metadata()) !=
+            return getDetector().detect(UnsynchronizedByteArrayInputStream.builder().setByteArray(data).get(), new Metadata()) !=
                     MediaType.OCTET_STREAM;
         } catch (IOException e) {
             // Should never happen with a ByteArrayInputStream
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/PipesClient.java b/tika-core/src/main/java/org/apache/tika/pipes/PipesClient.java
index 129067136..0e1ca18e0 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/PipesClient.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/PipesClient.java
@@ -368,7 +368,7 @@ public class PipesClient implements Closeable {
         byte[] bytes = new byte[length];
         input.readFully(bytes);
         try (ObjectInputStream objectInputStream = new ObjectInputStream(
-                new UnsynchronizedByteArrayInputStream(bytes))) {
+                UnsynchronizedByteArrayInputStream.builder().setByteArray(bytes).get())) {
             EmitData emitData = (EmitData) objectInputStream.readObject();
 
             String stack = emitData.getContainerStackTrace();
@@ -390,7 +390,7 @@ public class PipesClient implements Closeable {
         byte[] bytes = new byte[length];
         input.readFully(bytes);
         try (ObjectInputStream objectInputStream = new ObjectInputStream(
-                new UnsynchronizedByteArrayInputStream(bytes))) {
+                UnsynchronizedByteArrayInputStream.builder().setByteArray(bytes).get())) {
             Metadata metadata = (Metadata) objectInputStream.readObject();
             EmitData emitData = new EmitData(emitKey, Collections.singletonList(metadata));
             return new PipesResult(PipesResult.STATUS.INTERMEDIATE_RESULT, emitData, true);
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/PipesServer.java b/tika-core/src/main/java/org/apache/tika/pipes/PipesServer.java
index 54d2b439c..d4ebbf011 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/PipesServer.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/PipesServer.java
@@ -169,7 +169,7 @@ public class PipesServer implements Runnable {
             PipesServer server =
                     new PipesServer(tikaConfig, System.in, System.out, maxForEmitBatchBytes,
                             serverParseTimeoutMillis, serverWaitTimeoutMillis);
-            System.setIn(new UnsynchronizedByteArrayInputStream(new byte[0]));
+            System.setIn(UnsynchronizedByteArrayInputStream.builder().setByteArray(new byte[0]).get());
             System.setOut(System.err);
             Thread watchdog = new Thread(server, "Tika Watchdog");
             watchdog.setDaemon(true);
@@ -727,7 +727,7 @@ public class PipesServer implements Runnable {
             byte[] bytes = new byte[length];
             input.readFully(bytes);
             try (ObjectInputStream objectInputStream = new ObjectInputStream(
-                    new UnsynchronizedByteArrayInputStream(bytes))) {
+                    UnsynchronizedByteArrayInputStream.builder().setByteArray(bytes).get())) {
                 return (FetchEmitTuple) objectInputStream.readObject();
             }
         } catch (IOException e) {
diff --git a/tika-core/src/test/java/org/apache/tika/pipes/PipesServerTest.java b/tika-core/src/test/java/org/apache/tika/pipes/PipesServerTest.java
index dd8ef4ff4..ff80bb916 100644
--- a/tika-core/src/test/java/org/apache/tika/pipes/PipesServerTest.java
+++ b/tika-core/src/test/java/org/apache/tika/pipes/PipesServerTest.java
@@ -61,7 +61,7 @@ public class PipesServerTest extends TikaTest {
                 tmp.resolve("mock.xml"));
 
         PipesServer pipesServer = new PipesServer(tikaConfig,
-                new UnsynchronizedByteArrayInputStream(new byte[0]),
+                UnsynchronizedByteArrayInputStream.builder().setByteArray(new byte[0]).get(),
                 new PrintStream(UnsynchronizedByteArrayOutputStream.builder().get(), true,
                         StandardCharsets.UTF_8.name()),
                 -1, 30000, 30000);
@@ -96,7 +96,7 @@ public class PipesServerTest extends TikaTest {
                 tmp.resolve("mock.xml"));
 
         PipesServer pipesServer = new PipesServer(tikaConfig,
-                new UnsynchronizedByteArrayInputStream(new byte[0]),
+                UnsynchronizedByteArrayInputStream.builder().setByteArray(new byte[0]).get(),
                 new PrintStream(UnsynchronizedByteArrayOutputStream.builder().get(), true,
                         StandardCharsets.UTF_8.name()),
                 -1, 30000, 30000);
@@ -152,7 +152,7 @@ public class PipesServerTest extends TikaTest {
                 tmp.resolve("mock.xml"));
 
         PipesServer pipesServer = new PipesServer(tikaConfig,
-                new UnsynchronizedByteArrayInputStream(new byte[0]),
+                UnsynchronizedByteArrayInputStream.builder().setByteArray(new byte[0]).get(),
                 new PrintStream(UnsynchronizedByteArrayOutputStream.builder().get(), true,
                         StandardCharsets.UTF_8.name()),
                 -1, 30000, 30000);
