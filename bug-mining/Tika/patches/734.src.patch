diff --git a/CHANGES.txt b/CHANGES.txt
index d22b0602e..de9dae7d9 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -1,4 +1,9 @@
 Release 1.11 - Current Development
+  
+  * Prevent infinite recursion when processing inline images
+    in PDF files by limiting extraction of duplicate images
+    within the same page (TIKA-1742).
+
   * Upgrade to POI 3.13-final (via Andreas Beeker) (TIKA-1707).
 
   * Upgraded tika-batch to use Path throughout (TIKA-1747 and
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDF2XHTML.java b/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDF2XHTML.java
index e10bdd1f8..1ffe60c6a 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDF2XHTML.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDF2XHTML.java
@@ -23,14 +23,17 @@ import java.io.Writer;
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.ListIterator;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Set;
 import java.util.TreeMap;
 
 import org.apache.commons.io.IOExceptionWithCause;
 import org.apache.commons.io.IOUtils;
+import org.apache.pdfbox.cos.COSBase;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDDocumentCatalog;
 import org.apache.pdfbox.pdmodel.PDDocumentNameDictionary;
@@ -98,12 +101,16 @@ class PDF2XHTML extends PDFTextStripper {
     private final PDFParserConfig config;
     /**
      * This keeps track of the pdf object ids for inline
-     * images that have been processed.  If {@link PDFParserConfig#getExtractUniqueInlineImagesOnly()
+     * images that have been processed.
+     * If {@link PDFParserConfig#getExtractUniqueInlineImagesOnly()
      * is true, this will be checked before extracting an embedded image.
      * The integer keeps track of the inlineImageCounter for that image.
      * This integer is used to identify images in the markup.
+     *
+     * This is used across the document.  To avoid infinite recursion
+     * TIKA-1742, we're limiting the export to one image per page.
      */
-    private Map<String, Integer> processedInlineImages = new HashMap<String, Integer>();
+    private Map<String, Integer> processedInlineImages = new HashMap<>();
     private int inlineImageCounter = 0;
     private PDF2XHTML(ContentHandler handler, ParseContext context, Metadata metadata,
                       PDFParserConfig config)
@@ -227,7 +234,7 @@ class PDF2XHTML extends PDFTextStripper {
         try {
             writeParagraphEnd();
 
-            extractImages(page.getResources());
+            extractImages(page.getResources(), new HashSet<COSBase>());
 
             EmbeddedDocumentExtractor extractor = getEmbeddedDocumentExtractor();
             for (PDAnnotation annotation : page.getAnnotations()) {
@@ -302,7 +309,7 @@ class PDF2XHTML extends PDFTextStripper {
         page.clear();
     }
 
-    private void extractImages(PDResources resources) throws SAXException {
+    private void extractImages(PDResources resources, Set<COSBase> seenThisPage) throws SAXException {
         if (resources == null || config.getExtractInlineImages() == false) {
             return;
         }
@@ -315,8 +322,18 @@ class PDF2XHTML extends PDFTextStripper {
         for (Map.Entry<String, PDXObject> entry : xObjects.entrySet()) {
 
             PDXObject object = entry.getValue();
+            if (object == null) {
+                continue;
+            }
+            COSBase cosObject = object.getCOSObject();
+            if (seenThisPage.contains(cosObject)) {
+                //avoid infinite recursion TIKA-1742
+                continue;
+            }
+            seenThisPage.add(cosObject);
+
             if (object instanceof PDXObjectForm) {
-                extractImages(((PDXObjectForm) object).getResources());
+                extractImages(((PDXObjectForm) object).getResources(), seenThisPage);
             } else if (object instanceof PDXObjectImage) {
 
                 PDXObjectImage image = (PDXObjectImage) object;
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParserConfig.java b/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParserConfig.java
index 8f6e373d5..20091e7c7 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParserConfig.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParserConfig.java
@@ -236,6 +236,10 @@ public class PDFParserConfig implements Serializable {
      * <p/>
      * For this parameter to have any effect, {@link #extractInlineImages} must be
      * set to <code>true</code>.
+     * <p>
+     * Because of TIKA-1742 -- to avoid infinite recursion -- no matter the setting
+     * of this parameter, the extractor will only pull out one copy of one image per
+     * page.  This parameter tries to capture uniqueness across the entire document.
      *
      * @param extractUniqueInlineImagesOnly
      */
