diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/html/DefaultHtmlMapper.java b/tika-parsers/src/main/java/org/apache/tika/parser/html/DefaultHtmlMapper.java
index 320420c9a..f86757a79 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/html/DefaultHtmlMapper.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/html/DefaultHtmlMapper.java
@@ -23,6 +23,11 @@ package org.apache.tika.parser.html;
  */
 public class DefaultHtmlMapper implements HtmlMapper {
 
+    /**
+     * @since Apache Tika 0.8
+     */
+    public static final HtmlMapper INSTANCE = new DefaultHtmlMapper();
+
     public String mapSafeElement(String name) {
         // Based on http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd
 
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlParser.java
index 783a0adba..44e32e37d 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlParser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlParser.java
@@ -54,11 +54,6 @@ public class HtmlParser implements Parser {
                 MediaType.application("vnd.wap.xhtml+xml"),
                 MediaType.application("x-asp"))));
 
-    /**
-     * The default HTML mapping.
-     */
-    private static final HtmlMapper mapper = new DefaultHtmlMapper();
-
     // Use the widest, most common charset as our default.
     private static final String DEFAULT_CHARSET = "windows-1252";
     // TIKA-357 - use bigger buffer for meta tag sniffing (was 4K)
@@ -219,7 +214,7 @@ public class HtmlParser implements Parser {
      *         <code>null</code> if the element is unsafe 
      */
     protected String mapSafeElement(String name) {
-        return mapper.mapSafeElement(name);
+        return DefaultHtmlMapper.INSTANCE.mapSafeElement(name);
     }
 
     /**
@@ -235,7 +230,7 @@ public class HtmlParser implements Parser {
      *         should be ignored, <code>false</code> otherwise
      */
     protected boolean isDiscardElement(String name) {
-        return "STYLE".equals(name) || "SCRIPT".equals(name);
+        return DefaultHtmlMapper.INSTANCE.isDiscardElement(name);
     }
 
     /**
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/html/IdentityHtmlMapper.java b/tika-parsers/src/main/java/org/apache/tika/parser/html/IdentityHtmlMapper.java
new file mode 100644
index 000000000..1eb760623
--- /dev/null
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/html/IdentityHtmlMapper.java
@@ -0,0 +1,37 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tika.parser.html;
+
+/**
+ * Alternative HTML mapping rules that pass the input HTML
+ * as-is without any modifications.
+ *
+ * @since Apache Tika 0.8
+ */
+public class IdentityHtmlMapper implements HtmlMapper {
+
+    public static final HtmlMapper INSTANCE = new IdentityHtmlMapper();
+
+    public boolean isDiscardElement(String name) {
+        return false;
+    }
+
+    public String mapSafeElement(String name) {
+        return name;
+    }
+
+}
