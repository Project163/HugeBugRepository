diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 0e01b5b8..4814d0b7 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -27,6 +27,10 @@
         Minor improvements of the support for indexed properties in
         ConfigurationDynaBean.
       </action>
+      <action dev="oheger" type="fix" issue="CONFIGURATION-432">
+        The methods getList() and getStringArray() of AbstractConfiguration can
+        now handle single-valued properties of primitive types.
+      </action>
       <action dev="oheger" type="fix" issue="CONFIGURATION-428">
         XMLConfiguration no longer escapes backslashs in the values of
         XML elements.
diff --git a/src/java/org/apache/commons/configuration/AbstractConfiguration.java b/src/java/org/apache/commons/configuration/AbstractConfiguration.java
index fa9a4e9d..91ff45d0 100644
--- a/src/java/org/apache/commons/configuration/AbstractConfiguration.java
+++ b/src/java/org/apache/commons/configuration/AbstractConfiguration.java
@@ -23,6 +23,7 @@ import java.math.BigInteger;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.NoSuchElementException;
@@ -35,6 +36,7 @@ import org.apache.commons.configuration.event.ConfigurationErrorListener;
 import org.apache.commons.configuration.event.EventSource;
 import org.apache.commons.configuration.interpol.ConfigurationInterpolator;
 import org.apache.commons.lang.BooleanUtils;
+import org.apache.commons.lang.ClassUtils;
 import org.apache.commons.lang.text.StrLookup;
 import org.apache.commons.lang.text.StrSubstitutor;
 import org.apache.commons.logging.Log;
@@ -1093,6 +1095,11 @@ public abstract class AbstractConfiguration extends EventSource implements Confi
         {
             array = new String[0];
         }
+        else if (isScalarValue(value))
+        {
+            array = new String[1];
+            array[0] = value.toString();
+        }
         else
         {
             throw new ConversionException('\'' + key + "' doesn't map to a String/List object");
@@ -1139,6 +1146,10 @@ public abstract class AbstractConfiguration extends EventSource implements Confi
         {
             return Arrays.asList((Object[]) value);
         }
+        else if (isScalarValue(value))
+        {
+            return Collections.singletonList(value.toString());
+        }
         else
         {
             throw new ConversionException('\'' + key + "' doesn't map to a List object: " + value + ", a "
@@ -1174,6 +1185,24 @@ public abstract class AbstractConfiguration extends EventSource implements Confi
         return value;
     }
 
+    /**
+     * Checks whether the specified object is a scalar value. This method is
+     * called by <code>getList()</code> and <code>getStringArray()</code> if the
+     * property requested is not a string, a list, or an array. If it returns
+     * <b>true</b>, the calling method transforms the value to a string and
+     * returns a list or an array with this single element. This implementation
+     * returns <b>true</b> if the value is of a wrapper type for a primitive
+     * type.
+     *
+     * @param value the value to be checked
+     * @return a flag whether the value is a scalar
+     * @since 1.7
+     */
+    protected boolean isScalarValue(Object value)
+    {
+        return ClassUtils.wrapperToPrimitive(value.getClass()) != null;
+    }
+
     /**
      * Copies the content of the specified configuration into this
      * configuration. If the specified configuration contains a key that is also
diff --git a/src/test/org/apache/commons/configuration/TestAbstractConfigurationBasicFeatures.java b/src/test/org/apache/commons/configuration/TestAbstractConfigurationBasicFeatures.java
index 738f9342..01d215f5 100644
--- a/src/test/org/apache/commons/configuration/TestAbstractConfigurationBasicFeatures.java
+++ b/src/test/org/apache/commons/configuration/TestAbstractConfigurationBasicFeatures.java
@@ -279,6 +279,62 @@ public class TestAbstractConfigurationBasicFeatures extends TestCase
         }
     }
 
+    /**
+     * Tests getList() for single non-string values.
+     */
+    public void testGetListNonString()
+    {
+        checkGetListScalar(new Integer(42));
+        checkGetListScalar(new Long(42));
+        checkGetListScalar(new Short((short) 42));
+        checkGetListScalar(new Byte((byte) 42));
+        checkGetListScalar(new Float(42));
+        checkGetListScalar(new Double(42));
+        checkGetListScalar(Boolean.TRUE);
+}
+
+    /**
+     * Tests getStringArray() for single son-string values.
+     */
+    public void testGetStringArrayNonString()
+    {
+        checkGetStringArrayScalar(new Integer(42));
+        checkGetStringArrayScalar(new Long(42));
+        checkGetStringArrayScalar(new Short((short) 42));
+        checkGetStringArrayScalar(new Byte((byte) 42));
+        checkGetStringArrayScalar(new Float(42));
+        checkGetStringArrayScalar(new Double(42));
+        checkGetStringArrayScalar(Boolean.TRUE);
+    }
+
+    /**
+     * Helper method for checking getList() if the property value is a scalar.
+     * @param value the value of the property
+     */
+    private void checkGetListScalar(Object value)
+    {
+        BaseConfiguration config = new BaseConfiguration();
+        config.addProperty(KEY_PREFIX, value);
+        List lst = config.getList(KEY_PREFIX);
+        assertEquals("Wrong number of values", 1, lst.size());
+        assertEquals("Wrong value", value.toString(), lst.get(0));
+    }
+
+    /**
+     * Helper method for checking getStringArray() if the property value is a
+     * scalar.
+     *
+     * @param value the value of the property
+     */
+    private void checkGetStringArrayScalar(Object value)
+    {
+        BaseConfiguration config = new BaseConfiguration();
+        config.addProperty(KEY_PREFIX, value);
+        String[] array = config.getStringArray(KEY_PREFIX);
+        assertEquals("Weong number of elements", 1, array.length);
+        assertEquals("Wrong value", value.toString(), array[0]);
+    }
+
     /**
      * Creates the source configuration for testing the copy() and append()
      * methods. This configuration contains keys with an odd index and values
diff --git a/src/test/org/apache/commons/configuration/TestConfigurationConverter.java b/src/test/org/apache/commons/configuration/TestConfigurationConverter.java
index 60bbae2e..12c23ac9 100644
--- a/src/test/org/apache/commons/configuration/TestConfigurationConverter.java
+++ b/src/test/org/apache/commons/configuration/TestConfigurationConverter.java
@@ -22,6 +22,7 @@ import java.util.Map;
 import java.util.Properties;
 
 import junit.framework.TestCase;
+
 import org.apache.commons.collections.ExtendedProperties;
 
 /**
@@ -29,7 +30,7 @@ import org.apache.commons.collections.ExtendedProperties;
  *
  * @author Martin Poeschl
  * @author Emmanuel Bourg
- * @version $Revision$, $Date$
+ * @version $Id$
  */
 public class TestConfigurationConverter extends TestCase
 {
@@ -106,6 +107,18 @@ public class TestConfigurationConverter extends TestCase
         assertEquals("'array' property", "item 1;item 2", props.getProperty("array"));
     }
 
+    /**
+     * Tests the conversion of a configuration object to properties if scalar
+     * values are involved. This test is related to CONFIGURATION-432.
+     */
+    public void testConfigurationToPropertiesScalarValue()
+    {
+        BaseConfiguration config = new BaseConfiguration();
+        config.addProperty("scalar", new Integer(42));
+        Properties props = ConfigurationConverter.getProperties(config);
+        assertEquals("Wrong value", "42", props.getProperty("scalar"));
+    }
+
     public void testConfigurationToMap()
     {
         Configuration config = new BaseConfiguration();
