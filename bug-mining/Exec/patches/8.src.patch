diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 22337f00..d3e08cc7 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -24,6 +24,12 @@
   </properties>
   <body>
     <release version="1.0-SNAPSHOT" date="as in SVN" description="Sandbox release">
+      <action dev="sgoeschl" type="fix" issue="EXEC-31" due-to="Benjamin Bentmann">
+        Invoking DefaultExecutor.execute(CommandLine command, Map environment) using 
+        a 'null' Map results in inheriting all environment variables of the current
+        process while passing an empty map implies starting the new process with no
+        environment variables. In short 'null' is not the same as an empty map. 
+      </action>
       <action dev="sgoeschl" type="add" due-to="Benjamin Bentmann">
         Added one additional test : DefaultExecutorTest.testExecuteWithFancyArg
       </action>
diff --git a/src/main/java/org/apache/commons/exec/Executor.java b/src/main/java/org/apache/commons/exec/Executor.java
index 7119af6c..96aa5549 100644
--- a/src/main/java/org/apache/commons/exec/Executor.java
+++ b/src/main/java/org/apache/commons/exec/Executor.java
@@ -82,15 +82,51 @@ public interface Executor {
     void setWorkingDirectory(File dir);
 
     /*
-     * Methods for starting synchronous execution.
-     * Returns process exit value
+     * Methods for starting synchronous execution. The child process inherits
+     * all environment variables of the parent process.
+     *
+     * @param command the command to execute
+     * @return process exit value
+     * @throws ExecuteException execution of subprocess failed
+     */
+    int execute(CommandLine command) throws ExecuteException, IOException;
+
+    /*
+     * Methods for starting synchronous execution. If
+     *
+     * @param command the command to execute
+     * @param environment The environment for the new process. If null, the environment
+     *          of the current process is used.
+     * @return process exit value
+     * @throws ExecuteException execution of subprocess failed
      */
-    int execute(CommandLine command) throws ExecuteException, IOException; 
     int execute(CommandLine command, Map environment) throws ExecuteException, IOException;
     
     /*
      * Methods for starting asynchronous execution. Result provided to callback handler
      */
+
+    /*
+     * Methods for starting synchronous execution. The child process inherits
+     * all environment variables of the parent process. Result provided to
+     * callback handler.
+     *
+     * @param command the command to execute
+     * @return process exit value
+     * @throws ExecuteException execution of subprocess failed
+     */
     void execute(CommandLine command, ExecuteResultHandler handler) throws ExecuteException, IOException;
+
+    /*
+     * Methods for starting synchronous execution. The child process inherits
+     * all environment variables of the parent process. Result provided to
+     * callback handler.
+     *
+     * @param command the command to execute
+     * @param environment The environment for the new process. If null, the environment
+     *          of the current process is used.
+     * @return process exit value
+     * @throws ExecuteException execution of subprocess failed     
+     */
     void execute(CommandLine command, Map environment, ExecuteResultHandler handler) throws ExecuteException, IOException;
 }
diff --git a/src/main/java/org/apache/commons/exec/environment/DefaultProcessingEnvironment.java b/src/main/java/org/apache/commons/exec/environment/DefaultProcessingEnvironment.java
index 2065f212..4ea65690 100644
--- a/src/main/java/org/apache/commons/exec/environment/DefaultProcessingEnvironment.java
+++ b/src/main/java/org/apache/commons/exec/environment/DefaultProcessingEnvironment.java
@@ -131,7 +131,7 @@ public class DefaultProcessingEnvironment {
         Executor exe = new DefaultExecutor();
         exe.setStreamHandler(new PumpStreamHandler(out));
         // ignore the exit value - Just try to use what we got
-        exe.execute(getProcEnvCommand(), new HashMap());
+        exe.execute(getProcEnvCommand());
         return new BufferedReader(new StringReader(toString(out)));
     }
 
diff --git a/src/main/java/org/apache/commons/exec/environment/EnvironmentUtil.java b/src/main/java/org/apache/commons/exec/environment/EnvironmentUtil.java
index b22b7624..6dcbecdb 100644
--- a/src/main/java/org/apache/commons/exec/environment/EnvironmentUtil.java
+++ b/src/main/java/org/apache/commons/exec/environment/EnvironmentUtil.java
@@ -49,11 +49,12 @@ public class EnvironmentUtil {
     /**
      * Get the variable list as an array.
      *
-     * @param environment the environment to use
-     * @return array of key=value assignment strings
+     * @param environment the environment to use, may be <code>null</code>
+     * @return array of key=value assignment strings or <code>null</code> if and only if
+     *     the input map was <code>null</code>
      */
     public static String[] toStrings(Map environment) {
-        if (environment.size() == 0) {
+        if (environment == null) {
             return null;
         }
         String[] result = new String[environment.size()];
diff --git a/src/main/java/org/apache/commons/exec/launcher/CommandLauncherImpl.java b/src/main/java/org/apache/commons/exec/launcher/CommandLauncherImpl.java
index e844c899..7f868655 100644
--- a/src/main/java/org/apache/commons/exec/launcher/CommandLauncherImpl.java
+++ b/src/main/java/org/apache/commons/exec/launcher/CommandLauncherImpl.java
@@ -34,13 +34,8 @@ public abstract class CommandLauncherImpl implements CommandLauncher {
 
     public Process exec(final CommandLine cmd, final Map env)
             throws IOException {
-        String[] envVar = null;
-        if(env != null) {
-            envVar = EnvironmentUtil.toStrings(env);
-        }
-        
-        return Runtime.getRuntime().exec(cmd.toStrings(),
-                envVar);
+        String[] envVar = EnvironmentUtil.toStrings(env);
+        return Runtime.getRuntime().exec(cmd.toStrings(), envVar);
     }
 
     public abstract Process exec(final CommandLine cmd, final Map env,
diff --git a/src/main/java/org/apache/commons/exec/launcher/Java13CommandLauncher.java b/src/main/java/org/apache/commons/exec/launcher/Java13CommandLauncher.java
index 409ae391..c384a947 100644
--- a/src/main/java/org/apache/commons/exec/launcher/Java13CommandLauncher.java
+++ b/src/main/java/org/apache/commons/exec/launcher/Java13CommandLauncher.java
@@ -53,10 +53,7 @@ public class Java13CommandLauncher extends CommandLauncherImpl {
 	public Process exec(final CommandLine cmd, final Map env,
 			final File workingDir) throws IOException {
 
-		String[] envVars = null;
-		if(env != null) {
-			envVars = EnvironmentUtil.toStrings(env);
-		}
+		String[] envVars = EnvironmentUtil.toStrings(env);
 
 		return Runtime.getRuntime().exec(cmd.toStrings(),
                 envVars, workingDir);
diff --git a/src/test/java/org/apache/commons/exec/environment/EnvironmentUtilTest.java b/src/test/java/org/apache/commons/exec/environment/EnvironmentUtilTest.java
index 141282c9..112ecce8 100644
--- a/src/test/java/org/apache/commons/exec/environment/EnvironmentUtilTest.java
+++ b/src/test/java/org/apache/commons/exec/environment/EnvironmentUtilTest.java
@@ -29,7 +29,11 @@ import org.apache.commons.exec.TestUtil;
 public class EnvironmentUtilTest extends TestCase {
 
     public void testToStrings() throws IOException {
+        TestUtil.assertEquals(null, EnvironmentUtil.toStrings(null), false);
+
         Map env = new HashMap();
+
+        TestUtil.assertEquals(new String[0], EnvironmentUtil.toStrings(env), false);
         
         env.put("foo2", "bar2");
         env.put("foo", "bar");
