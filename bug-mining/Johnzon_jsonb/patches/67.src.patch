diff --git a/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JohnzonBuilder.java b/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JohnzonBuilder.java
index 0b749a44..d21bb180 100644
--- a/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JohnzonBuilder.java
+++ b/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JohnzonBuilder.java
@@ -164,9 +164,6 @@ public class JohnzonBuilder implements JsonbBuilder {
                 .map(PropertyVisibilityStrategy.class::cast).orElse(new DefaultPropertyVisibilityStrategy());
 
         config.getProperty("johnzon.attributeOrder").ifPresent(comp -> builder.setAttributeOrder(Comparator.class.cast(comp)));
-        config.getProperty("johnzon.enforceQuoteString")
-                .map(this::toBool)
-                .ifPresent(builder::setEnforceQuoteString);
         config.getProperty("johnzon.primitiveConverters")
                 .map(this::toBool)
                 .ifPresent(builder::setPrimitiveConverters);
diff --git a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/DefaultMappingTest.java b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/DefaultMappingTest.java
index f8738efa..c930b448 100644
--- a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/DefaultMappingTest.java
+++ b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/DefaultMappingTest.java
@@ -61,6 +61,7 @@ import static org.junit.Assert.fail;
 // taken from the examples of the spec
 // TODO: bunch of asserts
 //CHECKSTYLE:OFF
+
 public class DefaultMappingTest {
     private static final Jsonb JSONB = JsonbBuilder.create();
 
@@ -150,11 +151,11 @@ public class DefaultMappingTest {
 
     @Test
     public void simpleValues() {
-        assertEquals("\"strValue\"", JSONB.toJson("\"strValue\""));
-        assertEquals("true", JSONB.toJson("true"));
-        assertEquals("false", JSONB.toJson("false"));
-        assertEquals("null", JSONB.toJson("null"));
-        assertEquals("strValue", JSONB.toJson(Optional.of("strValue")));
+        assertEquals("\"\"strValue\"\"", JSONB.toJson("\"strValue\""));
+        assertEquals("\"true\"", JSONB.toJson("true"));
+        assertEquals("\"false\"", JSONB.toJson("false"));
+        assertEquals("\"null\"", JSONB.toJson("null"));
+        assertEquals("\"strValue\"", JSONB.toJson(Optional.of("strValue")));
         assertEquals("null", JSONB.toJson(Optional.ofNullable(null)));
         assertEquals("null", JSONB.toJson(Optional.empty()));
         assertEquals("1", JSONB.toJson(OptionalInt.of(1)));
@@ -195,6 +196,9 @@ public class DefaultMappingTest {
 
         OptionalDouble emptyOptionalDouble = JSONB.fromJson("null", OptionalDouble.class);
         assertTrue(!emptyOptionalDouble.isPresent());
+
+        final String testText = "test";
+        assertEquals(testText, JSONB.fromJson(JSONB.toJson(testText), String.class));
     }
 
     public static void fromJsonPrimitives() {
