diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 3aa96abb..d8ebb5d0 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -76,7 +76,9 @@ BUGS FROM PREVIOUS RELEASE
                      Thanks to Til Boerner
  * [VALIDATOR-350] - Should "x.root" validate as a domain name?
                      Removed "root" from TLD list. 
-                     Also "um" and "yu" as they are currently "Not assigned" 
+                     Also "um" and "yu" as they are currently "Not assigned"
+ * [VALIDATOR-306] - DomainValidator accepts labels longer than 63 chars and domain name lengths exceeding 255 chars
+                     Thanks to Jukka Timonen
 
 IMPROVEMENTS OVER PREVIOUS RELEASE
 ===================================
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 0d81bed8..3130fb25 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -43,6 +43,9 @@ The <action> type attribute can be add,update,fix,remove.
   <body>
 
   <release version="1.4.1" date="tba" description="1.4 Maintenance release">
+    <action issue="VALIDATOR-306" dev="sebb" type="fix" due-to="Jukka Timonen">
+     DomainValidator accepts labels longer than 63 chars and domain name lengths exceeding 255 chars
+    </action>
     <action issue="VALIDATOR-349" dev="sebb" type="update">
      TLD tables should be pre-sorted
     </action>
diff --git a/src/main/java/org/apache/commons/validator/routines/DomainValidator.java b/src/main/java/org/apache/commons/validator/routines/DomainValidator.java
index 44f74064..17198013 100644
--- a/src/main/java/org/apache/commons/validator/routines/DomainValidator.java
+++ b/src/main/java/org/apache/commons/validator/routines/DomainValidator.java
@@ -67,10 +67,12 @@ public class DomainValidator implements Serializable {
     // Regular expression strings for hostnames (derived from RFC2396 and RFC 1123)
 
     // RFC2396: domainlabel   = alphanum | alphanum *( alphanum | "-" ) alphanum
-    private static final String DOMAIN_LABEL_REGEX = "\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*";
+    // Max 63 characters
+    private static final String DOMAIN_LABEL_REGEX = "\\p{Alnum}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?";
 
     // RFC2396 toplabel = alpha | alpha *( alphanum | "-" ) alphanum
-    private static final String TOP_LABEL_REGEX = "\\p{Alpha}|(?:\\p{Alpha}(?:[\\p{Alnum}-])*\\p{Alnum})";
+    // Max 63 characters
+    private static final String TOP_LABEL_REGEX = "\\p{Alpha}(?>[\\p{Alnum}-]{0,61}\\p{Alnum})?";
 
     private static final String DOMAIN_NAME_REGEX =
             "^(?:" + DOMAIN_LABEL_REGEX + "\\.)+" + "(" + TOP_LABEL_REGEX + ")$";
@@ -135,6 +137,9 @@ public class DomainValidator implements Serializable {
      * @return true if the parameter is a valid domain name
      */
     public boolean isValid(String domain) {
+        if (domain == null || domain.length() > 253) {
+            return false;
+        }
         String[] groups = domainRegex.match(domain);
         if (groups != null && groups.length > 0) {
             return isValidTld(groups[0]);
@@ -142,8 +147,12 @@ public class DomainValidator implements Serializable {
         return allowLocal && hostnameRegex.isValid(domain);
     }
 
-    // package protected for unit test access 
+    // package protected for unit test access
+    // must agree with isValid() above
     final boolean isValidDomainSyntax(String domain) {
+        if (domain == null || domain.length() > 253) {
+            return false;
+        }
         String[] groups = domainRegex.match(domain);
         return (groups != null && groups.length > 0);
     }
diff --git a/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java
index ee9b60d9..07f8874e 100644
--- a/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java
+++ b/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java
@@ -163,6 +163,28 @@ public class DomainValidatorTest extends TestCase {
         assertTrue("xn--d1abbgf6aiiy.xn--p1ai should validate", validator.isValid("xn--d1abbgf6aiiy.xn--p1ai")); // This uses a valid TLD
      }
 
+    // labels are a max of 63 chars and domains 253
+    public void testValidator306() {
+        final String longString = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A";
+        assertEquals(63, longString.length()); // 26 * 2 + 11
+        
+        assertTrue("63 chars label should validate", validator.isValidDomainSyntax(longString+".com"));
+        assertFalse("64 chars label should fail", validator.isValidDomainSyntax(longString+"x.com"));
+
+        assertTrue("63 chars TLD should validate", validator.isValidDomainSyntax("test."+longString));
+        assertFalse("64 chars TLD should fail", validator.isValidDomainSyntax("test.x"+longString));
+        
+        final String longDomain = 
+                longString
+                + "." + longString
+                + "." + longString
+                + "." + longString.substring(0,61)
+                ; 
+        assertEquals(253, longDomain.length());
+        assertTrue("253 chars domain should validate", validator.isValidDomainSyntax(longDomain));
+        assertFalse("254 chars domain should fail", validator.isValidDomainSyntax(longDomain+"x"));
+    }
+
     // Check array is sorted and is lower-case
     public void test_INFRASTRUCTURE_TLDS_sortedAndLowerCase() throws Exception {
         final boolean sorted = isSortedLowerCase("INFRASTRUCTURE_TLDS");
diff --git a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java
index 18d5aa05..743f382c 100644
--- a/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java
+++ b/src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java
@@ -127,7 +127,7 @@ public class UrlValidatorTest extends TestCase {
    public void testValidator202() {
        String[] schemes = {"http","https"};
        UrlValidator urlValidator = new UrlValidator(schemes, UrlValidator.NO_FRAGMENTS);
-       assertTrue(urlValidator.isValid("http://www.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.org"));
+       assertTrue(urlValidator.isValid("http://l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.org"));
    }
 
    public void testValidator204() {
