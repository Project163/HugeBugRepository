diff --git a/Makefile b/Makefile
index 69ce464d..8d7ecdf3 100644
--- a/Makefile
+++ b/Makefile
@@ -20,7 +20,7 @@ include Makefile.common
 MVN:=mvn
 
 COMMONS_CRYPTO_OUT:=$(TARGET)/$(commons-crypto)-$(os_arch)
-COMMONS_CRYPTO_OBJ:=$(addprefix $(COMMONS_CRYPTO_OUT)/,OpensslCryptoRandom.o OpensslNative.o)
+COMMONS_CRYPTO_OBJ:=$(addprefix $(COMMONS_CRYPTO_OUT)/,OpensslCryptoRandom.o OpenSslNative.o)
 
 ifeq ($(OS_NAME),SunOS)
   TAR:= gtar
@@ -33,17 +33,17 @@ NATIVE_DLL:=$(NATIVE_TARGET_DIR)/$(LIBNAME)
 
 all: $(NATIVE_DLL)
 
-$(TARGET)/jni-classes/org/apache/commons/crypto/cipher/OpensslNative.h: $(TARGET)/classes/org/apache/commons/crypto/cipher/OpensslNative.class
-	$(JAVAH) -force -classpath $(TARGET)/jni-classes:$(TARGET)/classes -o $@ org.apache.commons.crypto.cipher.OpensslNative
+$(TARGET)/jni-classes/org/apache/commons/crypto/cipher/OpenSslNative.h: $(TARGET)/classes/org/apache/commons/crypto/cipher/OpenSslNative.class
+	$(JAVAH) -force -classpath $(TARGET)/jni-classes:$(TARGET)/classes -o $@ org.apache.commons.crypto.cipher.OpenSslNative
 
-$(TARGET)/jni-classes/org/apache/commons/crypto/random/OpensslCryptoRandomNative.h: $(TARGET)/classes/org/apache/commons/crypto/random/OpensslCryptoRandomNative.class
-	$(JAVAH) -force -classpath $(TARGET)/jni-classes:$(TARGET)/classes -o $@ org.apache.commons.crypto.random.OpensslCryptoRandomNative
+$(TARGET)/jni-classes/org/apache/commons/crypto/random/OpenSslCryptoRandomNative.h: $(TARGET)/classes/org/apache/commons/crypto/random/OpenSslCryptoRandomNative.class
+	$(JAVAH) -force -classpath $(TARGET)/jni-classes:$(TARGET)/classes -o $@ org.apache.commons.crypto.random.OpenSslCryptoRandomNative
 
-$(COMMONS_CRYPTO_OUT)/OpensslNative.o : $(SRC_NATIVE)/org/apache/commons/crypto/cipher/OpensslNative.c $(TARGET)/jni-classes/org/apache/commons/crypto/cipher/OpensslNative.h
+$(COMMONS_CRYPTO_OUT)/OpenSslNative.o : $(SRC_NATIVE)/org/apache/commons/crypto/cipher/OpenSslNative.c $(TARGET)/jni-classes/org/apache/commons/crypto/cipher/OpenSslNative.h
 	@mkdir -p $(@D)
 	$(CC) $(CFLAGS) -c $< -o $@
 
-$(COMMONS_CRYPTO_OUT)/OpensslCryptoRandom.o : $(SRC_NATIVE)/org/apache/commons/crypto/random/OpensslCryptoRandomNative.c $(TARGET)/jni-classes/org/apache/commons/crypto/random/OpensslCryptoRandomNative.h
+$(COMMONS_CRYPTO_OUT)/OpensslCryptoRandom.o : $(SRC_NATIVE)/org/apache/commons/crypto/random/OpenSslCryptoRandomNative.c $(TARGET)/jni-classes/org/apache/commons/crypto/random/OpenSslCryptoRandomNative.h
 	@mkdir -p $(@D)
 	$(CC) $(CFLAGS) -c $< -o $@
 
diff --git a/src/main/java/org/apache/commons/crypto/cipher/OpenSsl.java b/src/main/java/org/apache/commons/crypto/cipher/OpenSsl.java
index 6c72ea52..231c3bc5 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/OpenSsl.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/OpenSsl.java
@@ -92,7 +92,7 @@ static int get(String padding) throws NoSuchPaddingException {
         String loadingFailure = null;
         try {
             if (Crypto.isNativeCodeLoaded()) {
-                OpensslNative.initIDs();
+                OpenSslNative.initIDs();
             }
         } catch (Exception t) {
             loadingFailure = t.getMessage();
@@ -142,7 +142,7 @@ public static OpenSsl getInstance(String transformation)
         int algorithmMode = AlgorithmMode.get(transform.algorithm,
                 transform.mode);
         int padding = Padding.get(transform.padding);
-        long context = OpensslNative.initContext(algorithmMode, padding);
+        long context = OpenSslNative.initContext(algorithmMode, padding);
         return new OpenSsl(context, algorithmMode, padding);
     }
 
@@ -205,7 +205,7 @@ private static Transform tokenizeTransformation(String transformation)
      * @param iv crypto iv
      */
     public void init(int mode, byte[] key, byte[] iv) {
-        context = OpensslNative
+        context = OpenSslNative
                 .init(context, mode, algorithm, padding, key, iv);
     }
 
@@ -242,7 +242,7 @@ public int update(ByteBuffer input, ByteBuffer output)
         checkState();
         Utils.checkArgument(input.isDirect() && output.isDirect(),
                 "Direct buffers are required.");
-        int len = OpensslNative.update(context, input, input.position(),
+        int len = OpenSslNative.update(context, input, input.position(),
                 input.remaining(), output, output.position(),
                 output.remaining());
         input.position(input.limit());
@@ -266,7 +266,7 @@ public int update(ByteBuffer input, ByteBuffer output)
     public int update(byte[] input, int inputOffset, int inputLen,
             byte[] output, int outputOffset) throws ShortBufferException {
         checkState();
-        return OpensslNative.updateByteArray(context, input, inputOffset,
+        return OpenSslNative.updateByteArray(context, input, inputOffset,
                 inputLen, output, outputOffset, output.length - outputOffset);
     }
 
@@ -313,7 +313,7 @@ public int doFinal(ByteBuffer output) throws ShortBufferException,
             IllegalBlockSizeException, BadPaddingException {
         checkState();
         Utils.checkArgument(output.isDirect(), "Direct buffer is required.");
-        int len = OpensslNative.doFinal(context, output, output.position(),
+        int len = OpenSslNative.doFinal(context, output, output.position(),
                 output.remaining());
         output.position(output.position() + len);
         return len;
@@ -341,14 +341,14 @@ public int doFinal(byte[] output, int outputOffset)
             throws ShortBufferException, IllegalBlockSizeException,
             BadPaddingException {
         checkState();
-        return OpensslNative.doFinalByteArray(context, output, outputOffset,
+        return OpenSslNative.doFinalByteArray(context, output, outputOffset,
                 output.length - outputOffset);
     }
 
     /** Forcibly clean the context. */
     public void clean() {
         if (context != 0) {
-            OpensslNative.clean(context);
+            OpenSslNative.clean(context);
             context = 0;
         }
     }
diff --git a/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java b/src/main/java/org/apache/commons/crypto/cipher/OpenSslNative.java
similarity index 96%
rename from src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java
rename to src/main/java/org/apache/commons/crypto/cipher/OpenSslNative.java
index 9bac6ddd..c73be17c 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/OpenSslNative.java
@@ -21,14 +21,14 @@
 
 /**
  * JNI interface of {@link OpenSsl} implementation. The native method in this
- * class is defined in OpensslNative.h (generated by javah).
+ * class is defined in OpenSslNative.h (generated by javah).
  */
-class OpensslNative {
+class OpenSslNative {
 
   /**
-   * The private constructor of {@link OpensslNative}.
+   * The private constructor of {@link OpenSslNative}.
    */
-    private OpensslNative() {
+    private OpenSslNative() {
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/crypto/jna/OpensslJna.java b/src/main/java/org/apache/commons/crypto/jna/OpenSslJna.java
similarity index 97%
rename from src/main/java/org/apache/commons/crypto/jna/OpensslJna.java
rename to src/main/java/org/apache/commons/crypto/jna/OpenSslJna.java
index 2d255ab1..cfdff2e5 100644
--- a/src/main/java/org/apache/commons/crypto/jna/OpensslJna.java
+++ b/src/main/java/org/apache/commons/crypto/jna/OpenSslJna.java
@@ -23,7 +23,7 @@
 /**
  * Public class to give access to the package protected class objects
  */
-public final class OpensslJna {
+public final class OpenSslJna {
 
     public static Class<? extends CryptoCipher> getCipherClass() {
         return OpenSslJnaCipher.class;
diff --git a/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCipher.java b/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCipher.java
index adef3cf8..7b0b978a 100644
--- a/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCipher.java
+++ b/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCipher.java
@@ -71,7 +71,7 @@ public OpenSslJnaCipher(Properties props, String transformation)
         }
 
         padding = Padding.get(transform.padding);
-        context = OpensslNativeJna.EVP_CIPHER_CTX_new();
+        context = OpenSslNativeJna.EVP_CIPHER_CTX_new();
 
     }
 
@@ -89,9 +89,9 @@ public void init(int mode, Key key, AlgorithmParameterSpec params)
             throws InvalidKeyException, InvalidAlgorithmParameterException {
         Utils.checkNotNull(key);
         Utils.checkNotNull(params);
-        int cipherMode = OpensslNativeJna.OOSL_JNA_DECRYPT_MODE;
+        int cipherMode = OpenSslNativeJna.OOSL_JNA_DECRYPT_MODE;
         if (mode == Cipher.ENCRYPT_MODE) {
-            cipherMode = OpensslNativeJna.OOSL_JNA_ENCRYPT_MODE;
+            cipherMode = OpenSslNativeJna.OOSL_JNA_ENCRYPT_MODE;
         }
         byte[] iv;
         if (params instanceof IvParameterSpec) {
@@ -104,24 +104,24 @@ public void init(int mode, Key key, AlgorithmParameterSpec params)
         
        if(algMode == AlgorithmMode.AES_CBC) {
             switch(key.getEncoded().length) {
-                case 16: algo = OpensslNativeJna.EVP_aes_128_cbc(); break;
-                case 24: algo = OpensslNativeJna.EVP_aes_192_cbc(); break;
-                case 32: algo = OpensslNativeJna.EVP_aes_256_cbc(); break;
+                case 16: algo = OpenSslNativeJna.EVP_aes_128_cbc(); break;
+                case 24: algo = OpenSslNativeJna.EVP_aes_192_cbc(); break;
+                case 32: algo = OpenSslNativeJna.EVP_aes_256_cbc(); break;
                 default: throw new InvalidKeyException("keysize unsupported ("+key.getEncoded().length+")");
             }
 
         } else {
             switch(key.getEncoded().length) {
-                case 16: algo = OpensslNativeJna.EVP_aes_128_ctr(); break;
-                case 24: algo = OpensslNativeJna.EVP_aes_192_ctr(); break;
-                case 32: algo = OpensslNativeJna.EVP_aes_256_ctr(); break;
+                case 16: algo = OpenSslNativeJna.EVP_aes_128_ctr(); break;
+                case 24: algo = OpenSslNativeJna.EVP_aes_192_ctr(); break;
+                case 32: algo = OpenSslNativeJna.EVP_aes_256_ctr(); break;
                 default: throw new InvalidKeyException("keysize unsupported ("+key.getEncoded().length+")");
             }
         }
         
-        int retVal = OpensslNativeJna.EVP_CipherInit_ex(context, algo, null, key.getEncoded(), iv, cipherMode);
+        int retVal = OpenSslNativeJna.EVP_CipherInit_ex(context, algo, null, key.getEncoded(), iv, cipherMode);
         throwOnError(retVal);
-        OpensslNativeJna.EVP_CIPHER_CTX_set_padding(context, padding);
+        OpenSslNativeJna.EVP_CIPHER_CTX_set_padding(context, padding);
     }
 
     /**
@@ -138,7 +138,7 @@ public void init(int mode, Key key, AlgorithmParameterSpec params)
     public int update(ByteBuffer inBuffer, ByteBuffer outBuffer)
             throws ShortBufferException {
         int[] outlen = new int[1];
-        int retVal = OpensslNativeJna.EVP_CipherUpdate(context, outBuffer, outlen, inBuffer, inBuffer.remaining());
+        int retVal = OpenSslNativeJna.EVP_CipherUpdate(context, outBuffer, outlen, inBuffer, inBuffer.remaining());
         throwOnError(retVal);
         int len = outlen[0];
         inBuffer.position(inBuffer.limit());
@@ -191,7 +191,7 @@ public int doFinal(ByteBuffer inBuffer, ByteBuffer outBuffer)
             BadPaddingException {
         int uptLen = update(inBuffer, outBuffer);
         int[] outlen = new int[1];
-        int retVal = OpensslNativeJna.EVP_CipherFinal_ex(context, outBuffer, outlen);
+        int retVal = OpenSslNativeJna.EVP_CipherFinal_ex(context, outBuffer, outlen);
         throwOnError(retVal);
         int len = uptLen + outlen[0];
         outBuffer.position(outBuffer.position() + outlen[0]);
@@ -234,18 +234,18 @@ public int doFinal(byte[] input, int inputOffset, int inputLen,
     @Override
     public void close() {
         if(context != null) {
-            OpensslNativeJna.EVP_CIPHER_CTX_cleanup(context);
-            OpensslNativeJna.EVP_CIPHER_CTX_free(context);
+            OpenSslNativeJna.EVP_CIPHER_CTX_cleanup(context);
+            OpenSslNativeJna.EVP_CIPHER_CTX_free(context);
         }
     }
     
     private void throwOnError(int retVal) {  
         if(retVal != 1) {
-            NativeLong err = OpensslNativeJna.ERR_peek_error();
-            String errdesc = OpensslNativeJna.ERR_error_string(err, null);
+            NativeLong err = OpenSslNativeJna.ERR_peek_error();
+            String errdesc = OpenSslNativeJna.ERR_error_string(err, null);
             
             if(context != null) {
-                OpensslNativeJna.EVP_CIPHER_CTX_cleanup(context);
+                OpenSslNativeJna.EVP_CIPHER_CTX_cleanup(context);
             }
             throw new RuntimeException("return code "+retVal+" from openssl. Err code is "+err+": "+errdesc);
         }
diff --git a/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCryptoRandom.java b/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCryptoRandom.java
index 1f4e9718..7ab0b484 100644
--- a/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCryptoRandom.java
+++ b/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCryptoRandom.java
@@ -62,14 +62,14 @@ public OpenSslJnaCryptoRandom(Properties props)
 
         boolean rdrandLoaded = false;
         try {
-            OpensslNativeJna.ENGINE_load_rdrand();
-            rdrandEngine = OpensslNativeJna.ENGINE_by_id("rdrand");
+            OpenSslNativeJna.ENGINE_load_rdrand();
+            rdrandEngine = OpenSslNativeJna.ENGINE_by_id("rdrand");
             int ENGINE_METHOD_RAND = 0x0008;
             if(rdrandEngine != null) {
-                int rc = OpensslNativeJna.ENGINE_init(rdrandEngine);
+                int rc = OpenSslNativeJna.ENGINE_init(rdrandEngine);
                 
                 if(rc != 0) {
-                    int rc2 = OpensslNativeJna.ENGINE_set_default(rdrandEngine, ENGINE_METHOD_RAND);
+                    int rc2 = OpenSslNativeJna.ENGINE_set_default(rdrandEngine, ENGINE_METHOD_RAND);
                     if(rc2 != 0) {
                         rdrandLoaded = true;
                     }
@@ -99,13 +99,13 @@ public void nextBytes(byte[] bytes) {
             //this method is synchronized for now
             //to support multithreading https://wiki.openssl.org/index.php/Manual:Threads(3) needs to be done
             
-            if(rdrandEnabled && OpensslNativeJna.RAND_get_rand_method().equals(OpensslNativeJna.RAND_SSLeay())) {
+            if(rdrandEnabled && OpenSslNativeJna.RAND_get_rand_method().equals(OpenSslNativeJna.RAND_SSLeay())) {
                 close();
                 throw new RuntimeException("rdrand should be used but default is detected");
             }
             
             ByteBuffer buf = ByteBuffer.allocateDirect(bytes.length);
-            int retVal = OpensslNativeJna.RAND_bytes(buf, bytes.length);
+            int retVal = OpenSslNativeJna.RAND_bytes(buf, bytes.length);
             throwOnError(retVal);
             buf.rewind();
             buf.get(bytes,0, bytes.length);
@@ -155,18 +155,18 @@ final protected int next(int numBits) {
     @Override
     public void close() {
         closeRdrandEngine();
-        OpensslNativeJna.ENGINE_cleanup();
+        OpenSslNativeJna.ENGINE_cleanup();
         
         //cleanup locks
-        //OpensslNativeJna.CRYPTO_set_locking_callback(null);
+        //OpenSslNativeJna.CRYPTO_set_locking_callback(null);
         //LOCK.unlock();
     }
     
     private void closeRdrandEngine() {
         
         if(rdrandEngine != null) {
-            OpensslNativeJna.ENGINE_finish(rdrandEngine);
-            OpensslNativeJna.ENGINE_free(rdrandEngine);
+            OpenSslNativeJna.ENGINE_finish(rdrandEngine);
+            OpenSslNativeJna.ENGINE_free(rdrandEngine);
         }
     }
 
@@ -181,8 +181,8 @@ public boolean isRdrandEnabled() {
     
     private void throwOnError(int retVal) {  
         if(retVal != 1) {
-            NativeLong err = OpensslNativeJna.ERR_peek_error();
-            String errdesc = OpensslNativeJna.ERR_error_string(err, null);
+            NativeLong err = OpenSslNativeJna.ERR_peek_error();
+            String errdesc = OpenSslNativeJna.ERR_error_string(err, null);
             close();
             throw new RuntimeException("return code "+retVal+" from openssl. Err code is "+err+": "+errdesc);
         }
diff --git a/src/main/java/org/apache/commons/crypto/jna/OpensslNativeJna.java b/src/main/java/org/apache/commons/crypto/jna/OpensslNativeJna.java
index 5ffa25b6..6adddb24 100644
--- a/src/main/java/org/apache/commons/crypto/jna/OpensslNativeJna.java
+++ b/src/main/java/org/apache/commons/crypto/jna/OpensslNativeJna.java
@@ -24,7 +24,7 @@
 import com.sun.jna.NativeLong;
 import com.sun.jna.ptr.PointerByReference;
 
-class OpensslNativeJna {
+class OpenSslNativeJna {
 
     static final int OPENSSL_INIT_ENGINE_RDRAND = 0x00000200;
 
diff --git a/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandom.java b/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandom.java
index 15a85ab3..b02139e8 100644
--- a/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandom.java
+++ b/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandom.java
@@ -52,7 +52,7 @@ class OpenSslCryptoRandom extends Random implements CryptoRandom {
         boolean opensslLoaded = false;
         if (Crypto.isNativeCodeLoaded()) {
             try {
-                OpensslCryptoRandomNative.initSR();
+                OpenSslCryptoRandomNative.initSR();
                 opensslLoaded = true;
             } catch (Exception t) {// NOPMD
             }
@@ -82,7 +82,7 @@ public static boolean isNativeCodeLoaded() {
     public OpenSslCryptoRandom(Properties props)
             throws NoSuchAlgorithmException {
         //fallback needs to be initialized here in any case cause even if
-        //nativeEnabled is true OpensslCryptoRandomNative.nextRandBytes may fail
+        //nativeEnabled is true OpenSslCryptoRandomNative.nextRandBytes may fail
         fallback = new JavaCryptoRandom(props);
     }
 
@@ -93,7 +93,7 @@ public OpenSslCryptoRandom(Properties props)
      */
     @Override
     public void nextBytes(byte[] bytes) {
-        if (!nativeEnabled || !OpensslCryptoRandomNative.nextRandBytes(bytes)) {
+        if (!nativeEnabled || !OpenSslCryptoRandomNative.nextRandBytes(bytes)) {
             fallback.nextBytes(bytes);
         }
     }
diff --git a/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandomNative.java b/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandomNative.java
similarity index 78%
rename from src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandomNative.java
rename to src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandomNative.java
index 8c305e0f..84b92a64 100644
--- a/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandomNative.java
+++ b/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandomNative.java
@@ -20,15 +20,15 @@
 /**
  * JNI interface of {@link CryptoRandom} implementation for OpenSSL.
  * The native method in this class is defined in 
- * OpensslCryptoRandomNative.h (generated at build time by javah)
+ * OpenSslCryptoRandomNative.h (generated at build time by javah)
  * and implemented in the file
- * src/main/native/org/apache/commons/crypto/random/OpensslCryptoRandomNative.c
+ * src/main/native/org/apache/commons/crypto/random/OpenSslCryptoRandomNative.c
  */
-class OpensslCryptoRandomNative {
+class OpenSslCryptoRandomNative {
     /**
-     * The private constructor of {@link OpensslCryptoRandomNative}.
+     * The private constructor of {@link OpenSslCryptoRandomNative}.
      */
-    private OpensslCryptoRandomNative() {
+    private OpenSslCryptoRandomNative() {
     }
 
     /**
@@ -37,11 +37,11 @@ private OpensslCryptoRandomNative() {
     public native static void initSR();
 
     /**
-     * Judges whether use {@link OpensslCryptoRandomNative} to generate the
+     * Judges whether use {@link OpenSslCryptoRandomNative} to generate the
      * user-specified number of random bits.
      *
      * @param bytes the array to be filled in with random bytes.
-     * @return true if use {@link OpensslCryptoRandomNative} to generate the
+     * @return true if use {@link OpenSslCryptoRandomNative} to generate the
      *         user-specified number of random bits.
      */
     public native static boolean nextRandBytes(byte[] bytes);
diff --git a/src/main/native/org/apache/commons/crypto/cipher/OpensslNative.c b/src/main/native/org/apache/commons/crypto/cipher/OpenSslNative.c
similarity index 98%
rename from src/main/native/org/apache/commons/crypto/cipher/OpensslNative.c
rename to src/main/native/org/apache/commons/crypto/cipher/OpenSslNative.c
index f409011e..fd35f618 100644
--- a/src/main/native/org/apache/commons/crypto/cipher/OpensslNative.c
+++ b/src/main/native/org/apache/commons/crypto/cipher/OpenSslNative.c
@@ -27,7 +27,7 @@
 #undef JNIEXPORT
 #endif
 #define JNIEXPORT __attribute__((__visibility__("default")))
-#include "OpensslNative.h"
+#include "OpenSslNative.h"
 
 #ifdef UNIX
 static EVP_CIPHER_CTX * (*dlsym_EVP_CIPHER_CTX_new)(void);
@@ -112,7 +112,7 @@ static void loadAes(JNIEnv *env)
 #endif
 }
 
-JNIEXPORT void JNICALL Java_org_apache_commons_crypto_cipher_OpensslNative_initIDs
+JNIEXPORT void JNICALL Java_org_apache_commons_crypto_cipher_OpenSslNative_initIDs
     (JNIEnv *env, jclass clazz)
 {
   char msg[1000];
@@ -182,7 +182,7 @@ JNIEXPORT void JNICALL Java_org_apache_commons_crypto_cipher_OpensslNative_initI
   }
 }
 
-JNIEXPORT jlong JNICALL Java_org_apache_commons_crypto_cipher_OpensslNative_initContext
+JNIEXPORT jlong JNICALL Java_org_apache_commons_crypto_cipher_OpenSslNative_initContext
     (JNIEnv *env, jclass clazz, jint alg, jint padding)
 {
   if (alg != AES_CTR && alg != AES_CBC) {
@@ -243,7 +243,7 @@ static EVP_CIPHER * getEvpCipher(int alg, int keyLen)
   return cipher;
 }
 
-JNIEXPORT jlong JNICALL Java_org_apache_commons_crypto_cipher_OpensslNative_init
+JNIEXPORT jlong JNICALL Java_org_apache_commons_crypto_cipher_OpenSslNative_init
     (JNIEnv *env, jclass clazz, jlong ctx, jint mode, jint alg, jint padding,
     jbyteArray key, jbyteArray iv)
 {
@@ -350,7 +350,7 @@ static int check_update_max_output_len(EVP_CIPHER_CTX *context, int input_len,
   }
 }
 
-JNIEXPORT jint JNICALL Java_org_apache_commons_crypto_cipher_OpensslNative_update
+JNIEXPORT jint JNICALL Java_org_apache_commons_crypto_cipher_OpenSslNative_update
     (JNIEnv *env, jclass clazz, jlong ctx, jobject input, jint input_offset,
     jint input_len, jobject output, jint output_offset, jint max_output_len)
 {
@@ -379,7 +379,7 @@ JNIEXPORT jint JNICALL Java_org_apache_commons_crypto_cipher_OpensslNative_updat
   return output_len;
 }
 
-JNIEXPORT jint JNICALL Java_org_apache_commons_crypto_cipher_OpensslNative_updateByteArray
+JNIEXPORT jint JNICALL Java_org_apache_commons_crypto_cipher_OpenSslNative_updateByteArray
     (JNIEnv *env, jclass clazz, jlong ctx, jbyteArray input, jint input_offset,
     jint input_len, jbyteArray output, jint output_offset, jint max_output_len)
 {
@@ -435,7 +435,7 @@ static int check_doFinal_max_output_len(EVP_CIPHER_CTX *context,
   }
 }
 
-JNIEXPORT jint JNICALL Java_org_apache_commons_crypto_cipher_OpensslNative_doFinal
+JNIEXPORT jint JNICALL Java_org_apache_commons_crypto_cipher_OpenSslNative_doFinal
     (JNIEnv *env, jclass clazz, jlong ctx, jobject output, jint offset,
     jint max_output_len)
 {
@@ -461,7 +461,7 @@ JNIEXPORT jint JNICALL Java_org_apache_commons_crypto_cipher_OpensslNative_doFin
   return output_len;
 }
 
-JNIEXPORT jint JNICALL Java_org_apache_commons_crypto_cipher_OpensslNative_doFinalByteArray
+JNIEXPORT jint JNICALL Java_org_apache_commons_crypto_cipher_OpenSslNative_doFinalByteArray
     (JNIEnv *env, jclass clazz, jlong ctx, jbyteArray output, jint offset,
      jint max_output_len)
 {
@@ -490,7 +490,7 @@ JNIEXPORT jint JNICALL Java_org_apache_commons_crypto_cipher_OpensslNative_doFin
   return output_len;
 }
 
-JNIEXPORT void JNICALL Java_org_apache_commons_crypto_cipher_OpensslNative_clean
+JNIEXPORT void JNICALL Java_org_apache_commons_crypto_cipher_OpenSslNative_clean
     (JNIEnv *env, jclass clazz, jlong ctx)
 {
   EVP_CIPHER_CTX *context = CONTEXT(ctx);
diff --git a/src/main/native/org/apache/commons/crypto/random/OpensslCryptoRandomNative.c b/src/main/native/org/apache/commons/crypto/random/OpenSslCryptoRandomNative.c
similarity index 98%
rename from src/main/native/org/apache/commons/crypto/random/OpensslCryptoRandomNative.c
rename to src/main/native/org/apache/commons/crypto/random/OpenSslCryptoRandomNative.c
index 09c9af4d..07dd4f9e 100644
--- a/src/main/native/org/apache/commons/crypto/random/OpensslCryptoRandomNative.c
+++ b/src/main/native/org/apache/commons/crypto/random/OpenSslCryptoRandomNative.c
@@ -38,7 +38,7 @@
 #undef JNIEXPORT
 #endif
 #define JNIEXPORT __attribute__((__visibility__("default")))
-#include "OpensslCryptoRandomNative.h"
+#include "OpenSslCryptoRandomNative.h"
 
 #ifdef UNIX
 static void * (*dlsym_CRYPTO_malloc) (int, const char *, int);
@@ -91,7 +91,7 @@ static ENGINE * openssl_rand_init(void);
 static void openssl_rand_clean(ENGINE *eng, int clean_locks);
 static int openssl_rand_bytes(unsigned char *buf, int num);
 
-JNIEXPORT void JNICALL Java_org_apache_commons_crypto_random_OpensslCryptoRandomNative_initSR
+JNIEXPORT void JNICALL Java_org_apache_commons_crypto_random_OpenSslCryptoRandomNative_initSR
     (JNIEnv *env, jclass clazz)
 {
   char msg[1000];
@@ -165,7 +165,7 @@ JNIEXPORT void JNICALL Java_org_apache_commons_crypto_random_OpensslCryptoRandom
   openssl_rand_init();
 }
 
-JNIEXPORT jboolean JNICALL Java_org_apache_commons_crypto_random_OpensslCryptoRandomNative_nextRandBytes___3B
+JNIEXPORT jboolean JNICALL Java_org_apache_commons_crypto_random_OpenSslCryptoRandomNative_nextRandBytes___3B
     (JNIEnv *env, jobject object, jbyteArray bytes)
 {
   if (NULL == bytes) {
diff --git a/src/test/java/org/apache/commons/crypto/cipher/AbstractCipherTest.java b/src/test/java/org/apache/commons/crypto/cipher/AbstractCipherTest.java
index 9f5f3f3e..11908a1b 100644
--- a/src/test/java/org/apache/commons/crypto/cipher/AbstractCipherTest.java
+++ b/src/test/java/org/apache/commons/crypto/cipher/AbstractCipherTest.java
@@ -31,7 +31,7 @@
 import javax.xml.bind.DatatypeConverter;
 
 import org.apache.commons.crypto.conf.ConfigurationKeys;
-import org.apache.commons.crypto.jna.OpensslJna;
+import org.apache.commons.crypto.jna.OpenSslJna;
 import org.apache.commons.crypto.utils.ReflectionUtils;
 import org.apache.commons.crypto.utils.Utils;
 import org.junit.Assert;
@@ -44,7 +44,7 @@ public abstract class AbstractCipherTest {
 
     public static final String JCE_CIPHER_CLASSNAME = JceCipher.class.getName();
 
-    public static final String OPENSSLJNA_CIPHER_CLASSNAME = OpensslJna.getCipherClass().getName();
+    public static final String OPENSSLJNA_CIPHER_CLASSNAME = OpenSslJna.getCipherClass().getName();
 
     // data
     public static final int BYTEBUFFER_SIZE = 1000;
diff --git a/src/test/java/org/apache/commons/crypto/cipher/OpensslCipherTest.java b/src/test/java/org/apache/commons/crypto/cipher/OpenSslCipherTest.java
similarity index 99%
rename from src/test/java/org/apache/commons/crypto/cipher/OpensslCipherTest.java
rename to src/test/java/org/apache/commons/crypto/cipher/OpenSslCipherTest.java
index c5f04978..d144228b 100644
--- a/src/test/java/org/apache/commons/crypto/cipher/OpensslCipherTest.java
+++ b/src/test/java/org/apache/commons/crypto/cipher/OpenSslCipherTest.java
@@ -29,7 +29,7 @@
 import org.junit.Assume;
 import org.junit.Test;
 
-public class OpensslCipherTest extends AbstractCipherTest {
+public class OpenSslCipherTest extends AbstractCipherTest {
 
     @Override
     public void init() {
diff --git a/src/test/java/org/apache/commons/crypto/jna/OpensslJnaCipherTest.java b/src/test/java/org/apache/commons/crypto/jna/OpenSslJnaCipherTest.java
similarity index 95%
rename from src/test/java/org/apache/commons/crypto/jna/OpensslJnaCipherTest.java
rename to src/test/java/org/apache/commons/crypto/jna/OpenSslJnaCipherTest.java
index 30b7fde8..6f5990a2 100644
--- a/src/test/java/org/apache/commons/crypto/jna/OpensslJnaCipherTest.java
+++ b/src/test/java/org/apache/commons/crypto/jna/OpenSslJnaCipherTest.java
@@ -21,7 +21,7 @@
 import org.apache.commons.crypto.cipher.AbstractCipherTest;
 import org.apache.commons.crypto.jna.OpenSslJnaCipher;
 
-public class OpensslJnaCipherTest extends AbstractCipherTest {
+public class OpenSslJnaCipherTest extends AbstractCipherTest {
 
     @Override
     public void init() {
diff --git a/src/test/java/org/apache/commons/crypto/jna/OpensslJnaCryptoRandomTest.java b/src/test/java/org/apache/commons/crypto/jna/OpenSslJnaCryptoRandomTest.java
similarity index 96%
rename from src/test/java/org/apache/commons/crypto/jna/OpensslJnaCryptoRandomTest.java
rename to src/test/java/org/apache/commons/crypto/jna/OpenSslJnaCryptoRandomTest.java
index 550b4a6b..990bfd2c 100644
--- a/src/test/java/org/apache/commons/crypto/jna/OpensslJnaCryptoRandomTest.java
+++ b/src/test/java/org/apache/commons/crypto/jna/OpenSslJnaCryptoRandomTest.java
@@ -28,7 +28,7 @@
 
 import static org.junit.Assert.fail;
 
-public class OpensslJnaCryptoRandomTest extends AbstractRandomTest {
+public class OpenSslJnaCryptoRandomTest extends AbstractRandomTest {
 
     @Override
     public CryptoRandom getCryptoRandom() throws GeneralSecurityException {
