diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 37b7c531..001d4a37 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -54,6 +54,7 @@ Bugs Fixed in 3.6.0:
 * JEXL-441:     Tokenization error if "\n" in template expression.
 * JEXL-439:     When using reference capture, incorrect scoping when local variable redefines a captured symbo
 * JEXL-437:     Semicolons actually not optional between function calls on separate lines
+* JEXL-446:     ClassTool module inspection is too strict
 
 
 ========================================================================================================================
diff --git a/src/main/java/org/apache/commons/jexl3/internal/introspection/ClassTool.java b/src/main/java/org/apache/commons/jexl3/internal/introspection/ClassTool.java
index 6aa22272..3a78d384 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/introspection/ClassTool.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/introspection/ClassTool.java
@@ -30,12 +30,15 @@ final class ClassTool {
     private static final MethodHandle GET_PKGNAME;
     /** The Module.isExported(String packageName) method. */
     private static final MethodHandle IS_EXPORTED;
+    /** The Module of JEXL itself. */
+    private static final Object JEXL_MODULE;
 
     static {
         final MethodHandles.Lookup LOOKUP = MethodHandles.lookup();
         MethodHandle getModule = null;
         MethodHandle getPackageName = null;
         MethodHandle isExported = null;
+        Object myModule = null;
         try {
             final Class<?> modulec = ClassTool.class.getClassLoader().loadClass("java.lang.Module");
             if (modulec != null) {
@@ -43,13 +46,15 @@ final class ClassTool {
                 if (getModule != null) {
                     getPackageName = LOOKUP.findVirtual(Class.class, "getPackageName", MethodType.methodType(String.class));
                     if (getPackageName != null) {
-                        isExported = LOOKUP.findVirtual(modulec, "isExported", MethodType.methodType(boolean.class, String.class));
+                        myModule = getModule.invoke(ClassTool.class);
+                        isExported = LOOKUP.findVirtual(modulec, "isExported", MethodType.methodType(boolean.class, String.class, modulec));
                     }
                 }
             }
-        } catch (final Exception e) {
+        } catch (final Throwable e) {
             // ignore all
         }
+        JEXL_MODULE = myModule;
         GET_MODULE = getModule;
         GET_PKGNAME = getPackageName;
         IS_EXPORTED = isExported;
@@ -103,18 +108,25 @@ final class ClassTool {
     }
 
     /**
-     * Checks whether a class is exported by its module (Java 9+).
+     * Checks whether a class is exported by its module (Java 9+) to JEXL.
      * The code performs the following sequence through reflection (since the same jar can run
      * on a Java8 or Java9+ runtime and the module features does not exist on 8).
      * {@code
+     * Module jexlModule ClassTool.getClass().getModule();
      * Module module = declarator.getModule();
-     * return module.isExported(declarator.getPackageName());
+     * return module.isExported(declarator.getPackageName(), jexlModule);
      * }
      * This is required since some classes and methods may not be exported thus not callable through
-     * reflection.
+     * reflection.  A package can be non-exported, <i>unconditionally</i> exported (to all reading
+     * modules), or use <i>qualified</i> exports to only export the package to specifically named
+     * modules.  This method is only concerned with whether JEXL may reflectively access the
+     * package, so a qualified export naming the JEXL module is the least-privilege access required.
+     * The declarator's module may also use: unqualified exports, qualified {@code opens}, or
+     * unqualified {@code opens}, in increasing order of privilege; the last two allow reflective
+     * access to non-public members and are not recommended.
      *
      * @param declarator the class
-     * @return true if class is exported or no module support exists
+     * @return true if class is exported (to JEXL) or no module support exists
      */
     static boolean isExported(final Class<?> declarator) {
         if (IS_EXPORTED != null) {
@@ -122,7 +134,7 @@ final class ClassTool {
                 final Object module = GET_MODULE.invoke(declarator);
                 if (module != null) {
                     final String pkgName = (String) GET_PKGNAME.invoke(declarator);
-                    return (Boolean) IS_EXPORTED.invoke(module, pkgName);
+                    return (Boolean) IS_EXPORTED.invoke(module, pkgName, JEXL_MODULE);
                 }
             } catch (final Throwable e) {
                 // ignore
