diff --git a/src/main/java/org/apache/commons/crypto/cipher/JceCipher.java b/src/main/java/org/apache/commons/crypto/cipher/JceCipher.java
index 65079b65..f5bdf924 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/JceCipher.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/JceCipher.java
@@ -30,6 +30,7 @@
 import javax.crypto.IllegalBlockSizeException;
 import javax.crypto.ShortBufferException;
 
+import org.apache.commons.crypto.conf.ConfigurationKeys;
 import org.apache.commons.crypto.utils.Utils;
 
 /**
@@ -52,7 +53,7 @@ public JceCipher(Properties props, CipherTransformation transformation)
         this.props = props;
         this.transformation = transformation;
 
-        String provider = Utils.getJCEProvider(props);
+        String provider = getJCEProvider(props);
         if (provider == null || provider.isEmpty()) {
             cipher = Cipher.getInstance(transformation.getName());
         } else {
@@ -204,4 +205,17 @@ public int doFinal(byte[] input, int inputOffset, int inputLen,
     public void close() {
         // Do nothing
     }
+
+    /**
+     * Gets the Jce provider.
+     *
+     * @param props The <code>Properties</code> class represents a set of
+     *        properties.
+     * @return the jce provider based on the props.
+     */
+    private static String getJCEProvider(Properties props) {
+        return props.getProperty(ConfigurationKeys.COMMONS_CRYPTO_CIPHER_JCE_PROVIDER_KEY) !=
+            null ? props.getProperty(ConfigurationKeys.COMMONS_CRYPTO_CIPHER_JCE_PROVIDER_KEY)
+            : System.getProperty(ConfigurationKeys.COMMONS_CRYPTO_CIPHER_JCE_PROVIDER_KEY);
+    }
 }
diff --git a/src/main/java/org/apache/commons/crypto/utils/Utils.java b/src/main/java/org/apache/commons/crypto/utils/Utils.java
index 0388a0ee..3fa3a18f 100644
--- a/src/main/java/org/apache/commons/crypto/utils/Utils.java
+++ b/src/main/java/org/apache/commons/crypto/utils/Utils.java
@@ -157,19 +157,6 @@ public static String getCipherClassString(Properties props) {
         return cipherClassString;
     }
 
-    /**
-     * Gets the Jce provider.
-     *
-     * @param props The <code>Properties</code> class represents a set of
-     *        properties.
-     * @return the jce provider based on the props.
-     */
-    public static String getJCEProvider(Properties props) {
-        return props.getProperty(ConfigurationKeys.COMMONS_CRYPTO_CIPHER_JCE_PROVIDER_KEY) !=
-            null ? props.getProperty(ConfigurationKeys.COMMONS_CRYPTO_CIPHER_JCE_PROVIDER_KEY)
-            : System.getProperty(ConfigurationKeys.COMMONS_CRYPTO_CIPHER_JCE_PROVIDER_KEY);
-    }
-
     /**
      * Gets the random device path.
      *
