diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
index 00688803..886f29af 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
@@ -334,13 +334,17 @@ public class MappingParserImpl implements MappingParser {
             jsonPointers.put(jsonPointer.toString(), t);
         }
 
-        for (final Map.Entry<String, Mappings.Setter> setter : classMapping.setters.entrySet()) {
-            final JsonValue jsonValue = object.get(setter.getKey());
+        for (final Map.Entry<String, JsonValue> jsonEntry : object.entrySet()) {
+            final Mappings.Setter value = classMapping.setters.get(jsonEntry.getKey());
+            if (value == null) {
+                continue;
+            }
+
+            final JsonValue jsonValue = jsonEntry.getValue();
             final JsonValue.ValueType valueType = jsonValue != null ? jsonValue.getValueType() : null;
 
-            final Mappings.Setter value = setter.getValue();
             if (JsonValue.class == value.paramType) {
-                setter.getValue().writer.write(t, jsonValue);
+                value.writer.write(t, jsonValue);
                 continue;
             }
             if (jsonValue == null) {
@@ -353,7 +357,7 @@ public class MappingParserImpl implements MappingParser {
             } else {
                 Object existingInstance = null;
                 if (config.isReadAttributeBeforeWrite()) {
-                    final Mappings.Getter getter = classMapping.getters.get(setter.getKey());
+                    final Mappings.Getter getter = classMapping.getters.get(jsonEntry.getKey());
                     if (getter != null) {
                         try {
                             existingInstance = getter.reader.read(t);
@@ -365,7 +369,7 @@ public class MappingParserImpl implements MappingParser {
                 final Object convertedValue = toValue(
                         existingInstance, jsonValue, value.converter, value.itemConverter,
                         value.paramType, value.objectConverter,
-                        new JsonPointerTracker(jsonPointer, setter.getKey()), inType);
+                        new JsonPointerTracker(jsonPointer, jsonEntry.getKey()), inType);
                 if (convertedValue != null) {
                     setterMethod.write(t, convertedValue);
                 }
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/Meta.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/Meta.java
index dbf8e00b..97cfab1b 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/Meta.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/Meta.java
@@ -27,7 +27,9 @@ import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
+import java.util.Set;
 import java.util.function.Supplier;
 
 public final class Meta {
@@ -81,11 +83,23 @@ public final class Meta {
     }
 
     public static <T extends Annotation> T getAnnotation(final Class<?> clazz, final Class<T> api) {
-        final T annotation = clazz.getAnnotation(api);
-        if (annotation != null) {
-            return annotation;
+        Class<?> current = clazz;
+        final Set<Class<?>> visited = new HashSet<>();
+        while (current != null && current != Object.class) {
+            if (!visited.add(current)) {
+                return null;
+            }
+            final T annotation = current.getAnnotation(api);
+            if (annotation != null) {
+                return annotation;
+            }
+            final T meta = findMeta(clazz.getAnnotations(), api);
+            if (meta != null) {
+                return meta;
+            }
+            current = current.getSuperclass();
         }
-        return findMeta(clazz.getAnnotations(), api);
+        return null;
     }
 
     public static <T extends Annotation> T getAnnotation(final Package pck, final Class<T> api) {
