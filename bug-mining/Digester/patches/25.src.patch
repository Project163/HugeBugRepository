diff --git a/core/src/main/java/org/apache/commons/digester3/binder/AbstractRulesModule.java b/core/src/main/java/org/apache/commons/digester3/binder/AbstractRulesModule.java
index acc128b4..3717b38a 100644
--- a/core/src/main/java/org/apache/commons/digester3/binder/AbstractRulesModule.java
+++ b/core/src/main/java/org/apache/commons/digester3/binder/AbstractRulesModule.java
@@ -28,26 +28,26 @@ public abstract class AbstractRulesModule
     implements RulesModule
 {
 
-    private final ThreadLocal<RulesBinder> rulesBinders = new ThreadLocal<RulesBinder>();
+    private RulesBinder rulesBinder;
 
     /**
      * {@inheritDoc}
      */
     public final void configure( RulesBinder rulesBinder )
     {
-        if ( rulesBinders.get() != null )
+        if ( this.rulesBinder != null )
         {
             throw new IllegalStateException( "Re-entry is not allowed." );
         }
 
-        rulesBinders.set( rulesBinder );
+        this.rulesBinder = rulesBinder;
         try
         {
             configure();
         }
         finally
         {
-            rulesBinders.remove();
+            this.rulesBinder = null;
         }
     }
 
@@ -68,7 +68,7 @@ public abstract class AbstractRulesModule
      */
     protected void addError( String messagePattern, Object... arguments )
     {
-        rulesBinders.get().addError( messagePattern, arguments );
+        rulesBinder.addError( messagePattern, arguments );
     }
 
     /**
@@ -80,7 +80,7 @@ public abstract class AbstractRulesModule
      */
     protected void addError( Throwable t )
     {
-        rulesBinders.get().addError( t );
+        rulesBinder.addError( t );
     }
 
     /**
@@ -91,7 +91,7 @@ public abstract class AbstractRulesModule
      */
     protected void install( RulesModule rulesModule )
     {
-        rulesBinders.get().install( rulesModule );
+        rulesBinder.install( rulesModule );
     }
 
     /**
@@ -103,7 +103,7 @@ public abstract class AbstractRulesModule
      */
     protected LinkedRuleBuilder forPattern( String pattern )
     {
-        return rulesBinders.get().forPattern( pattern );
+        return rulesBinder.forPattern( pattern );
     }
 
     /**
@@ -113,7 +113,7 @@ public abstract class AbstractRulesModule
      */
     protected RulesBinder rulesBinder()
     {
-        return rulesBinders.get();
+        return rulesBinder;
     }
 
 }
diff --git a/core/src/main/java/org/apache/commons/digester3/binder/DigesterLoader.java b/core/src/main/java/org/apache/commons/digester3/binder/DigesterLoader.java
index 7e452e77..9b377ab5 100644
--- a/core/src/main/java/org/apache/commons/digester3/binder/DigesterLoader.java
+++ b/core/src/main/java/org/apache/commons/digester3/binder/DigesterLoader.java
@@ -199,6 +199,13 @@ public final class DigesterLoader
         }
 
         this.classLoader = createBinderClassLoader( classLoader );
+
+        rulesBinder.initialize( this.classLoader );
+        for ( RulesModule rulesModule : rulesModules )
+        {
+            rulesModule.configure( rulesBinder );
+        }
+
         return this;
     }
 
@@ -594,15 +601,6 @@ public final class DigesterLoader
      */
     public RuleSet createRuleSet()
     {
-        if ( classLoader != rulesBinder.getContextClassLoader() )
-        {
-            rulesBinder.initialize( classLoader );
-            for ( RulesModule rulesModule : rulesModules )
-            {
-                rulesModule.configure( rulesBinder );
-            }
-        }
-
         if ( rulesBinder.hasError() )
         {
             Formatter fmt = new Formatter().format( HEADING );
