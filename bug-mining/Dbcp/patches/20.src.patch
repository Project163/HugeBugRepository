diff --git a/pom.xml b/pom.xml
index a1123921..e92eb745 100644
--- a/pom.xml
+++ b/pom.xml
@@ -236,6 +236,7 @@
                 <include>org/apache/commons/dbcp/datasources/TestPerUserPoolDataSource.java</include>
                 <include>org/apache/commons/dbcp/datasources/TestSharedPoolDataSource.java</include>
 
+                <include>org/apache/commons/dbcp/managed/TestBasicManagedDataSource.java</include>
                 <include>org/apache/commons/dbcp/managed/TestManagedDataSource.java</include>
                 <include>org/apache/commons/dbcp/managed/TestManagedDataSourceInTx.java</include>
               </includes>
diff --git a/project.xml b/project.xml
index 7e6e20fa..4f1230e6 100644
--- a/project.xml
+++ b/project.xml
@@ -354,6 +354,10 @@
         <include>org/apache/commons/dbcp/datasources/TestFactory.java</include>
         <include>org/apache/commons/dbcp/datasources/TestPerUserPoolDataSource.java</include>
         <include>org/apache/commons/dbcp/datasources/TestSharedPoolDataSource.java</include>
+
+        <include>org/apache/commons/dbcp/managed/TestBasicManagedDataSource.java</include>
+        <include>org/apache/commons/dbcp/managed/TestManagedDataSource.java</include>
+        <include>org/apache/commons/dbcp/managed/TestManagedDataSourceInTx.java</include>
       </includes>
       <resources>
         <resource>
diff --git a/src/java/org/apache/commons/dbcp/BasicDataSource.java b/src/java/org/apache/commons/dbcp/BasicDataSource.java
index 195ec623..da5b3b6b 100644
--- a/src/java/org/apache/commons/dbcp/BasicDataSource.java
+++ b/src/java/org/apache/commons/dbcp/BasicDataSource.java
@@ -1093,7 +1093,7 @@ public class BasicDataSource implements DataSource {
     }
 
     /**
-     * Sets the connection properties passed to driver.connect(...). 
+     * Sets the connection properties passed to driver.connect(...).
      *
      * Format of the string must be [propertyName=property;]*
      *
@@ -1126,13 +1126,18 @@ public class BasicDataSource implements DataSource {
         this.restartNeeded = true;
     }
 
+    protected boolean closed;
+
     /**
      * Close and release all connections that are currently stored in the
-     * connection pool associated with our data source.
+     * connection pool associated with our data source.  All open (active)
+     * connection remain open until closed.  Once the data source has
+     * been closed, no more connections can be obtained.
      *
      * @throws SQLException if a database error occurs
      */
     public synchronized void close() throws SQLException {
+        closed = true;
         GenericObjectPool oldpool = connectionPool;
         connectionPool = null;
         dataSource = null;
@@ -1149,6 +1154,13 @@ public class BasicDataSource implements DataSource {
         }
     }
 
+    /**
+     * If true, this data source is closed and no more connections can be retrieved from this datasource.
+     * @return true, if the data source is closed; false otherwise
+     */
+    public synchronized boolean isClosed() {
+        return closed;
+    }
 
     // ------------------------------------------------------ Protected Methods
 
@@ -1167,6 +1179,9 @@ public class BasicDataSource implements DataSource {
      */
     protected synchronized DataSource createDataSource()
         throws SQLException {
+        if (closed) {
+            throw new SQLException("Data source is closed");
+        }
 
         // Return the pool if we have already created it
         if (dataSource != null) {
diff --git a/src/java/org/apache/commons/dbcp/PoolableConnection.java b/src/java/org/apache/commons/dbcp/PoolableConnection.java
index 5d664cce..e5fe094d 100644
--- a/src/java/org/apache/commons/dbcp/PoolableConnection.java
+++ b/src/java/org/apache/commons/dbcp/PoolableConnection.java
@@ -70,6 +70,10 @@ public class PoolableConnection extends DelegatingConnection {
         } catch (SQLException e) {
             try {
                 _pool.invalidateObject(this); // XXX should be guarded to happen at most once
+            } catch(IllegalStateException ise) {
+                // pool is closed, so close the connection
+                passivate();
+                getInnermostDelegate().close();
             } catch (Exception ie) {
                 // DO NOTHING the original exception will be rethrown
             }
@@ -78,6 +82,10 @@ public class PoolableConnection extends DelegatingConnection {
         if (isClosed) {
             try {
                 _pool.invalidateObject(this); // XXX should be guarded to happen at most once
+            } catch(IllegalStateException e) {
+                // pool is closed, so close the connection
+                passivate();
+                getInnermostDelegate().close();
             } catch (Exception ie) {
                 // DO NOTHING, "Already closed" exception thrown below
             }
@@ -85,6 +93,10 @@ public class PoolableConnection extends DelegatingConnection {
         } else {
             try {
                 _pool.returnObject(this); // XXX should be guarded to happen at most once
+            } catch(IllegalStateException e) {
+                // pool is closed, so close the connection
+                passivate();
+                getInnermostDelegate().close();
             } catch(SQLException e) {
                 throw e;
             } catch(RuntimeException e) {
diff --git a/src/java/org/apache/commons/dbcp/managed/ManagedConnection.java b/src/java/org/apache/commons/dbcp/managed/ManagedConnection.java
index ba17c370..e6d55378 100644
--- a/src/java/org/apache/commons/dbcp/managed/ManagedConnection.java
+++ b/src/java/org/apache/commons/dbcp/managed/ManagedConnection.java
@@ -139,13 +139,7 @@ public class ManagedConnection extends DelegatingConnection {
     }
 
     public void close() throws SQLException {
-        // close can be called multiple times, but PoolableConnection improperly
-        // throws an exception when a connection is closed twice, so before calling
-        // close we aren't alreayd closed
-        if (!isClosed()) {
-
-            // don't use super.close() because it calls passivate() which marks the
-            // the connection as cloased without returning it to the pool
+        if (!_closed) {
             try {
                 // don't actually close the connection if in a transaction
                 // the connection will be closed by the transactionComplete method
diff --git a/src/test/org/apache/commons/dbcp/TestAll.java b/src/test/org/apache/commons/dbcp/TestAll.java
index 4c18211d..c80d3330 100644
--- a/src/test/org/apache/commons/dbcp/TestAll.java
+++ b/src/test/org/apache/commons/dbcp/TestAll.java
@@ -17,10 +17,15 @@
 
 package org.apache.commons.dbcp;
 
-import junit.framework.*;
-import org.apache.commons.dbcp.datasources.TestSharedPoolDataSource;
-import org.apache.commons.dbcp.datasources.TestPerUserPoolDataSource;
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
 import org.apache.commons.dbcp.datasources.TestFactory;
+import org.apache.commons.dbcp.datasources.TestPerUserPoolDataSource;
+import org.apache.commons.dbcp.datasources.TestSharedPoolDataSource;
+import org.apache.commons.dbcp.managed.TestBasicManagedDataSource;
+import org.apache.commons.dbcp.managed.TestManagedDataSource;
+import org.apache.commons.dbcp.managed.TestManagedDataSourceInTx;
 import org.apache.commons.jocl.TestJOCLContentHandler;
 
 /**
@@ -51,6 +56,9 @@ public class TestAll extends TestCase {
         suite.addTest(TestJOCLContentHandler.suite());
         suite.addTest(TestPoolingDataSource.suite());
         suite.addTest(TestJndi.suite());
+        suite.addTest(TestBasicManagedDataSource.suite());
+        suite.addTest(TestManagedDataSource.suite());
+        suite.addTest(TestManagedDataSourceInTx.suite());
         return suite;
     }
 
diff --git a/src/test/org/apache/commons/dbcp/TestBasicDataSource.java b/src/test/org/apache/commons/dbcp/TestBasicDataSource.java
index f1c4980b..2bf2d7dd 100644
--- a/src/test/org/apache/commons/dbcp/TestBasicDataSource.java
+++ b/src/test/org/apache/commons/dbcp/TestBasicDataSource.java
@@ -48,7 +48,7 @@ public class TestBasicDataSource extends TestConnectionPool {
 
     public void setUp() throws Exception {
         super.setUp();
-        ds = new BasicDataSource();
+        ds = createDataSource();
         ds.setDriverClassName("org.apache.commons.dbcp.TesterDriver");
         ds.setUrl("jdbc:apache:commons:testdriver");
         ds.setMaxActive(getMaxActive());
@@ -62,12 +62,53 @@ public class TestBasicDataSource extends TestConnectionPool {
         ds.setValidationQuery("SELECT DUMMY FROM DUAL");
     }
 
+    protected BasicDataSource createDataSource() throws Exception {
+        return new BasicDataSource();
+    }
+
     public void tearDown() throws Exception {
         super.tearDown();
         ds.close();
         ds = null;
     }
 
+    public void testClose() throws Exception {
+        ds.setAccessToUnderlyingConnectionAllowed(true);
+
+        // active conneciton is held open when ds is closed
+        Connection activeConnection = getConnection();
+        Connection rawActiveConnection = ((DelegatingConnection) activeConnection).getInnermostDelegate();
+        assertFalse(activeConnection.isClosed());
+        assertFalse(rawActiveConnection.isClosed());
+
+        // idle connection is in pool but closed
+        Connection idleConnection = getConnection();
+        Connection rawIdleConnection = ((DelegatingConnection) idleConnection).getInnermostDelegate();
+        assertFalse(idleConnection.isClosed());
+        assertFalse(rawIdleConnection.isClosed());
+
+        // idle wrapper should be closed but raw conneciton should be open
+        idleConnection.close();
+        assertTrue(idleConnection.isClosed());
+        assertFalse(rawIdleConnection.isClosed());
+
+        ds.close();
+
+        // raw idle connection should now be closed
+        assertFalse(rawIdleConnection.isClosed());
+
+        // active connection should still be open
+        assertFalse(activeConnection.isClosed());
+        assertFalse(rawActiveConnection.isClosed());
+
+        // now close the active connection
+        activeConnection.close();
+
+        // both wrapper and raw active connection should be closed
+        assertTrue(activeConnection.isClosed());
+        assertTrue(rawActiveConnection.isClosed());
+    }
+
     public void testSetProperties() throws Exception {
         // normal
         ds.setConnectionProperties("name1=value1;name2=value2;name3=value3");
@@ -359,7 +400,7 @@ public class TestBasicDataSource extends TestConnectionPool {
     public void testCreateDataSourceCleanupThreads() throws Exception {
         ds.close();
         ds = null;
-        ds = new BasicDataSource();
+        ds = createDataSource();
         ds.setDriverClassName("org.apache.commons.dbcp.TesterDriver");
         ds.setUrl("jdbc:apache:commons:testdriver");
         ds.setMaxActive(getMaxActive());
diff --git a/src/test/org/apache/commons/dbcp/managed/TestBasicManagedDataSource.java b/src/test/org/apache/commons/dbcp/managed/TestBasicManagedDataSource.java
new file mode 100644
index 00000000..fc09da5f
--- /dev/null
+++ b/src/test/org/apache/commons/dbcp/managed/TestBasicManagedDataSource.java
@@ -0,0 +1,47 @@
+/**
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.commons.dbcp.managed;
+
+import org.apache.commons.dbcp.BasicDataSource;
+import org.apache.commons.dbcp.TestBasicDataSource;
+import org.apache.geronimo.transaction.manager.TransactionManagerImpl;
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+/**
+ * TestSuite for BasicManagedDataSource
+ */
+public class TestBasicManagedDataSource extends TestBasicDataSource {
+    public TestBasicManagedDataSource(String testName) {
+        super(testName);
+    }
+
+    public static Test suite() {
+        return new TestSuite(TestBasicManagedDataSource.class);
+    }
+
+    protected BasicDataSource createDataSource() throws Exception {
+        BasicManagedDataSource basicManagedDataSource = new BasicManagedDataSource();
+        basicManagedDataSource.setTransactionManager(new TransactionManagerImpl());
+        return basicManagedDataSource;
+    }
+
+    public void testHashCode() throws Exception {
+        // TODO reenable... hashcode doesn't work when accessToUnderlyingConnectionAllowed is false
+    }
+}
