diff --git a/tika-batch/src/main/java/org/apache/tika/batch/FileResourceConsumer.java b/tika-batch/src/main/java/org/apache/tika/batch/FileResourceConsumer.java
index 0d35834b1..044e1785d 100644
--- a/tika-batch/src/main/java/org/apache/tika/batch/FileResourceConsumer.java
+++ b/tika-batch/src/main/java/org/apache/tika/batch/FileResourceConsumer.java
@@ -44,7 +44,7 @@ import org.apache.tika.sax.ToXMLContentHandler;
 /**
  * This is a base class for file consumers. The
  * goal of this class is to abstract out the multithreading
- * and recordkeeping components.
+ * and record keeping components.
  * <p/>
  */
 public abstract class FileResourceConsumer implements Callable<IFileProcessorFutureResult> {
@@ -56,22 +56,18 @@ public abstract class FileResourceConsumer implements Callable<IFileProcessorFut
     public static String PARSE_ERR = "parse_err";
     public static String PARSE_EX = "parse_ex";
     public static String ELAPSED_MILLIS = "elapsedMS";
-    private static AtomicInteger numConsumers = new AtomicInteger(-1);
+    private static final AtomicInteger numConsumers = new AtomicInteger(-1);
     private final ArrayBlockingQueue<FileResource> fileQueue;
     private final int consumerId;
     //used to lock checks on state to prevent
     private final Object lock = new Object();
-    private long maxConsecWaitInMillis = 10 * 60 * 1000;// 10 minutes
+    private final long MAX_CONSEC_WAIT_IN_MILLIS = 10 * 60 * 1000;// 10 minutes
     //this records the file that is currently
     //being processed.  It is null if no file is currently being processed.
     //no need for volatile because of lock for checkForStales
     private FileStarted currentFile = null;
-    //total number of files consumed; volatile so that reporter
-    //sees the latest
-    private volatile int numResourcesConsumed = 0;
-    //total number of exceptions that were handled by subclasses;
-    //volatile so that reporter sees the latest
-    private volatile int numHandledExceptions = 0;
+    private static final AtomicInteger numResourcesConsumed = new AtomicInteger(0);
+    private static final AtomicInteger numHandledExceptions = new AtomicInteger(0);
     //after this has been set to ACTIVELY_CONSUMING,
     //this should only be set by setEndedState.
     private volatile STATE currentState = STATE.NOT_YET_STARTED;
@@ -93,7 +89,7 @@ public abstract class FileResourceConsumer implements Callable<IFileProcessorFut
                         fileResource.getResourceId());
 
                 if (consumed) {
-                    numResourcesConsumed++;
+                    numResourcesConsumed.incrementAndGet();
                 }
                 fileResource = getNextFileResource();
             }
@@ -102,7 +98,7 @@ public abstract class FileResourceConsumer implements Callable<IFileProcessorFut
         }
 
         setEndedState(STATE.COMPLETED);
-        return new FileConsumerFutureResult(currentFile, numResourcesConsumed);
+        return new FileConsumerFutureResult(currentFile, numResourcesConsumed.get());
     }
 
     /**
@@ -130,7 +126,7 @@ public abstract class FileResourceConsumer implements Callable<IFileProcessorFut
      * Make sure to call this appropriately!
      */
     protected void incrementHandledExceptions() {
-        numHandledExceptions++;
+        numHandledExceptions.incrementAndGet();
     }
 
     /**
@@ -142,12 +138,11 @@ public abstract class FileResourceConsumer implements Callable<IFileProcessorFut
     public boolean isStillActive() {
         if (Thread.currentThread().isInterrupted()) {
             return false;
-        } else if (currentState == STATE.NOT_YET_STARTED ||
-                currentState == STATE.ACTIVELY_CONSUMING ||
-                currentState == STATE.ASKED_TO_SHUTDOWN) {
-            return true;
-        }
-        return false;
+        } 
+        
+        return currentState == STATE.NOT_YET_STARTED ||
+                      currentState == STATE.ACTIVELY_CONSUMING ||
+                      currentState == STATE.ASKED_TO_SHUTDOWN;
     }
 
     private boolean _processFileResource(FileResource fileResource) {
@@ -192,11 +187,11 @@ public abstract class FileResourceConsumer implements Callable<IFileProcessorFut
     }
 
     public int getNumResourcesConsumed() {
-        return numResourcesConsumed;
+        return numResourcesConsumed.get();
     }
 
     public int getNumHandledExceptions() {
-        return numHandledExceptions;
+        return numHandledExceptions.get();
     }
 
     /**
@@ -315,7 +310,7 @@ public abstract class FileResourceConsumer implements Callable<IFileProcessorFut
                     fileQueue.size());
 
             long elapsed = System.currentTimeMillis() - start;
-            if (maxConsecWaitInMillis > 0 && elapsed > maxConsecWaitInMillis) {
+            if (MAX_CONSEC_WAIT_IN_MILLIS > 0 && elapsed > MAX_CONSEC_WAIT_IN_MILLIS) {
                 setEndedState(STATE.EXCEEDED_MAX_CONSEC_WAIT_MILLIS);
                 break;
             }
@@ -331,7 +326,6 @@ public abstract class FileResourceConsumer implements Callable<IFileProcessorFut
                 LOG.warn(e.getMessage(), e);
             }
         }
-        closeable = null;
     }
 
     protected void flushAndClose(Closeable closeable) {
diff --git a/tika-batch/src/main/java/org/apache/tika/batch/fs/strawman/StrawManTikaAppDriver.java b/tika-batch/src/main/java/org/apache/tika/batch/fs/strawman/StrawManTikaAppDriver.java
index e5fe9af6a..ef7668532 100644
--- a/tika-batch/src/main/java/org/apache/tika/batch/fs/strawman/StrawManTikaAppDriver.java
+++ b/tika-batch/src/main/java/org/apache/tika/batch/fs/strawman/StrawManTikaAppDriver.java
@@ -50,13 +50,13 @@ import org.slf4j.MarkerFactory;
 public class StrawManTikaAppDriver implements Callable<Integer> {
     private static final Logger LOG = LoggerFactory.getLogger(StrawManTikaAppDriver.class);
 
-    private static AtomicInteger threadCount = new AtomicInteger(0);
+    private static final AtomicInteger threadCount = new AtomicInteger(0);
     private final int totalThreads;
     private final int threadNum;
-    private Path inputRoot = null;
-    private Path outputRoot = null;
-    private Path fileList = null;
-    private String[] args = null;
+    private final Path inputRoot;
+    private final Path outputRoot;
+    private final Path fileList;
+    private final String[] args;
 
     public StrawManTikaAppDriver(Path inputRoot, Path outputRoot, int totalThreads, Path fileList,
                                  String[] args) {
@@ -96,7 +96,7 @@ public class StrawManTikaAppDriver implements Callable<Integer> {
         int initialParams = (fileList == null) ? 3 : 4;
         List<String> commandLine =
                 new ArrayList<>(Arrays.asList(args).subList(initialParams, args.length));
-        totalThreads = (totalThreads < 1) ? 1 : totalThreads;
+        totalThreads = Math.max(totalThreads, 1);
         ExecutorService ex = Executors.newFixedThreadPool(totalThreads);
         ExecutorCompletionService<Integer> completionService = new ExecutorCompletionService<>(ex);
 
@@ -157,10 +157,10 @@ public class StrawManTikaAppDriver implements Callable<Integer> {
     }
 
     private class TikaVisitor extends SimpleFileVisitor<Path> {
-        private volatile int processed = 0;
+        private final AtomicInteger processed = new AtomicInteger(0);
 
         int getProcessed() {
-            return processed;
+            return processed.get();
         }
 
         @Override
@@ -193,7 +193,6 @@ public class StrawManTikaAppDriver implements Callable<Integer> {
             }
             commandLine.add(fullPath);
 
-
             Path outputFile =
                     Paths.get(outputRoot.toAbsolutePath().toString(), relPath.toString() + suffix);
             try {
@@ -209,7 +208,7 @@ public class StrawManTikaAppDriver implements Callable<Integer> {
             builder.redirectOutput(outputFile.toFile());
             builder.redirectError(ProcessBuilder.Redirect.INHERIT);
 
-            Process proc = null;
+            Process proc;
             try {
                 proc = builder.start();
             } catch (IOException e) {
@@ -244,7 +243,7 @@ public class StrawManTikaAppDriver implements Callable<Integer> {
             } catch (IOException e) {
                 LOG.warn("couldn't close process outputstream", e);
             }
-            processed++;
+            processed.incrementAndGet();
             return FileVisitResult.CONTINUE;
         }
 
diff --git a/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/journal/TEIDOMParser.java b/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/journal/TEIDOMParser.java
index f43cbd030..222767bfb 100644
--- a/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/journal/TEIDOMParser.java
+++ b/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/journal/TEIDOMParser.java
@@ -517,7 +517,7 @@ public class TEIDOMParser {
 
     }
 
-    class Affiliation {
+    static class Affiliation {
 
         private OrgName orgName;
 
diff --git a/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/TikaServerWatchDog.java b/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/TikaServerWatchDog.java
index d00141f65..4d85021ed 100644
--- a/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/TikaServerWatchDog.java
+++ b/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/TikaServerWatchDog.java
@@ -55,7 +55,7 @@ public class TikaServerWatchDog implements Callable<WatchDogResult> {
     private final int port;
     private final String id;
     private final TikaServerConfig tikaServerConfig;
-    private Object[] forkedStatusLock = new Object[0];
+    private final Object[] forkedStatusLock = new Object[0];
     private volatile FORKED_STATUS forkedStatus = FORKED_STATUS.INITIALIZING;
     private volatile Instant lastPing = null;
     private ForkedProcess forkedProcess = null;
diff --git a/tika-xmp/src/main/java/org/apache/tika/xmp/convert/RTFConverter.java b/tika-xmp/src/main/java/org/apache/tika/xmp/convert/RTFConverter.java
index 4f8354341..d709a0b8b 100644
--- a/tika-xmp/src/main/java/org/apache/tika/xmp/convert/RTFConverter.java
+++ b/tika-xmp/src/main/java/org/apache/tika/xmp/convert/RTFConverter.java
@@ -16,7 +16,6 @@
  */
 package org.apache.tika.xmp.convert;
 
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
