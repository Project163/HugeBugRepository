diff --git a/src/test/java/org/apache/commons/jexl3/ArithmeticTest.java b/src/test/java/org/apache/commons/jexl3/ArithmeticTest.java
index 29ca7e40..ab031fc0 100644
--- a/src/test/java/org/apache/commons/jexl3/ArithmeticTest.java
+++ b/src/test/java/org/apache/commons/jexl3/ArithmeticTest.java
@@ -16,7 +16,6 @@
  */
 package org.apache.commons.jexl3;
 
-import static org.apache.commons.jexl3.JexlArithmetic.FLOAT_PATTERN;
 import org.apache.commons.jexl3.junit.Asserter;
 
 import java.io.ByteArrayInputStream;
@@ -675,6 +674,10 @@ public class ArithmeticTest extends JexlTestCase {
             }
             return strb.toString();
         }
+
+        public Object not(Var x) {
+            throw new NullPointerException("make it fail");
+        }
     }
 
     @Test
@@ -866,6 +869,13 @@ public class ArithmeticTest extends JexlTestCase {
         result = script.execute(jc, new Var(15), new Var(3155));
         Assert.assertFalse((Boolean) result);
 
+        script = jexl.createScript("(x)->{ !x }");
+        try {
+            result = script.execute(jc, new Var(-42));
+            Assert.fail("should fail");
+        } catch (JexlException xany) {
+            Assert.assertTrue(xany instanceof JexlException.Operator);
+        }
     }
 
 
diff --git a/src/test/java/org/apache/commons/jexl3/IssuesTest.java b/src/test/java/org/apache/commons/jexl3/IssuesTest.java
index fb9dee3e..9e118fa1 100644
--- a/src/test/java/org/apache/commons/jexl3/IssuesTest.java
+++ b/src/test/java/org/apache/commons/jexl3/IssuesTest.java
@@ -1245,4 +1245,45 @@ new JexlBuilder().arithmetic(new XmlArithmetic(false)).create();
         InputStream stringInputStream = new ByteArrayInputStream(xml.getBytes("UTF-8"));
         return xmlBuilder.parse(stringInputStream);
     }
+
+
+    @Test
+    public void test171() throws Exception {
+        final JexlEngine jexl = new Engine();
+        Object result;
+        Map<String, Object> i = new HashMap<String, Object>();
+
+        i.put("class", 42);
+        result = jexl.createScript("i['class'] ", "i").execute((JexlContext)null, i);
+        Assert.assertEquals(42, result);
+        result = jexl.createScript("i['class'] = 28", "i").execute((JexlContext)null, i);
+        Assert.assertEquals(28, result);
+        Assert.assertEquals(28, i.get("class"));
+        result = jexl.createScript("i.class", "i").execute((JexlContext)null, i);
+        Assert.assertEquals(java.util.HashMap.class, result);
+        result = jexl.createScript("i.'class'", "i").execute((JexlContext)null, i);
+        Assert.assertEquals(java.util.HashMap.class, result);
+
+        i.put("size", 4242);
+        result = jexl.createScript("i['size'] ", "i").execute((JexlContext)null, i);
+        Assert.assertEquals(4242 ,result);
+        result = jexl.createScript("i['size'] = 2828", "i").execute((JexlContext)null, i);
+        Assert.assertEquals(2828, result);
+        Assert.assertEquals(2828, i.get("size"));
+        result = jexl.createScript("i.'size'", "i").execute((JexlContext)null, i);
+        Assert.assertEquals(2828, result);
+        result = jexl.createScript("size i", "i").execute((JexlContext)null, i);
+        Assert.assertEquals(2, result);
+
+        i.put("empty", 424242);
+        result = jexl.createScript("i['empty'] ", "i").execute((JexlContext)null, i);
+        Assert.assertEquals(424242, result);
+        result = jexl.createScript("i['empty'] = 282828", "i").execute((JexlContext)null, i);
+        Assert.assertEquals(282828, result);
+        Assert.assertEquals(282828, i.get("empty"));
+        result = jexl.createScript("i.'empty'", "i").execute((JexlContext)null, i);
+        Assert.assertNotEquals(282828, result);
+        result = jexl.createScript("empty i", "i").execute((JexlContext)null, i);
+        Assert.assertFalse((Boolean) result);
+    }
 }
diff --git a/src/test/java/org/apache/commons/jexl3/RangeTest.java b/src/test/java/org/apache/commons/jexl3/RangeTest.java
index d2a0fbf5..824a5f4e 100644
--- a/src/test/java/org/apache/commons/jexl3/RangeTest.java
+++ b/src/test/java/org/apache/commons/jexl3/RangeTest.java
@@ -44,6 +44,7 @@ public class RangeTest extends JexlTestCase {
         Object[] a = c.toArray();
         Assert.assertEquals(1, a.length);
         Assert.assertEquals(1, ((Number) a[0]).intValue());
+        Assert.assertFalse((Boolean) JEXL.createScript("empty x", "x").execute(null, e));
     }
 
     @Test
@@ -51,10 +52,16 @@ public class RangeTest extends JexlTestCase {
         JexlExpression e = JEXL.createExpression("(1..32)");
         JexlContext jc = new MapContext();
 
+        Object o0 = e.evaluate(jc);
         Object o = e.evaluate(jc);
         Assert.assertTrue(o instanceof Collection<?>);
         Collection<?> c = (Collection<?>) o;
         Assert.assertEquals(32, c.size());
+
+        Assert.assertTrue(o0 != o);
+        Assert.assertEquals(o0.hashCode(), o.hashCode());
+        Assert.assertEquals(o0, o);
+
         int i = 0;
         Iterator<?> ii = c.iterator();
         while (ii.hasNext()) {
@@ -94,10 +101,17 @@ public class RangeTest extends JexlTestCase {
         JexlExpression e = JEXL.createExpression("(6789000001L..6789000032L)");
         JexlContext jc = new MapContext();
 
+        Object o0 = e.evaluate(jc);
         Object o = e.evaluate(jc);
         Assert.assertTrue(o instanceof Collection<?>);
         Collection<?> c = (Collection<?>) o;
         Assert.assertEquals(32, c.size());
+        Assert.assertFalse((Boolean) JEXL.createScript("empty x", "x").execute(null, e));
+
+        Assert.assertTrue(o0 != o);
+        Assert.assertEquals(o0.hashCode(), o.hashCode());
+        Assert.assertEquals(o0, o);
+
         long i = 6789000000L;
         Iterator<?> ii = c.iterator();
         while (ii.hasNext()) {
