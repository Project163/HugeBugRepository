diff --git a/CHANGES.txt b/CHANGES.txt
index 6bb051b7c..c5f014975 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -37,7 +37,7 @@ Release 1.3 - Current Development
     occurred.  The id (rId) is included in the Metadata of each
     embedded document as the new Metadata.EMBEDDED_RELATIONSHIP_ID
     key, and TikaCLI prepends the rId (if present) onto the filename
-    it extracts (TIKA-997).
+    it extracts (TIKA-997, TIKA-1032).
 
   * MS PowerPoint (.ppt): When a PowerPoint (.ppt) document contains
     embedded files, Tika now places a <div class="embedded" id="XXX"/> into the
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java
index 8002fead1..3978b0d0d 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java
@@ -18,6 +18,7 @@ package org.apache.tika.parser.microsoft.ooxml;
 
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.net.URI;
 import java.util.List;
 
 import org.apache.poi.POIXMLDocument;
@@ -108,12 +109,38 @@ public abstract class AbstractOOXMLExtractor implements OOXMLExtractor {
 
         xhtml.endDocument();
     }
+  
+    protected String getJustFileName(String desc) {
+      int idx = desc.lastIndexOf('/');
+      if (idx != -1) {
+        desc = desc.substring(idx+1);
+      }
+      idx = desc.lastIndexOf('.');
+      if (idx != -1) {
+        desc = desc.substring(0, idx);
+      }
+
+      return desc;
+    }
 
     private void handleEmbeddedParts(ContentHandler handler)
             throws TikaException, IOException, SAXException {
         try {
             for (PackagePart source : getMainDocumentParts()) {
                 for (PackageRelationship rel : source.getRelationships()) {
+
+                    URI sourceURI = rel.getSourceURI();
+                    String sourceDesc;
+                    if (sourceURI != null) {
+                        sourceDesc = getJustFileName(sourceURI.getPath());
+                        if (sourceDesc.startsWith("slide")) {
+                          sourceDesc += "_";
+                        } else {
+                          sourceDesc = "";
+                        }
+                    } else {
+                        sourceDesc = "";
+                    }
                     if (rel.getTargetMode() == TargetMode.INTERNAL) {
                         PackagePart target;
 
@@ -126,12 +153,12 @@ public abstract class AbstractOOXMLExtractor implements OOXMLExtractor {
                         String type = rel.getRelationshipType();
                         if (RELATION_OLE_OBJECT.equals(type)
                                 && TYPE_OLE_OBJECT.equals(target.getContentType())) {
-                            handleEmbeddedOLE(target, handler, rel.getId());
+                            handleEmbeddedOLE(target, handler, sourceDesc + rel.getId());
                         } else if (RELATION_AUDIO.equals(type)
                                 || RELATION_IMAGE.equals(type)
                                 || RELATION_PACKAGE.equals(type)
                                 || RELATION_OLE_OBJECT.equals(type)) {
-                            handleEmbeddedFile(target, handler, rel.getId());
+                            handleEmbeddedFile(target, handler, sourceDesc + rel.getId());
                         }
                     }
                 }
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSLFPowerPointExtractorDecorator.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSLFPowerPointExtractorDecorator.java
index c89a41bcb..19bbe9c8c 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSLFPowerPointExtractorDecorator.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSLFPowerPointExtractorDecorator.java
@@ -67,25 +67,33 @@ public class XSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {
 
         XSLFSlide[] slides = slideShow.getSlides();
         for (XSLFSlide slide : slides) {
+            String slideDesc;
+            if (slide.getPackagePart() != null && slide.getPackagePart().getPartName() != null) {
+              slideDesc = getJustFileName(slide.getPackagePart().getPartName().toString());
+              slideDesc += "_";
+            } else {
+              slideDesc = null;
+            }
+
             // slide
-            extractContent(slide.getShapes(), false, xhtml);
+            extractContent(slide.getShapes(), false, xhtml, slideDesc);
 
             // slide layout which is the master sheet for this slide
             XSLFSheet slideLayout = slide.getMasterSheet();
-            extractContent(slideLayout.getShapes(), true, xhtml);
+            extractContent(slideLayout.getShapes(), true, xhtml, null);
 
             // slide master which is the master sheet for all text layouts
             XSLFSheet slideMaster = slideLayout.getMasterSheet();
-            extractContent(slideMaster.getShapes(), true, xhtml);
+            extractContent(slideMaster.getShapes(), true, xhtml, null);
 
             // notes (if present)
             XSLFSheet slideNotes = slide.getNotes();
             if (slideNotes != null) {
-                extractContent(slideNotes.getShapes(), false, xhtml);
+                extractContent(slideNotes.getShapes(), false, xhtml, slideDesc);
 
                 // master sheet for this notes
                 XSLFSheet notesMaster = slideNotes.getMasterSheet();
-                extractContent(notesMaster.getShapes(), true, xhtml);
+                extractContent(notesMaster.getShapes(), true, xhtml, null);
             }
 
             // comments (if present)
@@ -98,7 +106,7 @@ public class XSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {
         }
     }
 
-    private void extractContent(XSLFShape[] shapes, boolean skipPlaceholders, XHTMLContentHandler xhtml)
+    private void extractContent(XSLFShape[] shapes, boolean skipPlaceholders, XHTMLContentHandler xhtml, String slideDesc)
             throws SAXException {
         for (XSLFShape sh : shapes) {
             if (sh instanceof XSLFTextShape) {
@@ -111,12 +119,12 @@ public class XSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {
             } else if (sh instanceof XSLFGroupShape){
                 // recurse into groups of shapes
                 XSLFGroupShape group = (XSLFGroupShape)sh;
-                extractContent(group.getShapes(), skipPlaceholders, xhtml);
+                extractContent(group.getShapes(), skipPlaceholders, xhtml, slideDesc);
             } else if (sh instanceof XSLFTable) {
                 XSLFTable tbl = (XSLFTable)sh;
                 for(XSLFTableRow row : tbl){
                     List<XSLFTableCell> cells = row.getCells();
-                    extractContent(cells.toArray(new XSLFTableCell[cells.size()]), skipPlaceholders, xhtml);
+                    extractContent(cells.toArray(new XSLFTableCell[cells.size()]), skipPlaceholders, xhtml, slideDesc);
                 }
             } else if (sh instanceof XSLFGraphicFrame) {
                 XSLFGraphicFrame frame = (XSLFGraphicFrame) sh;
@@ -127,6 +135,9 @@ public class XSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {
                         XmlObject relIDAtt = emb.selectAttribute(new QName("http://schemas.openxmlformats.org/officeDocument/2006/relationships", "id"));
                         if (relIDAtt != null) {
                             String relID = relIDAtt.getDomNode().getNodeValue();
+                            if (slideDesc != null) {
+                              relID = slideDesc + relID;
+                            }
                             AttributesImpl attributes = new AttributesImpl();
                             attributes.addAttribute("", "class", "class", "CDATA", "embedded");
                             attributes.addAttribute("", "id", "id", "CDATA", relID);
@@ -141,6 +152,9 @@ public class XSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {
                     if (ctPic.getBlipFill() != null && ctPic.getBlipFill().getBlip() != null) {
                         String relID = ctPic.getBlipFill().getBlip().getEmbed();
                         if (relID != null) {
+                            if (slideDesc != null) {
+                              relID = slideDesc + relID;
+                            }
                             AttributesImpl attributes = new AttributesImpl();
                             attributes.addAttribute("", "class", "class", "CDATA", "embedded");
                             attributes.addAttribute("", "id", "id", "CDATA", relID);
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java
index 16c99bfac..978ba6360 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java
@@ -855,9 +855,9 @@ public class OOXMLParserTest extends TikaTest {
             input.close();
         }
         String xml = sw.toString();
-        int h = xml.indexOf("<div class=\"embedded\" id=\"rId3\"/>");
+        int h = xml.indexOf("<div class=\"embedded\" id=\"slide1_rId3\"/>");
         int i = xml.indexOf("Send me a note");
-        int j = xml.indexOf("<div class=\"embedded\" id=\"rId4\"/>");
+        int j = xml.indexOf("<div class=\"embedded\" id=\"slide2_rId4\"/>");
         int k = xml.indexOf("<p>No title</p>");
         assertTrue(h != -1);
         assertTrue(i != -1);
@@ -882,4 +882,11 @@ public class OOXMLParserTest extends TikaTest {
         assertContains("This text is inside of a text box in the header of the document.", xml);
         assertContains("This text is inside of a text box in the footer of the document.", xml);
     }
-}
+
+    // TIKA-1032:
+    public void testEmbeddedPPTXTwoSlides() throws Exception {
+        String xml = getXML("testPPT_embedded_two_slides.pptx").xml;
+        assertContains("<div class=\"embedded\" id=\"slide1_rId7\"/>" , xml);
+        assertContains("<div class=\"embedded\" id=\"slide2_rId7\"/>" , xml);
+    }
+  }
diff --git a/tika-parsers/src/test/resources/test-documents/testPPT_embedded_two_slides.pptx b/tika-parsers/src/test/resources/test-documents/testPPT_embedded_two_slides.pptx
new file mode 100755
index 000000000..210a4bc01
Binary files /dev/null and b/tika-parsers/src/test/resources/test-documents/testPPT_embedded_two_slides.pptx differ
