diff --git a/src/main/java/org/apache/sling/commons/log/logback/internal/AppenderTracker.java b/src/main/java/org/apache/sling/commons/log/logback/internal/AppenderTracker.java
index 9ebff6e..cda97ce 100644
--- a/src/main/java/org/apache/sling/commons/log/logback/internal/AppenderTracker.java
+++ b/src/main/java/org/apache/sling/commons/log/logback/internal/AppenderTracker.java
@@ -60,15 +60,15 @@ public class AppenderTracker extends ServiceTracker implements LogbackResetListe
     @SuppressWarnings("unchecked")
     @Override
     public Object addingService(final ServiceReference reference) {
-        final Appender<ILoggingEvent> a = (Appender<ILoggingEvent>) super.addingService(reference);
-        a.setContext(loggerContext);
-        a.start();
+        final Appender<ILoggingEvent> appender = (Appender<ILoggingEvent>) super.addingService(reference);
+        appender.setContext(loggerContext);
+        appender.start();
 
-        final AppenderInfo ai = new AppenderInfo(reference, a);
+        final AppenderInfo ai = new AppenderInfo(reference, appender);
         appenders.put(reference, ai);
         attachAppender(ai);
 
-        return ai;
+        return appender;
     }
 
     @SuppressWarnings("unchecked")
diff --git a/src/test/java/org/apache/sling/commons/log/logback/integration/ITAppenderServices.java b/src/test/java/org/apache/sling/commons/log/logback/integration/ITAppenderServices.java
index f4b3f65..462ce56 100644
--- a/src/test/java/org/apache/sling/commons/log/logback/integration/ITAppenderServices.java
+++ b/src/test/java/org/apache/sling/commons/log/logback/integration/ITAppenderServices.java
@@ -45,6 +45,7 @@ import org.osgi.service.cm.ConfigurationAdmin;
 import org.slf4j.LoggerFactory;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.ops4j.pax.exam.CoreOptions.composite;
 import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
@@ -89,6 +90,37 @@ public class ITAppenderServices extends LogTestBase {
         assertEquals(1, ta.events.size());
     }
 
+    @Test
+    public void testAppenderServiceModified() throws Exception {
+        TestAppender ta = registerAppender("foo.bar", "foo.baz");
+        delay();
+
+        Logger bar = (Logger)LoggerFactory.getLogger("foo.bar");
+        bar.setLevel(Level.DEBUG);
+        Logger baz = (Logger)LoggerFactory.getLogger("foo.baz");
+        baz.setLevel(Level.INFO);
+
+        bar.debug("Test message");
+        baz.debug("Test message"); // Would not be logged
+
+        // One event should be logged.
+        assertEquals(1, ta.events.size());
+
+        ta.reset();
+
+        Dictionary<String, Object> props = new Hashtable<String, Object>();
+        props.put("loggers", new String[]{"foo.bar2"});
+        sr.setProperties(props);
+
+        delay();
+        LoggerFactory.getLogger("foo.bar2").info("foo.bar2");
+        LoggerFactory.getLogger("foo.baz").info("foo.baz");
+
+        assertEquals(1, ta.msgs.size());
+        assertTrue(ta.msgs.contains("foo.bar2"));
+        assertFalse(ta.msgs.contains("foo.baz"));
+    }
+
     @Test
     public void testOsgiAppenderRef() throws Exception {
         Configuration config = ca.getConfiguration(ITConfigAdminSupport.PID, null);
@@ -137,16 +169,23 @@ public class ITAppenderServices extends LogTestBase {
 
     private static class TestAppender extends AppenderBase<ILoggingEvent> {
         final List<ILoggingEvent> events = new ArrayList<ILoggingEvent>();
+        final List<String> msgs = new ArrayList<String>();
 
         @Override
         protected void append(ILoggingEvent eventObject) {
             events.add(eventObject);
+            msgs.add(eventObject.getFormattedMessage());
         }
 
         @Override
         public String getName() {
             return "TestAppender";
         }
+
+        public void reset(){
+            events.clear();
+            msgs.clear();
+        }
     }
 
 }
