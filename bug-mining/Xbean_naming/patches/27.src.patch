diff --git a/xbean-naming/src/main/java/org/apache/xbean/naming/context/WritableContext.java b/xbean-naming/src/main/java/org/apache/xbean/naming/context/WritableContext.java
index 68f8c892..68fc9417 100644
--- a/xbean-naming/src/main/java/org/apache/xbean/naming/context/WritableContext.java
+++ b/xbean-naming/src/main/java/org/apache/xbean/naming/context/WritableContext.java
@@ -27,6 +27,7 @@ import javax.naming.Context;
 import javax.naming.ContextNotEmptyException;
 import javax.naming.NameAlreadyBoundException;
 import javax.naming.NamingException;
+import javax.naming.Referenceable;
 
 import org.apache.xbean.naming.reference.CachingReference;
 
@@ -83,6 +84,13 @@ public class WritableContext extends AbstractFederatedContext {
     }
 
     protected void addBinding(AtomicReference<Map<String, Object>> bindingsRef, String name, String nameInNamespace, Object value, boolean rebind) throws NamingException {
+        if (value instanceof Referenceable) {
+            value = ((Referenceable)value).getReference();
+        }
+        if (cacheReferences) {
+            value = CachingReference.wrapReference(getNameInNamespace(name), value);
+        }
+
         writeLock.lock();
         try {
             Map<String, Object> bindings = bindingsRef.get();
@@ -90,10 +98,6 @@ public class WritableContext extends AbstractFederatedContext {
             if (!rebind && bindings.containsKey(name)) {
                 throw new NameAlreadyBoundException(name);
             }
-            if (cacheReferences) {
-                value = CachingReference.wrapReference(getNameInNamespace(name), value);
-            }
-
             Map<String, Object> newBindings = new HashMap<String, Object>(bindings);
             newBindings.put(name,value);
             bindingsRef.set(newBindings);
diff --git a/xbean-naming/src/test/java/org/apache/xbean/naming/context/ReferenceableTest.java b/xbean-naming/src/test/java/org/apache/xbean/naming/context/ReferenceableTest.java
new file mode 100644
index 00000000..3ff306cc
--- /dev/null
+++ b/xbean-naming/src/test/java/org/apache/xbean/naming/context/ReferenceableTest.java
@@ -0,0 +1,54 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+package org.apache.xbean.naming.context;
+
+import javax.naming.Context;
+
+import org.apache.xbean.naming.referenceable.Foo;
+import org.apache.xbean.naming.referenceable.FooFactory;
+
+/**
+ * @version $Rev$ $Date$
+ */
+public class ReferenceableTest extends AbstractContextTest {
+    
+    public void testReferenceable() throws Exception {
+        Context context = new WritableContext();
+        context.createSubcontext("bar");
+
+        Foo foo1 = new Foo("foo1");
+        context.bind("bar/foo1", foo1);
+        Object o1 = context.lookup("bar/foo1");
+        assertEquals(foo1, o1);
+        assertNotSame(foo1, o1);
+    }
+    public void testReferenceable2() throws Exception {
+        Context context = new WritableContext();
+        context.createSubcontext("bar");
+
+        Foo foo1 = new Foo("foo1");
+        FooFactory fooFactory1 = new FooFactory(foo1);
+        context.bind("bar/foo1", fooFactory1);
+        Object o1 = context.lookup("bar/foo1");
+        assertEquals(foo1, o1);
+        assertNotSame(foo1, o1);
+    }
+}
diff --git a/xbean-naming/src/test/java/org/apache/xbean/naming/referenceable/Foo.java b/xbean-naming/src/test/java/org/apache/xbean/naming/referenceable/Foo.java
new file mode 100644
index 00000000..f96486b9
--- /dev/null
+++ b/xbean-naming/src/test/java/org/apache/xbean/naming/referenceable/Foo.java
@@ -0,0 +1,66 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+package org.apache.xbean.naming.referenceable;
+
+import javax.naming.Referenceable;
+import javax.naming.Reference;
+import javax.naming.NamingException;
+import javax.naming.StringRefAddr;
+
+/**
+ * @version $Rev$ $Date$
+ */
+public class Foo implements Referenceable {
+
+    private final String value;
+
+    public Foo(String value) {
+        this.value = value;
+    }
+
+    public String getValue() {
+        return value;
+    }
+
+    public Reference getReference() throws NamingException {
+        return new Reference(Foo.class.getName(),
+                new StringRefAddr("value", value),
+                FooFactory.class.getName(),
+                null);
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        Foo foo = (Foo) o;
+
+        if (value != null ? !value.equals(foo.value) : foo.value != null) return false;
+
+        return true;
+    }
+
+    @Override
+    public int hashCode() {
+        return value != null ? value.hashCode() : 0;
+    }
+}
diff --git a/xbean-naming/src/test/java/org/apache/xbean/naming/referenceable/FooFactory.java b/xbean-naming/src/test/java/org/apache/xbean/naming/referenceable/FooFactory.java
new file mode 100644
index 00000000..966d7337
--- /dev/null
+++ b/xbean-naming/src/test/java/org/apache/xbean/naming/referenceable/FooFactory.java
@@ -0,0 +1,70 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+package org.apache.xbean.naming.referenceable;
+
+import java.util.Hashtable;
+
+import javax.naming.spi.ObjectFactory;
+import javax.naming.Referenceable;
+import javax.naming.Reference;
+import javax.naming.NamingException;
+import javax.naming.Name;
+import javax.naming.Context;
+import javax.naming.RefAddr;
+
+/**
+ * @version $Rev$ $Date$
+ */
+public class FooFactory implements Referenceable, ObjectFactory {
+
+    private Foo foo;
+
+    public FooFactory() {
+    }
+
+    public FooFactory(Foo foo) {
+        this.foo = foo;
+    }
+
+    public Foo getFoo() {
+        return foo;
+    }
+
+    public void setFoo(Foo foo) {
+        this.foo = foo;
+    }
+
+    public Reference getReference() throws NamingException {
+        return foo.getReference();
+    }
+
+    public Object getObjectInstance(Object o, Name name, Context context, Hashtable<?, ?> hashtable) throws Exception {
+        if (o instanceof Reference) {
+            Reference ref = (Reference) o;
+            if (Foo.class.getName().equals(ref.getClassName())) {
+                RefAddr addr = ref.get("value");
+                return new Foo((String) addr.getContent());
+            }
+        }
+        return null;
+    }
+    
+}
