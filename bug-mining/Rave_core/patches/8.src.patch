diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/Page.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/Page.java
index cb69cfa6..b766aa19 100644
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/Page.java
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/Page.java
@@ -46,15 +46,15 @@ import java.util.List;
 @XmlAccessorType(XmlAccessType.NONE)
 @Table(name="page", uniqueConstraints={@UniqueConstraint(columnNames={"owner_id","name"})})
 @NamedQueries({
-        @NamedQuery(name = Page.GET_BY_USER_ID_AND_PAGE_TYPE_ID, query="SELECT p FROM Page p WHERE p.owner.entityId = :userId and p.pageType.entityId = :pageTypeId ORDER BY p.renderSequence"),
-        @NamedQuery(name = Page.DELETE_BY_USER_ID_AND_PAGE_TYPE_ID, query="DELETE FROM Page p WHERE p.owner.entityId = :userId and p.pageType.entityId = :pageTypeId")
+        @NamedQuery(name = Page.GET_BY_USER_ID_AND_PAGE_TYPE, query="SELECT p FROM Page p WHERE p.owner.entityId = :userId and p.pageType = :pageType ORDER BY p.renderSequence"),
+        @NamedQuery(name = Page.DELETE_BY_USER_ID_AND_PAGE_TYPE, query="DELETE FROM Page p WHERE p.owner.entityId = :userId and p.pageType = :pageType")
 })
 @Access(AccessType.FIELD)
 public class Page implements BasicEntity, Serializable {
     private static final long serialVersionUID = 1L;
     
-    public static final String GET_BY_USER_ID_AND_PAGE_TYPE_ID = "Page.getByUserIdAndPageTypeId";
-    public static final String DELETE_BY_USER_ID_AND_PAGE_TYPE_ID = "Page.deleteByUserIdAndPageTypeId";
+    public static final String GET_BY_USER_ID_AND_PAGE_TYPE = "Page.getByUserIdAndPageType";
+    public static final String DELETE_BY_USER_ID_AND_PAGE_TYPE = "Page.deleteByUserIdAndPageType";
 
     @XmlAttribute(name="id")
     @Id @Column(name="entity_id")
@@ -75,7 +75,7 @@ public class Page implements BasicEntity, Serializable {
     @JoinColumn(name="parent_page_id")
     private Page parentPage;
 
-    @OneToMany(cascade=CascadeType.ALL, mappedBy="parentPage")
+    @OneToMany(fetch = FetchType.EAGER, cascade=CascadeType.ALL, mappedBy="parentPage")
     private List<Page> subPages;
 
     @Basic(optional=false) @Column(name="render_sequence")
@@ -91,8 +91,9 @@ public class Page implements BasicEntity, Serializable {
     @JoinColumn(name="page_id")
     private List<Region> regions;
 
-    @ManyToOne
-    @JoinColumn(name="page_type_id")
+    @Basic
+    @Column(name = "page_type")
+    @Enumerated(EnumType.STRING)
     private PageType pageType;
 
     public Page() {
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/PageType.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/PageType.java
index 8b285162..06111a0a 100644
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/PageType.java
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/PageType.java
@@ -18,96 +18,40 @@
  */
 package org.apache.rave.portal.model;
 
-import org.apache.rave.persistence.BasicEntity;
+import java.util.HashMap;
+import java.util.Map;
 
-import javax.persistence.*;
-import java.io.Serializable;
-
-@Entity
-@Table(name="page_type")
-@NamedQueries({
-        @NamedQuery(name = "PageType.getByCode", query="SELECT pt FROM PageType pt WHERE pt.code = :code"),
-        @NamedQuery(name = "PageType.getAll", query="SELECT pt FROM PageType pt ORDER BY pt.code")
-})
-@Access(AccessType.FIELD)
-public class PageType implements BasicEntity, Serializable {
-    private static final long serialVersionUID = 1L;
-
-    @Id @Column(name="entity_id")
-    @GeneratedValue(strategy = GenerationType.TABLE, generator = "pageTypeIdGenerator")
-    @TableGenerator(name = "pageTypeIdGenerator", table = "RAVE_PORTAL_SEQUENCES", pkColumnName = "SEQ_NAME",
-                    valueColumnName = "SEQ_COUNT", pkColumnValue = "page_type", allocationSize = 1, initialValue = 1)
-    private Long entityId;
-
-    @Basic(optional=false)
-    @Column(name="code", unique=true)
-    private String code;
-
-    @Basic(optional=false) @Column(name="description")
-    private String description;
-
-    public PageType() {
-
-    }
-
-    public PageType(Long entityId) {
-        this.entityId = entityId;
-    }
-
-    public PageType(Long entityId, String code, String description) {
-        this.entityId = entityId;
-        this.code = code;
-        this.description = description;
-    }
-
-    public Long getEntityId() {
-        return entityId;
-    }
-
-    public void setEntityId(Long entityId) {
-        this.entityId = entityId;
-    }
+/**
+ * The type of a Page object
+ */
+public enum PageType {
+    USER("user"),
+    PERSON_PROFILE("person_profile"),
+    SUB_PAGE("sub_page");
 
-    public String getCode() {
-        return code;
-    }
+    private String pageType;
+    private static final Map<String, PageType> lookup = new HashMap<String, PageType>();
 
-    public void setCode(String code) {
-        this.code = code;
+    static {
+        for (PageType pt : PageType.values()) {
+            lookup.put(pt.toString(), pt);
+        }
     }
 
-    public String getDescription() {
-        return description;
+    private PageType(String pageType) {
+        this.pageType = pageType;
     }
 
-    public void setDescription(String description) {
-        this.description = description;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        PageType pageType = (PageType) o;
-
-        if (!entityId.equals(pageType.entityId)) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        return entityId.hashCode();
+    public String getPageType() {
+        return pageType;
     }
 
     @Override
     public String toString() {
-        return "PageType{" +
-                "entityId=" + entityId +
-                ", code='" + code + '\'' +
-                ", description='" + description + '\'' +
-                '}';
+        return pageType;
     }
 
-}
+    public static PageType get(String pageType) {
+        return lookup.get(pageType);
+    }
+}
\ No newline at end of file
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/PageRepository.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/PageRepository.java
index b59bd966..afe0d02f 100644
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/PageRepository.java
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/PageRepository.java
@@ -32,16 +32,16 @@ public interface PageRepository extends Repository<Page> {
      * Returns all pages of a given PageType owned by the user
      *
      * @param userId the userId to search by
-     * @param pageTypeId the pageTypeId to search by
-     * @return a list of all the Page objects owned by userId of type pageTypeId
+     * @param pageType the pageType to search by
+     * @return a list of all the Page objects owned by userId of type pageType
      */
-    List<Page> getAllPages(Long userId, Long pageTypeId);
+    List<Page> getAllPages(Long userId, PageType pageType);
 
     /**
-     * Delete all pages for a userId of the supplied pageTypeId
+     * Delete all pages for a userId of the supplied pageType
      * @param userId
-     * @param pageTypeId
+     * @param pageType
      * @return the number of pages deleted
      */
-    int deletePages(Long userId, Long pageTypeId);
+    int deletePages(Long userId, PageType pageType);
 }
\ No newline at end of file
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/PageTypeRepository.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/PageTypeRepository.java
deleted file mode 100644
index 4b95ed26..00000000
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/PageTypeRepository.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.rave.portal.repository;
-
-import org.apache.rave.persistence.Repository;
-import org.apache.rave.portal.model.PageType;
-
-import java.util.List;
-
-/**
- * Provides persistence operations for the {@link org.apache.rave.portal.model.PageType} class
- */
-public interface PageTypeRepository extends Repository<PageType> {
-    /**
-     * Returns all page types
-     *
-     * @return a list of all the PageTypes in the database
-     *
-     **/
-    List<PageType> getAll();
-
-    /**
-     * Returns a PageType object with the supplied code
-     *
-     * @param code
-     * @return the PageType object with the supplied code
-     */
-    PageType getByCode(String code);
-
-    /**
-     * Returns the User PageType
-     *
-     * @return the User PageType
-     */
-    PageType getUserPageType();
-
-    /**
-     * Returns the Person Profile Page Type
-     *
-     * @return the Person Profile page type
-     */
-    PageType getPersonProfilePageType();
-
-    /**
-     * Returns the Sub page page Type
-     *
-     * @return the Sub page page type
-     */
-    PageType getSubPagePageType();
-}
\ No newline at end of file
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/impl/JpaPageRepository.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/impl/JpaPageRepository.java
index 269bebfe..c2af6cdb 100644
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/impl/JpaPageRepository.java
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/impl/JpaPageRepository.java
@@ -37,18 +37,18 @@ public class JpaPageRepository extends AbstractJpaRepository<Page> implements Pa
     }
 
     @Override
-    public List<Page> getAllPages(Long userId, Long pageTypeId) {
-        TypedQuery<Page> query = manager.createNamedQuery(Page.GET_BY_USER_ID_AND_PAGE_TYPE_ID, Page.class);
+    public List<Page> getAllPages(Long userId, PageType pageType) {
+        TypedQuery<Page> query = manager.createNamedQuery(Page.GET_BY_USER_ID_AND_PAGE_TYPE, Page.class);
         query.setParameter("userId", userId);
-        query.setParameter("pageTypeId", pageTypeId);
+        query.setParameter("pageType", pageType);
         return query.getResultList();
     }
 
     @Override
-    public int deletePages(Long userId, Long pageTypeId) {
-        TypedQuery<Page> query = manager.createNamedQuery(Page.DELETE_BY_USER_ID_AND_PAGE_TYPE_ID, Page.class);
+    public int deletePages(Long userId, PageType pageType) {
+        TypedQuery<Page> query = manager.createNamedQuery(Page.DELETE_BY_USER_ID_AND_PAGE_TYPE, Page.class);
         query.setParameter("userId", userId);
-        query.setParameter("pageTypeId", pageTypeId);
+        query.setParameter("pageType", pageType);
         return query.executeUpdate();
     }
 }
\ No newline at end of file
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/impl/JpaPageTypeRepository.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/impl/JpaPageTypeRepository.java
deleted file mode 100644
index 5cca2f69..00000000
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/repository/impl/JpaPageTypeRepository.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.apache.rave.portal.repository.impl;
-
-import org.apache.rave.persistence.jpa.AbstractJpaRepository;
-import org.apache.rave.portal.model.PageType;
-import org.apache.rave.portal.repository.PageTypeRepository;
-import org.apache.rave.portal.repository.RepositoryConstants;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.stereotype.Repository;
-
-import javax.persistence.TypedQuery;
-import java.util.List;
-
-import static org.apache.rave.persistence.jpa.util.JpaUtil.getSingleResult;
-
-@Repository
-public class JpaPageTypeRepository extends AbstractJpaRepository<PageType> implements PageTypeRepository {
-
-    public JpaPageTypeRepository() {
-        super(PageType.class);
-    }
-
-    @Override
-    public List<PageType> getAll() {
-        return manager.createNamedQuery("PageType.getAll", PageType.class).getResultList();
-    }
-
-    @Override
-    public PageType getByCode(String code) {
-        TypedQuery<PageType> query = manager.createNamedQuery("PageType.getByCode", PageType.class);
-        query.setParameter("code", code);
-        return getSingleResult(query.getResultList());
-    }
-
-    @Override
-    public PageType getUserPageType() {
-        return getByCode(RepositoryConstants.PageType.USER);
-    }
-
-    @Override
-    public PageType getPersonProfilePageType() {
-        return getByCode(RepositoryConstants.PageType.PERSON_PROFILE);
-    }
-
-    @Override
-    public PageType getSubPagePageType() {
-        return getByCode(RepositoryConstants.PageType.SUB_PAGE);
-    }
-}
\ No newline at end of file
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/DefaultPagePermissionEvaluator.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/DefaultPagePermissionEvaluator.java
index 48a193dd..50cb2525 100644
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/DefaultPagePermissionEvaluator.java
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/DefaultPagePermissionEvaluator.java
@@ -18,21 +18,20 @@
  */
 package org.apache.rave.portal.security.impl;
 
-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.List;
 import org.apache.rave.portal.model.Page;
 import org.apache.rave.portal.model.PageType;
 import org.apache.rave.portal.model.User;
 import org.apache.rave.portal.repository.PageRepository;
-import org.apache.rave.portal.repository.PageTypeRepository;
-import org.apache.rave.portal.security.ModelPermissionEvaluator.Permission;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.core.Authentication;
 import org.springframework.stereotype.Component;
 
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * The default implementation of the ModelPermissionEvaluator for Page objects
  * 
@@ -41,19 +40,11 @@ import org.springframework.stereotype.Component;
 @Component
 public class DefaultPagePermissionEvaluator extends AbstractModelPermissionEvaluator<Page> {
     private Logger log = LoggerFactory.getLogger(getClass());
-    private PageRepository pageRepository;
-    
-    private final String PERSON_PROFILE_PAGE_TYPE_CODE;
-    private final String SUB_PAGE_PAGE_TYPE_CODE;
-    private final String USER_PAGE_TYPE_CODE;
+    private PageRepository pageRepository;   
     
     @Autowired
-    public DefaultPagePermissionEvaluator(PageRepository pageRepository, PageTypeRepository pageTypeRepository) {       
-        this.pageRepository = pageRepository;
-
-        PERSON_PROFILE_PAGE_TYPE_CODE = pageTypeRepository.getPersonProfilePageType().getCode();
-        SUB_PAGE_PAGE_TYPE_CODE = pageTypeRepository.getSubPagePageType().getCode();
-        USER_PAGE_TYPE_CODE = pageTypeRepository.getUserPageType().getCode();
+    public DefaultPagePermissionEvaluator(PageRepository pageRepository) {       
+        this.pageRepository = pageRepository;        
     }
    
     @Override
@@ -197,8 +188,8 @@ public class DefaultPagePermissionEvaluator extends AbstractModelPermissionEvalu
     }
     
     private boolean isPersonProfilePageOrSubPage(Page page) {
-        String pageTypeCode = (page.getPageType() == null) ? "" : page.getPageType().getCode();
-        String parentPageTypeCode = (page.getParentPage() == null) ? "" : page.getParentPage().getPageType().getCode();
-        return PERSON_PROFILE_PAGE_TYPE_CODE.equals(pageTypeCode) || PERSON_PROFILE_PAGE_TYPE_CODE.equals(parentPageTypeCode);
+        PageType pageType = page.getPageType();
+        PageType parentPageType = (page.getParentPage() == null) ? null : page.getParentPage().getPageType();
+        return PageType.PERSON_PROFILE.equals(pageType) || PageType.PERSON_PROFILE.equals(parentPageType);
     }  
 }
\ No newline at end of file
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/PageService.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/PageService.java
index 64029da8..32cd2c6e 100644
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/PageService.java
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/PageService.java
@@ -124,13 +124,13 @@ public interface PageService {
     void deletePage(long pageId);
 
     /**
-     * Deletes all pages of the supplied pageTypeId for the userId
+     * Deletes all pages of the supplied pageType for the userId
      *
      * @param userId
-     * @param pageTypeId
+     * @param pageType
      */
     @PreAuthorize("hasPermission(new org.apache.rave.portal.security.impl.RaveSecurityContext(#userId, 'org.apache.rave.portal.model.User'), 'org.apache.rave.portal.model.Page', 'delete')")
-    int deletePages(long userId, long pageTypeId);
+    int deletePages(long userId, PageType pageType);
     
     /**
      * Moves a Region widget's position in a region or across regions
@@ -206,25 +206,4 @@ public interface PageService {
      */
     @PreAuthorize("hasPermission(#pageId, 'org.apache.rave.portal.model.Page', 'update')") 
     Page movePageToDefault(long pageId);
-
-    /**
-     * Returns the PageType object representing User pages
-     *
-     * @return  the User PageType object
-     */
-    PageType getUserPageType();
-
-    /**
-     * Returns the PageType object representing Person Profile pages
-     *
-     * @return  the Person Profile PageType object
-     */
-    PageType getPersonProfilePageType();
-
-    /**
-     * Returns the PageType object representing sub pages
-     *
-     * @return  the Sub Page PageType object
-     */
-    PageType getSubPagePageType();
 }
\ No newline at end of file
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultPageService.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultPageService.java
index 83c51840..0d89024f 100644
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultPageService.java
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultPageService.java
@@ -40,14 +40,10 @@ public class DefaultPageService implements PageService {
     private final RegionWidgetRepository regionWidgetRepository;
     private final WidgetRepository widgetRepository;
     private final PageLayoutRepository pageLayoutRepository;
-    private final PageTypeRepository pageTypeRepository;
     private final UserService userService;    
     private final String defaultPageName;
     
     private final long MOVE_PAGE_DEFAULT_POSITION_INDEX = -1L;
-    private final long USER_PAGE_TYPE_ID;
-    private final long PERSON_PROFILE_PAGE_TYPE_ID;
-    private final long SUB_PAGE_PAGE_TYPE_ID;
 
     @Autowired
     public DefaultPageService(PageRepository pageRepository, 
@@ -55,7 +51,6 @@ public class DefaultPageService implements PageService {
                               WidgetRepository widgetRepository, 
                               RegionWidgetRepository regionWidgetRepository,
                               PageLayoutRepository pageLayoutRepository,
-                              PageTypeRepository pageTypeRepository,
                               UserService userService,
                               @Value("${portal.page.default_name}") String defaultPageName) {
         this.pageRepository = pageRepository;
@@ -63,13 +58,8 @@ public class DefaultPageService implements PageService {
         this.regionWidgetRepository = regionWidgetRepository;
         this.widgetRepository = widgetRepository;
         this.pageLayoutRepository = pageLayoutRepository;
-        this.pageTypeRepository = pageTypeRepository;
         this.userService = userService;
         this.defaultPageName = defaultPageName;
-
-        USER_PAGE_TYPE_ID = pageTypeRepository.getUserPageType().getEntityId();
-        PERSON_PROFILE_PAGE_TYPE_ID = pageTypeRepository.getPersonProfilePageType().getEntityId();
-        SUB_PAGE_PAGE_TYPE_ID = pageTypeRepository.getSubPagePageType().getEntityId();
     }
 
     @Override
@@ -79,12 +69,12 @@ public class DefaultPageService implements PageService {
     
     @Override
     public List<Page> getAllUserPages(long userId) {
-        return pageRepository.getAllPages(userId, USER_PAGE_TYPE_ID);
+        return pageRepository.getAllPages(userId, PageType.USER);
     }
 
     @Override
     public List<Page> getAllPersonProfilePages(long userId) {
-        return pageRepository.getAllPages(userId, PERSON_PROFILE_PAGE_TYPE_ID);
+        return pageRepository.getAllPages(userId, PageType.PERSON_PROFILE);
     }
 
     @Override
@@ -138,7 +128,7 @@ public class DefaultPageService implements PageService {
         page.setRenderSequence(renderSequence);
         page.setRegions(regions);
         // set this as a "sub-page" page type
-        page.setPageType(pageTypeRepository.getSubPagePageType());
+        page.setPageType(PageType.SUB_PAGE);
 
         // Properly sets both sides of the circular parent-child reference
         page.setParentPage(parentPage);
@@ -168,14 +158,14 @@ public class DefaultPageService implements PageService {
 
         //TODO RAVE-237:  We should be able to delete these lines.  If there are gaps in the sequence numbers, then it will still
         //TODO RAVE-237:  return values in the correct order.  We only need to update sequences when there is a change in order
-        List<Page> pages = pageRepository.getAllPages(user.getEntityId(), USER_PAGE_TYPE_ID);
+        List<Page> pages = pageRepository.getAllPages(user.getEntityId(), PageType.USER);
         updatePageRenderSequences(pages);
     }
 
     @Override
     @Transactional
-    public int deletePages(long userId, long pageTypeId) {
-        return pageRepository.deletePages(userId, pageTypeId);
+    public int deletePages(long userId, PageType pageType) {
+        return pageRepository.deletePages(userId, pageType);
     }
     
     @Override
@@ -240,21 +230,6 @@ public class DefaultPageService implements PageService {
         return doMovePage(pageId, MOVE_PAGE_DEFAULT_POSITION_INDEX);    
     }
 
-    @Override
-    public PageType getUserPageType() {
-        return pageTypeRepository.getUserPageType();
-    }
-
-    @Override
-    public PageType getPersonProfilePageType() {
-        return pageTypeRepository.getPersonProfilePageType();
-    }
-
-    @Override
-    public PageType getSubPagePageType() {
-        return pageTypeRepository.getSubPagePageType();
-    }
-
     @Override
     @Transactional
     public Page updatePage(long pageId, String name, String pageLayoutCode) {
@@ -407,7 +382,7 @@ public class DefaultPageService implements PageService {
         page.setRenderSequence(renderSequence);
         page.setRegions(regions);
         // set this as a "user" page type
-        page.setPageType(pageTypeRepository.getUserPageType());
+        page.setPageType(PageType.USER);
         pageRepository.save(page);
         
         return page;
@@ -443,7 +418,7 @@ public class DefaultPageService implements PageService {
         // get all of the user's pages
         // the pageRepository returns an un-modifiable list
         // so we need to create a modifyable arraylist
-        List<Page> pages = new ArrayList<Page>(pageRepository.getAllPages(user.getEntityId(), USER_PAGE_TYPE_ID));
+        List<Page> pages = new ArrayList<Page>(pageRepository.getAllPages(user.getEntityId(), PageType.USER));
 
         // first remove it from the list         
         if (!pages.remove(movingPage)) {
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultUserService.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultUserService.java
index 88c02dc8..edd4c9fa 100644
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultUserService.java
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultUserService.java
@@ -19,6 +19,7 @@
 
 package org.apache.rave.portal.service.impl;
 
+import org.apache.rave.portal.model.PageType;
 import org.apache.rave.portal.model.Person;
 import org.apache.rave.portal.model.User;
 import org.apache.rave.portal.model.util.SearchResult;
@@ -50,7 +51,6 @@ public class DefaultUserService implements UserService {
 
     private final UserRepository userRepository;
     private final PageRepository pageRepository;
-    private final PageTypeRepository pageTypeRepository;
     private final WidgetRatingRepository widgetRatingRepository;
     private final WidgetCommentRepository widgetCommentRepository;
     private final WidgetRepository widgetRepository;
@@ -58,13 +58,11 @@ public class DefaultUserService implements UserService {
     @Autowired
     public DefaultUserService(UserRepository userRepository,
                               PageRepository pageRepository,
-                              PageTypeRepository pageTypeRepository,
                               WidgetRatingRepository widgetRatingRepository,
                               WidgetCommentRepository widgetCommentRepository,
                               WidgetRepository widgetRepository) {
         this.userRepository = userRepository;
         this.pageRepository = pageRepository;
-        this.pageTypeRepository = pageTypeRepository;
         this.widgetRatingRepository = widgetRatingRepository;
         this.widgetCommentRepository = widgetCommentRepository;
         this.widgetRepository = widgetRepository;
@@ -187,7 +185,7 @@ public class DefaultUserService implements UserService {
         final String username = user.getUsername();
 
         // delete all User type pages
-        int numDeletedPages = pageRepository.deletePages(userId, pageTypeRepository.getUserPageType().getEntityId());        
+        int numDeletedPages = pageRepository.deletePages(userId, PageType.USER);
         // delete all the widget comments
         int numWidgetComments = widgetCommentRepository.deleteAll(userId);
         // delete all the widget ratings
diff --git a/rave-components/rave-core/src/main/resources/META-INF/persistence.xml b/rave-components/rave-core/src/main/resources/META-INF/persistence.xml
index fb989820..03f91bdb 100644
--- a/rave-components/rave-core/src/main/resources/META-INF/persistence.xml
+++ b/rave-components/rave-core/src/main/resources/META-INF/persistence.xml
@@ -36,6 +36,5 @@
             <class>org.apache.rave.portal.model.Tag</class>
             <class>org.apache.rave.portal.model.WidgetTag</class>
             <class>org.apache.rave.portal.model.PortalPreference</class>
-            <class>org.apache.rave.portal.model.PageType</class>
         </persistence-unit>
 </persistence>
diff --git a/rave-components/rave-core/src/test/java/org/apache/rave/portal/repository/impl/JpaPageRepositoryTest.java b/rave-components/rave-core/src/test/java/org/apache/rave/portal/repository/impl/JpaPageRepositoryTest.java
index fb72f9c2..8d82de10 100644
--- a/rave-components/rave-core/src/test/java/org/apache/rave/portal/repository/impl/JpaPageRepositoryTest.java
+++ b/rave-components/rave-core/src/test/java/org/apache/rave/portal/repository/impl/JpaPageRepositoryTest.java
@@ -19,6 +19,7 @@
 package org.apache.rave.portal.repository.impl;
 
 import org.apache.rave.portal.model.Page;
+import org.apache.rave.portal.model.PageType;
 import org.hamcrest.CoreMatchers;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -44,9 +45,9 @@ public class JpaPageRepositoryTest {
     private static final Long USER_ID = 1L;
     private static final Long INVALID_USER = -1L;
     private static final String WIDGET_URL = "http://www.widget-dico.com/wikipedia/google/wikipedia.xml";
-    private static final Long USER_PAGE_TYPE_ID = 1L;
-    private static final Long PERSON_PROFILE_PAGE_TYPE_ID = 2L;
-    private static final Long SUB_PAGE_PAGE_TYPE_ID = 3L;
+    private static final Long USER_PAGE_ID = 1L;
+    private static final Long PERSON_PROFILE_PAGE_ID = 3L;
+    private static final Long SUB_PAGE_ID = 4L;
 
     private static final Long VALID_PARENT_PAGE_ID = 3L;
     private static final Long INVALID_PARENT_PAGE_ID = -1L;
@@ -59,7 +60,7 @@ public class JpaPageRepositoryTest {
 
     @Test
     public void getAllPages_validUser_validUserPageSet() {
-        List<Page> pages = repository.getAllPages(USER_ID, USER_PAGE_TYPE_ID);
+        List<Page> pages = repository.getAllPages(USER_ID, PageType.USER);
         assertThat(pages, is(notNullValue()));
         assertThat(pages.size(), equalTo(2));
         assertThat(pages.get(0).getRegions().size(), equalTo(2));
@@ -77,7 +78,7 @@ public class JpaPageRepositoryTest {
 
     @Test
     public void getAllPages_validUser_validPersonProfilePageSet() {
-        List<Page> pages = repository.getAllPages(USER_ID, PERSON_PROFILE_PAGE_TYPE_ID);
+        List<Page> pages = repository.getAllPages(USER_ID, PageType.PERSON_PROFILE);
         assertThat(pages, is(notNullValue()));
         assertThat(pages.size(), equalTo(1));
         assertThat(pages.get(0).getRegions().size(), equalTo(2));
@@ -93,7 +94,7 @@ public class JpaPageRepositoryTest {
 
     @Test
     public void getAllPages_validUser_validSubPagePageSet() {
-        List<Page> pages = repository.getAllPages(USER_ID, SUB_PAGE_PAGE_TYPE_ID);
+        List<Page> pages = repository.getAllPages(USER_ID, PageType.SUB_PAGE);
         assertThat(pages, is(notNullValue()));
         assertThat(pages.size(), equalTo(2));
         assertThat(pages.get(0).getRegions().size(), equalTo(2));
@@ -110,35 +111,43 @@ public class JpaPageRepositoryTest {
 
     @Test
     public void getAllPages_invalidUser_emptySet() {
-        List<Page> pages = repository.getAllPages(INVALID_USER, USER_PAGE_TYPE_ID);
+        List<Page> pages = repository.getAllPages(INVALID_USER, PageType.USER);
         assertThat(pages.isEmpty(), is(true));
     }
 
     @Test
     public void getAllPages_nullUser_emptySet() {
-        List<Page> pages = repository.getAllPages(null, USER_PAGE_TYPE_ID);
+        List<Page> pages = repository.getAllPages(null, PageType.USER);
         assertThat(pages.isEmpty(), is(true));
     }
 
     @Test
     public void getById_valid_userPage() {
-        Page p = repository.get(USER_PAGE_TYPE_ID);
+        Page p = repository.get(USER_PAGE_ID);
         assertThat(p, is(notNullValue()));
-        assertThat(p.getEntityId(), is(equalTo(USER_PAGE_TYPE_ID)));
+        assertThat(p.getEntityId(), is(equalTo(USER_PAGE_ID)));
+        assertThat(p.getPageType(), is(PageType.USER));
+        assertThat(p.getParentPage(), is(nullValue(Page.class)));
+        assertThat(p.getSubPages().isEmpty(), is(true));
     }
 
     @Test
     public void getById_valid_personProfilePage() {
-        Page p = repository.get(PERSON_PROFILE_PAGE_TYPE_ID);
-        assertThat(p, is(notNullValue()));
-        assertThat(p.getEntityId(), is(equalTo(PERSON_PROFILE_PAGE_TYPE_ID)));
+        Page p = repository.get(PERSON_PROFILE_PAGE_ID);
+        assertThat(p.getEntityId(), is(equalTo(PERSON_PROFILE_PAGE_ID)));
+        assertThat(p.getPageType(), is(PageType.PERSON_PROFILE));
+        assertThat(p.getParentPage(), is(nullValue(Page.class)));
+        assertThat(p.getSubPages().isEmpty(), is(false));
     }
 
     @Test
     public void getById_valid_subPagePage() {
-        Page p = repository.get(SUB_PAGE_PAGE_TYPE_ID);
+        Page p = repository.get(SUB_PAGE_ID);
         assertThat(p, is(notNullValue()));
-        assertThat(p.getEntityId(), is(equalTo(SUB_PAGE_PAGE_TYPE_ID)));
+        assertThat(p.getEntityId(), is(equalTo(SUB_PAGE_ID)));
+        assertThat(p.getPageType(), is(PageType.SUB_PAGE));
+        assertThat(p.getParentPage(), is(notNullValue(Page.class)));
+        assertThat(p.getSubPages().isEmpty(), is(true));
     }
 
     @Test
@@ -151,11 +160,11 @@ public class JpaPageRepositoryTest {
     @Transactional(readOnly=false)
     @Rollback(true)
     public void deletePages_userPageType() {
-        int numPages = repository.getAllPages(USER_ID, USER_PAGE_TYPE_ID).size();
+        int numPages = repository.getAllPages(USER_ID, PageType.USER).size();
         assertThat(numPages > 0, is(true));
-        int deletedPages = repository.deletePages(USER_ID, USER_PAGE_TYPE_ID);
+        int deletedPages = repository.deletePages(USER_ID, PageType.USER);
         assertThat(deletedPages, is(numPages));
         // ensure pages are deleted
-        assertThat(repository.getAllPages(USER_ID, USER_PAGE_TYPE_ID).isEmpty(), is(true));
+        assertThat(repository.getAllPages(USER_ID, PageType.USER).isEmpty(), is(true));
     }
-}
+}
\ No newline at end of file
diff --git a/rave-components/rave-core/src/test/java/org/apache/rave/portal/repository/impl/JpaPageTypeRepositoryTest.java b/rave-components/rave-core/src/test/java/org/apache/rave/portal/repository/impl/JpaPageTypeRepositoryTest.java
deleted file mode 100644
index 10bbae41..00000000
--- a/rave-components/rave-core/src/test/java/org/apache/rave/portal/repository/impl/JpaPageTypeRepositoryTest.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.rave.portal.repository.impl;
-
-import org.apache.rave.portal.model.PageType;
-import org.apache.rave.portal.repository.PageTypeRepository;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.test.context.ContextConfiguration;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
-import org.springframework.transaction.annotation.Transactional;
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-
-import javax.persistence.EntityManager;
-import javax.persistence.PersistenceContext;
-import java.util.List;
-
-@Transactional
-@RunWith(SpringJUnit4ClassRunner.class)
-@ContextConfiguration(locations = {"classpath:test-dataContext.xml", "classpath:test-applicationContext.xml"})
-public class JpaPageTypeRepositoryTest {
-    private final Long USER_PAGE_TYPE_ENTITY_ID = 1L;
-    private final String USER_PAGE_TYPE_CODE = "USER";
-    private final String USER_PAGE_TYPE_DESCRIPTION = "Standard user pages which are only accessible by the page owner";
-
-    private final Long PERSON_PROFILE_PAGE_TYPE_ENTITY_ID = 2L;
-    private final String PERSON_PROFILE_PAGE_TYPE_CODE = "PERSON_PROFILE";
-    private final String PERSON_PROFILE_PAGE_TYPE_DESCRIPTION = "Person Profile pages which are accessible by anyone and contain Person Profile information";
-
-    private final Long SUB_PAGE_PAGE_TYPE_ENTITY_ID = 3L;
-    private final String SUB_PAGE_PAGE_TYPE_CODE = "SUB_PAGE";
-    private final String SUB_PAGE_PAGE_TYPE_DESCRIPTION = "Sub pages are contained within another page";
-
-
-    @PersistenceContext
-    private EntityManager manager;
-
-    @Autowired
-    private PageTypeRepository repository;
-
-    @Test
-    public void getAll() {
-        List<PageType> allPageTypes = repository.getAll();
-        assertThat(allPageTypes.size(), is(3));
-        assertThat(allPageTypes.get(0).getCode(), is(PERSON_PROFILE_PAGE_TYPE_CODE));
-        assertThat(allPageTypes.get(1).getCode(), is(SUB_PAGE_PAGE_TYPE_CODE));
-        assertThat(allPageTypes.get(2).getCode(), is(USER_PAGE_TYPE_CODE));
-    }
-    
-    @Test
-    public void getByCode_UserType() {
-        PageType userPageType = repository.getByCode(USER_PAGE_TYPE_CODE);
-        assertThat(userPageType.getEntityId(), is(USER_PAGE_TYPE_ENTITY_ID));
-        assertThat(userPageType.getCode(), is(USER_PAGE_TYPE_CODE));
-        assertThat(userPageType.getDescription(), is(USER_PAGE_TYPE_DESCRIPTION));
-    }
-
-    @Test
-    public void getByCode_PersonPageType() {
-        PageType personPageType = repository.getByCode(PERSON_PROFILE_PAGE_TYPE_CODE);
-        assertThat(personPageType.getEntityId(), is(PERSON_PROFILE_PAGE_TYPE_ENTITY_ID));
-        assertThat(personPageType.getCode(), is(PERSON_PROFILE_PAGE_TYPE_CODE));
-        assertThat(personPageType.getDescription(), is(PERSON_PROFILE_PAGE_TYPE_DESCRIPTION));
-    }
-
-    @Test
-    public void getByCode_SubPageType() {
-        PageType subPageType = repository.getByCode(SUB_PAGE_PAGE_TYPE_CODE);
-        assertThat(subPageType.getEntityId(), is(SUB_PAGE_PAGE_TYPE_ENTITY_ID));
-        assertThat(subPageType.getCode(), is(SUB_PAGE_PAGE_TYPE_CODE));
-        assertThat(subPageType.getDescription(), is(SUB_PAGE_PAGE_TYPE_DESCRIPTION));
-    }
-}
diff --git a/rave-components/rave-core/src/test/java/org/apache/rave/portal/security/impl/DefaultPagePermissionEvaluatorTest.java b/rave-components/rave-core/src/test/java/org/apache/rave/portal/security/impl/DefaultPagePermissionEvaluatorTest.java
index 6579c34c..6fb8fdcd 100644
--- a/rave-components/rave-core/src/test/java/org/apache/rave/portal/security/impl/DefaultPagePermissionEvaluatorTest.java
+++ b/rave-components/rave-core/src/test/java/org/apache/rave/portal/security/impl/DefaultPagePermissionEvaluatorTest.java
@@ -19,26 +19,27 @@
 
 package org.apache.rave.portal.security.impl;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
 import org.apache.rave.portal.model.Page;
 import org.apache.rave.portal.model.PageType;
 import org.apache.rave.portal.model.User;
 import org.apache.rave.portal.repository.PageRepository;
-import org.apache.rave.portal.repository.PageTypeRepository;
 import org.apache.rave.portal.security.ModelPermissionEvaluator.Permission;
 import org.apache.rave.portal.security.util.AuthenticationUtils;
 import org.easymock.EasyMock;
 import org.junit.Before;
 import org.junit.Test;
-import static org.junit.Assert.*;
-import static org.easymock.EasyMock.*;
-import static org.hamcrest.CoreMatchers.*;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.security.core.authority.SimpleGrantedAuthority;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import static org.easymock.EasyMock.*;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
 /**
  *
  * @author carlucci
@@ -46,13 +47,10 @@ import org.springframework.security.core.authority.SimpleGrantedAuthority;
 public class DefaultPagePermissionEvaluatorTest {
     private DefaultPagePermissionEvaluator defaultPagePermissionEvaluator;
     private PageRepository mockPageRepository;
-    private PageTypeRepository mockPageTypeRepository;
     private Authentication mockAuthentication;
     private Page page, personProfilePage, pageSubPage, personProfileSubPage;
     private User user, user2;    
     private List<GrantedAuthority> grantedAuthoritiesList;
-    private PageType userPageType, personProfilePageType, subPageType;
-    
 
     private final Long VALID_USER_ID = 99L;
     private final String VALID_USERNAME = "john.doe";
@@ -64,24 +62,10 @@ public class DefaultPagePermissionEvaluatorTest {
 
     @Before
     public void setUp() {
-        userPageType = new PageType(1L, "USER", "User Desc");
-        personProfilePageType = new PageType(2L, "PERSON_PROFILE", "PP Desc");
-        subPageType = new PageType(3L, "SUB_PAGE", "Sub Page Desc");
-
         mockPageRepository = createMock(PageRepository.class);
-        mockPageTypeRepository = createMock(PageTypeRepository.class);
         mockAuthentication = createMock(Authentication.class);
 
-        // test methods called in constructor
-        expect(mockPageTypeRepository.getSubPagePageType()).andReturn(subPageType);
-        expect(mockPageTypeRepository.getPersonProfilePageType()).andReturn(personProfilePageType);
-        expect(mockPageTypeRepository.getUserPageType()).andReturn(userPageType);
-        replay(mockPageTypeRepository);        
-        defaultPagePermissionEvaluator = new DefaultPagePermissionEvaluator(mockPageRepository, mockPageTypeRepository);
-        verify(mockPageTypeRepository);
-
-        // reset the mock page type repository for method mocking
-        reset(mockPageTypeRepository);
+        defaultPagePermissionEvaluator = new DefaultPagePermissionEvaluator(mockPageRepository);
         
         user = new User();
         user.setUsername(VALID_USERNAME);
@@ -92,22 +76,22 @@ public class DefaultPagePermissionEvaluatorTest {
         page = new Page();
         page.setEntityId(VALID_PAGE_ID);
         page.setOwner(user);
-        page.setPageType(userPageType);
+        page.setPageType(PageType.USER);
 
         pageSubPage = new Page();
         pageSubPage.setEntityId(VALID_PAGE_ID4);
         pageSubPage.setOwner(user);
-        pageSubPage.setPageType(subPageType);
+        pageSubPage.setPageType(PageType.SUB_PAGE);
         pageSubPage.setParentPage(page);
 
         personProfilePage = new Page();
         personProfilePage.setEntityId(VALID_PAGE_ID2);
         personProfilePage.setOwner(user);
-        personProfilePage.setPageType(personProfilePageType);
+        personProfilePage.setPageType(PageType.PERSON_PROFILE);
         personProfileSubPage = new Page();
         personProfileSubPage.setEntityId(VALID_PAGE_ID3);
         personProfileSubPage.setOwner(user);
-        personProfileSubPage.setPageType(subPageType);
+        personProfileSubPage.setPageType(PageType.PERSON_PROFILE);
         personProfileSubPage.setParentPage(personProfilePage);
 
         grantedAuthoritiesList = new ArrayList<GrantedAuthority>();
diff --git a/rave-components/rave-core/src/test/java/org/apache/rave/portal/service/impl/DefaultPageServiceTest.java b/rave-components/rave-core/src/test/java/org/apache/rave/portal/service/impl/DefaultPageServiceTest.java
index 99957799..75d1b700 100644
--- a/rave-components/rave-core/src/test/java/org/apache/rave/portal/service/impl/DefaultPageServiceTest.java
+++ b/rave-components/rave-core/src/test/java/org/apache/rave/portal/service/impl/DefaultPageServiceTest.java
@@ -44,7 +44,6 @@ public class DefaultPageServiceTest {
     private WidgetRepository widgetRepository;
     private RegionWidgetRepository regionWidgetRepository;
     private PageLayoutRepository pageLayoutRepository;
-    private PageTypeRepository pageTypeRepository;
     private UserService userService;
 
     private final long REGION_WIDGET_ID = 5L;
@@ -66,34 +65,18 @@ public class DefaultPageServiceTest {
     private String defaultPageName = "Main";
     private Page page, page2;
     private List<Page> pageList;
-    private PageType userPageType, personProfilePageType, subPagePageType;
 
     @Before
     public void setup() {
-        userPageType = new PageType(USER_PAGE_TYPE_ID, "USER", "User Page Type");
-        personProfilePageType = new PageType(2L, "PERSON_PROFILE", "PP Page Type");
-        subPagePageType = new PageType(3L, "SUB_PAGE", "Sub Page Page Type");
-
         pageRepository = createMock(PageRepository.class);
         regionRepository = createMock(RegionRepository.class);
         widgetRepository = createMock(WidgetRepository.class);
         regionWidgetRepository = createMock(RegionWidgetRepository.class);
         pageLayoutRepository = createMock(PageLayoutRepository.class);
-        pageTypeRepository = createMock(PageTypeRepository.class);
         userService = createMock(UserService.class);
-
-        // mock methods that will execute in DefaultPageService constructor
-        expect(pageTypeRepository.getUserPageType()).andReturn(userPageType);
-        expect(pageTypeRepository.getPersonProfilePageType()).andReturn(personProfilePageType);
-        expect(pageTypeRepository.getSubPagePageType()).andReturn(subPagePageType);
-        replay(pageTypeRepository);
+       
         pageService = new DefaultPageService(pageRepository, regionRepository, widgetRepository, regionWidgetRepository, 
-                                             pageLayoutRepository, pageTypeRepository, userService, defaultPageName);
-
-        verify(pageTypeRepository);
-
-        // reset the pageTypeRepository after testing the constructor for method specific mocks
-        reset(pageTypeRepository);
+                                             pageLayoutRepository, userService, defaultPageName);
         
         validWidget = new Widget(1L, "http://dummy.apache.org/widgets/widget.xml");
         
@@ -135,7 +118,7 @@ public class DefaultPageServiceTest {
     public void getAllPages() {
         final List<Page> VALID_PAGES = new ArrayList<Page>();
 
-        expect(pageRepository.getAllPages(VALID_USER_ID, userPageType.getEntityId())).andReturn(VALID_PAGES);
+        expect(pageRepository.getAllPages(VALID_USER_ID, PageType.USER)).andReturn(VALID_PAGES);
         replay(pageRepository);
 
         assertThat(pageService.getAllUserPages(VALID_USER_ID), CoreMatchers.sameInstance(VALID_PAGES));
@@ -154,22 +137,21 @@ public class DefaultPageServiceTest {
         expectedPage.setPageLayout(pageLayout);
         expectedPage.setRenderSequence(EXPECTED_RENDER_SEQUENCE);
         expectedPage.setRegions(createEmptyRegionList(pageLayout.getNumberOfRegions()));    
-        expectedPage.setPageType(userPageType);
+        expectedPage.setPageType(PageType.USER);
 
         expect(userService.getAuthenticatedUser()).andReturn(user);
-        expect(pageLayoutRepository.getByPageLayoutCode(PAGE_LAYOUT_CODE)).andReturn(pageLayout);
-        expect(pageTypeRepository.getUserPageType()).andReturn(userPageType);
+        expect(pageLayoutRepository.getByPageLayoutCode(PAGE_LAYOUT_CODE)).andReturn(pageLayout);        
         expect(pageRepository.save(expectedPage)).andReturn(expectedPage);
-        expect(pageRepository.getAllPages(user.getEntityId(), userPageType.getEntityId())).andReturn(new ArrayList<Page>());
-        replay(userService, pageLayoutRepository, pageTypeRepository, pageRepository);
+        expect(pageRepository.getAllPages(user.getEntityId(), PageType.USER)).andReturn(new ArrayList<Page>());
+        replay(userService, pageLayoutRepository, pageRepository);
 
         Page newPage = pageService.addNewUserPage(PAGE_NAME, PAGE_LAYOUT_CODE);
         assertThat(newPage.getRenderSequence(), is(EXPECTED_RENDER_SEQUENCE));
         assertThat(newPage.getName(), is(PAGE_NAME));
         assertThat(newPage.getRegions().size(), is(pageLayout.getNumberOfRegions().intValue()));
-        assertThat(newPage.getPageType(), is(userPageType));
+        assertThat(newPage.getPageType(), is(PageType.USER));
 
-        verify(userService, pageLayoutRepository, pageTypeRepository, pageRepository);
+        verify(userService, pageLayoutRepository, pageRepository);
     }
     
     @Test
@@ -187,19 +169,18 @@ public class DefaultPageServiceTest {
         expectedPage.setRegions(createEmptyRegionList(pageLayout.getNumberOfRegions()));    
                 
         expect(userService.getAuthenticatedUser()).andReturn(user);
-        expect(pageLayoutRepository.getByPageLayoutCode(PAGE_LAYOUT_CODE)).andReturn(pageLayout);
-        expect(pageTypeRepository.getUserPageType()).andReturn(userPageType);
+        expect(pageLayoutRepository.getByPageLayoutCode(PAGE_LAYOUT_CODE)).andReturn(pageLayout);       
         expect(pageRepository.save(expectedPage)).andReturn(expectedPage);
-        expect(pageRepository.getAllPages(user.getEntityId(), userPageType.getEntityId())).andReturn(existingPages);
-        replay(userService, pageLayoutRepository, pageTypeRepository, pageRepository);
+        expect(pageRepository.getAllPages(user.getEntityId(), PageType.USER)).andReturn(existingPages);
+        replay(userService, pageLayoutRepository, pageRepository);
 
         Page newPage = pageService.addNewUserPage(PAGE_NAME, PAGE_LAYOUT_CODE);
         assertThat(newPage.getRenderSequence(), is(EXPECTED_RENDER_SEQUENCE));
         assertThat(newPage.getName(), is(PAGE_NAME));
         assertThat(newPage.getRegions().size(), is(pageLayout.getNumberOfRegions().intValue()));
-        assertThat(newPage.getPageType(), is(userPageType));
+        assertThat(newPage.getPageType(), is(PageType.USER));
         
-        verify(userService, pageLayoutRepository, pageTypeRepository, pageRepository);
+        verify(userService, pageLayoutRepository,  pageRepository);
     }
 
     @Test
@@ -224,20 +205,19 @@ public class DefaultPageServiceTest {
         parentPage.setRegions(createEmptyRegionList(pageLayout.getNumberOfRegions()));
 
         expect(userService.getAuthenticatedUser()).andReturn(user);
-        expect(pageLayoutRepository.getByPageLayoutCode(PAGE_LAYOUT_CODE)).andReturn(pageLayout);
-        expect(pageTypeRepository.getSubPagePageType()).andReturn(subPagePageType);
+        expect(pageLayoutRepository.getByPageLayoutCode(PAGE_LAYOUT_CODE)).andReturn(pageLayout);       
         expect(pageRepository.save(expectedPage)).andReturn(expectedPage);
-        replay(userService, pageLayoutRepository, pageTypeRepository, pageRepository);
+        replay(userService, pageLayoutRepository,  pageRepository);
 
         Page newPage = pageService.addNewSubPage(PAGE_NAME, PAGE_LAYOUT_CODE, parentPage);
         assertThat(newPage.getRenderSequence(), is(EXPECTED_RENDER_SEQUENCE));
         assertThat(newPage.getName(), is(PAGE_NAME));
         assertThat(newPage.getRegions().size(), is(pageLayout.getNumberOfRegions().intValue()));
-        assertThat(newPage.getPageType(), is(subPagePageType));
+        assertThat(newPage.getPageType(), is(PageType.SUB_PAGE));
         assertThat(newPage.getParentPage(), is(parentPage));
         assertTrue(parentPage.getSubPages().contains(newPage));
 
-        verify(userService, pageLayoutRepository, pageTypeRepository, pageRepository);
+        verify(userService, pageLayoutRepository,  pageRepository);
     }
 
     @Test
@@ -264,20 +244,19 @@ public class DefaultPageServiceTest {
         parentPage.setSubPages(existingPages);
 
         expect(userService.getAuthenticatedUser()).andReturn(user);
-        expect(pageLayoutRepository.getByPageLayoutCode(PAGE_LAYOUT_CODE)).andReturn(pageLayout);
-        expect(pageTypeRepository.getSubPagePageType()).andReturn(subPagePageType);
+        expect(pageLayoutRepository.getByPageLayoutCode(PAGE_LAYOUT_CODE)).andReturn(pageLayout);        
         expect(pageRepository.save(expectedPage)).andReturn(expectedPage);
-        replay(userService, pageLayoutRepository, pageTypeRepository, pageRepository);
+        replay(userService, pageLayoutRepository,  pageRepository);
 
         Page newPage = pageService.addNewSubPage(PAGE_NAME, PAGE_LAYOUT_CODE, parentPage);
         assertThat(newPage.getRenderSequence(), is(EXPECTED_RENDER_SEQUENCE));
         assertThat(newPage.getName(), is(PAGE_NAME));
         assertThat(newPage.getRegions().size(), is(pageLayout.getNumberOfRegions().intValue()));
-        assertThat(newPage.getPageType(), is(subPagePageType));
+        assertThat(newPage.getPageType(), is(PageType.SUB_PAGE));
         assertThat(newPage.getParentPage(), is(parentPage));
         assertTrue(parentPage.getSubPages().contains(newPage));
 
-        verify(userService, pageLayoutRepository, pageTypeRepository, pageRepository);
+        verify(userService, pageLayoutRepository,  pageRepository);
     }
    
     @Test
@@ -294,16 +273,15 @@ public class DefaultPageServiceTest {
         expect(userService.getUserById(user.getEntityId())).andReturn(user);
         expect(pageLayoutRepository.getByPageLayoutCode(PAGE_LAYOUT_CODE)).andReturn(pageLayout);
         expect(pageRepository.save(expectedPage)).andReturn(expectedPage);
-        expect(pageRepository.getAllPages(user.getEntityId(), userPageType.getEntityId())).andReturn(new ArrayList<Page>());
-        expect(pageTypeRepository.getUserPageType()).andReturn(userPageType);
-        replay(userService, pageLayoutRepository, pageRepository, pageTypeRepository);
+        expect(pageRepository.getAllPages(user.getEntityId(), PageType.USER)).andReturn(new ArrayList<Page>());       
+        replay(userService, pageLayoutRepository, pageRepository);
 
         Page newPage = pageService.addNewDefaultUserPage(user.getEntityId());
         assertThat(newPage.getRenderSequence(), is(EXPECTED_RENDER_SEQUENCE));
         assertThat(newPage.getName(), is(defaultPageName));
         assertThat(newPage.getRegions().size(), is(pageLayout.getNumberOfRegions().intValue()));
         
-        verify(userService, pageLayoutRepository, pageRepository, pageTypeRepository);
+        verify(userService, pageLayoutRepository, pageRepository);
     }
     
     @Test
@@ -320,7 +298,7 @@ public class DefaultPageServiceTest {
         expect(pageRepository.get(PAGE_ID)).andReturn(page);
         pageRepository.delete(page);
         expectLastCall();
-        expect(pageRepository.getAllPages(user.getEntityId(), userPageType.getEntityId())).andReturn(pageListAfterDelete);
+        expect(pageRepository.getAllPages(user.getEntityId(), PageType.USER)).andReturn(pageListAfterDelete);
         expect(pageRepository.save(page2)).andReturn(page2);
         replay(userService);
         replay(pageRepository);
@@ -337,7 +315,7 @@ public class DefaultPageServiceTest {
         expect(pageRepository.get(INVALID_PAGE_ID)).andReturn(page);
         pageRepository.delete(page);
         expectLastCall();
-        expect(pageRepository.getAllPages(user.getEntityId(), userPageType.getEntityId())).andReturn(pageList);
+        expect(pageRepository.getAllPages(user.getEntityId(), PageType.USER)).andReturn(pageList);
         expect(pageRepository.save(page2)).andReturn(page2);
         expect(pageRepository.save(page)).andReturn(page);
         replay(userService);
@@ -350,9 +328,9 @@ public class DefaultPageServiceTest {
     @Test
     public void deletePages() {                      
         final int EXPECTED_DELETED_PAGE_COUNT = 7;
-        expect(pageRepository.deletePages(VALID_USER_ID, USER_PAGE_TYPE_ID)).andReturn(EXPECTED_DELETED_PAGE_COUNT);     
+        expect(pageRepository.deletePages(VALID_USER_ID, PageType.USER)).andReturn(EXPECTED_DELETED_PAGE_COUNT);     
         replay(pageRepository);
-        assertThat(pageService.deletePages(VALID_USER_ID, USER_PAGE_TYPE_ID), is(EXPECTED_DELETED_PAGE_COUNT));
+        assertThat(pageService.deletePages(VALID_USER_ID, PageType.USER), is(EXPECTED_DELETED_PAGE_COUNT));
         verify(pageRepository);
     }    
     
@@ -569,7 +547,7 @@ public class DefaultPageServiceTest {
         expect(userService.getAuthenticatedUser()).andReturn(user);
         expect(pageRepository.get(PAGE_ID)).andReturn(page);
         expect(pageRepository.get(page2.getEntityId())).andReturn(page2);
-        expect(pageRepository.getAllPages(user.getEntityId(), userPageType.getEntityId())).andReturn(pageList);
+        expect(pageRepository.getAllPages(user.getEntityId(), PageType.USER)).andReturn(pageList);
         expect(pageRepository.save(page2)).andReturn(page2);
         expect(pageRepository.save(page)).andReturn(page);        
         replay(userService);
@@ -587,7 +565,7 @@ public class DefaultPageServiceTest {
         expect(userService.getAuthenticatedUser()).andReturn(user);
         expect(pageRepository.get(INVALID_PAGE_ID)).andReturn(null);
         expect(pageRepository.get(page2.getEntityId())).andReturn(page2);
-        expect(pageRepository.getAllPages(user.getEntityId(), userPageType.getEntityId())).andReturn(pageList);
+        expect(pageRepository.getAllPages(user.getEntityId(), PageType.USER)).andReturn(pageList);
         replay(userService);
         replay(pageRepository);
                           
@@ -601,7 +579,7 @@ public class DefaultPageServiceTest {
     public void movePageToDefault() {               
         expect(userService.getAuthenticatedUser()).andReturn(user);
         expect(pageRepository.get(page2.getEntityId())).andReturn(page2);
-        expect(pageRepository.getAllPages(user.getEntityId(), userPageType.getEntityId())).andReturn(pageList);
+        expect(pageRepository.getAllPages(user.getEntityId(), PageType.USER)).andReturn(pageList);
         expect(pageRepository.save(page)).andReturn(page);
         expect(pageRepository.save(page2)).andReturn(page2);        
         replay(userService);
@@ -618,7 +596,7 @@ public class DefaultPageServiceTest {
     public void movePageToDefault_invalidPageId() {               
         expect(userService.getAuthenticatedUser()).andReturn(user);
         expect(pageRepository.get(INVALID_PAGE_ID)).andReturn(null);
-        expect(pageRepository.getAllPages(user.getEntityId(), userPageType.getEntityId())).andReturn(pageList);
+        expect(pageRepository.getAllPages(user.getEntityId(), PageType.USER)).andReturn(pageList);
         replay(userService);
         replay(pageRepository);
                           
@@ -982,28 +960,4 @@ public class DefaultPageServiceTest {
 
         pageService.moveRegionWidgetToPage(VALID_REGION_WIDGET_ID, TO_PAGE_ID);
     }
-    
-    @Test
-    public void getUserPageType() {
-        expect(pageTypeRepository.getUserPageType()).andReturn(userPageType);
-        replay(pageTypeRepository);
-        assertThat(pageService.getUserPageType(), is(userPageType));
-        verify(pageTypeRepository);
-    }
-
-    @Test
-    public void getPersonProfilePageType() {
-        expect(pageTypeRepository.getPersonProfilePageType()).andReturn(personProfilePageType);
-        replay(pageTypeRepository);
-        assertThat(pageService.getPersonProfilePageType(), is(personProfilePageType));
-        verify(pageTypeRepository);
-    }
-
-    @Test
-    public void getSubPagePageType() {
-        expect(pageTypeRepository.getSubPagePageType()).andReturn(subPagePageType);
-        replay(pageTypeRepository);
-        assertThat(pageService.getSubPagePageType(), is(subPagePageType));
-        verify(pageTypeRepository);
-    }
 }
diff --git a/rave-components/rave-core/src/test/java/org/apache/rave/portal/service/impl/DefaultUserServiceTest.java b/rave-components/rave-core/src/test/java/org/apache/rave/portal/service/impl/DefaultUserServiceTest.java
index 00cd51f3..1cfb0d4e 100644
--- a/rave-components/rave-core/src/test/java/org/apache/rave/portal/service/impl/DefaultUserServiceTest.java
+++ b/rave-components/rave-core/src/test/java/org/apache/rave/portal/service/impl/DefaultUserServiceTest.java
@@ -23,8 +23,6 @@ import org.apache.rave.portal.model.*;
 import org.apache.rave.portal.model.util.SearchResult;
 import org.apache.rave.portal.repository.*;
 import org.apache.rave.portal.service.UserService;
-import org.apache.rave.portal.service.WidgetCommentService;
-import org.apache.rave.portal.service.WidgetRatingService;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -41,6 +39,7 @@ import java.util.List;
 
 import static org.easymock.EasyMock.*;
 import static org.hamcrest.CoreMatchers.*;
+import static org.hamcrest.CoreMatchers.not;
 import static org.junit.Assert.*;
 
 public class DefaultUserServiceTest {
@@ -49,7 +48,6 @@ public class DefaultUserServiceTest {
     private UserService service;
     private UserRepository userRepository;
     private PageRepository pageRepository;
-    private PageTypeRepository pageTypeRepository;
     private WidgetCommentRepository widgetCommentRepository;
     private WidgetRatingRepository widgetRatingRepository;
     private WidgetRepository widgetRepository;
@@ -57,19 +55,17 @@ public class DefaultUserServiceTest {
     private static final String USER_NAME = "1234";
     private static final String USER_EMAIL = "test@test.com";
     private static final Long VALID_WIDGET_ID = 1L;
-    private static final Long USER_PAGE_TYPE_ID = 33L;
     private static final Long INVALID_USER_ID = -9999L;
 
     @Before
     public void setup() {
         userRepository = createMock(UserRepository.class);
         pageRepository = createMock(PageRepository.class);
-        pageTypeRepository = createMock(PageTypeRepository.class);
         widgetCommentRepository = createMock(WidgetCommentRepository.class);
         widgetRatingRepository = createMock(WidgetRatingRepository.class);
         widgetRepository = createMock(WidgetRepository.class);
 
-        service = new DefaultUserService(userRepository, pageRepository, pageTypeRepository, widgetRatingRepository, widgetCommentRepository, widgetRepository);
+        service = new DefaultUserService(userRepository, pageRepository, widgetRatingRepository, widgetCommentRepository, widgetRepository);
     }
 
     @After
@@ -259,7 +255,6 @@ public class DefaultUserServiceTest {
 
     @Test
     public void deleteUser() {
-        PageType userPageType = new PageType(USER_PAGE_TYPE_ID);
         final int NUM_COMMENTS = 33;
         final int NUM_RATINGS = 99;
         final int NUM_WIDGETS_OWNED = 4;
@@ -268,29 +263,28 @@ public class DefaultUserServiceTest {
         List<Page> pages = new ArrayList<Page>();
         pages.add(page);
         
-        expect(userRepository.get(USER_ID)).andReturn(user);     
-        expect(pageTypeRepository.getUserPageType()).andReturn(userPageType);
-        expect(pageRepository.deletePages(USER_ID, USER_PAGE_TYPE_ID)).andReturn(pages.size());      
+        expect(userRepository.get(USER_ID)).andReturn(user);
+        expect(pageRepository.deletePages(USER_ID, PageType.USER)).andReturn(pages.size());
         expect(widgetCommentRepository.deleteAll(USER_ID)).andReturn(NUM_COMMENTS);
         expect(widgetRatingRepository.deleteAll(USER_ID)).andReturn(NUM_RATINGS);       
         expect(widgetRepository.unassignWidgetOwner(USER_ID)).andReturn( NUM_WIDGETS_OWNED);       
         userRepository.delete(user);
         expectLastCall();
-        replay(userRepository, pageTypeRepository, pageRepository, widgetCommentRepository, widgetRatingRepository, widgetRepository);
+        replay(userRepository, pageRepository, widgetCommentRepository, widgetRatingRepository, widgetRepository);
 
         service.deleteUser(USER_ID);
 
-        verify(userRepository, pageTypeRepository, pageRepository, widgetCommentRepository, widgetRatingRepository, widgetRepository);
+        verify(userRepository, pageRepository, widgetCommentRepository, widgetRatingRepository, widgetRepository);
     }
 
     @Test
     public void deleteUser_invalidUserId() {
         expect(userRepository.get(INVALID_USER_ID)).andReturn(null);
-        replay(userRepository, pageTypeRepository, pageRepository, widgetCommentRepository, widgetRatingRepository, widgetRepository);
+        replay(userRepository, pageRepository, widgetCommentRepository, widgetRatingRepository, widgetRepository);
 
         service.deleteUser(INVALID_USER_ID);
 
-        verify(userRepository, pageTypeRepository, pageRepository, widgetCommentRepository, widgetRatingRepository, widgetRepository);
+        verify(userRepository, pageRepository, widgetCommentRepository, widgetRatingRepository, widgetRepository);
     }
 
     @Test
diff --git a/rave-components/rave-core/src/test/resources/test_data.sql b/rave-components/rave-core/src/test/resources/test_data.sql
index e85db83b..1f0f7c43 100644
--- a/rave-components/rave-core/src/test/resources/test_data.sql
+++ b/rave-components/rave-core/src/test/resources/test_data.sql
@@ -37,7 +37,6 @@ set @portal_preference_seq = 'portal_preference';
 set @tag_seq = 'tag';
 set @widget_tag_seq = 'widget_tag';
 set @category_seq = 'category';
-set @page_type_seq = 'page_type';
 
 CREATE TABLE IF NOT EXISTS RAVE_PORTAL_SEQUENCES (seq_name VARCHAR(255) PRIMARY KEY NOT NULL, seq_count BIGINT(19));
 INSERT INTO RAVE_PORTAL_SEQUENCES(seq_name, seq_count) values (@page_seq, 1);
@@ -54,7 +53,6 @@ INSERT INTO RAVE_PORTAL_SEQUENCES(seq_name, seq_count) values (@portal_preferenc
 INSERT INTO RAVE_PORTAL_SEQUENCES(seq_name, seq_count) values (@tag_seq, 1);
 INSERT INTO RAVE_PORTAL_SEQUENCES(seq_name, seq_count) values (@widget_tag_seq, 1);
 INSERT INTO RAVE_PORTAL_SEQUENCES(seq_name, seq_count) values (@category_seq, 1);
-INSERT INTO RAVE_PORTAL_SEQUENCES(seq_name, seq_count) values (@page_type_seq, 1);
 
 
   -- ***********************************************************************************
@@ -100,23 +98,6 @@ values (@person_profile_layout_id, 'person_profile', 2, 7, false);
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_layout_seq;
 --- end page layout data ----
 
--- page types
-set @user_page_type_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_type_seq);
-insert into page_type (entity_id, code, description)
-values (@user_page_type_id, 'USER', 'Standard user pages which are only accessible by the page owner');
-UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_type_seq;
-
-set @person_profile_page_type_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_type_seq);
-insert into page_type (entity_id, code, description)
-values (@person_profile_page_type_id, 'PERSON_PROFILE', 'Person Profile pages which are accessible by anyone and contain Person Profile information');
-UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_type_seq;
-
-set @sub_page_type_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_type_seq);
-insert into page_type (entity_id, code, description)
-values (@sub_page_type_id, 'SUB_PAGE', 'Sub pages are contained within another page');
-UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_type_seq;
-
--- end page types
 
   -- ***********************************************************************************
   --- start user data ---
@@ -268,8 +249,8 @@ UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @w
 
 --- Layout for user_id_1 ---
 set @page_1_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_seq);
-INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type_id)
-values (@page_1_id, 'Main', @user_id_1, null, 1, @two_col_id, @user_page_type_id);
+INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type)
+values (@page_1_id, 'Main', @user_id_1, null, 1, @two_col_id, 'USER');
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_seq;
 
 set @page_1_region_1 = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @region_seq);
@@ -314,8 +295,8 @@ values (@next_widget_rating, 2, 1, 10);
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @widget_rating_seq;
 
 set @page_2_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_seq);
-INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type_id)
-values (@page_2_id, 'Social', @user_id_1, null, 2, @two_col_id, @user_page_type_id);
+INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type)
+values (@page_2_id, 'Social', @user_id_1, null, 2, @two_col_id, 'USER');
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_seq;
 
 set @page_2_region_1 = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @region_seq);
@@ -360,8 +341,8 @@ UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @w
 
 -- person profile page for user 1
 set @person_profile_page_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_seq);
-INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type_id)
-values (@person_profile_page_id , 'Person Profile', @user_id_1, null, 1, @person_profile_layout_id, @person_profile_page_type_id);
+INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type)
+values (@person_profile_page_id , 'Person Profile', @user_id_1, null, 1, @person_profile_layout_id, 'PERSON_PROFILE');
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_seq;
 
 set @person_profile_page_region_1 = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @region_seq);
@@ -391,8 +372,8 @@ UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @r
 
 -- sub pages for profile page for user 1
 set @sub_page_1_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_seq);
-INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type_id)
-values (@sub_page_1_id , 'Person Profile Sub Page 1', @user_id_1, @person_profile_page_id, 1, @two_col_id, @sub_page_type_id);
+INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type)
+values (@sub_page_1_id , 'Person Profile Sub Page 1', @user_id_1, @person_profile_page_id, 1, @two_col_id, 'SUB_PAGE');
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_seq;
 
 set @sub_page_1_region_1 = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @region_seq);
@@ -406,8 +387,8 @@ values (@sub_page_1_region_2, @sub_page_1_id, 2);
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @region_seq;
 
 set @sub_page_2_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_seq);
-INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type_id)
-values (@sub_page_2_id , 'Person Profile Sub Page 2', @user_id_1, @person_profile_page_id, 2, @two_col_id, @sub_page_type_id);
+INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type)
+values (@sub_page_2_id , 'Person Profile Sub Page 2', @user_id_1, @person_profile_page_id, 2, @two_col_id, 'SUB_PAGE');
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_seq;
 
 set @sub_page_2_region_1 = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @region_seq);
@@ -423,8 +404,8 @@ UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @r
 
 --- Layout for user_id_2 ---
 set @page_1_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_seq);
-INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type_id)
-values (@page_1_id, 'Main', @user_id_2, null, 1, @two_col_id, @user_page_type_id);
+INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type)
+values (@page_1_id, 'Main', @user_id_2, null, 1, @two_col_id, 'USER');
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_seq;
 
 set @page_1_region_1 = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @region_seq);
@@ -460,8 +441,8 @@ UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @r
 
 --- Layout for user_id_3 ---
 set @page_1_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_seq);
-INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type_id)
-values (@page_1_id, 'Main', @user_id_3, null, 1, @two_col_id, @user_page_type_id);
+INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type)
+values (@page_1_id, 'Main', @user_id_3, null, 1, @two_col_id, 'USER');
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_seq;
 
 set @page_1_region_1 = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @region_seq);
@@ -497,15 +478,15 @@ UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @r
 
 --- Layout for user_id_4 ---
 set @page_1_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_seq);
-INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type_id)
-values (@page_1_id, 'Main', @user_id_4, null, 1, @two_col_id, @user_page_type_id);
+INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type)
+values (@page_1_id, 'Main', @user_id_4, null, 1, @two_col_id, 'USER');
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_seq;
 --- End user_id_4 layout ---
 
 --- Layout for user_id_5 ---
 set @page_1_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_seq);
-INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type_id)
-values (@page_1_id, 'Main', @user_id_5, null, 1, @two_col_id, @user_page_type_id);
+INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type)
+values (@page_1_id, 'Main', @user_id_5, null, 1, @two_col_id, 'USER');
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_seq;
 --- End user_id_5 layout ---
 
@@ -513,8 +494,8 @@ UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @p
 
 --- Layout for user_id_6 ---
 set @page_1_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_seq);
-INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type_id)
-values (@page_1_id, 'Main', @user_id_6, null, 1, @two_col_id, @user_page_type_id);
+INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type)
+values (@page_1_id, 'Main', @user_id_6, null, 1, @two_col_id, 'USER');
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_seq;
 
 set @page_1_region_1 = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @region_seq);
@@ -550,8 +531,8 @@ UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @r
 
 --- Layout for user_id_7 ---
 set @page_7_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_seq);
-INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type_id)
-values (@page_7_id, 'Main', @user_id_7, null, 1, @one_col_id, @user_page_type_id);
+INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type)
+values (@page_7_id, 'Main', @user_id_7, null, 1, @one_col_id, 'USER');
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_seq;
 
 set @page_7_region_1 = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @region_seq);
@@ -573,8 +554,8 @@ UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @r
 
 --- Layout for user_id_8 ---
 set @page_8_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_seq);
-INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type_id)
-values (@page_8_id, 'Main', @user_id_8, null, 1, @twown_col_id, @user_page_type_id);
+INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type)
+values (@page_8_id, 'Main', @user_id_8, null, 1, @twown_col_id, 'USER');
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_seq;
 
 set @page_8_region_1 = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @region_seq);
@@ -610,8 +591,8 @@ UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @r
 
 --- Layout for user_id_9 ---
 set @page_9_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_seq);
-INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type_id)
-values (@page_9_id, 'Main', @user_id_9, null, 1, @three_col_id, @user_page_type_id);
+INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type)
+values (@page_9_id, 'Main', @user_id_9, null, 1, @three_col_id, 'USER');
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_seq;
 
 set @page_9_region_1 = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @region_seq);
@@ -652,8 +633,8 @@ UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @r
 
 --- Layout for user_id_10 ---
 set @page_10_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_seq);
-INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type_id)
-values (@page_10_id, 'Main', @user_id_10, null, 1, @threewn_col_id, @user_page_type_id);
+INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type)
+values (@page_10_id, 'Main', @user_id_10, null, 1, @threewn_col_id, 'USER');
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_seq;
 
 set @page_10_region_1 = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @region_seq);
@@ -694,8 +675,8 @@ UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @r
 
 --- Layout for user_id_11 ---
 set @page_11_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_seq);
-INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type_id)
-values (@page_11_id, 'Main', @user_id_11, null, 1, @four_col_id, @user_page_type_id);
+INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type)
+values (@page_11_id, 'Main', @user_id_11, null, 1, @four_col_id, 'USER');
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_seq;
 
 set @page_11_region_1 = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @region_seq);
@@ -742,8 +723,8 @@ UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @r
 
 --- Layout for user_id_12 ---
 set @page_12_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_seq);
-INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type_id)
-values (@page_12_id, 'Main', @user_id_12, null, 1, @fourwn_col_id, @user_page_type_id);
+INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type)
+values (@page_12_id, 'Main', @user_id_12, null, 1, @fourwn_col_id, 'USER');
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_seq;
 
 set @page_12_region_1 = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @region_seq);
@@ -789,8 +770,8 @@ UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @r
 
 --- Layout for user_id_13 ---
 set @page_13_id = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @page_seq);
-INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type_id)
-values (@page_13_id, 'Main', @user_id_13, null, 1, @fourwn_col_id, @user_page_type_id);
+INSERT INTO page (entity_id, name, owner_id, parent_page_id, render_sequence, page_layout_id, page_type)
+values (@page_13_id, 'Main', @user_id_13, null, 1, @fourwn_col_id, 'USER');
 UPDATE RAVE_PORTAL_SEQUENCES SET seq_count = (seq_count + 1) WHERE seq_name = @page_seq;
 
 set @page_13_region_1 = (SELECT seq_count FROM RAVE_PORTAL_SEQUENCES WHERE seq_name = @region_seq);
