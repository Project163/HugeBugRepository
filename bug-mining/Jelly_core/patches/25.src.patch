diff --git a/jelly-tags/xml/src/java/org/apache/commons/jelly/tags/xml/CopyOfTag.java b/jelly-tags/xml/src/java/org/apache/commons/jelly/tags/xml/CopyOfTag.java
index 68adf56a..68a8a9db 100644
--- a/jelly-tags/xml/src/java/org/apache/commons/jelly/tags/xml/CopyOfTag.java
+++ b/jelly-tags/xml/src/java/org/apache/commons/jelly/tags/xml/CopyOfTag.java
@@ -36,7 +36,12 @@ public class CopyOfTag extends XPathTagSupport {
 
     /** The XPath expression to evaluate. */
     private XPath select;
-
+    
+    /** Should we output lexical XML data like comments
+     * or entity names?
+     */
+    private boolean lexical;
+    
     public CopyOfTag() {
     }
 
@@ -49,23 +54,40 @@ public class CopyOfTag extends XPathTagSupport {
             throw new MissingAttributeException( "select" );
         }
 
-        SAXWriter saxWriter = new SAXWriter(output, output);
-        try {
-            List nodes = select.selectNodes(xpathContext);
-            for (Iterator iter = nodes.iterator(); iter.hasNext(); ) {
-                Object object = iter.next();
-                if ( object instanceof Node ) {
-                    saxWriter.write( (Node) object );
-                }
-                else if (object != null ) {
-                    output.write( object.toString() );
-                }
-            } 
+        SAXWriter saxWriter;
+        
+        if (lexical) {
+            saxWriter = new SAXWriter(output, output);
+        } else {
+            saxWriter = new SAXWriter(output);
         }
-        catch (SAXException e) {
-            throw new JellyTagException(e);
+        
+        Object obj;
+        try {
+            obj = select.evaluate(xpathContext);
         } catch (JaxenException e) {
-            throw new JellyTagException(e);
+            throw new JellyTagException("Failed to evaluate XPath expression", e);
+        }
+        
+        try {
+            if (obj instanceof List) {
+                List nodes = (List) obj;
+                for (Iterator iter = nodes.iterator(); iter.hasNext(); ) {
+                    Object object = iter.next();
+                    if ( object instanceof Node ) {
+                        saxWriter.write( (Node) object );
+                    }
+                    else if (object != null ) {
+                        saxWriter.write( object.toString() );
+                    }
+                }
+            } else if (obj instanceof Node) {
+                saxWriter.write( (Node) obj );
+            } else {
+                saxWriter.write( obj.toString() );
+            }
+        } catch (SAXException e) {
+            throw new JellyTagException("Failed to write XML output.", e);
         }
     }
 
@@ -75,4 +97,8 @@ public class CopyOfTag extends XPathTagSupport {
     public void setSelect(XPath select) {
         this.select = select;
     }
+    
+    public void setLexical(boolean lexical) {
+        this.lexical = lexical;
+    }
 }
diff --git a/jelly-tags/xml/src/java/org/apache/commons/jelly/tags/xml/CopyTag.java b/jelly-tags/xml/src/java/org/apache/commons/jelly/tags/xml/CopyTag.java
index a1829c52..8534fbeb 100644
--- a/jelly-tags/xml/src/java/org/apache/commons/jelly/tags/xml/CopyTag.java
+++ b/jelly-tags/xml/src/java/org/apache/commons/jelly/tags/xml/CopyTag.java
@@ -34,6 +34,10 @@ public class CopyTag extends XPathTagSupport {
 
     /** The XPath expression to evaluate. */
     private XPath select;
+    
+    /** Should we output lexical XML data like entity names?
+     */
+    private boolean lexical;
 
     public CopyTag() {
     }
@@ -53,8 +57,14 @@ public class CopyTag extends XPathTagSupport {
             if ( node instanceof Element ) {
                 Element element = (Element) node;
             
-                SAXWriter saxWriter = new SAXWriter(output, output);
-            
+                SAXWriter saxWriter;
+                
+                if (lexical) {
+                    saxWriter = new SAXWriter(output, output);
+                } else {
+                    saxWriter = new SAXWriter(output);
+                }
+                
                 saxWriter.writeOpen(element);
                 invokeBody(output);
                 saxWriter.writeClose(element);
@@ -77,4 +87,7 @@ public class CopyTag extends XPathTagSupport {
     public void setSelect(XPath select) {
         this.select = select;
     }
+    public void setLexical(boolean lexical) {
+        this.lexical = lexical;
+    }
 }
diff --git a/jelly-tags/xml/src/test/org/apache/commons/jelly/tags/xml/suite.jelly b/jelly-tags/xml/src/test/org/apache/commons/jelly/tags/xml/suite.jelly
index a46c93d9..f628f024 100644
--- a/jelly-tags/xml/src/test/org/apache/commons/jelly/tags/xml/suite.jelly
+++ b/jelly-tags/xml/src/test/org/apache/commons/jelly/tags/xml/suite.jelly
@@ -220,7 +220,7 @@
     </test:case>
 
 
-  <test:case name="testComment">
+  <test:case name="testCommentWithLexical">
       
       <x:parse var="doc">
           <foo>
@@ -232,13 +232,31 @@
     
         <test:assert xpath="$doc/foo"/>
 
-        <j:set var="t"><x:copyOf select="$doc/foo/comment()"/></j:set>
+        <j:set var="t"><x:copyOf select="$doc/foo/comment()" lexical="true"/></j:set>
         
         <test:assertEquals expected="&lt;!--this is a comment--&gt;" actual="${t.trim()}"/>
 
     </test:case>
+    
+    <test:case name="testCommentWithoutLexical">
+      
+      <x:parse var="doc">
+          <foo>
+                <!-- this will not be output -->
+                
+                <x:comment text="this is a comment"/>
+          </foo>
+      </x:parse>
+    
+        <test:assert xpath="$doc/foo"/>
 
-  <test:case name="testCommentWithTextAttribute">
+        <j:set var="t"><x:copyOf select="string($doc/foo/comment())" lexical="true"/></j:set>
+        
+        <test:assertEquals expected="this is a comment" actual="${t.trim()}"/>
+
+    </test:case>
+
+  <test:case name="testCommentWithTextAttributeWithLexical">
       
       <x:parse var="doc">
           <foo>
@@ -250,7 +268,7 @@
     
         <test:assert xpath="$doc/foo"/>
 
-        <j:set var="t"><x:copyOf select="$doc/foo/comment()"/></j:set>
+        <j:set var="t"><x:copyOf select="$doc/foo/comment()" lexical="true"/></j:set>
         
         <test:assertEquals expected="&lt;!--this is a comment--&gt;" actual="${t.trim()}"/>
   </test:case>
@@ -278,13 +296,17 @@
         <j:set var="blopSingleText"><x:expr select="$blopSingle/text()"/></j:set>
         <test:assertEquals actual="${blopSingleText}" expected="blop0"/>
   </test:case>
-    
-  <!-- dom4j is busted -->
+   
   <test:case name="testEntities">
     <x:parse var="doc" xml="entity.xml"/> 
-    <x:set var="value" select="string($doc/a)"/>
-    <j:set var="expected">y</j:set>
-    <!--test:assertEquals actual="${value}" expected="${expected}"/-->
+    
+    <!--just the entity is output-->
+    <j:set var="value"><x:copyOf select="$doc/a/node()"/></j:set>
+    <test:assertEquals actual="${value}" expected="y"/>
+    
+    <!--both the entity and it's lexical name are properly output-->
+    <j:set var="value"><x:copyOf select="$doc/a/node()" lexical="true"/></j:set>
+    <test:assertEquals actual="${value}" expected="&amp;x;y"/>
   </test:case>
     
 </test:suite>
