diff --git a/tika-translate/src/main/java/org/apache/tika/language/translate/ExternalTranslator.java b/tika-translate/src/main/java/org/apache/tika/language/translate/ExternalTranslator.java
new file mode 100644
index 000000000..fe4678c25
--- /dev/null
+++ b/tika-translate/src/main/java/org/apache/tika/language/translate/ExternalTranslator.java
@@ -0,0 +1,98 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.tika.language.translate;
+
+import org.apache.tika.language.LanguageIdentifier;
+import org.apache.tika.language.LanguageProfile;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.Reader;
+
+/**
+ * Abstract class used to interact with command line/external Translators.
+ *
+ * @see org.apache.tika.language.translate.MosesTranslator for an example of extending this class.
+ *
+ * @since Tika 1.7
+ */
+public abstract class ExternalTranslator implements Translator {
+
+    /**
+     * Run the given command and return the output written to standard out.
+     *
+     * @param command The complete command to run.
+     * @param env The environment to pass along to the Runtime.
+     * @param workingDirectory The directory from which to run the command.
+     * @return The output of the command written to standard out.
+     * @throws IOException
+     * @throws InterruptedException
+     */
+    public Reader runAndGetOutput(String command, String[] env, File workingDirectory) throws IOException, InterruptedException {
+        Process process = Runtime.getRuntime().exec(command, env, workingDirectory);
+        InputStreamReader reader = new InputStreamReader(process.getInputStream());
+        BufferedReader bufferedReader = new BufferedReader(reader);
+        process.waitFor();
+        return bufferedReader;
+    }
+
+    /**
+     * Checks to see if the command can be run. Typically used with
+     *  something like "myapp --version" to check to see if "myapp"
+     *  is installed and on the path.
+     *
+     * @param checkCommandString The command to run and check the return code of.
+     * @param successCodes Return codes that signify success.
+     */
+    public boolean checkCommand(String checkCommandString, int... successCodes) {
+        try {
+            Process process = Runtime.getRuntime().exec(checkCommandString);
+            process.waitFor();
+            int result = process.waitFor();
+            for (int code : successCodes) {
+                if (code == result) return true;
+            }
+            return false;
+        } catch(IOException e) {
+            // Some problem, command is there or is broken
+            System.err.println("Broken pipe");
+            return false;
+        } catch (InterruptedException ie) {
+            // Some problem, command is there or is broken
+            System.err.println("Interrupted");
+            return false;
+        }
+    }
+
+    /**
+     * Default translate method which uses built Tika language identification.
+     * @param text The text to translate.
+     * @param targetLanguage The desired language to translate to (for example, "hi").
+     * @return The translated text.
+     * @throws Exception
+     */
+    @Override
+    public String translate(String text, String targetLanguage) throws Exception {
+        LanguageIdentifier language = new LanguageIdentifier(
+                new LanguageProfile(text));
+        String sourceLanguage = language.getLanguage();
+        return translate(text, sourceLanguage, targetLanguage);
+    }
+}
diff --git a/tika-translate/src/main/java/org/apache/tika/language/translate/MosesTranslator.java b/tika-translate/src/main/java/org/apache/tika/language/translate/MosesTranslator.java
new file mode 100644
index 000000000..4e21f16f0
--- /dev/null
+++ b/tika-translate/src/main/java/org/apache/tika/language/translate/MosesTranslator.java
@@ -0,0 +1,131 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.tika.language.translate;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.util.Properties;
+
+/**
+ * Translator that uses the Moses decoder for translation.
+ * Users must install the Moses system before using this Translator. @link http://www.statmt.org/moses/.
+ */
+public class MosesTranslator extends ExternalTranslator {
+
+    private static final String DEFAULT_PATH = "dummy-path";
+    private static final String TMP_FILE_NAME = "tika.moses.translation.tmp";
+
+    private String smtPath = DEFAULT_PATH;
+    private String scriptPath = DEFAULT_PATH;
+
+    /**
+     * Default constructor that attempts to read the smt jar and script paths from the
+     * translator.moses.properties file.
+     *
+     * @throws java.lang.AssertionError When the properties file is unreadable.
+     */
+    public MosesTranslator() {
+        Properties config = new Properties();
+        try {
+            config.load(MosesTranslator.class
+                    .getClassLoader()
+                    .getResourceAsStream("org/apache/tika/language/translate/translator.moses.properties"));
+            new MosesTranslator(
+                    config.getProperty("translator.smt_path"),
+                    config.getProperty("translator.script_path"));
+        } catch (IOException e) {
+            throw new AssertionError("Failed to read translator.moses.properties.");
+        }
+    }
+
+    /**
+     * Create a Moses Translator with the specified smt jar and script paths.
+     *
+     * @param smtPath Full path to the jar to run.
+     * @param scriptPath Full path to the script to pass to the smt jar.
+     */
+    public MosesTranslator(String smtPath, String scriptPath) {
+        this.smtPath = smtPath;
+        this.scriptPath = scriptPath;
+        System.out.println(buildCommand(smtPath, scriptPath));
+    }
+
+    @Override
+    public String translate(String text, String sourceLanguage, String targetLanguage) throws Exception {
+        if (!isAvailable() || !checkCommand(buildCheckCommand(smtPath), 1)) return text;
+        File tmpFile = new File(TMP_FILE_NAME);
+        BufferedWriter out = new BufferedWriter(new FileWriter(tmpFile));
+        out.append(text).append('\n').close();
+
+        Runtime.getRuntime().exec(buildCommand(smtPath, scriptPath), new String[]{}, buildWorkingDirectory(scriptPath));
+
+        File tmpTranslatedFile = new File(TMP_FILE_NAME + ".translated");
+
+        StringBuilder stringBuilder = new StringBuilder();
+        BufferedReader bufferedReader = new BufferedReader(new FileReader(TMP_FILE_NAME + ".translated"));
+        String line;
+        while ((line = bufferedReader.readLine()) != null) stringBuilder.append(line);
+
+        if (!tmpFile.delete() || !tmpTranslatedFile.delete()){
+            throw new IOException("Failed to delete temporary files.");
+        }
+        return stringBuilder.toString();
+    }
+
+    @Override
+    public boolean isAvailable() {
+        return !smtPath.equals(DEFAULT_PATH) && !scriptPath.equals(DEFAULT_PATH);
+    }
+
+    /**
+     * Build the command String to be executed.
+     * @param smtPath Full path to the jar to run.
+     * @param scriptPath Full path to the script to pass to the smt jar.
+     * @return String to run on the command line.
+     */
+    private String buildCommand(String smtPath, String scriptPath) {
+        return "java -jar " + smtPath +
+                " -c NONE " +
+                scriptPath + " " +
+                System.getProperty("user.dir") + "/" + TMP_FILE_NAME;
+    }
+
+    /**
+     * Build the command String to check if we can execute the smt jar.
+     * @param smtPath Full path to the jar to run.
+     * @return String to run on the command line.
+     */
+    private String buildCheckCommand(String smtPath) {
+        return "java -jar " + smtPath;
+    }
+
+    /**
+     * Build the File that represents the desired working directory. In this case,
+     * the directory the script is in.
+     * @param scriptPath Full path to the script passed to the smt jar.
+     * @return File of the directory with the script in it.
+     */
+    private File buildWorkingDirectory(String scriptPath) {
+        return new File(scriptPath.substring(0, scriptPath.lastIndexOf("/") + 1));
+    }
+
+}
diff --git a/tika-translate/src/main/resources/org/apache/tika/language/translate/translator.moses.properties b/tika-translate/src/main/resources/org/apache/tika/language/translate/translator.moses.properties
new file mode 100644
index 000000000..72f2d20bb
--- /dev/null
+++ b/tika-translate/src/main/resources/org/apache/tika/language/translate/translator.moses.properties
@@ -0,0 +1,25 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# Must set the client keys in this file to use translation. Please see
+# https://code.google.com/p/microsoft-translator-java-api/ and
+# http://msdn.microsoft.com/en-us/library/hh454950.aspx for help with
+# getting these keys. As of now (6/2014) 2,000,000 characters/month
+# are free.
+
+# smt_path is the full path to the Moses jar to run.
+# script_path is the full path to the script to pass to the smt jar.
+
+translator.smt_path=dummy-path
+translator.script_path=dummy-path
\ No newline at end of file
diff --git a/tika-translate/src/test/java/org/apache/tika/language/translate/MosesTranslatorTest.java b/tika-translate/src/test/java/org/apache/tika/language/translate/MosesTranslatorTest.java
new file mode 100644
index 000000000..3a81a93eb
--- /dev/null
+++ b/tika-translate/src/test/java/org/apache/tika/language/translate/MosesTranslatorTest.java
@@ -0,0 +1,23 @@
+package org.apache.tika.language.translate;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.assertTrue;
+
+public class MosesTranslatorTest {
+    MosesTranslator translator;
+    @Before
+    public void setUp() {
+        translator = new MosesTranslator();
+    }
+
+    @Test
+    public void testSimpleTranslate() throws Exception {
+        String source = "hola";
+        String expected = "hello";
+        String translated = translator.translate(source, "sp", "en");
+        if (translator.isAvailable()) assertTrue("Translate " + source + " to " + expected + " (was " + translated + ")",
+                expected.equalsIgnoreCase(translated));
+    }
+}
