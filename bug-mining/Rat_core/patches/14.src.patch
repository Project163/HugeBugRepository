diff --git a/apache-rat-core/src/main/java/org/apache/rat/annotation/AbstractLicenceAppender.java b/apache-rat-core/src/main/java/org/apache/rat/annotation/AbstractLicenceAppender.java
index 32ebd99c..66b2a277 100644
--- a/apache-rat-core/src/main/java/org/apache/rat/annotation/AbstractLicenceAppender.java
+++ b/apache-rat-core/src/main/java/org/apache/rat/annotation/AbstractLicenceAppender.java
@@ -270,14 +270,12 @@ public abstract class AbstractLicenceAppender {
                         doFirstLine(document, writer, line, "@echo");
                     } else if (first && expectsMSVSSF) {
                         written = true;
+                        if ("".equals(line)) {
+                            line = passThroughReadNext(writer, line, br);
+                        }
                         if (line.startsWith("Microsoft Visual Studio Solution"
                                             + " File")) {
-                            writer.write(line);
-                            writer.write(LINE_SEP);
-                            line = br.readLine();
-                            if (line == null) {
-                                line = "";
-                            }
+                            line = passThroughReadNext(writer, line, br);
                         }
                         doFirstLine(document, writer, line, "# Visual ");
                     } else {
@@ -476,6 +474,14 @@ public abstract class AbstractLicenceAppender {
     private static boolean isIn(int[] arr, int key) {
         return Arrays.binarySearch(arr, key) >= 0;
     }
+
+    private String passThroughReadNext(Writer writer, String line,
+                                       BufferedReader br) throws IOException {
+        writer.write(line);
+        writer.write(LINE_SEP);
+        String l = br.readLine();
+        return l == null ? "" : l;
+    }
 }
 
 /**
diff --git a/apache-rat-core/src/test/java/org/apache/rat/annotation/TestLicenceAppender.java b/apache-rat-core/src/test/java/org/apache/rat/annotation/TestLicenceAppender.java
index 70310029..9a4378b0 100644
--- a/apache-rat-core/src/test/java/org/apache/rat/annotation/TestLicenceAppender.java
+++ b/apache-rat-core/src/test/java/org/apache/rat/annotation/TestLicenceAppender.java
@@ -542,4 +542,112 @@ public class TestLicenceAppender extends TestCase {
             });
     }
 
+    public void testAddLicenceToVS2010ExpressSolution() throws IOException {
+        String filename = "tmp.sln";
+        final String firstLine = "Microsoft Visual Studio Solution File, "
+            + "Format Version 11.00";
+        final String secondLine = "# Visual C# Express 2010";
+        final String thirdLine = "#";
+
+        commonTestTemplate(filename, new FileCreator() {
+                public void createFile(Writer writer)
+                    throws IOException {
+                    writer.write(firstLine + "\n");
+                    writer.write(secondLine + "\n");
+                    writer.write("Project(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Lucene.Net\", \"..\\..\\..\\src\\core\\Lucene.Net.csproj\", \"{5D4AD9BE-1FFB-41AB-9943-25737971BF57}\"\n");
+                    writer.write("EndProject\n");
+                    writer.write("Project(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Contrib.Highlighter\", \"..\\..\\..\\src\\contrib\\Highlighter\\Contrib.Highlighter.csproj\", \"{901D5415-383C-4AA6-A256-879558841BEA}\"\n");
+                    writer.write("EndProject\n");
+                    writer.write("Global\n");
+                    writer.write("GlobalSection(SolutionConfigurationPlatforms) = preSolution\n");
+                    writer.write("Debug|Any CPU = Debug|Any CPU\n");
+                    writer.write("Release|Any CPU = Release|Any CPU\n");
+                    writer.write("EndGlobalSection\n");
+                    writer.write("GlobalSection(ProjectConfigurationPlatforms) = postSolution\n");
+                    writer.write("{5D4AD9BE-1FFB-41AB-9943-25737971BF57}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n");
+                    writer.write("{5D4AD9BE-1FFB-41AB-9943-25737971BF57}.Debug|Any CPU.Build.0 = Debug|Any CPU\n");
+                    writer.write("{5D4AD9BE-1FFB-41AB-9943-25737971BF57}.Release|Any CPU.ActiveCfg = Release|Any CPU\n");
+                    writer.write("{5D4AD9BE-1FFB-41AB-9943-25737971BF57}.Release|Any CPU.Build.0 = Release|Any CPU\n");
+                    writer.write("{901D5415-383C-4AA6-A256-879558841BEA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n");
+                    writer.write("{901D5415-383C-4AA6-A256-879558841BEA}.Debug|Any CPU.Build.0 = Debug|Any CPU\n");
+                    writer.write("{901D5415-383C-4AA6-A256-879558841BEA}.Release|Any CPU.ActiveCfg = Release|Any CPU\n");
+                    writer.write("{901D5415-383C-4AA6-A256-879558841BEA}.Release|Any CPU.Build.0 = Release|Any CPU\n");
+                    writer.write("EndGlobalSection\n");
+                    writer.write("GlobalSection(SolutionProperties) = preSolution\n");
+                    writer.write("HideSolutionNode = FALSE\n");
+                    writer.write("EndGlobalSection\n");
+                    writer.write("EndGlobal \n");
+                }
+            },
+            new NewFileReader() {
+                public void readFile(BufferedReader r) throws IOException {
+                    String line = r.readLine();
+                    assertEquals("First line is incorrect",
+                                 firstLine, line);
+                    line = r.readLine();
+                    assertEquals("Second line is incorrect",
+                                 secondLine, line);
+                    line = r.readLine();
+                    assertEquals("Third line is incorrect",
+                                 thirdLine, line);
+                }
+            });
+    }
+
+    public void testAddLicenceToVS2010SolutionWithBlankLine() throws IOException {
+        String filename = "tmp.sln";
+        final String firstLine = "";
+        final String secondLine = "Microsoft Visual Studio Solution File, "
+            + "Format Version 11.00";
+        final String thirdLine = "# Visual C# Express 2010";
+        final String forthLine = "#";
+
+        commonTestTemplate(filename, new FileCreator() {
+                public void createFile(Writer writer)
+                    throws IOException {
+                    writer.write(firstLine + "\n");
+                    writer.write(secondLine + "\n");
+                    writer.write(thirdLine + "\n");
+                    writer.write("Project(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Lucene.Net\", \"..\\..\\..\\src\\core\\Lucene.Net.csproj\", \"{5D4AD9BE-1FFB-41AB-9943-25737971BF57}\"\n");
+                    writer.write("EndProject\n");
+                    writer.write("Project(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Contrib.Highlighter\", \"..\\..\\..\\src\\contrib\\Highlighter\\Contrib.Highlighter.csproj\", \"{901D5415-383C-4AA6-A256-879558841BEA}\"\n");
+                    writer.write("EndProject\n");
+                    writer.write("Global\n");
+                    writer.write("GlobalSection(SolutionConfigurationPlatforms) = preSolution\n");
+                    writer.write("Debug|Any CPU = Debug|Any CPU\n");
+                    writer.write("Release|Any CPU = Release|Any CPU\n");
+                    writer.write("EndGlobalSection\n");
+                    writer.write("GlobalSection(ProjectConfigurationPlatforms) = postSolution\n");
+                    writer.write("{5D4AD9BE-1FFB-41AB-9943-25737971BF57}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n");
+                    writer.write("{5D4AD9BE-1FFB-41AB-9943-25737971BF57}.Debug|Any CPU.Build.0 = Debug|Any CPU\n");
+                    writer.write("{5D4AD9BE-1FFB-41AB-9943-25737971BF57}.Release|Any CPU.ActiveCfg = Release|Any CPU\n");
+                    writer.write("{5D4AD9BE-1FFB-41AB-9943-25737971BF57}.Release|Any CPU.Build.0 = Release|Any CPU\n");
+                    writer.write("{901D5415-383C-4AA6-A256-879558841BEA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n");
+                    writer.write("{901D5415-383C-4AA6-A256-879558841BEA}.Debug|Any CPU.Build.0 = Debug|Any CPU\n");
+                    writer.write("{901D5415-383C-4AA6-A256-879558841BEA}.Release|Any CPU.ActiveCfg = Release|Any CPU\n");
+                    writer.write("{901D5415-383C-4AA6-A256-879558841BEA}.Release|Any CPU.Build.0 = Release|Any CPU\n");
+                    writer.write("EndGlobalSection\n");
+                    writer.write("GlobalSection(SolutionProperties) = preSolution\n");
+                    writer.write("HideSolutionNode = FALSE\n");
+                    writer.write("EndGlobalSection\n");
+                    writer.write("EndGlobal \n");
+                }
+            },
+            new NewFileReader() {
+                public void readFile(BufferedReader r) throws IOException {
+                    String line = r.readLine();
+                    assertEquals("First line is incorrect",
+                                 firstLine, line);
+                    line = r.readLine();
+                    assertEquals("Second line is incorrect",
+                                 secondLine, line);
+                    line = r.readLine();
+                    assertEquals("Third line is incorrect",
+                                 thirdLine, line);
+                    line = r.readLine();
+                    assertEquals("Forth line is incorrect",
+                                 forthLine, line);
+                }
+            });
+    }
 }
