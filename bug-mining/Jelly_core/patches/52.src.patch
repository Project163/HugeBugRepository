diff --git a/jelly-tags/xml/src/java/org/apache/commons/jelly/tags/xml/TransformTag.java b/jelly-tags/xml/src/java/org/apache/commons/jelly/tags/xml/TransformTag.java
index e260b99c..6367920c 100644
--- a/jelly-tags/xml/src/java/org/apache/commons/jelly/tags/xml/TransformTag.java
+++ b/jelly-tags/xml/src/java/org/apache/commons/jelly/tags/xml/TransformTag.java
@@ -38,6 +38,7 @@ import javax.xml.transform.sax.SAXTransformerFactory;
 import javax.xml.transform.sax.TransformerHandler;
 import javax.xml.transform.stream.StreamSource;
 
+import org.apache.commons.jelly.JellyContext;
 import org.apache.commons.jelly.JellyException;
 import org.apache.commons.jelly.JellyTagException;
 import org.apache.commons.jelly.MissingAttributeException;
@@ -47,6 +48,7 @@ import org.apache.commons.jelly.XMLOutput;
 import org.apache.commons.jelly.impl.ScriptBlock;
 import org.apache.commons.jelly.impl.StaticTagScript;
 import org.apache.commons.jelly.impl.TagScript;
+import org.apache.commons.jelly.impl.WeakReferenceWrapperScript;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.dom4j.Document;
@@ -73,7 +75,7 @@ import org.xml.sax.helpers.XMLReaderFactory;
   * xslt property which can be a Reader, InputStream, URL or String URI.
   *
   * @author Robert Leftwich
-  * @version $Revision: 1.5 $
+  * @version $Revision: 1.6 $
   */
 public class TransformTag extends ParseTag {
 
@@ -357,7 +359,11 @@ public class TransformTag extends ParseTag {
     private void doNestedParamTag(XMLOutput output) throws JellyTagException {
         // find any nested param tags and run them
         Script bodyScript = this.getBody();
-        if (bodyScript instanceof ScriptBlock) {
+        
+        if (bodyScript instanceof WeakReferenceWrapperScript) {
+            WeakReferenceWrapperScript wrws = (WeakReferenceWrapperScript) bodyScript;
+            invokeNestedTagsOfType(wrws, ParamTag.class,context,output);
+        }else if (bodyScript instanceof ScriptBlock) {
             ScriptBlock scriptBlock = (ScriptBlock) bodyScript;
             List scriptList = scriptBlock.getScriptList();
             for (Iterator iter = scriptList.iterator(); iter.hasNext(); ) {
@@ -381,11 +387,52 @@ public class TransformTag extends ParseTag {
         }
     }
 
+    /** Locates all child TagScripts, whose tags are of the type
+     * given. These tags are executed with the provided JellyContext and output.
+     * <p/>
+     * <strong>This method is in place
+     * to support specific features in the XML tag library and
+     * shouldn't be used by anyone at all.
+     * This method will be removed in a near-future verison of jelly.</strong>
+     * <p/>
+     * 
+     * XXX if possible, this is actually more bogus than "containsScriptType", it must be removed ASAP
+     * 
+     * @param clazz Execute all child tags of this type
+     * @param output The output to use when executing the tags.
+     * @throws JellyTagException
+     */
+    public void invokeNestedTagsOfType(WeakReferenceWrapperScript wrws, Class clazz, JellyContext context, XMLOutput output) throws JellyTagException {
+        Object bodyScript = wrws.script();
+        
+        if (bodyScript instanceof ScriptBlock) {
+            ScriptBlock scriptBlock = (ScriptBlock) bodyScript;
+            List scriptList = scriptBlock.getScriptList();
+            for (Iterator iter = scriptList.iterator(); iter.hasNext(); ) {
+                Script script = (Script) iter.next();
+                if (script instanceof TagScript) {
+    
+                    Tag tag = null;
+                    try {
+                        tag = ((TagScript) script).getTag();
+                    } catch (JellyException e) {
+                        throw new JellyTagException(e);
+                    }
+    
+                    if (tag instanceof ParamTag) {
+                        script.run(context, output);
+                    }
+                } // instanceof
+            } // for
+        } // if
+    }
+
+    
     /** A helper class that converts a transform tag body to an XMLReader
       * to hide the details of where the input for the transform is obtained
       *
       * @author <a href="mailto:robert@leftwich.info">Robert Leftwich</a>
-      * @version $Revision: 1.5 $
+      * @version $Revision: 1.6 $
       */
     private class TagBodyXMLReader implements XMLReader {
 
@@ -487,11 +534,18 @@ public class TransformTag extends ParseTag {
          * xml parser, i.e. its only text) to generate SAX events or not
          *
          * @return True if tag body should be parsed or false if invoked only
+         * @throws JellyTagException
          */
-        private boolean shouldParseBody() {
+        private boolean shouldParseBody() throws JellyTagException {
             boolean result = false;
             // check to see if we need to parse the body or just invoke it
             Script bodyScript = this.tag.getBody();
+            
+            if (bodyScript instanceof WeakReferenceWrapperScript) {
+                WeakReferenceWrapperScript wrws = (WeakReferenceWrapperScript) bodyScript;
+                return wrws.containsScriptType(StaticTagScript.class);
+            }
+            
             if (bodyScript instanceof ScriptBlock) {
                 ScriptBlock scriptBlock = (ScriptBlock) bodyScript;
                 List scriptList = scriptBlock.getScriptList();
diff --git a/src/java/org/apache/commons/jelly/impl/TagScript.java b/src/java/org/apache/commons/jelly/impl/TagScript.java
index 8a61b77b..200da8e9 100644
--- a/src/java/org/apache/commons/jelly/impl/TagScript.java
+++ b/src/java/org/apache/commons/jelly/impl/TagScript.java
@@ -54,7 +54,7 @@ import org.xml.sax.SAXException;
  * concurrently by multiple threads.
  *
  * @author <a href="mailto:jstrachan@apache.org">James Strachan</a>
- * @version $Revision: 1.45 $
+ * @version $Revision: 1.46 $
  */
 public class TagScript implements Script {
 
@@ -507,7 +507,8 @@ public class TagScript implements Script {
             parentTag = parent.getTag();
         }
         tag.setParent( parentTag );
-        tag.setBody( tagBody );
+        tag.setBody( new WeakReferenceWrapperScript(tagBody) );
+        //tag.setBody( tagBody );
 
         if (tag instanceof NamespaceAwareTag) {
             NamespaceAwareTag naTag = (NamespaceAwareTag) tag;
