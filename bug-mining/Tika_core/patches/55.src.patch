diff --git a/tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java b/tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java
index 8cc1f5d15..c0350b1e2 100644
--- a/tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java
+++ b/tika-core/src/main/java/org/apache/tika/detect/XmlRootExtractor.java
@@ -37,26 +37,13 @@ import org.xml.sax.helpers.DefaultHandler;
  */
 public class XmlRootExtractor {
 
-    private final SAXParserFactory factory;
-
-    public XmlRootExtractor() throws SAXException, ParserConfigurationException {
-        factory = SAXParserFactory.newInstance();
-        factory.setNamespaceAware(true);
-        factory.setValidating(false);
-        try {
-            factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
-        } catch (SAXNotRecognizedException e) {
-            // TIKA-271: Some XML parsers do not support the secure-processing
-            // feature, even though it's required by JAXP in Java 5. Ignoring
-            // the exception is fine here, deployments without this feature
-            // are inherently vulnerable to XML denial-of-service attacks.
-        }
-
-    }
-
     public QName extractRootElement(byte[] data) {
         ExtractorHandler handler = new ExtractorHandler();
         try {
+            SAXParserFactory factory = SAXParserFactory.newInstance();
+            factory.setNamespaceAware(true);
+            factory.setValidating(false);
+            factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
             factory.newSAXParser().parse(
                     new ByteArrayInputStream(data),
                     new OfflineContentHandler(handler));
diff --git a/tika-core/src/main/java/org/apache/tika/mime/MimeTypes.java b/tika-core/src/main/java/org/apache/tika/mime/MimeTypes.java
index 0e7c29758..c9e6daff6 100644
--- a/tika-core/src/main/java/org/apache/tika/mime/MimeTypes.java
+++ b/tika-core/src/main/java/org/apache/tika/mime/MimeTypes.java
@@ -144,13 +144,11 @@ public final class MimeTypes implements Detector, Serializable {
     /** List of all registered rootXML */
     private SortedSet<MimeType> xmls = new TreeSet<MimeType>();
 
-    private transient XmlRootExtractor xmlRootExtractor = null;
-
     public MimeTypes() {
         rootMimeType = new MimeType(MediaType.OCTET_STREAM);
         textMimeType = new MimeType(MediaType.TEXT_PLAIN);
         xmlMimeType = new MimeType(MediaType.APPLICATION_XML);
-        
+
         add(rootMimeType);
         add(textMimeType);
         add(xmlMimeType);
@@ -229,33 +227,29 @@ public final class MimeTypes implements Detector, Serializable {
         }
  
         if (result != null) {
-            try {
-                XmlRootExtractor extractor = xmlRootExtractor;
-                if (extractor  == null) {
-                    extractor = new XmlRootExtractor();
-                    xmlRootExtractor = extractor;
-                }
-
-                // When detecting generic XML (or possibly XHTML),
-                // extract the root element and match it against known types
-                if ("application/xml".equals(result.getName())
-                        || "text/html".equals(result.getName())) {
-                    QName rootElement = xmlRootExtractor.extractRootElement(data);
-                    if (rootElement != null) {
-                        for (MimeType type : xmls) {
-                            if (type.matchesXML(
-                                    rootElement.getNamespaceURI(),
-                                    rootElement.getLocalPart())) {
-                                result = type;
-                                break;
-                            }
+            // When detecting generic XML (or possibly XHTML),
+            // extract the root element and match it against known types
+            if ("application/xml".equals(result.getName())
+                    || "text/html".equals(result.getName())) {
+                XmlRootExtractor extractor = new XmlRootExtractor();
+
+                QName rootElement = extractor.extractRootElement(data);
+                if (rootElement != null) {
+                    for (MimeType type : xmls) {
+                        if (type.matchesXML(
+                                rootElement.getNamespaceURI(),
+                                rootElement.getLocalPart())) {
+                            result = type;
+                            break;
                         }
                     }
+                } else if ("application/xml".equals(result.getName())) {
+                    // Downgrade from application/xml to text/plain since
+                    // the document seems not to be well-formed.
+                    result = textMimeType;
                 }
-                return result;
-            } catch (SAXException e) {
-            } catch (ParserConfigurationException e) {
             }
+            return result;
         }
 
 
