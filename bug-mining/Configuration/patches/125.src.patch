diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 4814d0b7..5bf283fd 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -23,6 +23,13 @@
 
   <body>
     <release version="1.7" date="in SVN" description="">
+      <action dev="oheger" type="fix" issue="CONFIGURATION-434">
+        HierarchicalINIConfiguration now recognizes comment characters in
+        property definitions only if they are preceded by whitespace. Thus
+        comment characters can now be part of the property value. This is for
+        instance required for the definition of file paths which use the
+        semicolon as path separator.
+      </action>
       <action dev="oheger" type="fix" issue="CONFIGURATION-433">
         Minor improvements of the support for indexed properties in
         ConfigurationDynaBean.
diff --git a/src/java/org/apache/commons/configuration/HierarchicalINIConfiguration.java b/src/java/org/apache/commons/configuration/HierarchicalINIConfiguration.java
index 96876943..763e30d3 100644
--- a/src/java/org/apache/commons/configuration/HierarchicalINIConfiguration.java
+++ b/src/java/org/apache/commons/configuration/HierarchicalINIConfiguration.java
@@ -398,6 +398,12 @@ public class HierarchicalINIConfiguration extends
      * <pre>
      * 'value' ; comment -&gt; value
      * </pre>
+     * Note that a comment character is only recognized if there is at least one
+     * whitespace character before it. So it can appear in the property value,
+     * e.g.:
+     * <pre>
+     * C:\\Windows;C:\\Windows\\system32
+     * </pre>
      *
      * @param val the value to be parsed
      * @param reader the reader (needed if multiple lines have to be read)
@@ -420,6 +426,7 @@ public class HierarchicalINIConfiguration extends
             int i = quoted ? 1 : 0;
 
             StringBuffer result = new StringBuffer();
+            char lastChar = 0;
             while (i < value.length() && !stop)
             {
                 char c = value.charAt(i);
@@ -452,17 +459,18 @@ public class HierarchicalINIConfiguration extends
                 }
                 else
                 {
-                    if (!isCommentChar(c))
+                    if (isCommentChar(c) && Character.isWhitespace(lastChar))
                     {
-                        result.append(c);
+                        stop = true;
                     }
                     else
                     {
-                        stop = true;
+                        result.append(c);
                     }
                 }
 
                 i++;
+                lastChar = c;
             }
 
             String v = result.toString();
diff --git a/src/test/org/apache/commons/configuration/TestHierarchicalINIConfiguration.java b/src/test/org/apache/commons/configuration/TestHierarchicalINIConfiguration.java
index eb76bd65..27ae0ade 100644
--- a/src/test/org/apache/commons/configuration/TestHierarchicalINIConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestHierarchicalINIConfiguration.java
@@ -683,6 +683,26 @@ public class TestHierarchicalINIConfiguration extends TestCase
         assertEquals("Wrong value (2)", "test2", conf.getString(section + ".test2"));
     }
 
+    /**
+     * Tests whether a value which contains a semicolon can be loaded
+     * successfully. This test is related to CONFIGURATION-434.
+     */
+    public void testValueWithSemicolon() throws ConfigurationException
+    {
+        final String path =
+                "C:\\Program Files\\jar\\manage.jar;"
+                        + "C:\\Program Files\\jar\\guiLauncher.jar";
+        final String content =
+                "[Environment]" + LINE_SEPARATOR + "Application Type=any"
+                        + LINE_SEPARATOR + "Class Path=" + path + "  ;comment"
+                        + LINE_SEPARATOR + "Path=" + path
+                        + "\t; another comment";
+        HierarchicalINIConfiguration config = setUpConfig(content);
+        assertEquals("Wrong class path", path,
+                config.getString("Environment.Class Path"));
+        assertEquals("Wrong path", path, config.getString("Environment.Path"));
+    }
+
     /**
      * A thread class for testing concurrent access to the global section.
      */
