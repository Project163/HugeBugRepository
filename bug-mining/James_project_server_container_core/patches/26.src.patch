diff --git a/server/container/core/src/main/java/org/apache/james/server/core/MailImpl.java b/server/container/core/src/main/java/org/apache/james/server/core/MailImpl.java
index 95ff74a245..985c473f49 100644
--- a/server/container/core/src/main/java/org/apache/james/server/core/MailImpl.java
+++ b/server/container/core/src/main/java/org/apache/james/server/core/MailImpl.java
@@ -445,7 +445,7 @@ public class MailImpl implements Disposable, Mail {
      * A constructor that creates a MailImpl with the specified name, sender,
      * recipients, and MimeMessage.
      */
-    public MailImpl(String name, MailAddress sender, Collection<MailAddress> recipients, MimeMessage message) throws MessagingException {
+    private MailImpl(String name, MailAddress sender, Collection<MailAddress> recipients, MimeMessage message) throws MessagingException {
         this(name, sender, recipients);
         this.setMessage(new MimeMessageCopyOnWriteProxy(message));
     }
diff --git a/server/container/core/src/test/java/org/apache/james/server/core/MailImplTest.java b/server/container/core/src/test/java/org/apache/james/server/core/MailImplTest.java
index c5ba1ebbac..14951fba4b 100644
--- a/server/container/core/src/test/java/org/apache/james/server/core/MailImplTest.java
+++ b/server/container/core/src/test/java/org/apache/james/server/core/MailImplTest.java
@@ -40,7 +40,6 @@ import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
 import com.github.fge.lambdas.Throwing;
-import com.google.common.collect.ImmutableList;
 
 public class MailImplTest extends ContractMailTest {
 
@@ -129,39 +128,24 @@ public class MailImplTest extends ContractMailTest {
 
     @Test
     public void mailImplConstructionWithMimeMessageShouldNotOverwriteMessageId() throws MessagingException {
-        ImmutableList<MailAddress> recipients = ImmutableList.of();
-        String name = MailUtil.newId();
-        String sender = "sender@localhost";
-        MailAddress senderMailAddress = new MailAddress(sender);
-
-        MailImpl mail = new MailImpl(name, senderMailAddress, recipients, emptyMessage);
+        MailImpl mail = MailImpl.builder()
+            .name(MailUtil.newId())
+            .sender("sender@localhost")
+            .mimeMessage(emptyMessage)
+            .build();
 
         assertThat(mail.getMessage().getMessageID()).isEqualTo(emptyMessage.getMessageID());
     }
 
     @Test
     public void duplicateFactoryMethodShouldGenerateNewObjectWithSameValuesButName() throws MessagingException, IOException {
-        ImmutableList<MailAddress> recipients = ImmutableList.of();
         String name = MailUtil.newId();
-        String sender = "sender@localhost";
-        MailAddress senderMailAddress = new MailAddress(sender);
-
-        MailImpl mail = new MailImpl(name, senderMailAddress, recipients, emptyMessage);
-        MailImpl duplicate = MailImpl.duplicate(mail);
-
-        assertThat(duplicate).isNotSameAs(mail).isEqualToIgnoringGivenFields(mail, "message", "name");
-        assertThat(duplicate.getName()).isNotEqualTo(name);
-        assertThat(duplicate.getMessage().getInputStream()).hasSameContentAs(mail.getMessage().getInputStream());
-    }
-
-    @Test
-    public void duplicateShouldGenerateNewObjectWithSameValuesButName() throws MessagingException, IOException {
-        ImmutableList<MailAddress> recipients = ImmutableList.of();
-        String name = MailUtil.newId();
-        String sender = "sender@localhost";
-        MailAddress senderMailAddress = new MailAddress(sender);
+        MailImpl mail = MailImpl.builder()
+            .name(name)
+            .sender("sender@localhost")
+            .mimeMessage(emptyMessage)
+            .build();
 
-        MailImpl mail = new MailImpl(name, senderMailAddress, recipients, emptyMessage);
         MailImpl duplicate = MailImpl.duplicate(mail);
 
         assertThat(duplicate).isNotSameAs(mail).isEqualToIgnoringGivenFields(mail, "message", "name");
diff --git a/server/container/core/src/test/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxyTest.java b/server/container/core/src/test/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxyTest.java
index 0d0291c694..d382762a9a 100644
--- a/server/container/core/src/test/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxyTest.java
+++ b/server/container/core/src/test/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxyTest.java
@@ -21,26 +21,22 @@ package org.apache.james.server.core;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Fail.fail;
 
-import java.util.ArrayList;
-
 import javax.mail.MessagingException;
 import javax.mail.internet.MimeMessage;
 import javax.mail.util.SharedByteArrayInputStream;
 
-import org.apache.james.core.MailAddress;
 import org.apache.james.core.builder.MimeMessageBuilder;
 import org.apache.james.lifecycle.api.LifecycleUtil;
 import org.apache.mailet.Mail;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
-import com.google.common.collect.ImmutableList;
-
 public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
 
     final String content = "Subject: foo\r\nContent-Transfer-Encoding2: plain";
     final String sep = "\r\n\r\n";
     final String body = "bar\r\n.\r\n";
+    final String mimeMessageAsString = content + sep + body;
 
     @BeforeAll
     static void setUp() {
@@ -55,13 +51,15 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
 
     @Test
     void testMessageCloning1() throws Exception {
-        ArrayList<MailAddress> r = new ArrayList<>();
-        r.add(new MailAddress("recipient@test.com"));
         MimeMessageCopyOnWriteProxy messageFromSources = (MimeMessageCopyOnWriteProxy) getMessageFromSources(
-                content + sep + body);
-        MailImpl mail = new MailImpl("test", new MailAddress("test@test.com"), r, messageFromSources);
+                mimeMessageAsString);
+        MailImpl mail = MailImpl.builder()
+            .name("test")
+            .sender("test@test.com")
+            .addRecipient("recipient@test.com")
+            .mimeMessage(messageFromSources)
+            .build();
         MailImpl m2 = MailImpl.duplicate(mail);
-        System.out.println("mail: " + getReferences(mail.getMessage()) + " m2: " + getReferences(m2.getMessage()));
         assertThat(mail).isNotSameAs((m2));
         assertThat(mail.getMessage()).isNotSameAs(m2.getMessage());
         // test that the wrapped message is the same
@@ -81,13 +79,16 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
 
     @Test
     void testMessageCloning2() throws Exception {
-        ArrayList<MailAddress> r = new ArrayList<>();
-        r.add(new MailAddress("recipient@test.com"));
         MimeMessageCopyOnWriteProxy messageFromSources = (MimeMessageCopyOnWriteProxy) getMessageFromSources(
-                content + sep + body);
-        MailImpl mail = new MailImpl("test", new MailAddress("test@test.com"), r, messageFromSources);
+                mimeMessageAsString);
+        MailImpl mail = MailImpl.builder()
+            .name("test")
+            .sender("test@test.com")
+            .addRecipient("recipient@test.com")
+            .mimeMessage(messageFromSources)
+            .build();
+
         MailImpl m2 = MailImpl.duplicate(mail);
-        System.out.println("mail: " + getReferences(mail.getMessage()) + " m2: " + getReferences(m2.getMessage()));
         assertThat(mail).isNotSameAs((m2));
         assertThat(mail.getMessage()).isNotSameAs(m2.getMessage());
         // test that the wrapped message is the same
@@ -131,11 +132,14 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
      */
     @Test
     void testMessageAvoidCloning() throws Exception {
-        ArrayList<MailAddress> r = new ArrayList<>();
-        r.add(new MailAddress("recipient@test.com"));
         MimeMessageCopyOnWriteProxy messageFromSources = (MimeMessageCopyOnWriteProxy) getMessageFromSources(
-                content + sep + body);
-        MailImpl mail = new MailImpl("test", new MailAddress("test@test.com"), r, messageFromSources);
+                mimeMessageAsString);
+        MailImpl mail = MailImpl.builder()
+            .name("test")
+            .sender("test@test.com")
+            .addRecipient("recipient@test.com")
+            .mimeMessage(messageFromSources)
+            .build();
         // cloning the message
         Mail mailClone = MailImpl.duplicate(mail);
         assertThat(isSameMimeMessage(mailClone.getMessage(), mail.getMessage())).isTrue();
@@ -167,13 +171,16 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
      */
     @Test
     void testMessageCloning3() throws Exception {
-        ArrayList<MailAddress> r = new ArrayList<>();
-        r.add(new MailAddress("recipient@test.com"));
         MimeMessage mimeMessage = MimeMessageBuilder.mimeMessageBuilder()
             .setText("CIPS")
             .build();
-        MailImpl mail = new MailImpl("test", new MailAddress("test@test.com"), r,
-            mimeMessage);
+        MailImpl mail = MailImpl.builder()
+            .name("test")
+            .sender("test@test.com")
+            .addRecipient("recipient@test.com")
+            .mimeMessage(mimeMessage)
+            .build();
+
         assertThat(isSameMimeMessage(mimeMessage, mail.getMessage())).isTrue();
         // change the message that should be not referenced by mail that has
         // been disposed, so it should not clone it!
@@ -190,11 +197,14 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
 
     @Test
     void testMessageDisposing() throws Exception {
-        ArrayList<MailAddress> r = new ArrayList<>();
-        r.add(new MailAddress("recipient@test.com"));
         MimeMessageCopyOnWriteProxy messageFromSources = (MimeMessageCopyOnWriteProxy) getMessageFromSources(
-                content + sep + body);
-        MailImpl mail = new MailImpl("test", new MailAddress("test@test.com"), r, messageFromSources);
+                mimeMessageAsString);
+        MailImpl mail = MailImpl.builder()
+            .name("test")
+            .sender("test@test.com")
+            .addRecipient("recipient@test.com")
+            .mimeMessage(messageFromSources)
+            .build();
         // cloning the message
         MailImpl mailClone = MailImpl.duplicate(mail);
         LifecycleUtil.dispose(mail);
@@ -212,8 +222,6 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
 
     @Test
     void testNPE1() throws MessagingException, InterruptedException {
-        ArrayList<MailAddress> recipients = new ArrayList<>();
-        recipients.add(new MailAddress("recipient@test.com"));
         MimeMessageCopyOnWriteProxy mw = new MimeMessageCopyOnWriteProxy(new MimeMessageInputStreamSource("test",
                 new SharedByteArrayInputStream(("Return-path: return@test.com\r\n" + "Content-Transfer-Encoding: plain\r\n" + "Subject: test\r\n\r\n" + "Body Text testNPE1\r\n")
                         .getBytes())));
@@ -255,30 +263,20 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
 
     @Test
     void testMessageWithWrongContentTypeShouldNotThrow() throws Exception {
-        ImmutableList<MailAddress> recipients = ImmutableList.of(new MailAddress("recipient@test.com"));
         MimeMessageCopyOnWriteProxy messageFromSources = (MimeMessageCopyOnWriteProxy) getMessageFromSources(
-                content + sep + body);
-        MailImpl mail = new MailImpl("test", new MailAddress("test@test.com"), recipients, messageFromSources);
+                mimeMessageAsString);
+        MailImpl mail = MailImpl.builder()
+            .name("test")
+            .sender("test@test.com")
+            .addRecipient("recipient@test.com")
+            .mimeMessage(messageFromSources)
+            .build();
         mail.getMessage().addHeader("Content-Type", "file;name=\"malformed.pdf\"");
         mail.getMessage().saveChanges();
         LifecycleUtil.dispose(mail);
         LifecycleUtil.dispose(messageFromSources);
     }
 
-    private static String getReferences(MimeMessage m) {
-        StringBuilder ref = new StringBuilder("/");
-        while (m instanceof MimeMessageCopyOnWriteProxy) {
-            ref.append(((MimeMessageCopyOnWriteProxy) m).refCount.getReferenceCount()).append("/");
-            m = ((MimeMessageCopyOnWriteProxy) m).getWrappedMessage();
-        }
-        if (m instanceof MimeMessageWrapper) {
-            ref.append("W");
-        } else {
-            ref.append("M");
-        }
-        return ref.toString();
-    }
-
     private static MimeMessage getWrappedMessage(MimeMessage m) {
         while (m instanceof MimeMessageCopyOnWriteProxy) {
             m = ((MimeMessageCopyOnWriteProxy) m).getWrappedMessage();
