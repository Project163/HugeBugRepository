diff --git a/tika-core/src/main/java/org/apache/tika/extractor/EmbeddedDocumentUtil.java b/tika-core/src/main/java/org/apache/tika/extractor/EmbeddedDocumentUtil.java
index 2ff0efe06..a956a1b6d 100644
--- a/tika-core/src/main/java/org/apache/tika/extractor/EmbeddedDocumentUtil.java
+++ b/tika-core/src/main/java/org/apache/tika/extractor/EmbeddedDocumentUtil.java
@@ -171,6 +171,10 @@ public class EmbeddedDocumentUtil implements Serializable {
         m.add(TikaCoreProperties.TIKA_META_EXCEPTION_WARNING, ex);
     }
 
+    public static void recordEmbeddedStreamException(Throwable t, Metadata m) {
+        String ex = ExceptionUtils.getFilteredStackTrace(t);
+        m.add(TikaCoreProperties.TIKA_META_EXCEPTION_EMBEDDED_STREAM, ex);
+    }
     public boolean shouldParseEmbedded(Metadata m) {
         return getEmbeddedDocumentExtractor().shouldParseEmbedded(m);
     }
diff --git a/tika-core/src/main/java/org/apache/tika/metadata/TikaCoreProperties.java b/tika-core/src/main/java/org/apache/tika/metadata/TikaCoreProperties.java
index 924508667..50b751f37 100644
--- a/tika-core/src/main/java/org/apache/tika/metadata/TikaCoreProperties.java
+++ b/tika-core/src/main/java/org/apache/tika/metadata/TikaCoreProperties.java
@@ -83,6 +83,15 @@ public interface TikaCoreProperties {
     public static final Property TIKA_META_EXCEPTION_WARNING =
             Property.internalTextBag(TIKA_META_EXCEPTION_PREFIX+"warn");
 
+    /**
+     * Use this to store exceptions caught while trying to read the
+     * stream of an embedded resource.  Do not use this if there is
+     * a parse exception on the embedded resource.
+     */
+    Property TIKA_META_EXCEPTION_EMBEDDED_STREAM =
+            Property.internalTextBag(TIKA_META_EXCEPTION_PREFIX+"embedded_stream_exception");
+
+
     /**
      * Some file formats can store information about their original
      * file name/location or about their attachment's original file name/location.
diff --git a/tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java b/tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java
index 1c179f353..739a9b3a4 100644
--- a/tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java
+++ b/tika-core/src/main/java/org/apache/tika/parser/RecursiveParserWrapper.java
@@ -327,7 +327,7 @@ public class RecursiveParserWrapper implements Parser {
                         throw e;
                     }
                 }
-            } catch (IOException|TikaException e) {
+            } catch (TikaException e) {
                 if (catchEmbeddedExceptions) {
                     String trace = ExceptionUtils.getStackTrace(e);
                     metadata.set(EMBEDDED_EXCEPTION, trace);
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/AbstractPOIFSExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/AbstractPOIFSExtractor.java
index 14af5dda7..7ab0f49b5 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/AbstractPOIFSExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/AbstractPOIFSExtractor.java
@@ -51,17 +51,17 @@ abstract class AbstractPOIFSExtractor {
     private static final Log logger = LogFactory.getLog(AbstractPOIFSExtractor.class);
     private final EmbeddedDocumentUtil embeddedDocumentUtil;
     private PasswordProvider passwordProvider;
-    private Metadata metadata;
+    protected final Metadata parentMetadata;//metadata of the parent/container document
 
     protected AbstractPOIFSExtractor(ParseContext context) {
         this(context, null);
     }
 
-    protected AbstractPOIFSExtractor(ParseContext context, Metadata metadata) {
+    protected AbstractPOIFSExtractor(ParseContext context, Metadata parentMetadata) {
         embeddedDocumentUtil = new EmbeddedDocumentUtil(context);
 
         this.passwordProvider = context.get(PasswordProvider.class);
-        this.metadata = metadata;
+        this.parentMetadata = parentMetadata;
     }
 
     // Note - these cache, but avoid creating the default TikaConfig if not needed
@@ -87,7 +87,7 @@ abstract class AbstractPOIFSExtractor {
      */
     protected String getPassword() {
         if (passwordProvider != null) {
-            return passwordProvider.getPassword(metadata);
+            return passwordProvider.getPassword(parentMetadata);
         }
         return null;
     }
@@ -152,7 +152,14 @@ abstract class AbstractPOIFSExtractor {
             try (TikaInputStream stream = TikaInputStream.get(
                     new DocumentInputStream((DocumentEntry) ooxml))) {
                 ZipContainerDetector detector = new ZipContainerDetector();
-                MediaType type = detector.detect(stream, new Metadata());
+                MediaType type = null;
+                try {
+                    //if there's a stream error while detecting...
+                    type = detector.detect(stream, new Metadata());
+                } catch (Exception e) {
+                    EmbeddedDocumentUtil.recordEmbeddedStreamException(e, parentMetadata);
+                    return;
+                }
                 handleEmbeddedResource(stream, null, dir.getName(), dir.getStorageClsid(), type.toString(), xhtml, true);
                 return;
             }
@@ -188,7 +195,8 @@ abstract class AbstractPOIFSExtractor {
                 } catch (Ole10NativeException ex) {
                     // Not a valid OLE10Native record, skip it
                 } catch (Exception e) {
-                    logger.warn("Ignoring unexpected exception while parsing possible OLE10_NATIVE embedded document " + rName, e);
+                    EmbeddedDocumentUtil.recordEmbeddedStreamException(e, parentMetadata);
+                    return;
                 }
             } else if (type == POIFSDocumentType.COMP_OBJ) {
                 try {
@@ -222,7 +230,8 @@ abstract class AbstractPOIFSExtractor {
                     metadata.set(Metadata.CONTENT_TYPE, mediaType.getType().toString());
                     metadata.set(Metadata.RESOURCE_NAME_KEY, rName + extension);
                 } catch (Exception e) {
-                    throw new TikaException("Invalid embedded resource", e);
+                    EmbeddedDocumentUtil.recordEmbeddedStreamException(e, parentMetadata);
+                    return;
                 }
             } else {
                 metadata.set(Metadata.CONTENT_TYPE, type.getType().toString());
@@ -241,6 +250,8 @@ abstract class AbstractPOIFSExtractor {
                 }
                 embeddedDocumentUtil.parseEmbedded(embedded, xhtml, metadata, true);
             }
+        } catch (IOException e) {
+            EmbeddedDocumentUtil.recordEmbeddedStreamException(e, metadata);
         } finally {
             if (embedded != null) {
                 embedded.close();
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java
index 42d63d0b7..6fc949e7f 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java
@@ -42,7 +42,6 @@ import org.apache.poi.poifs.filesystem.NPOIFSFileSystem;
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.extractor.EmbeddedDocumentUtil;
 import org.apache.tika.io.CloseShieldInputStream;
-import org.apache.tika.io.TaggedIOException;
 import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.mime.MediaType;
@@ -52,11 +51,9 @@ import org.xml.sax.SAXException;
 import org.xml.sax.helpers.AttributesImpl;
 
 public class HSLFExtractor extends AbstractPOIFSExtractor {
-    private final Metadata metadata;
 
     public HSLFExtractor(ParseContext context, Metadata metadata) {
-        super(context);
-        this.metadata = metadata;
+        super(context, metadata);
     }
 
     protected void parse(
@@ -346,7 +343,7 @@ public class HSLFExtractor extends AbstractPOIFSExtractor {
             try {
                 data = pic.getData();
             } catch (Exception e) {
-                EmbeddedDocumentUtil.recordException(e, metadata);
+                EmbeddedDocumentUtil.recordEmbeddedStreamException(e, parentMetadata);
                 continue;
             }
             try (TikaInputStream picIs = TikaInputStream.get(data)){
@@ -365,6 +362,7 @@ public class HSLFExtractor extends AbstractPOIFSExtractor {
         } catch (NullPointerException e) {
             // Sometimes HSLF hits problems
             // Please open POI bugs for any you come across!
+            EmbeddedDocumentUtil.recordEmbeddedStreamException(e, parentMetadata);
             return;
         }
 
@@ -375,7 +373,9 @@ public class HSLFExtractor extends AbstractPOIFSExtractor {
                 try {
                     data = oleShape.getObjectData();
                 } catch (NullPointerException e) {
-                /* getObjectData throws NPE some times. */
+                    /* getObjectData throws NPE some times. */
+                    EmbeddedDocumentUtil.recordEmbeddedStreamException(e, parentMetadata);
+                    continue;
                 }
 
                 if (data != null) {
@@ -394,7 +394,7 @@ public class HSLFExtractor extends AbstractPOIFSExtractor {
                     try {
                         dataStream = data.getData();
                     } catch (Exception e) {
-                        EmbeddedDocumentUtil.recordException(e, metadata);
+                        EmbeddedDocumentUtil.recordEmbeddedStreamException(e, parentMetadata);
                         continue;
                     }
                     try (TikaInputStream stream = TikaInputStream.get(dataStream)) {
@@ -414,8 +414,8 @@ public class HSLFExtractor extends AbstractPOIFSExtractor {
                                     stream, objID, objID,
                                     mediaType, xhtml, false);
                         }
-                    } catch (TaggedIOException e) {
-                        EmbeddedDocumentUtil.recordException(e, metadata);
+                    } catch (IOException e) {
+                        EmbeddedDocumentUtil.recordEmbeddedStreamException(e, parentMetadata);
                     }
                 }
             }
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/JackcessExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/JackcessExtractor.java
index 4d4505947..44421067c 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/JackcessExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/JackcessExtractor.java
@@ -22,6 +22,7 @@ import static java.nio.charset.StandardCharsets.UTF_8;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.math.BigDecimal;
 import java.text.DateFormat;
 import java.text.NumberFormat;
@@ -42,6 +43,8 @@ import com.healthmarketscience.jackcess.query.Query;
 import com.healthmarketscience.jackcess.util.OleBlob;
 import org.apache.poi.poifs.filesystem.NPOIFSFileSystem;
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.extractor.EmbeddedDocumentUtil;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.OfficeOpenXMLExtended;
@@ -73,29 +76,29 @@ class JackcessExtractor extends AbstractPOIFSExtractor {
 
     final HtmlParser htmlParser = new HtmlParser();
 
-    protected JackcessExtractor(ParseContext context, Locale locale) {
-        super(context);
+    protected JackcessExtractor(Metadata metadata, ParseContext context, Locale locale) {
+        super(context, metadata);
         currencyFormatter = NumberFormat.getCurrencyInstance(locale);
         shortDateTimeFormatter = DateFormat.getDateInstance(DateFormat.SHORT, locale);
     }
 
-    public void parse(Database db, XHTMLContentHandler xhtml, Metadata metadata) throws IOException, SAXException, TikaException {
+    public void parse(Database db, XHTMLContentHandler xhtml) throws IOException, SAXException, TikaException {
 
 
         String pw = db.getDatabasePassword();
         if (pw != null) {
-            metadata.set(JackcessParser.MDB_PW, pw);
+            parentMetadata.set(JackcessParser.MDB_PW, pw);
         }
 
         PropertyMap dbp = db.getDatabaseProperties();
         for (PropertyMap.Property p : dbp) {
-            metadata.add(JackcessParser.MDB_PROPERTY_PREFIX + p.getName(),
+            parentMetadata.add(JackcessParser.MDB_PROPERTY_PREFIX + p.getName(),
                     toString(p.getValue(), p.getType()));
         }
 
         PropertyMap up = db.getUserDefinedProperties();
         for (PropertyMap.Property p : up) {
-            metadata.add(JackcessParser.USER_DEFINED_PROPERTY_PREFIX+ p.getName(),
+            parentMetadata.add(JackcessParser.USER_DEFINED_PROPERTY_PREFIX+ p.getName(),
                     toString(p.getValue(), p.getType()));
         }
 
@@ -105,24 +108,24 @@ class JackcessExtractor extends AbstractPOIFSExtractor {
             //try to get core properties
             PropertyMap.Property title = summaryProperties.get(TITLE_PROP_KEY);
             if (title != null) {
-                metadata.set(TikaCoreProperties.TITLE, toString(title.getValue(), title.getType()));
+                parentMetadata.set(TikaCoreProperties.TITLE, toString(title.getValue(), title.getType()));
                 found.add(title.getName());
             }
             PropertyMap.Property author = summaryProperties.get(AUTHOR_PROP_KEY);
             if (author != null && author.getValue() != null) {
                 String authorString = toString(author.getValue(), author.getType());
-                SummaryExtractor.addMulti(metadata, TikaCoreProperties.CREATOR, authorString);
+                SummaryExtractor.addMulti(parentMetadata, TikaCoreProperties.CREATOR, authorString);
                 found.add(author.getName());
             }
             PropertyMap.Property company = summaryProperties.get(COMPANY_PROP_KEY);
             if (company != null) {
-                metadata.set(OfficeOpenXMLExtended.COMPANY, toString(company.getValue(), company.getType()));
+                parentMetadata.set(OfficeOpenXMLExtended.COMPANY, toString(company.getValue(), company.getType()));
                 found.add(company.getName());
             }
 
             for (PropertyMap.Property p : db.getSummaryProperties()) {
                 if (! found.contains(p.getName())) {
-                    metadata.add(JackcessParser.SUMMARY_PROPERTY_PREFIX + p.getName(),
+                    parentMetadata.add(JackcessParser.SUMMARY_PROPERTY_PREFIX + p.getName(),
                             toString(p.getValue(), p.getType()));
                 }
             }
@@ -302,21 +305,44 @@ class JackcessExtractor extends AbstractPOIFSExtractor {
                 //TODO: find test file that has this kind of attachment
                 //and see if getFilePath or getLocalFilePath is meaningful
                 //for TikaCoreProperties.ORIGINAL_RESOURCE_NAME
-                handleEmbeddedResource(
-                        TikaInputStream.get(spc.getStream()),
-                        spc.getFileName(),//filename
-                        null,//relationshipId
-                        spc.getTypeName(),//mediatype
-                        xhtml, false);
+                TikaInputStream tis = null;
+                try {
+                    tis = TikaInputStream.get(spc.getStream());
+                } catch (IOException e) {
+                    EmbeddedDocumentUtil.recordEmbeddedStreamException(e, parentMetadata);
+                    break;
+                }
+                if (tis != null) {
+                    try {
+                        handleEmbeddedResource(
+                                tis,
+                                spc.getFileName(),//filename
+                                null,//relationshipId
+                                spc.getTypeName(),//mediatype
+                                xhtml, false);
+                    } finally {
+                        IOUtils.closeQuietly(tis);
+                    }
+                }
                 break;
             case OTHER:
                 OleBlob.OtherContent oc = (OleBlob.OtherContent) content;
-                handleEmbeddedResource(
-                        TikaInputStream.get(oc.getStream()),
-                        null,//filename
-                        null,//relationshipId
-                        oc.getTypeName(),//mediatype
-                        xhtml, false);
+                TikaInputStream ocStream = null;
+                try {
+                    ocStream = TikaInputStream.get(oc.getStream());
+                } catch (IOException e) {
+                    EmbeddedDocumentUtil.recordException(e, parentMetadata);
+                }
+                try {
+                    handleEmbeddedResource(
+                            ocStream,
+                            null,//filename
+                            null,//relationshipId
+                            oc.getTypeName(),//mediatype
+                            xhtml, false);
+                } finally {
+                    IOUtils.closeQuietly(ocStream);
+                }
                 break;
             case COMPOUND_STORAGE:
                 OleBlob.CompoundContent cc = (OleBlob.CompoundContent) content;
@@ -326,8 +352,36 @@ class JackcessExtractor extends AbstractPOIFSExtractor {
     }
 
     private void handleCompoundContent(OleBlob.CompoundContent cc, XHTMLContentHandler xhtml) throws IOException, SAXException, TikaException {
-        try (NPOIFSFileSystem nfs = new NPOIFSFileSystem(cc.getStream())) {
+        InputStream is = null;
+        NPOIFSFileSystem nfs = null;
+        try {
+            try {
+                is = cc.getStream();
+            } catch (IOException e) {
+                EmbeddedDocumentUtil.recordEmbeddedStreamException(e, parentMetadata);
+                return;
+            }
+
+            try {
+                nfs = new NPOIFSFileSystem(is);
+            } catch (Exception e) {
+                EmbeddedDocumentUtil.recordEmbeddedStreamException(e, parentMetadata);
+                return;
+            }
+
             handleEmbeddedOfficeDoc(nfs.getRoot(), xhtml);
+
+        } finally {
+            if (nfs != null) {
+                try {
+                    nfs.close();
+                } catch (IOException e) {
+                    //swallow
+                }
+            }
+            if (is != null) {
+                IOUtils.closeQuietly(is);
+            }
         }
     }
 
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/JackcessParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/JackcessParser.java
index 9704fbb9b..f37949121 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/JackcessParser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/JackcessParser.java
@@ -98,8 +98,8 @@ public class JackcessParser extends AbstractParser {
                         .setReadOnly(true).open();
             }
             db.setLinkResolver(IGNORE_LINK_RESOLVER);//just in case
-            JackcessExtractor ex = new JackcessExtractor(context, locale);
-            ex.parse(db, xhtml, metadata);
+            JackcessExtractor ex = new JackcessExtractor(metadata, context, locale);
+            ex.parse(db, xhtml);
         } catch (IllegalStateException e) {
             if (e.getMessage() != null && e.getMessage().contains("Incorrect password")) {
                 throw new EncryptedDocumentException(e);
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java
index a56d43bc3..9c12fc55f 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java
@@ -124,7 +124,7 @@ public abstract class AbstractOOXMLExtractor implements OOXMLExtractor {
         buildXHTML(xhtml);
 
         // Now do any embedded parts
-        handleEmbeddedParts(handler);
+        handleEmbeddedParts(handler, metadata);
 
         // thumbnail
         handleThumbnail(handler);
@@ -176,52 +176,19 @@ public abstract class AbstractOOXMLExtractor implements OOXMLExtractor {
         }
     }
 
-    private void handleEmbeddedParts(ContentHandler handler)
+    private void handleEmbeddedParts(ContentHandler handler, Metadata metadata)
             throws TikaException, IOException, SAXException {
         Set<String> seen = new HashSet<>();
         try {
             for (PackagePart source : getMainDocumentParts()) {
                 for (PackageRelationship rel : source.getRelationships()) {
-                    URI targetURI = rel.getTargetURI();
-                    if (targetURI != null) {
-                        if (seen.contains(targetURI.toString())) {
-                            continue;
-                        }
-                        seen.add(targetURI.toString());
-                    }
-                    URI sourceURI = rel.getSourceURI();
-                    String sourceDesc;
-                    if (sourceURI != null) {
-                        sourceDesc = getJustFileName(sourceURI.getPath());
-                        if (sourceDesc.startsWith("slide")) {
-                            sourceDesc += "_";
-                        } else {
-                            sourceDesc = "";
-                        }
-                    } else {
-                        sourceDesc = "";
-                    }
-                    if (rel.getTargetMode() == TargetMode.INTERNAL) {
-                        PackagePart target;
-
-                        try {
-                            target = source.getRelatedPart(rel);
-                        } catch (IllegalArgumentException ex) {
-                            continue;
-                        }
-
-                        String type = rel.getRelationshipType();
-                        if (RELATION_OLE_OBJECT.equals(type)
-                                && TYPE_OLE_OBJECT.equals(target.getContentType())) {
-                            handleEmbeddedOLE(target, handler, sourceDesc + rel.getId());
-                        } else if (RELATION_AUDIO.equals(type)
-                                || RELATION_IMAGE.equals(type)
-                                || RELATION_PACKAGE.equals(type)
-                                || RELATION_OLE_OBJECT.equals(type)) {
-                            handleEmbeddedFile(target, handler, sourceDesc + rel.getId());
-                        } else if (RELATION_MACRO.equals(type)) {
-                            handleMacros(target, handler);
+                    try {
+                        handleEmbeddedPart(source, rel, handler, metadata, seen);
+                    } catch (Exception e) {
+                        if (e instanceof SAXException) {
+                            throw e;
                         }
+                        EmbeddedDocumentUtil.recordEmbeddedStreamException(e, metadata);
                     }
                 }
             }
@@ -230,10 +197,60 @@ public abstract class AbstractOOXMLExtractor implements OOXMLExtractor {
         }
     }
 
+    private void handleEmbeddedPart(PackagePart source, PackageRelationship rel,
+                                    ContentHandler handler, Metadata parentMetadata, Set<String> seen)
+            throws IOException, SAXException, TikaException, InvalidFormatException {
+        URI targetURI = rel.getTargetURI();
+        if (targetURI != null) {
+            if (seen.contains(targetURI.toString())) {
+                return;
+            }
+            seen.add(targetURI.toString());
+        }
+        URI sourceURI = rel.getSourceURI();
+        String sourceDesc;
+        if (sourceURI != null) {
+            sourceDesc = getJustFileName(sourceURI.getPath());
+            if (sourceDesc.startsWith("slide")) {
+                sourceDesc += "_";
+            } else {
+                sourceDesc = "";
+            }
+        } else {
+            sourceDesc = "";
+        }
+        if (rel.getTargetMode() != TargetMode.INTERNAL) {
+            return;
+        }
+            PackagePart target;
+
+            try {
+                target = source.getRelatedPart(rel);
+            } catch (IllegalArgumentException ex) {
+                return;
+            }
+
+            String type = rel.getRelationshipType();
+            if (RELATION_OLE_OBJECT.equals(type)
+                    && TYPE_OLE_OBJECT.equals(target.getContentType())) {
+                handleEmbeddedOLE(target, handler, sourceDesc + rel.getId(), parentMetadata);
+            } else if (RELATION_AUDIO.equals(type)
+                    || RELATION_IMAGE.equals(type)
+                    || RELATION_PACKAGE.equals(type)
+                    || RELATION_OLE_OBJECT.equals(type)) {
+                handleEmbeddedFile(target, handler, sourceDesc + rel.getId());
+            } else if (RELATION_MACRO.equals(type)) {
+                handleMacros(target, handler);
+            }
+        }
+
+
+
+
     /**
      * Handles an embedded OLE object in the document
      */
-    private void handleEmbeddedOLE(PackagePart part, ContentHandler handler, String rel)
+    private void handleEmbeddedOLE(PackagePart part, ContentHandler handler, String rel, Metadata parentMetadata)
             throws IOException, SAXException {
         // A POIFSFileSystem needs to be at least 3 blocks big to be valid
         if (part.getSize() >= 0 && part.getSize() < 512 * 3) {
@@ -241,8 +258,15 @@ public abstract class AbstractOOXMLExtractor implements OOXMLExtractor {
             return;
         }
 
+        InputStream is = part.getInputStream();
         // Open the POIFS (OLE2) structure and process
-        POIFSFileSystem fs = new POIFSFileSystem(part.getInputStream());
+        POIFSFileSystem fs = null;
+        try {
+            fs = new POIFSFileSystem(part.getInputStream());
+        } catch (Exception e) {
+            EmbeddedDocumentUtil.recordEmbeddedStreamException(e, parentMetadata);
+            return;
+        }
         TikaInputStream stream = null;
         try {
             Metadata metadata = new Metadata();
@@ -296,6 +320,8 @@ public abstract class AbstractOOXMLExtractor implements OOXMLExtractor {
             // There was no CONTENTS entry, so skip this part
         } catch (Ole10NativeException e) {
             // Could not process an OLE 1.0 entry, so skip this part
+        } catch (IOException e ) {
+            EmbeddedDocumentUtil.recordEmbeddedStreamException(e, parentMetadata);
         } finally {
             if (fs != null) {
                 fs.close();
@@ -370,7 +396,7 @@ public abstract class AbstractOOXMLExtractor implements OOXMLExtractor {
      * @param bodyPart
      * @return
      */
-    protected Map<String, String> loadLinkedRelationships(PackagePart bodyPart, boolean includeInternal) {
+    protected Map<String, String> loadLinkedRelationships(PackagePart bodyPart, boolean includeInternal, Metadata metadata) {
         Map<String, String> linkedRelationships = new HashMap<>();
         try {
             PackageRelationshipCollection prc = bodyPart.getRelationshipsByType(XWPFRelation.HYPERLINK.getRelation());
@@ -415,6 +441,7 @@ public abstract class AbstractOOXMLExtractor implements OOXMLExtractor {
             }
 
         } catch (InvalidFormatException e) {
+            EmbeddedDocumentUtil.recordEmbeddedStreamException(e, metadata);
         }
         return linkedRelationships;
     }
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/OOXMLExtractorFactory.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/OOXMLExtractorFactory.java
index 30ed1eca6..8fde990e7 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/OOXMLExtractorFactory.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/OOXMLExtractorFactory.java
@@ -106,11 +106,11 @@ public class OOXMLExtractorFactory {
                 extractor = new XSSFExcelExtractorDecorator(
                         context, (XSSFEventBasedExcelExtractor) poiExtractor, locale);
             } else if (poiExtractor instanceof XWPFEventBasedWordExtractor) {
-                extractor = new SXWPFWordExtractorDecorator(context,
+                extractor = new SXWPFWordExtractorDecorator(metadata, context,
                         (XWPFEventBasedWordExtractor) poiExtractor);
                 metadata.add("X-Parsed-By", XWPFEventBasedWordExtractor.class.getSimpleName());
             } else if (poiExtractor instanceof XSLFEventBasedPowerPointExtractor) {
-                extractor = new SXSLFPowerPointExtractorDecorator(context,
+                extractor = new SXSLFPowerPointExtractorDecorator(metadata, context,
                         (XSLFEventBasedPowerPointExtractor) poiExtractor);
                 metadata.add("X-Parsed-By", XSLFEventBasedPowerPointExtractor.class.getSimpleName());
             } else if (document == null) {
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java
index a7de7804f..188e41070 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java
@@ -35,6 +35,7 @@ import org.apache.poi.openxml4j.opc.TargetMode;
 import org.apache.poi.xslf.extractor.XSLFPowerPointExtractor;
 import org.apache.poi.xslf.usermodel.XSLFRelation;
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.metadata.Metadata;
 import org.apache.tika.parser.ParseContext;
 import org.apache.tika.parser.microsoft.ooxml.xslf.XSLFEventBasedPowerPointExtractor;
 import org.apache.tika.sax.EmbeddedContentHandler;
@@ -69,11 +70,13 @@ public class SXSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {
 
     private final OPCPackage opcPackage;
     private final ParseContext context;
+    private final Metadata metadata;
     private PackagePart mainDocument = null;
     private final CommentAuthors commentAuthors = new CommentAuthors();
 
-    public SXSLFPowerPointExtractorDecorator(ParseContext context, XSLFEventBasedPowerPointExtractor extractor) {
+    public SXSLFPowerPointExtractorDecorator(Metadata metadata, ParseContext context, XSLFEventBasedPowerPointExtractor extractor) {
         super(context, extractor);
+        this.metadata = metadata;
         this.context = context;
         this.opcPackage = extractor.getPackage();
         for (String contentType : MAIN_STORY_PART_RELATIONS) {
@@ -152,7 +155,7 @@ public class SXSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {
     }
 
     private void handleSlidePart(PackagePart slidePart, XHTMLContentHandler xhtml) throws IOException, SAXException {
-        Map<String, String> linkedRelationships = loadLinkedRelationships(slidePart, false);
+        Map<String, String> linkedRelationships = loadLinkedRelationships(slidePart, false, metadata);
 
 //        Map<String, String> hyperlinks = loadHyperlinkRelationships(packagePart);
         xhtml.startElement("div", "class", "slide-content");
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java
index 8f9fbf5e6..bba83eb2c 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java
@@ -32,6 +32,7 @@ import org.apache.poi.openxml4j.opc.PackageRelationshipCollection;
 import org.apache.poi.xwpf.usermodel.XWPFNumbering;
 import org.apache.poi.xwpf.usermodel.XWPFRelation;
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.metadata.Metadata;
 import org.apache.tika.parser.ParseContext;
 import org.apache.tika.parser.microsoft.OfficeParserConfig;
 import org.apache.tika.parser.microsoft.ooxml.xwpf.XWPFEventBasedWordExtractor;
@@ -77,11 +78,13 @@ public class SXWPFWordExtractorDecorator extends AbstractOOXMLExtractor {
 
     private final OPCPackage opcPackage;
     private final ParseContext context;
+    private final Metadata metadata;
 
 
-    public SXWPFWordExtractorDecorator(ParseContext context,
+    public SXWPFWordExtractorDecorator(Metadata metadata, ParseContext context,
                                        XWPFEventBasedWordExtractor extractor) {
         super(context, extractor);
+        this.metadata = metadata;
         this.context = context;
         this.opcPackage = extractor.getPackage();
     }
@@ -159,7 +162,7 @@ public class SXWPFWordExtractorDecorator extends AbstractOOXMLExtractor {
     private void handlePart(PackagePart packagePart, XWPFStylesShim styles,
                             XWPFListManager listManager, XHTMLContentHandler xhtml) throws IOException, SAXException {
 
-        Map<String, String> linkedRelationships = loadLinkedRelationships(packagePart, true);
+        Map<String, String> linkedRelationships = loadLinkedRelationships(packagePart, true, metadata);
         try (InputStream stream = packagePart.getInputStream()) {
             context.getSAXParser().parse(
                     new CloseShieldInputStream(stream),
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/pdf/AbstractPDF2XHTML.java b/tika-parsers/src/main/java/org/apache/tika/parser/pdf/AbstractPDF2XHTML.java
index 0688e007e..ead75db84 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/pdf/AbstractPDF2XHTML.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/pdf/AbstractPDF2XHTML.java
@@ -249,7 +249,7 @@ class AbstractPDF2XHTML extends PDFTextStripper {
             //skip silently
             return;
         }
-        
+
         fileName = (fileName == null || "".equals(fileName.trim())) ? unicodeFileName : fileName;
         fileName = (fileName == null || "".equals(fileName.trim())) ? displayName : fileName;
 
@@ -261,23 +261,31 @@ class AbstractPDF2XHTML extends PDFTextStripper {
         embeddedMetadata.set(TikaCoreProperties.EMBEDDED_RESOURCE_TYPE,
                 TikaCoreProperties.EmbeddedResourceType.ATTACHMENT.toString());
         embeddedMetadata.set(TikaCoreProperties.ORIGINAL_RESOURCE_NAME, fileName);
-        if (embeddedDocumentExtractor.shouldParseEmbedded(embeddedMetadata)) {
-            TikaInputStream stream = null;
-            try {
-                stream = TikaInputStream.get(file.createInputStream());
-                embeddedDocumentExtractor.parseEmbedded(
-                        stream,
-                        new EmbeddedContentHandler(xhtml),
-                        embeddedMetadata, false);
-
-                attributes.addAttribute("", "class", "class", "CDATA", "embedded");
-                attributes.addAttribute("", "id", "id", "CDATA", fileName);
-                xhtml.startElement("div", attributes);
-                xhtml.endElement("div");
-            } finally {
-                IOUtils.closeQuietly(stream);
-            }
+        if (!embeddedDocumentExtractor.shouldParseEmbedded(embeddedMetadata)) {
+            return;
         }
+        TikaInputStream stream = null;
+        try {
+            stream = TikaInputStream.get(file.createInputStream());
+        } catch (IOException e) {
+            //store this exception in the parent's metadata
+            EmbeddedDocumentUtil.recordEmbeddedStreamException(e, metadata);
+            return;
+        }
+        try {
+            embeddedDocumentExtractor.parseEmbedded(
+                    stream,
+                    new EmbeddedContentHandler(xhtml),
+                    embeddedMetadata, false);
+
+            attributes.addAttribute("", "class", "class", "CDATA", "embedded");
+            attributes.addAttribute("", "id", "id", "CDATA", fileName);
+            xhtml.startElement("div", attributes);
+            xhtml.endElement("div");
+        } finally {
+            IOUtils.closeQuietly(stream);
+        }
+
     }
 
     void handleCatchableIOE(IOException e) throws IOException {
@@ -598,13 +606,23 @@ class AbstractPDF2XHTML extends PDFTextStripper {
         if (pdxfa != null) {
             //if successful, return
             XFAExtractor xfaExtractor = new XFAExtractor();
-            try (InputStream is = new BufferedInputStream(
-                    new ByteArrayInputStream(pdxfa.getBytes()))) {
-                xfaExtractor.extract(is, xhtml, metadata, context);
-                return;
-            } catch (XMLStreamException |IOException e) {
-                //if there was an xml parse exception in xfa, try the AcroForm
-                EmbeddedDocumentUtil.recordException(e, metadata);
+            InputStream is = null;
+            try {
+                is = new BufferedInputStream(
+                        new ByteArrayInputStream(pdxfa.getBytes()));
+            } catch (IOException e) {
+                EmbeddedDocumentUtil.recordEmbeddedStreamException(e, metadata);
+            }
+            if (is != null) {
+                try {
+                    xfaExtractor.extract(is, xhtml, metadata, context);
+                    return;
+                } catch (XMLStreamException e) {
+                    //if there was an xml parse exception in xfa, try the AcroForm
+                    EmbeddedDocumentUtil.recordException(e, metadata);
+                } finally {
+                    IOUtils.closeQuietly(is);
+                }
             }
         }
 
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDF2XHTML.java b/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDF2XHTML.java
index f3f28490c..ba5af757f 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDF2XHTML.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDF2XHTML.java
@@ -17,7 +17,6 @@
 package org.apache.tika.parser.pdf;
 
 import java.awt.image.BufferedImage;
-import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -47,6 +46,7 @@ import org.apache.pdfbox.text.TextPosition;
 import org.apache.pdfbox.tools.imageio.ImageIOUtil;
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.extractor.EmbeddedDocumentUtil;
+import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaCoreProperties;
 import org.apache.tika.parser.ParseContext;
@@ -180,6 +180,9 @@ class PDF2XHTML extends AbstractPDF2XHTML {
             } catch (MissingImageReaderException e) {
                 EmbeddedDocumentUtil.recordException(e, metadata);
                 continue;
+            } catch (IOException e) {
+                EmbeddedDocumentUtil.recordEmbeddedStreamException(e, metadata);
+                continue;
             }
 
             if (object == null) {
@@ -257,13 +260,15 @@ class PDF2XHTML extends AbstractPDF2XHTML {
                         try {
                             writeToBuffer(image, extension, buffer);
                         } catch (IOException e) {
-                            EmbeddedDocumentUtil.recordException(e, metadata);
+                            EmbeddedDocumentUtil.recordEmbeddedStreamException(e, metadata);
                             continue;
                         }
-                        embeddedDocumentExtractor.parseEmbedded(
-                                new ByteArrayInputStream(buffer.toByteArray()),
-                                new EmbeddedContentHandler(xhtml),
-                                embeddedMetadata, false);
+                        try (InputStream embeddedIs = TikaInputStream.get(buffer.toByteArray())) {
+                            embeddedDocumentExtractor.parseEmbedded(
+                                    embeddedIs,
+                                    new EmbeddedContentHandler(xhtml),
+                                    embeddedMetadata, false);
+                        }
                     } catch (IOException e) {
                         handleCatchableIOE(e);
                     }
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParser.java
index b48ef29d2..ada4b4452 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParser.java
@@ -43,6 +43,7 @@ import org.apache.pdfbox.pdmodel.PDDocumentInformation;
 import org.apache.pdfbox.pdmodel.common.PDMetadata;
 import org.apache.pdfbox.pdmodel.encryption.AccessPermission;
 import org.apache.pdfbox.pdmodel.encryption.InvalidPasswordException;
+import org.apache.poi.util.IOUtils;
 import org.apache.tika.config.Field;
 import org.apache.tika.exception.EncryptedDocumentException;
 import org.apache.tika.exception.TikaException;
@@ -662,16 +663,25 @@ public class PDFParser extends AbstractParser {
     }
 
     //can return null!
-    private Document loadDOM(PDMetadata pdMetadata, Metadata parentMetadata, ParseContext context) {
+    private Document loadDOM(PDMetadata pdMetadata, Metadata metadata, ParseContext context) {
         if (pdMetadata == null) {
             return null;
         }
-        try (InputStream is = pdMetadata.exportXMPMetadata()) {
+        InputStream is = null;
+        try {
+            try {
+                is = pdMetadata.exportXMPMetadata();
+            } catch (IOException e) {
+                EmbeddedDocumentUtil.recordEmbeddedStreamException(e, metadata);
+                return null;
+            }
             DocumentBuilder documentBuilder = context.getDocumentBuilder();
             documentBuilder.setErrorHandler((ErrorHandler)null);
             return documentBuilder.parse(is);
         } catch (IOException|SAXException|TikaException e) {
-            EmbeddedDocumentUtil.recordException(e, parentMetadata);
+            EmbeddedDocumentUtil.recordException(e, metadata);
+        } finally {
+            IOUtils.closeQuietly(is);
         }
         return null;
 
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/rtf/RTFEmbObjHandler.java b/tika-parsers/src/main/java/org/apache/tika/parser/rtf/RTFEmbObjHandler.java
index dbdc842cb..5e2ab25d9 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/rtf/RTFEmbObjHandler.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/rtf/RTFEmbObjHandler.java
@@ -70,6 +70,7 @@ class RTFEmbObjHandler {
     private StringBuilder sb = new StringBuilder();
     private Metadata metadata;
     private EMB_STATE state = EMB_STATE.NADA;
+
     protected RTFEmbObjHandler(ContentHandler handler, Metadata metadata, ParseContext context) {
         this.handler = handler;
         this.embeddedDocumentUtil = new EmbeddedDocumentUtil(context);
@@ -170,7 +171,7 @@ class RTFEmbObjHandler {
                 byte[] objBytes = objParser.parse(bytes, metadata, unknownFilenameCount);
                 extractObj(objBytes, handler, metadata);
             } catch (IOException e) {
-                //swallow.  If anything goes wrong, ignore.
+                EmbeddedDocumentUtil.recordException(e, metadata);
             }
         } else if (state == EMB_STATE.PICT) {
             String filePath = metadata.get(RTFMetadata.RTF_PICT_META_PREFIX + "wzDescription");
@@ -213,6 +214,8 @@ class RTFEmbObjHandler {
                         stream,
                         new EmbeddedContentHandler(handler),
                         metadata, false);
+            } catch (IOException e) {
+                EmbeddedDocumentUtil.recordEmbeddedStreamException(e, metadata);
             } finally {
                 stream.close();
             }
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/rtf/RTFObjDataParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/rtf/RTFObjDataParser.java
index 6426687af..b878dd246 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/rtf/RTFObjDataParser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/rtf/RTFObjDataParser.java
@@ -36,6 +36,7 @@ import org.apache.poi.poifs.filesystem.NPOIFSFileSystem;
 import org.apache.poi.poifs.filesystem.Ole10Native;
 import org.apache.poi.poifs.filesystem.Ole10NativeException;
 import org.apache.poi.util.IOUtils;
+import org.apache.tika.extractor.EmbeddedDocumentUtil;
 import org.apache.tika.io.EndianUtils;
 import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
@@ -106,11 +107,18 @@ class RTFObjDataParser {
             return embObjBytes;
         } else {
             ByteArrayInputStream embIs = new ByteArrayInputStream(embObjBytes);
-            if (NPOIFSFileSystem.hasPOIFSHeader(embIs)) {
+            boolean hasPoifs = false;
+            try {
+                hasPoifs = NPOIFSFileSystem.hasPOIFSHeader(embIs);
+            } catch (IOException e) {
+                EmbeddedDocumentUtil.recordEmbeddedStreamException(e, metadata);
+                return embObjBytes;
+            }
+            if (hasPoifs) {
                 try {
                     return handleEmbeddedPOIFS(embIs, metadata, unknownFilenameCount);
-                } catch (IOException e) {
-                    //swallow
+                } catch (Exception e) {
+                    EmbeddedDocumentUtil.recordEmbeddedStreamException(e, metadata);
                 }
             }
         }
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/rtf/TextExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/rtf/TextExtractor.java
index 6c86765f4..8ba8961a5 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/rtf/TextExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/rtf/TextExtractor.java
@@ -35,6 +35,7 @@ import java.util.TimeZone;
 
 import org.apache.commons.io.IOUtils;
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.extractor.EmbeddedDocumentUtil;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.Office;
 import org.apache.tika.metadata.OfficeOpenXMLCore;
@@ -1337,7 +1338,11 @@ final class TextExtractor {
         ansiSkip = 0;
 
         if (groupState.objdata == true) {
-            embObjHandler.handleCompletedObject();
+            try {
+                embObjHandler.handleCompletedObject();
+            } catch (TikaException|IOException e) {
+                EmbeddedDocumentUtil.recordException(e, metadata);
+            }
             groupState.objdata = false;
         } else if (groupState.pictDepth > 0) {
             if (groupState.sn == true) {
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java
index b61b484fd..1cadec494 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java
@@ -272,5 +272,16 @@ public class PowerPointParserTest extends TikaTest {
         //TIKA-2130
         XMLResult r = getXML("testPPT_skipBadCompressedObject.ppt");
         assertContains("NASA Human", r.xml);
+        assertEquals(2,
+                r.metadata.getValues(TikaCoreProperties.TIKA_META_EXCEPTION_EMBEDDED_STREAM).length);
+        assertContains("incorrect data check",
+                r.metadata.get(TikaCoreProperties.TIKA_META_EXCEPTION_EMBEDDED_STREAM));
+
+        List<Metadata> metadataList = getRecursiveMetadata("testPPT_skipBadCompressedObject.ppt");
+        assertEquals(2,
+                metadataList.get(0).getValues(TikaCoreProperties.TIKA_META_EXCEPTION_EMBEDDED_STREAM).length);
+        assertContains("incorrect data check",
+                metadataList.get(0).get(TikaCoreProperties.TIKA_META_EXCEPTION_EMBEDDED_STREAM));
     }
+
 }
