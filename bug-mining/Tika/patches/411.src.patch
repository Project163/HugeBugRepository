diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/AbstractPOIFSExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/AbstractPOIFSExtractor.java
index 9707ae592..14c5af41b 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/AbstractPOIFSExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/AbstractPOIFSExtractor.java
@@ -25,6 +25,8 @@ import org.apache.poi.poifs.filesystem.DocumentInputStream;
 import org.apache.poi.poifs.filesystem.Entry;
 import org.apache.poi.poifs.filesystem.Ole10Native;
 import org.apache.poi.poifs.filesystem.Ole10NativeException;
+import org.apache.tika.config.TikaConfig;
+import org.apache.tika.detect.Detector;
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.extractor.EmbeddedDocumentExtractor;
 import org.apache.tika.extractor.ParsingEmbeddedDocumentExtractor;
@@ -38,8 +40,9 @@ import org.apache.tika.sax.XHTMLContentHandler;
 import org.xml.sax.SAXException;
 
 abstract class AbstractPOIFSExtractor {
-
     private final EmbeddedDocumentExtractor extractor;
+    private TikaConfig tikaConfig;
+    private Detector detector;
 
     protected AbstractPOIFSExtractor(ParseContext context) {
         EmbeddedDocumentExtractor ex = context.get(EmbeddedDocumentExtractor.class);
@@ -49,6 +52,20 @@ abstract class AbstractPOIFSExtractor {
         } else {
             this.extractor = ex;
         }
+        
+        tikaConfig = context.get(TikaConfig.class);
+        detector = context.get(Detector.class);
+    }
+    
+    protected Detector getDetector() {
+       if (detector != null) return detector;
+       
+       if (tikaConfig == null) {
+          tikaConfig = TikaConfig.getDefaultConfig();
+       }
+       
+       detector = tikaConfig.getDetector();
+       return detector;
     }
     
     protected void handleEmbeddedResource(TikaInputStream resource, String filename,
@@ -116,6 +133,22 @@ abstract class AbstractPOIFSExtractor {
                 } catch (Ole10NativeException ex) {
                     // Not a valid OLE10Native record, skip it
                 }
+            } else if (type == POIFSDocumentType.COMP_OBJ) {
+                try {
+                   // Grab the contents and process
+                   DocumentEntry contentsEntry = (DocumentEntry)dir.getEntry("CONTENTS");
+                   DocumentInputStream inp = new DocumentInputStream(contentsEntry);
+                   byte[] contents = new byte[contentsEntry.getSize()];
+                   inp.readFully(contents);
+                   embedded = TikaInputStream.get(contents);
+                   
+                   // Try to work out what it is
+                   MediaType mediaType = getDetector().detect(embedded, new Metadata());
+                   metadata.set(Metadata.CONTENT_TYPE, mediaType.getType().toString());
+                   metadata.set(Metadata.RESOURCE_NAME_KEY, dir.getName() + '.' + type.getExtension());
+                } catch(Exception e) {
+                   throw new TikaException("Invalid embedded resource", e);
+                }
             } else {
                 metadata.set(Metadata.CONTENT_TYPE, type.getType().toString());
                 metadata.set(Metadata.RESOURCE_NAME_KEY, dir.getName() + '.' + type.getExtension());
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OfficeParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OfficeParser.java
index 0315f6a0b..9d23c6740 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OfficeParser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OfficeParser.java
@@ -76,7 +76,8 @@ public class OfficeParser extends AbstractParser {
 
     public enum POIFSDocumentType {
         WORKBOOK("xls", MediaType.application("vnd.ms-excel")),
-        OLE10_NATIVE("ole", MediaType.application("x-tika-msoffice-embedded")),
+        OLE10_NATIVE("ole", POIFSContainerDetector.OLE10_NATIVE),
+        COMP_OBJ("ole", POIFSContainerDetector.COMP_OBJ),
         WORDDOCUMENT("doc", MediaType.application("msword")),
         UNKNOWN("unknown", MediaType.application("x-tika-msoffice")),
         ENCRYPTED("ole", MediaType.application("x-tika-ooxml-protected")),
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/POIFSContainerDetector.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/POIFSContainerDetector.java
index fc65e5eb3..f30fbc29b 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/POIFSContainerDetector.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/POIFSContainerDetector.java
@@ -22,7 +22,9 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.nio.channels.FileChannel;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Set;
 import java.util.regex.Pattern;
 
@@ -58,6 +60,11 @@ public class POIFSContainerDetector implements Detector {
     private static final byte [] STAR_DRAW = new byte [] {
         0x53, 0x74, 0x61, 0x72, 0x44, 0x72, 0x61, 0x77
     };
+    
+    /** An ASCII String "Quill96" for Works Files */
+    private static final byte [] WORKS_QUILL96 = new byte[] {
+        0x51, 0x75, 0x69, 0x6c, 0x6c, 0x39, 0x36
+    };
 
     /** The OLE base file format */
     public static final MediaType OLE = application("x-tika-msoffice");
@@ -65,8 +72,14 @@ public class POIFSContainerDetector implements Detector {
     /** The protected OOXML base file format */
     public static final MediaType OOXML_PROTECTED = application("x-tika-ooxml-protected");
     
+    /** General embedded document type within an OLE2 container */
+    public static final MediaType GENERAL_EMBEDDED = application("x-tika-msoffice-embedded");
+    
     /** An OLE10 Native embedded document within another OLE2 document */
-    public static final MediaType OLE10_NATIVE = application("x-tika-msoffice-embedded");
+    public static final MediaType OLE10_NATIVE = new MediaType(GENERAL_EMBEDDED, format("ole10_native")); 
+    
+    /** Some other kind of embedded document, in a CompObj container within another OLE2 document */
+    public static final MediaType COMP_OBJ = new MediaType(GENERAL_EMBEDDED, format("comp_obj"));
 
     /** Microsoft Excel */
     public static final MediaType XLS = application("vnd.ms-excel");
@@ -110,6 +123,12 @@ public class POIFSContainerDetector implements Detector {
     /** Regexp for matching the MPP Project Data stream */
     private static final Pattern mppDataMatch = Pattern.compile("\\s\\s\\s\\d+");
     
+    private static Map<String,String> format(String format) {
+       Map<String, String> params = new HashMap<String, String>();
+       params.put("format", format);
+       return params;
+    }
+    
     public MediaType detect(InputStream input, Metadata metadata)
              throws IOException {
         // Check if we have access to the document
@@ -203,7 +222,7 @@ public class POIFSContainerDetector implements Detector {
                      */
                     return OLE;
                 } else {
-                    return processStarDrawOrImpress(root);
+                    return processCompObjFormatType(root);
                 }
             } else if (names.contains("WksSSWorkBook")) {
                 // This check has to be before names.contains("Workbook")
@@ -240,8 +259,20 @@ public class POIFSContainerDetector implements Detector {
                // Newer Works files
                return WPS;
             } else if (names.contains("CONTENTS") && names.contains("\u0001CompObj")) {
-               // Normally an older Works file
-               return WPS;
+               // CompObj is a general kind of OLE2 embedding, but this may be an old Works file
+               // If we have the Directory, check
+               if (root != null) {
+                  MediaType type = processCompObjFormatType(root);
+                  if (type == WPS) {
+                     return WPS;
+                  } else {
+                     // Assume it's a general CompObj embedded resource
+                     return COMP_OBJ;
+                  }
+               } else {
+                  // Assume it's a general CompObj embedded resource
+                  return COMP_OBJ;
+               }
             } else if (names.contains("CONTENTS")) {
                // CONTENTS without SPELLING nor CompObj normally means some sort
                //  of embedded non-office file inside an OLE2 document
@@ -276,7 +307,13 @@ public class POIFSContainerDetector implements Detector {
         return OLE;
     }
 
-    private static MediaType processStarDrawOrImpress(DirectoryEntry root) {
+    /**
+     * Is this one of the kinds of formats which uses CompObj to
+     *  store all of their data, eg Star Draw, Star Impress or
+     *  (older) Works?
+     * If not, it's likely an embedded resource
+     */
+    private static MediaType processCompObjFormatType(DirectoryEntry root) {
         try {
             Entry e = root.getEntry("\u0001CompObj");
             if (e != null && e.isDocumentEntry()) {
@@ -292,6 +329,8 @@ public class POIFSContainerDetector implements Detector {
                     return SDA;
                 } else if (arrayContains(bytes, STAR_IMPRESS)) {
                     return SDD;
+                } else if (arrayContains(bytes, WORKS_QUILL96)) {
+                   return WPS;
                 }
             } 
         } catch (Exception e) {
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/POIContainerExtractionTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/POIContainerExtractionTest.java
index 19819b353..ab4af8b87 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/POIContainerExtractionTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/POIContainerExtractionTest.java
@@ -230,6 +230,20 @@ public class POIContainerExtractionTest extends AbstractPOIContainerExtractionTe
        // TODO
        
        
+       // Word, with a non-office file (PDF)
+       handler = process("testWORD_embedded_pdf.doc", extractor, true);
+       assertEquals(2, handler.filenames.size());
+       assertEquals(2, handler.mediaTypes.size());
+       
+       assertEquals("image1.emf", handler.filenames.get(0));
+       //assertEquals("_1402837031.pdf", handler.filenames.get(1)); // TODO Fix, TIKA-48
+       assertEquals("_1402837031.ole", handler.filenames.get(1)); // TODO Fix, TIKA-48
+
+       assertEquals(TYPE_EMF, handler.mediaTypes.get(0)); // Icon of embedded pdf
+       assertEquals(TYPE_PDF, handler.mediaTypes.get(1)); // The embedded PDF itself
+       
+       
+       
        // Outlook with a text file and a word document
        handler = process("testMSG_att_doc.msg", extractor, true);
        assertEquals(2, handler.filenames.size());
