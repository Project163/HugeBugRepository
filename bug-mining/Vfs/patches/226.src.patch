diff --git a/commons-vfs2/src/test/java/org/apache/commons/vfs2/provider/res/test/ResSchemeTestCase.java b/commons-vfs2/src/test/java/org/apache/commons/vfs2/provider/res/test/ResSchemeTestCase.java
index dfdf323e..d24525ce 100644
--- a/commons-vfs2/src/test/java/org/apache/commons/vfs2/provider/res/test/ResSchemeTestCase.java
+++ b/commons-vfs2/src/test/java/org/apache/commons/vfs2/provider/res/test/ResSchemeTestCase.java
@@ -17,25 +17,75 @@
 
 package org.apache.commons.vfs2.provider.res.test;
 
+import java.net.URI;
+import java.net.URISyntaxException;
+
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.VFS;
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 
 public class ResSchemeTestCase {
 
     @Test
-    public void test() throws FileSystemException {
+    public void test_resolveFile_String() throws FileSystemException {
         Assert.assertTrue(VFS.getManager().resolveFile("res:test.properties").exists());
     }
 
     @Test(expected = FileSystemException.class)
-    public void testStartingSlash() throws FileSystemException {
+    public void test_resolveFile_String_S() throws FileSystemException {
         Assert.assertTrue(VFS.getManager().resolveFile("res:/test.properties").exists());
     }
 
     @Test(expected = FileSystemException.class)
-    public void testStartingSlashSlash() throws FileSystemException {
+    public void test_resolveFile_String_SS() throws FileSystemException {
         Assert.assertTrue(VFS.getManager().resolveFile("res://test.properties").exists());
     }
+
+    @Test(expected = FileSystemException.class)
+    public void test_resolveFile_String_SSS() throws FileSystemException {
+        Assert.assertTrue(VFS.getManager().resolveFile("res://stest.properties").exists());
+    }
+
+    @Test
+    public void test_resolveFile_URI() throws FileSystemException, URISyntaxException {
+        Assert.assertTrue(VFS.getManager().resolveFile(new URI("res:test.properties")).exists());
+    }
+
+    @Test(expected = FileSystemException.class)
+    public void test_resolveFile_URI_S() throws FileSystemException, URISyntaxException {
+        Assert.assertTrue(VFS.getManager().resolveFile(new URI("res:/test.properties")).exists());
+    }
+
+    @Test(expected = FileSystemException.class)
+    public void test_resolveFile_URI_SS() throws FileSystemException, URISyntaxException {
+        Assert.assertTrue(VFS.getManager().resolveFile(new URI("res://test.properties")).exists());
+    }
+
+    @Test(expected = FileSystemException.class)
+    public void test_resolveFile_URI_SSS() throws FileSystemException, URISyntaxException {
+        Assert.assertTrue(VFS.getManager().resolveFile(new URI("res://stest.properties")).exists());
+    }
+
+    @Test
+    @Ignore("It seems like this should be made to work; see VFS-444.")
+    public void test_resolveURI_String() throws FileSystemException {
+        Assert.assertTrue(VFS.getManager().resolveURI("res:test.properties").isFile());
+    }
+
+    @Test
+    public void test_resolveURI_String_S() throws FileSystemException {
+        Assert.assertTrue(VFS.getManager().resolveURI("res:/test.properties").isFile());
+    }
+
+    @Test
+    public void test_resolveURI_String_SS() throws FileSystemException {
+        Assert.assertTrue(VFS.getManager().resolveURI("res://test.properties").isFile());
+    }
+
+    @Test
+    public void test_resolveURI_String_SSS() throws FileSystemException {
+        Assert.assertTrue(VFS.getManager().resolveURI("res:///test.properties").isFile());
+    }
 }
