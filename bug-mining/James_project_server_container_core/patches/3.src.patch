diff --git a/server/container/core/pom.xml b/server/container/core/pom.xml
index 98b8a55174..eefd411620 100644
--- a/server/container/core/pom.xml
+++ b/server/container/core/pom.xml
@@ -48,7 +48,10 @@
             <groupId>org.apache.james</groupId>
             <artifactId>james-server-lifecycle-api</artifactId>
         </dependency>
-
+        <dependency>
+            <groupId>org.apache.james</groupId>
+            <artifactId>james-server-util</artifactId>
+        </dependency>
         <dependency>
             <groupId>org.apache.james</groupId>
             <artifactId>apache-mailet-api</artifactId>
diff --git a/server/container/core/src/main/java/org/apache/james/core/MimeMessageInputStreamSource.java b/server/container/core/src/main/java/org/apache/james/core/MimeMessageInputStreamSource.java
index 8bcaa3e77c..f1e1b6dfae 100644
--- a/server/container/core/src/main/java/org/apache/james/core/MimeMessageInputStreamSource.java
+++ b/server/container/core/src/main/java/org/apache/james/core/MimeMessageInputStreamSource.java
@@ -81,16 +81,15 @@ public class MimeMessageInputStreamSource extends MimeMessageSource implements D
             IOUtils.copy(in, out);
             sourceId = key;
         } catch (IOException ioe) {
+            File file = out.getFile();
+            if (file != null) {
+                FileUtils.deleteQuietly(file);
+            }
             throw new MessagingException("Unable to retrieve the data: " + ioe.getMessage(), ioe);
         } finally {
             try {
                 if (out != null) {
                     out.close();
-
-                    File file = out.getFile();
-                    if (file != null) {
-                        FileUtils.forceDelete(file);
-                    }
                 }
             } catch (IOException ioe) {
                 // Ignored - logging unavailable to log this non-fatal error.
diff --git a/server/container/core/src/test/java/org/apache/james/core/MimeMessageInputStreamSourceTest.java b/server/container/core/src/test/java/org/apache/james/core/MimeMessageInputStreamSourceTest.java
new file mode 100644
index 0000000000..009d4bf0f0
--- /dev/null
+++ b/server/container/core/src/test/java/org/apache/james/core/MimeMessageInputStreamSourceTest.java
@@ -0,0 +1,54 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+package org.apache.james.core;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import java.io.IOException;
+
+import javax.mail.MessagingException;
+
+import org.apache.james.util.ZeroedInputStream;
+import org.junit.After;
+import org.junit.Test;
+
+public class MimeMessageInputStreamSourceTest {
+
+    private static final int _1M = 1024*1024;
+    private static final int _10KB = 10*1024;
+    private MimeMessageInputStreamSource testee;
+
+    @After
+    public void tearDown() {
+        testee.dispose();
+    }
+    
+    @Test
+    public void streamWith1MBytesShouldBeReadable() throws MessagingException, IOException {
+        testee = new MimeMessageInputStreamSource("myKey", new ZeroedInputStream(_1M));
+        assertThat(testee.getInputStream()).hasContentEqualTo(new ZeroedInputStream(_1M));
+    }
+    
+    @Test
+    public void streamWith10KBytesShouldBeReadable() throws MessagingException, IOException {
+        testee = new MimeMessageInputStreamSource("myKey", new ZeroedInputStream(_10KB));
+        assertThat(testee.getInputStream()).hasContentEqualTo(new ZeroedInputStream(_10KB));
+    }
+    
+}
