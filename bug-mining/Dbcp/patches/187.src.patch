diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 8125b840..c8f5ae1e 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -86,7 +86,7 @@ The <action> type attribute can be add,update,fix,remove.
       <action issue="DBCP-577" dev="ggregory" type="update" due-to="Arturo Bernal">
         Simplify test assertions #100. 
       </action>
-      <action issue="DBCP-573" dev="ggregory" type="update" due-to="Réda Housni Alaoui">
+      <action issue="DBCP-573" dev="ggregory" type="update" due-to="Réda Housni Alaoui, Gary Gregory">
         DataSource implementations do not implement Wrapper interface correctly #93.
       </action>
       <!-- UPDATES -->
diff --git a/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java b/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java
index ca87b31d..6517242e 100644
--- a/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java
+++ b/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java
@@ -1479,7 +1479,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
 
     @Override
     public boolean isWrapperFor(final Class<?> iface) throws SQLException {
-        return iface.isInstance(this);
+        return iface != null && iface.isInstance(this);
     }
 
     private void jmxRegister() {
@@ -2440,10 +2440,9 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
     }
 
     @Override
-    @SuppressWarnings("unchecked")
     public <T> T unwrap(final Class<T> iface) throws SQLException {
         if (isWrapperFor(iface)) {
-            return (T) this;
+            return iface.cast(this);
         }
         throw new SQLException(this + " is not a wrapper for " + iface);
     }
diff --git a/src/main/java/org/apache/commons/dbcp2/PoolingDataSource.java b/src/main/java/org/apache/commons/dbcp2/PoolingDataSource.java
index 8653454c..d3dbc954 100644
--- a/src/main/java/org/apache/commons/dbcp2/PoolingDataSource.java
+++ b/src/main/java/org/apache/commons/dbcp2/PoolingDataSource.java
@@ -108,14 +108,13 @@ public class PoolingDataSource<C extends Connection> implements DataSource, Auto
     /* JDBC_4_ANT_KEY_BEGIN */
     @Override
     public boolean isWrapperFor(final Class<?> iface) throws SQLException {
-        return iface.isInstance(this);
+        return iface != null && iface.isInstance(this);
     }
 
     @Override
-    @SuppressWarnings("unchecked")
     public <T> T unwrap(final Class<T> iface) throws SQLException {
         if (isWrapperFor(iface)) {
-            return (T) this;
+            return iface.cast(this);
         }
         throw new SQLException(this + " is not a wrapper for " + iface);
     }
diff --git a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java
index 5732bf40..16950137 100644
--- a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java
+++ b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java
@@ -1054,12 +1054,16 @@ public class TestBasicDataSource extends TestConnectionPool {
     public void testIsWrapperFor() throws Exception {
         assertTrue(ds.isWrapperFor(BasicDataSource.class));
         assertTrue(ds.isWrapperFor(AutoCloseable.class));
+        assertFalse(ds.isWrapperFor(String.class));
+        assertFalse(ds.isWrapperFor(null));
     }
 
     @Test
     public void testUnwrap() throws Exception {
         assertSame(ds.unwrap(BasicDataSource.class), ds);
         assertSame(ds.unwrap(AutoCloseable.class), ds);
+        assertThrows(SQLException.class, () -> ds.unwrap(String.class));
+        assertThrows(SQLException.class, () -> ds.unwrap(null));
     }
 }
 
diff --git a/src/test/java/org/apache/commons/dbcp2/TestPoolingDataSource.java b/src/test/java/org/apache/commons/dbcp2/TestPoolingDataSource.java
index c7ea83d4..310fbb41 100644
--- a/src/test/java/org/apache/commons/dbcp2/TestPoolingDataSource.java
+++ b/src/test/java/org/apache/commons/dbcp2/TestPoolingDataSource.java
@@ -18,13 +18,17 @@
 package org.apache.commons.dbcp2;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertSame;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 import java.sql.Connection;
+import java.sql.SQLException;
 import java.util.Properties;
+
 import org.apache.commons.pool2.impl.GenericObjectPool;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
@@ -204,11 +208,15 @@ public class TestPoolingDataSource extends TestConnectionPool {
     public void testIsWrapperFor() throws Exception {
         assertTrue(ds.isWrapperFor(PoolingDataSource.class));
         assertTrue(ds.isWrapperFor(AutoCloseable.class));
+        assertFalse(ds.isWrapperFor(String.class));
+        assertFalse(ds.isWrapperFor(null));
     }
 
     @Test
     public void testUnwrap() throws Exception {
         assertSame(ds.unwrap(PoolingDataSource.class), ds);
         assertSame(ds.unwrap(AutoCloseable.class), ds);
+        assertThrows(SQLException.class, () -> ds.unwrap(String.class));
+        assertThrows(SQLException.class, () -> ds.unwrap(null));
     }
 }
