diff --git a/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/FetcherStreamFactory.java b/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/FetcherStreamFactory.java
index dc1a00a13..e410f5243 100644
--- a/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/FetcherStreamFactory.java
+++ b/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/FetcherStreamFactory.java
@@ -23,6 +23,8 @@ import javax.ws.rs.core.MultivaluedMap;
 import javax.ws.rs.core.UriInfo;
 
 import org.apache.commons.lang3.StringUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.metadata.Metadata;
@@ -31,11 +33,13 @@ import org.apache.tika.pipes.fetcher.FetcherManager;
 import org.apache.tika.pipes.fetcher.RangeFetcher;
 
 /**
- * This class looks for &quot;fileUrl&quot; in the http header.  If it is not null
- * and not empty, this will return a new TikaInputStream from the URL.
+ * This class looks for &quot;fetcherName&quot; in the http header.  If it is not null
+ * and not empty, this will return a new TikaInputStream from the fetch key
+ * and the base path as set in the definition of the named fetcher.
  * <p>
- * This is not meant to be used in place of a robust, responsible crawler.  Rather, this
- * is a convenience factory.
+ * Users may also specify the &quot;fetcherName&quote; and &quot;fetchKey&quot; in
+ * query parameters with in the request.  This is the only option if there are
+ * non-ASCII characters in the &quot;fetcherName&quote; or &quot;fetchKey&quot;.
  * <p>
  * <em>WARNING:</em> Unless you carefully lock down access to the server,
  * whoever has access to this service will have the read access of the server.
@@ -47,6 +51,8 @@ import org.apache.tika.pipes.fetcher.RangeFetcher;
  */
 public class FetcherStreamFactory implements InputStreamFactory {
 
+    private static final Logger LOG = LoggerFactory.getLogger(FetcherStreamFactory.class);
+
     private final FetcherManager fetcherManager;
 
     public FetcherStreamFactory(FetcherManager fetcherManager) {
@@ -77,6 +83,7 @@ public class FetcherStreamFactory implements InputStreamFactory {
 
         if (!StringUtils.isBlank(fetcherName)) {
             try {
+                LOG.debug("going to fetch '{}' from fetcher: {}", fetchKey, fetcherName);
                 Fetcher fetcher = fetcherManager.getFetcher(fetcherName);
                 if (fetchRangeStart > -1 && fetchRangeEnd > -1) {
                     if (!(fetcher instanceof RangeFetcher)) {
diff --git a/tika-server/tika-server-core/src/test/java/org/apache/tika/server/core/TikaResourceFetcherTest.java b/tika-server/tika-server-core/src/test/java/org/apache/tika/server/core/TikaResourceFetcherTest.java
index 9df85bcd4..3ac76dacc 100644
--- a/tika-server/tika-server-core/src/test/java/org/apache/tika/server/core/TikaResourceFetcherTest.java
+++ b/tika-server/tika-server-core/src/test/java/org/apache/tika/server/core/TikaResourceFetcherTest.java
@@ -107,4 +107,21 @@ public class TikaResourceFetcherTest extends CXFTestBase {
         String xml = getStringFromInputStream((InputStream) response.getEntity());
         assertContains("hello world", xml);
     }
+
+    @Test
+    public void testNonAsciiInQueryParameters() throws Exception {
+        Response response = WebClient.create(endPoint + TIKA_PATH).query("fetcherName", "fsf")
+                .query("fetchKey", "mock/中文.xml").accept("text/xml").put(null);
+        String xml = getStringFromInputStream((InputStream) response.getEntity());
+        assertContains("你好世界", xml);
+    }
+
+    @Test
+    public void testNonAsciiUrlEncodedInQueryParameters() throws Exception {
+        Response response = WebClient.create(endPoint + TIKA_PATH).query("fetcherName", "fsf")
+                .query("fetchKey", "mock/%E4%B8%AD%E6%96%87.xml").accept("text/xml").put(null);
+        String xml = getStringFromInputStream((InputStream) response.getEntity());
+        assertContains("你好世界", xml);
+    }
+
 }
diff --git "a/tika-server/tika-server-core/src/test/resources/test-documents/mock/\344\270\255\346\226\207.xml" "b/tika-server/tika-server-core/src/test/resources/test-documents/mock/\344\270\255\346\226\207.xml"
new file mode 100644
index 000000000..4b9e8b8b9
--- /dev/null
+++ "b/tika-server/tika-server-core/src/test/resources/test-documents/mock/\344\270\255\346\226\207.xml"
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one
+  or more contributor license agreements.  See the NOTICE file
+  distributed with this work for additional information
+  regarding copyright ownership.  The ASF licenses this file
+  to you under the Apache License, Version 2.0 (the
+  "License"); you may not use this file except in compliance
+  with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing,
+  software distributed under the License is distributed on an
+  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  KIND, either express or implied.  See the License for the
+  specific language governing permissions and limitations
+  under the License.
+-->
+
+<mock>
+    <metadata action="add" name="author">Nikolai Lobachevsky</metadata>
+    <metadata action="add" name="title">你好，世界</metadata>
+    <metadata action="add" name="my-key">parsers-value</metadata>
+    <write element="p">Hello world...</write>
+    <write element="p">你好世界</write>
+</mock>
\ No newline at end of file
