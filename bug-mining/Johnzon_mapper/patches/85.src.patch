diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/DynamicMappingGenerator.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/DynamicMappingGenerator.java
index 5e7c5c30..bbbb8f06 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/DynamicMappingGenerator.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/DynamicMappingGenerator.java
@@ -66,14 +66,15 @@ public class DynamicMappingGenerator implements MappingGenerator {
     }
 
     public void flushIfNeeded() {
-        if (this.generator.state == WritingState.WROTE_START_OBJECT) {
+        if (this.generator.state == WritingState.WROTE_START) {
             writeEnd.run();
             this.generator.state = WritingState.NONE;
         }
     }
 
     private enum WritingState {
-        NONE, WROTE_START_OBJECT,
+        NONE,
+        WROTE_START,
         DONT_WRITE_END
     }
 
@@ -81,7 +82,8 @@ public class DynamicMappingGenerator implements MappingGenerator {
         private final JsonGenerator delegate;
         private final Runnable writeStart;
         private final String keyIfNoObject;
-        private WritingState state = WritingState.NONE;
+        private WritingState state = WritingState.NONE; // todo: we need a stack (linkedlist) here to be accurate
+        private int nested = 0;
 
         private InObjectOrPrimitiveJsonGenerator(final JsonGenerator generator, final Runnable writeStart,
                                                  final String keyName) {
@@ -91,184 +93,239 @@ public class DynamicMappingGenerator implements MappingGenerator {
         }
 
         private void ensureStart() {
-            if (state == WritingState.WROTE_START_OBJECT) {
+            if (state != WritingState.NONE) {
                 return;
             }
             writeStart.run();
-            state = WritingState.WROTE_START_OBJECT;
+            state = WritingState.WROTE_START;
         }
 
         @Override
         public JsonGenerator writeStartObject() {
-            // return delegate.writeStartObject();
+            if (state == WritingState.NONE) {
+                ensureStart();
+            } else {
+                nested++;
+                delegate.writeStartObject();
+            }
             return this;
         }
 
         @Override
         public JsonGenerator writeStartObject(final String name) {
+            if (state != WritingState.NONE) {
+                nested++;
+            }
             ensureStart();
-            return delegate.writeStartObject(name);
+            delegate.writeStartObject(name);
+            return this;
         }
 
         @Override
         public JsonGenerator writeStartArray() {
+            if (state != WritingState.NONE) {
+                nested++;
+            }
             if (keyIfNoObject != null && state == WritingState.NONE) {
                 state = WritingState.DONT_WRITE_END; // skip writeEnd since the impl will do it
                 return delegate.writeStartArray(keyIfNoObject);
+            } else if (state == WritingState.NONE) {
+                ensureStart();
+                return this;
             }
-            return delegate.writeStartArray();
+            delegate.writeStartArray();
+            return this;
         }
 
         @Override
         public JsonGenerator writeStartArray(final String name) {
+            if (state != WritingState.NONE) {
+                nested++;
+            }
             ensureStart();
-            return delegate.writeStartArray(name);
+            delegate.writeStartArray(name);
+            return this;
         }
 
         @Override
         public JsonGenerator writeKey(final String name) {
             ensureStart();
-            return delegate.writeKey(name);
+            delegate.writeKey(name);
+            return this;
         }
 
         @Override
         public JsonGenerator write(final String name, final JsonValue value) {
             ensureStart();
-            return delegate.write(name, value);
+            delegate.write(name, value);
+            return this;
         }
 
         @Override
         public JsonGenerator write(final String name, final String value) {
             ensureStart();
-            return delegate.write(name, value);
+            delegate.write(name, value);
+            return this;
         }
 
         @Override
         public JsonGenerator write(final String name, final BigInteger value) {
             ensureStart();
-            return delegate.write(name, value);
+            delegate.write(name, value);
+            return this;
         }
 
         @Override
         public JsonGenerator write(final String name, final BigDecimal value) {
             ensureStart();
-            return delegate.write(name, value);
+            delegate.write(name, value);
+            return this;
         }
 
         @Override
         public JsonGenerator write(final String name, final int value) {
             ensureStart();
-            return delegate.write(name, value);
+            delegate.write(name, value);
+            return this;
         }
 
         @Override
         public JsonGenerator write(final String name, final long value) {
             ensureStart();
-            return delegate.write(name, value);
+            delegate.write(name, value);
+            return this;
         }
 
         @Override
         public JsonGenerator write(final String name, final double value) {
             ensureStart();
-            return delegate.write(name, value);
+            delegate.write(name, value);
+            return this;
         }
 
         @Override
         public JsonGenerator write(final String name, final boolean value) {
             ensureStart();
-            return delegate.write(name, value);
+            delegate.write(name, value);
+            return this;
         }
 
         @Override
         public JsonGenerator writeNull(final String name) {
             ensureStart();
-            return delegate.writeNull(name);
+            delegate.writeNull(name);
+            return this;
         }
 
         @Override
         public JsonGenerator writeEnd() {
-            return delegate.writeEnd();
+            if (nested == 0 && state == WritingState.WROTE_START) {
+                state = WritingState.NONE;
+            }
+            if (nested > 0) {
+                nested--;
+            }
+            delegate.writeEnd();
+            return this;
         }
 
         @Override
         public JsonGenerator write(final JsonValue value) {
             if (isWritingPrimitive()) {
                 state = WritingState.DONT_WRITE_END;
-                return delegate.write(keyIfNoObject, value);
+                delegate.write(keyIfNoObject, value);
+                return this;
             }
-            return delegate.write(value);
+            delegate.write(value);
+            return this;
         }
 
         @Override
         public JsonGenerator write(final String value) {
             if (isWritingPrimitive()) {
                 state = WritingState.DONT_WRITE_END;
-                return delegate.write(keyIfNoObject, value);
+                delegate.write(keyIfNoObject, value);
+                return this;
             }
-            return delegate.write(value);
+            delegate.write(value);
+            return this;
         }
 
         @Override
         public JsonGenerator write(final BigDecimal value) {
             if (isWritingPrimitive()) {
                 state = WritingState.DONT_WRITE_END;
-                return delegate.write(keyIfNoObject, value);
+                delegate.write(keyIfNoObject, value);
+                return this;
             }
-            return delegate.write(value);
+            delegate.write(value);
+            return this;
         }
 
         @Override
         public JsonGenerator write(final BigInteger value) {
             if (isWritingPrimitive()) {
                 state = WritingState.DONT_WRITE_END;
-                return delegate.write(keyIfNoObject, value);
+                delegate.write(keyIfNoObject, value);
+                return this;
             }
-            return delegate.write(value);
+            delegate.write(value);
+            return this;
         }
 
         @Override
         public JsonGenerator write(final int value) {
             if (isWritingPrimitive()) {
                 state = WritingState.DONT_WRITE_END;
-                return delegate.write(keyIfNoObject, value);
+                delegate.write(keyIfNoObject, value);
+                return this;
             }
-            return delegate.write(value);
+            delegate.write(value);
+            return this;
         }
 
         @Override
         public JsonGenerator write(final long value) {
             if (isWritingPrimitive()) {
                 state = WritingState.DONT_WRITE_END;
-                return delegate.write(keyIfNoObject, value);
+                delegate.write(keyIfNoObject, value);
+                return this;
             }
-            return delegate.write(value);
+            delegate.write(value);
+            return this;
         }
 
         @Override
         public JsonGenerator write(final double value) {
             if (isWritingPrimitive()) {
                 state = WritingState.DONT_WRITE_END;
-                return delegate.write(keyIfNoObject, value);
+                delegate.write(keyIfNoObject, value);
+                return this;
             }
-            return delegate.write(value);
+            delegate.write(value);
+            return this;
         }
 
         @Override
         public JsonGenerator write(boolean value) {
             if (isWritingPrimitive()) {
                 state = WritingState.DONT_WRITE_END;
-                return delegate.write(keyIfNoObject, value);
+                delegate.write(keyIfNoObject, value);
+                return this;
             }
-            return delegate.write(value);
+            delegate.write(value);
+            return this;
         }
 
         @Override
         public JsonGenerator writeNull() {
             if (isWritingPrimitive()) {
                 state = WritingState.DONT_WRITE_END;
-                return delegate.writeNull(keyIfNoObject);
+                delegate.writeNull(keyIfNoObject);
+                return this;
             }
-            return delegate.writeNull();
+            delegate.writeNull();
+            return this;
         }
 
         private boolean isWritingPrimitive() {
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java
index 1d6119df..ca1c0495 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java
@@ -19,6 +19,7 @@
 package org.apache.johnzon.mapper;
 
 import static java.util.Collections.emptyList;
+import static java.util.stream.Collectors.toList;
 
 import org.apache.johnzon.mapper.internal.JsonPointerTracker;
 import org.apache.johnzon.mapper.util.ArrayUtil;
@@ -33,8 +34,12 @@ import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
+import java.util.Spliterator;
+import java.util.Spliterators;
 import java.util.stream.BaseStream;
+import java.util.stream.StreamSupport;
 
 public class MappingGeneratorImpl implements MappingGenerator {
     private final MapperConfig config;
@@ -401,7 +406,7 @@ public class MappingGeneratorImpl implements MappingGenerator {
             writeArray(type, itemConverter, key, value, ignoredProperties, jsonPointer);
         } else if ((!dynamic && collection) || (dynamic && Iterable.class.isAssignableFrom(type))) {
             writeIterator(itemConverter, key, objectConverter, ignoredProperties, jsonPointer, generator,
-                    Iterable.class.cast(value).iterator());
+                    Iterable.class.cast(value).iterator(), value);
         } else if ((!dynamic && map) || (dynamic && Map.class.isAssignableFrom(type))) {
             generator.writeStartObject(key);
             writeMapBody((Map<?, ?>) value, itemConverter);
@@ -417,10 +422,10 @@ public class MappingGeneratorImpl implements MappingGenerator {
             }
         } else if (BaseStream.class.isAssignableFrom(type)) {
             writeIterator(itemConverter, key, objectConverter, ignoredProperties, jsonPointer, generator,
-                    BaseStream.class.cast(value).iterator());
+                    BaseStream.class.cast(value).iterator(), value);
         } else if (Iterator.class.isAssignableFrom(type)) {
             writeIterator(itemConverter, key, objectConverter, ignoredProperties, jsonPointer, generator,
-                    Iterator.class.cast(value));
+                    Iterator.class.cast(value), value);
         } else {
             if (objectConverter != null) {
                 final DynamicMappingGenerator dynamicMappingGenerator = new DynamicMappingGenerator(this,
@@ -466,7 +471,18 @@ public class MappingGeneratorImpl implements MappingGenerator {
                                final Collection<String> ignoredProperties,
                                final JsonPointerTracker jsonPointer,
                                final JsonGenerator generator,
-                               final Iterator<?> iterator) {
+                               final Iterator<?> iterator,
+                               final Object originalValue) {
+        if (objectConverter != null && objectConverter.isGlobal()) {
+            final List<Object> list = List.class.isInstance(originalValue) ?
+                    List.class.cast(originalValue) :
+                    StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, Spliterator.IMMUTABLE), false)
+                        .collect(toList());
+            objectConverter.writeJson(list, new DynamicMappingGenerator(
+                    this, generator::writeStartArray, generator::writeEnd, key));
+            return;
+        }
+
         int i = 0;
         generator.writeStartArray(key);
         while (iterator.hasNext()) {
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/ObjectConverter.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/ObjectConverter.java
index a468c73a..673585d1 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/ObjectConverter.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/ObjectConverter.java
@@ -37,12 +37,26 @@ public final class ObjectConverter {
 
     public interface Writer<T> extends MapperConverter {
         void writeJson(T instance, MappingGenerator jsonbGenerator);
+
+        // returns true if it is for containers - if any - and not each container item (ex: list)
+        default boolean isGlobal() {
+            return false;
+        }
     }
 
     public interface Reader<T> extends MapperConverter {
         T fromJson(JsonValue jsonValue, Type targetType, MappingParser parser);
+
+        // returns true if it is for containers - if any - and not each container item (ex: list)
+        default boolean isGlobal() {
+            return false;
+        }
     }
 
     public interface Codec<T> extends ObjectConverter.Writer<T>, ObjectConverter.Reader<T> {
+        @Override
+        default boolean isGlobal() {
+            return false;
+        }
     }
 }
