diff --git a/src/main/java/org/apache/commons/configuration/SystemConfiguration.java b/src/main/java/org/apache/commons/configuration/SystemConfiguration.java
index 78614753..6a74d656 100644
--- a/src/main/java/org/apache/commons/configuration/SystemConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration/SystemConfiguration.java
@@ -104,4 +104,14 @@ public class SystemConfiguration extends MapConfiguration
             System.setProperty(key, value);
         }
     }
+
+    /**
+     * {@inheritDoc} This implementation returns a snapshot of the keys in the
+     * system properties. If another thread modifies system properties concurrently,
+     * these changes are not reflected by the iterator returned by this method.
+     */
+    @Override
+    protected Iterator<String> getKeysInternal() {
+        return System.getProperties().stringPropertyNames().iterator();
+    }
 }
diff --git a/src/test/java/org/apache/commons/configuration/TestSystemConfiguration.java b/src/test/java/org/apache/commons/configuration/TestSystemConfiguration.java
index 0500d899..ca767e46 100644
--- a/src/test/java/org/apache/commons/configuration/TestSystemConfiguration.java
+++ b/src/test/java/org/apache/commons/configuration/TestSystemConfiguration.java
@@ -22,7 +22,9 @@ import static org.junit.Assert.assertTrue;
 
 import java.io.File;
 import java.io.IOException;
+import java.util.Iterator;
 import java.util.Properties;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import org.apache.commons.configuration.ex.ConfigurationException;
 import org.apache.commons.configuration.io.FileHandler;
@@ -92,4 +94,61 @@ public class TestSystemConfiguration
         assertEquals("System property not changed", "true",
                 System.getProperty(testProperty));
     }
+
+    /**
+     * Tests an append operation with a system configuration while system
+     * properties are modified from another thread. This is related to
+     * CONFIGURATION-570.
+     */
+    @Test
+    public void testAppendWhileConcurrentAccess() throws InterruptedException
+    {
+        final AtomicBoolean stop = new AtomicBoolean();
+        final String property =
+                SystemConfiguration.class.getName() + ".testProperty";
+        Thread t = new Thread()
+        {
+            @Override
+            public void run()
+            {
+                boolean setValue = true;
+                while (!stop.get())
+                {
+                    if (setValue)
+                    {
+                        System.setProperty(property, "true");
+                    }
+                    else
+                    {
+                        System.clearProperty(property);
+                    }
+                    setValue = !setValue;
+                }
+            }
+        };
+        try
+        {
+            t.start();
+
+            SystemConfiguration config = new SystemConfiguration();
+            PropertiesConfiguration props = new PropertiesConfiguration();
+            props.append(config);
+
+            stop.set(true);
+            t.join();
+            for (Iterator<String> keys = config.getKeys(); keys.hasNext();)
+            {
+                String key = keys.next();
+                if (!property.equals(key))
+                {
+                    assertEquals("Wrong value for " + key,
+                            config.getString(key), props.getString(key));
+                }
+            }
+        }
+        finally
+        {
+            System.clearProperty(property);
+        }
+    }
 }
