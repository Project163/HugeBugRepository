diff --git a/src/main/java/org/apache/commons/jexl/Debugger.java b/src/main/java/org/apache/commons/jexl/Debugger.java
index e66c912d..f764c0fc 100644
--- a/src/main/java/org/apache/commons/jexl/Debugger.java
+++ b/src/main/java/org/apache/commons/jexl/Debugger.java
@@ -19,6 +19,7 @@ package org.apache.commons.jexl;
 import org.apache.commons.jexl.parser.ASTAdditiveNode;
 import org.apache.commons.jexl.parser.ASTAdditiveOperator;
 import org.apache.commons.jexl.parser.ASTAndNode;
+import org.apache.commons.jexl.parser.ASTAmbiguous;
 import org.apache.commons.jexl.parser.ASTArrayAccess;
 import org.apache.commons.jexl.parser.ASTArrayLiteral;
 import org.apache.commons.jexl.parser.ASTAssignment;
@@ -617,4 +618,9 @@ final class Debugger implements ParserVisitor {
     public Object visit(SimpleNode node, Object data) {
         throw new UnsupportedOperationException("unexpected type of node");
     }
+
+    /** {@inheritDoc} */
+    public Object visit(ASTAmbiguous node, Object data) {
+        throw new UnsupportedOperationException("unexpected type of node");
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/org/apache/commons/jexl/Interpreter.java b/src/main/java/org/apache/commons/jexl/Interpreter.java
index e075fe24..39870b9e 100644
--- a/src/main/java/org/apache/commons/jexl/Interpreter.java
+++ b/src/main/java/org/apache/commons/jexl/Interpreter.java
@@ -33,6 +33,7 @@ import org.apache.commons.jexl.parser.JexlNode;
 import org.apache.commons.jexl.parser.ASTAdditiveNode;
 import org.apache.commons.jexl.parser.ASTAdditiveOperator;
 import org.apache.commons.jexl.parser.ASTAndNode;
+import org.apache.commons.jexl.parser.ASTAmbiguous;
 import org.apache.commons.jexl.parser.ASTArrayAccess;
 import org.apache.commons.jexl.parser.ASTArrayLiteral;
 import org.apache.commons.jexl.parser.ASTAssignment;
@@ -1287,4 +1288,14 @@ public class Interpreter implements ParserVisitor {
     public Object visit(SimpleNode node, Object data) {
         throw new UnsupportedOperationException("Not supported yet.");
     }
+
+    /**
+     * Unused, should throw in Parser.
+     * @param node a node
+     * @param data the data
+     * @return does not return
+     */
+    public Object visit(ASTAmbiguous node, Object data) {
+        throw new UnsupportedOperationException("unexpected type of node");
+    }
 }
diff --git a/src/main/java/org/apache/commons/jexl/parser/Parser.jjt b/src/main/java/org/apache/commons/jexl/parser/Parser.jjt
index b85a6d42..7f603e65 100644
--- a/src/main/java/org/apache/commons/jexl/parser/Parser.jjt
+++ b/src/main/java/org/apache/commons/jexl/parser/Parser.jjt
@@ -29,6 +29,7 @@ options
    MULTI=true;
    STATIC=false;
    VISITOR=true;
+   NODE_SCOPE_HOOK=true;
    NODE_CLASS="JexlNode";
    UNICODE_INPUT=true;
 }
@@ -55,6 +56,22 @@ public class Parser extends StringParser
         tree.value = info;
         return tree;
     }
+
+    void jjtreeOpenNodeScope(Node n) {}
+    void jjtreeCloseNodeScope(Node n) throws ParseException {
+      if (n instanceof ASTAmbiguous && n.jjtGetNumChildren() > 0) {
+          Token tok = this.getToken(0);
+          StringBuilder strb = new StringBuilder("Ambiguous statement ");
+          if (tok != null) {
+              strb.append("@");
+              strb.append(tok.beginLine);
+              strb.append(":");
+              strb.append(tok.beginColumn);
+          }
+          strb.append(", missing ';' between expressions");
+         throw new ParseException(strb.toString());
+      }
+    }
 }
 
 PARSER_END(Parser)
@@ -113,7 +130,7 @@ void Block() #Block : {}
 
 void ExpressionStatement() #void : {}
 {
-    Expression() (LOOKAHEAD(2) ";")?
+    Expression() (LOOKAHEAD(1) Expression() #Ambiguous())* (LOOKAHEAD(2) ";")?
 }
 
 
diff --git a/src/test/java/org/apache/commons/jexl/IssuesTest.java b/src/test/java/org/apache/commons/jexl/IssuesTest.java
index b959bf77..7bd815b1 100644
--- a/src/test/java/org/apache/commons/jexl/IssuesTest.java
+++ b/src/test/java/org/apache/commons/jexl/IssuesTest.java
@@ -16,6 +16,7 @@
  */
 
 package org.apache.commons.jexl;
+import org.apache.commons.jexl.parser.ParseException;
 import java.util.Map;
 
 /**
@@ -26,7 +27,7 @@ public class IssuesTest  extends JexlTestCase {
     @Override
     public void setUp() throws Exception {
         // ensure jul logging is only error to avoid warning in silent mode
-        java.util.logging.Logger.getLogger(JexlEngine.class.getName()).setLevel(java.util.logging.Level.SEVERE);
+        //java.util.logging.Logger.getLogger(JexlEngine.class.getName()).setLevel(java.util.logging.Level.SEVERE);
     }
     
     // JEXL-49: blocks not parsed (fixed)
@@ -238,4 +239,31 @@ public class IssuesTest  extends JexlTestCase {
         }
 
     }
+
+    // JEXL-90: ';' is necessary between expressions
+    public void test90() throws Exception {
+        JexlContext ctxt = JexlHelper.createContext();
+        JexlEngine jexl = new JexlEngine();
+        jexl.setSilent(false);
+        jexl.setLenient(false);
+        String[] exprs = {
+            "a=3 b=4",
+            "while(a) while(a)",
+            "1 2",
+            "if (true) 2; 3 {}"
+        };
+        for(int s = 0; s < exprs.length; ++s) {
+            boolean fail = true;
+            try {
+                Script e = jexl.createScript(exprs[s]);
+            }
+            catch(ParseException xany) {
+                // expected to fail in parse
+                fail = false;
+            }
+            if (fail) {
+                fail(exprs[s] + ": Should have failed in parse");
+            }
+        }
+    }
 }
\ No newline at end of file
