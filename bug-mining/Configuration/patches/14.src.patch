diff --git a/conf/testDigesterConfigurationWithProps.xml b/conf/testDigesterConfigurationWithProps.xml
new file mode 100644
index 00000000..2cfb4722
--- /dev/null
+++ b/conf/testDigesterConfigurationWithProps.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+
+<configuration>
+  <properties fileName="test.properties" listDelimiter=";"/>
+</configuration>
diff --git a/src/java/org/apache/commons/configuration/ConfigurationFactory.java b/src/java/org/apache/commons/configuration/ConfigurationFactory.java
index 7d3adcbd..fa6ebbdc 100644
--- a/src/java/org/apache/commons/configuration/ConfigurationFactory.java
+++ b/src/java/org/apache/commons/configuration/ConfigurationFactory.java
@@ -29,6 +29,7 @@ import java.util.Map;
 import org.apache.commons.configuration.plist.PropertyListConfiguration;
 import org.apache.commons.configuration.plist.XMLPropertyListConfiguration;
 import org.apache.commons.digester.AbstractObjectCreationFactory;
+import org.apache.commons.digester.CallMethodRule;
 import org.apache.commons.digester.Digester;
 import org.apache.commons.digester.ObjectCreationFactory;
 import org.apache.commons.digester.Substitutor;
@@ -70,6 +71,9 @@ public class ConfigurationFactory
     /** Constant for the fileName attribute.*/
     private static final String ATTR_FILENAME = "fileName";
 
+    /** Constant for the load method.*/
+    private static final String METH_LOAD = "load";
+
     /** Constant for the default base path (points to actual directory).*/
     private static final String DEF_BASE_PATH = ".";
 
@@ -295,28 +299,28 @@ public class ConfigurationFactory
             digester,
             matchString + "properties",
             new PropertiesConfigurationFactory(),
-            null,
+            METH_LOAD,
             additional);
 
         setupDigesterInstance(
             digester,
             matchString + "plist",
             new PropertyListConfigurationFactory(),
-            null,
+            METH_LOAD,
             additional);
 
         setupDigesterInstance(
             digester,
             matchString + "xml",
             new FileConfigurationFactory(XMLConfiguration.class),
-            null,
+            METH_LOAD,
             additional);
 
         setupDigesterInstance(
             digester,
             matchString + "hierarchicalXml",
             new FileConfigurationFactory(XMLConfiguration.class),
-            null,
+            METH_LOAD,
             additional);
 
         setupDigesterInstance(
@@ -362,7 +366,7 @@ public class ConfigurationFactory
 
         if (method != null)
         {
-            digester.addCallMethod(matchString, method);
+            digester.addRule(matchString, new CallOptionalMethodRule(method));
         }
 
         digester.addSetNext(matchString, "addConfiguration", Configuration.class.getName());
@@ -516,24 +520,6 @@ public class ConfigurationFactory
         {
             FileConfiguration conf = createConfiguration(attributes);
             conf.setBasePath(getBasePath());
-            conf.setFileName(attributes.getValue(ATTR_FILENAME));
-            try
-            {
-                log.info("Trying to load configuration " + conf.getFileName());
-                conf.load();
-            }
-            catch (ConfigurationException cex)
-            {
-                if (attributes.getValue(ATTR_OPTIONAL) != null
-                        && PropertyConverter.toBoolean(attributes.getValue(ATTR_OPTIONAL)).booleanValue())
-                {
-                    log.warn("Could not load optional configuration " + conf.getFileName());
-                }
-                else
-                {
-                    throw cex;
-                }
-            }
             return conf;
         }
 
@@ -828,4 +814,70 @@ public class ConfigurationFactory
             }
         }
     }
+
+    /**
+     * A special implementation of Digester's <code>CallMethodRule</code> that
+     * is internally used for calling a file configuration's <code>load()</code>
+     * method. This class difers from its ancestor that it catches all occuring
+     * exceptions when the specified method is called. It then checks whether
+     * for the corresponding configuration the optional attribute is set. If
+     * this is the case, the exception will simply be ignored.
+     *
+     * @since 1.4
+     */
+    private static class CallOptionalMethodRule extends CallMethodRule
+    {
+        /** A flag whether the optional attribute is set for this node. */
+        private boolean optional;
+
+        /**
+         * Creates a new instance of <code>CallOptionalMethodRule</code> and
+         * sets the name of the method to invoke.
+         *
+         * @param methodName the name of the method
+         */
+        public CallOptionalMethodRule(String methodName)
+        {
+            super(methodName);
+        }
+
+        /**
+         * Checks if the optional attribute is set.
+         *
+         * @param attrs the attributes
+         * @throws Exception if an error occurs
+         */
+        public void begin(Attributes attrs) throws Exception
+        {
+            optional = attrs.getValue(ATTR_OPTIONAL) != null
+                    && PropertyConverter.toBoolean(
+                            attrs.getValue(ATTR_OPTIONAL)).booleanValue();
+            super.begin(attrs);
+        }
+
+        /**
+         * Calls the method. If the optional attribute was set, occurring
+         * exceptions will be ignored.
+         *
+         * @throws Exception if an error occurs
+         */
+        public void end() throws Exception
+        {
+            try
+            {
+                super.end();
+            }
+            catch (Exception ex)
+            {
+                if (optional)
+                {
+                    log.warn("Could not create optional configuration!", ex);
+                }
+                else
+                {
+                    throw ex;
+                }
+            }
+        }
+    }
 }
diff --git a/src/test/org/apache/commons/configuration/TestConfigurationFactory.java b/src/test/org/apache/commons/configuration/TestConfigurationFactory.java
index 85ca6c13..99e08250 100644
--- a/src/test/org/apache/commons/configuration/TestConfigurationFactory.java
+++ b/src/test/org/apache/commons/configuration/TestConfigurationFactory.java
@@ -20,6 +20,7 @@ package org.apache.commons.configuration;
 import java.io.File;
 import java.io.FileWriter;
 import java.util.Collection;
+import java.util.List;
 
 import junit.framework.TestCase;
 
@@ -52,6 +53,8 @@ public class TestConfigurationFactory extends TestCase
             new File("conf/testDigesterOptionalConfigurationEx.xml");
     private File testDigesterFileSysProps =
             new File("conf/testDigesterConfigurationSysProps.xml");
+    private File testDigesterFileInitProps =
+            new File("conf/testDigesterConfigurationWithProps.xml");
 
     private File testDigesterBadXML = new File("conf/testDigesterBadXML.xml");
 
@@ -324,6 +327,21 @@ public class TestConfigurationFactory extends TestCase
                 .getBoolean("configuration.loaded"));
     }
 
+    // Tests if the properties of a configuration object are correctly set
+    // before it is loaded.
+    public void testLoadInitProperties() throws ConfigurationException
+    {
+        factory.setConfigurationFileName(testDigesterFileInitProps
+                .getAbsolutePath());
+        Configuration config = factory.getConfiguration();
+        PropertiesConfiguration c = (PropertiesConfiguration) ((CompositeConfiguration) config)
+                .getConfiguration(0);
+        assertEquals("List delimiter was not set", ';', c.getListDelimiter());
+        List l = c.getList("test.mixed.array");
+        assertEquals("Wrong number of list elements", 2, l.size());
+        assertEquals("List delimiter was not applied", "b, c, d", l.get(1));
+    }
+
     private void checkUnionConfig() throws Exception
     {
         compositeConfiguration = (CompositeConfiguration) factory.getConfiguration();
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index ab03e46b..214b3ba4 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,12 @@
 
   <body>
     <release version="1.4-dev" date="in SVN">
+      <action dev="oheger" type="update" issue="CONFIGURATION-229">
+        For file-based configurations loaded by ConfigurationFactory the load()
+        method was called before all of the properties specified by attributes
+        of the XML element have been initialized. Now load() is called after
+        property initialization.
+      </action>
       <action dev="oheger" type="update" issue="CONFIGURATION-235">
         Interpolation of non string values did not work when SubsetConfiguration
         was involved. This has now been fixed.
