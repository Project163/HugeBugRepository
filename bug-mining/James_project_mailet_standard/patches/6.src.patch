diff --git a/mailet/standard/src/main/java/org/apache/james/transport/matchers/SentByMailet.java b/mailet/standard/src/main/java/org/apache/james/transport/matchers/SentByMailet.java
new file mode 100644
index 0000000000..0df6e96eb4
--- /dev/null
+++ b/mailet/standard/src/main/java/org/apache/james/transport/matchers/SentByMailet.java
@@ -0,0 +1,41 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+
+
+
+package org.apache.james.transport.matchers;
+
+import java.util.Collection;
+
+import com.google.common.collect.ImmutableList;
+import org.apache.mailet.Mail;
+import org.apache.mailet.MailAddress;
+import org.apache.mailet.base.GenericMatcher;
+
+public class SentByMailet extends GenericMatcher {
+
+    public Collection<MailAddress> match(Mail mail) {
+        String authUser = (String) mail.getAttribute(Mail.SENT_BY_MAILET);
+        if (authUser != null) {
+            return mail.getRecipients();
+        } else {
+            return ImmutableList.of();
+        }
+    }
+}
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/UseHeaderRecipientsTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/UseHeaderRecipientsTest.java
index 95d220aba6..cdcb968daa 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/UseHeaderRecipientsTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/UseHeaderRecipientsTest.java
@@ -135,6 +135,7 @@ public class UseHeaderRecipientsTest {
         assertThat(mailetContext.getSentMails())
             .containsOnly(FakeMailContext.sentMailBuilder()
                 .recipients(mailAddress1, mailAddress2, mailAddress3)
+                .fromMailet()
                 .build());
     }
 
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SentByMailetTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SentByMailetTest.java
new file mode 100644
index 0000000000..4f36a98ed7
--- /dev/null
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SentByMailetTest.java
@@ -0,0 +1,92 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+
+package org.apache.james.transport.matchers;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import java.util.Collection;
+
+import org.apache.mailet.Mail;
+import org.apache.mailet.MailAddress;
+import org.apache.mailet.base.test.FakeMail;
+import org.apache.mailet.base.test.FakeMailContext;
+import org.apache.mailet.base.test.FakeMatcherConfig;
+import org.junit.Before;
+import org.junit.Test;
+
+public class SentByMailetTest {
+
+    private SentByMailet testee;
+
+    @Before
+    public void setUp() throws Exception {
+        testee = new SentByMailet();
+        testee.init(FakeMatcherConfig.builder().matcherName("matcherName")
+            .mailetContext(FakeMailContext.defaultContext())
+            .build());
+    }
+
+    @Test
+    public void matchShouldReturnRecipientsWhenAuthUserAttributeIsPresent() throws Exception{
+        MailAddress recipient = new MailAddress("cuong.trnn@gmail.com");
+        FakeMail fakeMail = FakeMail.builder()
+            .recipient(recipient)
+            .attribute(Mail.SENT_BY_MAILET, "true")
+            .build();
+
+        Collection<MailAddress> results =  testee.match(fakeMail);
+
+        assertThat(results).containsOnly(recipient);
+    }
+
+    @Test
+    public void matchShouldReturnEmptyCollectionWhenAuthUserAttributeIsAbsent() throws Exception{
+        FakeMail fakeMail = FakeMail.builder()
+            .recipients(new MailAddress("cuong.trnn@gmail.com"))
+            .build();
+
+        Collection<MailAddress> results =  testee.match(fakeMail);
+
+        assertThat(results).isEmpty();
+    }
+
+    @Test
+    public void matchShouldReturnEmptyCollectionWhenAuthUserAttributeIsAbsentAndThereIsNoRecipient() throws Exception {
+        FakeMail fakeMail = FakeMail.builder()
+            .recipients()
+            .build();
+
+        Collection<MailAddress> results =  testee.match(fakeMail);
+
+        assertThat(results).isEmpty();
+    }
+
+    @Test
+    public void matchShouldReturnEmptyCollectionWhenAuthUserAttributeIsPresentAndThereIsNoRecipient() throws Exception {
+        FakeMail fakeMail = FakeMail.builder()
+            .recipients()
+            .attribute(Mail.SENT_BY_MAILET, "true")
+            .build();
+
+        Collection<MailAddress> results =  testee.match(fakeMail);
+
+        assertThat(results).isEmpty();
+    }
+}
