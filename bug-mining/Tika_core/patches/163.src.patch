diff --git a/tika-core/src/main/java/org/apache/tika/io/FilenameUtils.java b/tika-core/src/main/java/org/apache/tika/io/FilenameUtils.java
index 2bdfd531d..7176c5e11 100644
--- a/tika-core/src/main/java/org/apache/tika/io/FilenameUtils.java
+++ b/tika-core/src/main/java/org/apache/tika/io/FilenameUtils.java
@@ -21,6 +21,7 @@ import java.util.HashSet;
 
 public class FilenameUtils {
 
+
     /**
      * Reserved characters
      */
@@ -34,12 +35,14 @@ public class FilenameUtils {
 
     private final static HashSet<Character> RESERVED = new HashSet<Character>(38);
 
+
     static {
         for (int i=0; i<RESERVED_FILENAME_CHARACTERS.length; ++i) {
             RESERVED.add(RESERVED_FILENAME_CHARACTERS[i]);
         }
     }
 
+
     /**
      * Scans the given file name for reserved characters on different OSs and
      * file systems and returns a sanitized version of the name with the
@@ -70,4 +73,40 @@ public class FilenameUtils {
 
         return sb.toString();
     }
+
+    /**
+     * This is a duplication of the algorithm and functionality
+     * available in commons io FilenameUtils.  If Java's File were 
+     * able handle Windows file paths correctly in linux,
+     * we wouldn't need this.
+     * <p>
+     * The goal of this is to get a filename from a path.
+     * The package parsers and some other embedded doc
+     * extractors could put anything into Metadata.RESOURCE_NAME_KEY.
+     * <p>
+     * If a careless client used that filename as if it were a
+     * filename and not a path when writing embedded files,
+     * bad things could happen.  Consider: "../../../my_ppt.ppt".
+     * <p>
+     * Consider using this in combination with {@link #normalize(String)}.
+     * 
+     * @param path path to strip
+     * @return empty string or a filename, never null
+     */
+    public static String getName(final String path) {
+        
+        if (path == null || path.length() == 0) {
+            return "";
+        }
+        int unix = path.lastIndexOf("/");
+        int windows = path.lastIndexOf("\\");
+        //some macintosh file names are stored with : as the delimiter
+        //also necessary to properly handle C:somefilename
+        int colon = path.lastIndexOf(":");
+        String cand = path.substring(Math.max(colon, Math.max(unix, windows))+1);
+        if (cand.equals("..") || cand.equals(".")){
+            return "";
+        }
+        return cand;
+    }
 }
diff --git a/tika-core/src/main/java/org/apache/tika/metadata/RTFMetadata.java b/tika-core/src/main/java/org/apache/tika/metadata/RTFMetadata.java
new file mode 100644
index 000000000..e2c14714e
--- /dev/null
+++ b/tika-core/src/main/java/org/apache/tika/metadata/RTFMetadata.java
@@ -0,0 +1,46 @@
+package org.apache.tika.metadata; /*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */ import org.apache.tika.metadata.Metadata; import org.apache.tika.metadata.Property; public interface 
+RTFMetadata {
+    public static final String PREFIX_RTF_META = "rtf_meta";
+    
+    
+    public static final String RTF_PICT_META_PREFIX = "rtf_pict:";
+    
+    /**
+     * if set to true, this means that an image file is probably a "thumbnail"
+     * any time a pict/emf/wmf is in an object
+     */
+    Property THUMBNAIL = Property.internalBoolean(PREFIX_RTF_META+
+            Metadata.NAMESPACE_PREFIX_DELIMITER+"thumbnail");
+    
+    /**
+     * if an application and version is given as part of the
+     * embedded object, this is the literal string
+     */
+    Property EMB_APP_VERSION = Property.internalText(PREFIX_RTF_META+
+            Metadata.NAMESPACE_PREFIX_DELIMITER+"emb_app_version");
+    
+    Property EMB_CLASS = Property.internalText(PREFIX_RTF_META+
+            Metadata.NAMESPACE_PREFIX_DELIMITER+"emb_class");
+    
+    Property EMB_TOPIC = Property.internalText(PREFIX_RTF_META+
+            Metadata.NAMESPACE_PREFIX_DELIMITER+"emb_topic");
+    
+    Property EMB_ITEM = Property.internalText(PREFIX_RTF_META+
+            Metadata.NAMESPACE_PREFIX_DELIMITER+"emb_item");
+    
+}
diff --git a/tika-core/src/test/java/org/apache/tika/io/FilenameUtilsTest.java b/tika-core/src/test/java/org/apache/tika/io/FilenameUtilsTest.java
index 03452b3bd..71e2e7c66 100644
--- a/tika-core/src/test/java/org/apache/tika/io/FilenameUtilsTest.java
+++ b/tika-core/src/test/java/org/apache/tika/io/FilenameUtilsTest.java
@@ -94,5 +94,24 @@ public class FilenameUtilsTest {
         assertEquals(EXPECTED_NAME, FilenameUtils.normalize(TEST_NAME));
     }
 
+    @Test
+    public void testGetName() throws Exception {
+        testFilenameEquality("quick.ppt", "C:\\the\\quick.ppt");
+        testFilenameEquality("quick.ppt", "/the/quick.ppt");
+        testFilenameEquality("", "/the/quick/");
+        testFilenameEquality("", "~/the/quick////\\\\//");
+        testFilenameEquality("~~quick", "~~quick");
+        testFilenameEquality("quick.ppt", "quick.ppt");
+        testFilenameEquality("", "////");
+        testFilenameEquality("", "C:////");
+        testFilenameEquality("", "..");
+        testFilenameEquality("quick", "C:////../the/D:/quick");
+        testFilenameEquality("file.ppt", "path:to:file.ppt" );
+        testFilenameEquality("HW.txt", "_1457338542/HW.txt" );
+    }
+
+    private void testFilenameEquality(String expected, String path) {
+        assertEquals(expected, FilenameUtils.getName(path));
+    }
 
 }
