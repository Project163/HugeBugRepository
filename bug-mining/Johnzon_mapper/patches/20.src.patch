diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Adapter.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Adapter.java
index 8532703b..3abcd5f1 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Adapter.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Adapter.java
@@ -27,7 +27,7 @@ package org.apache.johnzon.mapper;
  * @param <A>
  * @param <B>
  */
-public interface Adapter<A, B> {
+public interface Adapter<A, B> extends MapperConverter {
     /**
      * Transfer B to JSON as A.
      * A will be inserted into the JSON output
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Converter.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Converter.java
index fafe879e..5fb2ef0d 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Converter.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Converter.java
@@ -28,7 +28,7 @@ import java.lang.reflect.Type;
  *
  * @param <T>
  */
-public interface Converter<T> {
+public interface Converter<T> extends MapperConverter {
     String toString(T instance);
     T fromString(String text);
 
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/JohnzonConverter.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/JohnzonConverter.java
index b3691cc0..b2987929 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/JohnzonConverter.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/JohnzonConverter.java
@@ -29,5 +29,5 @@ import static java.lang.annotation.RetentionPolicy.RUNTIME;
 @Target({ METHOD, FIELD, PARAMETER })
 @Retention(RUNTIME)
 public @interface JohnzonConverter {
-    Class<? extends Converter<?>> value();
+    Class<? extends MapperConverter> value();
 }
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConverter.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConverter.java
new file mode 100644
index 00000000..aa101ffd
--- /dev/null
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConverter.java
@@ -0,0 +1,26 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.johnzon.mapper;
+
+
+/**
+ * MapperConverter is the common marker interface for all Converters available in Johnzon
+ */
+public interface MapperConverter {
+}
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
new file mode 100644
index 00000000..cd92fdc6
--- /dev/null
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
@@ -0,0 +1,65 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.johnzon.mapper;
+
+import java.lang.reflect.Type;
+
+import javax.json.JsonReader;
+import javax.json.JsonValue;
+import javax.json.stream.JsonParser;
+
+import org.apache.johnzon.core.JsonReaderImpl;
+
+/**
+ * This class is not concurrently usable as it contains state.
+ */
+public class MappingParserImpl implements MappingParser {
+
+    private final JsonParser jsonParser;
+
+    private JsonReader jsonReader = null;
+
+
+    public MappingParserImpl(JsonParser jsonParser) {
+        this.jsonParser = jsonParser;
+    }
+
+    @Override
+    public JsonParser getJsonParser() {
+        return jsonParser;
+    }
+
+    @Override
+    public JsonReader getJsonReader() {
+        if (jsonReader == null) {
+            jsonReader = new JsonReaderImpl(jsonParser);
+        }
+        return jsonReader;
+    }
+
+    @Override
+    public <T> T readObject(Type targetType) {
+        return null;
+    }
+
+    @Override
+    public <T> T readObject(JsonValue jsonValue, Type targetType) {
+        return null;
+    }
+}
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mappings.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mappings.java
index da210fcf..f95a51ee 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mappings.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mappings.java
@@ -445,7 +445,13 @@ public class Mappings {
         Type typeToTest = decoratedType.getType();
         if (annotation != null) {
             try {
-                converter = new ConverterAdapter(annotation.value().newInstance());
+                MapperConverter mapperConverter = annotation.value().newInstance();
+                if (mapperConverter instanceof Converter) {
+                    converter = new ConverterAdapter((Converter) mapperConverter);
+                } else {
+                    throw new UnsupportedOperationException("TODO implement");
+                }
+
             } catch (final Exception e) {
                 throw new IllegalArgumentException(e);
             }
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/ObjectConverter.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/ObjectConverter.java
index 7f5d02d1..1b5ff5fa 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/ObjectConverter.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/ObjectConverter.java
@@ -29,7 +29,7 @@ import java.lang.reflect.Type;
  *
  * @param <T>
  */
-public interface ObjectConverter<T> {
+public interface ObjectConverter<T> extends MapperConverter {
     void writeJson(T instance, MappingGenerator jsonbGenerator);
 
     T fromJson(MappingParser jsonbParser, Type targetType);
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/BaseAccessMode.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/BaseAccessMode.java
index cd6767ad..cca3a8ce 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/BaseAccessMode.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/BaseAccessMode.java
@@ -19,7 +19,9 @@
 package org.apache.johnzon.mapper.access;
 
 import org.apache.johnzon.mapper.Adapter;
+import org.apache.johnzon.mapper.Converter;
 import org.apache.johnzon.mapper.JohnzonConverter;
+import org.apache.johnzon.mapper.MapperConverter;
 import org.apache.johnzon.mapper.internal.ConverterAdapter;
 import org.apache.johnzon.mapper.reflection.JohnzonParameterizedType;
 
@@ -122,13 +124,18 @@ public abstract class BaseAccessMode implements AccessMode {
                 for (final Annotation a : constructor.getParameterAnnotations()[i]) {
                     if (a.annotationType() == JohnzonConverter.class) {
                         try {
-                            final Adapter<?, ?> converter = new ConverterAdapter(JohnzonConverter.class.cast(a).value().newInstance());
-                            if (matches(constructor.getParameterTypes()[i], converter)) {
-                                constructorParameterConverters[i] = converter;
-                                constructorItemParameterConverters[i] = null;
+                            MapperConverter mapperConverter = JohnzonConverter.class.cast(a).value().newInstance();
+                            if (mapperConverter instanceof Converter) {
+                                final Adapter<?, ?> converter = new ConverterAdapter((Converter) mapperConverter);
+                                if (matches(constructor.getParameterTypes()[i], converter)) {
+                                    constructorParameterConverters[i] = converter;
+                                    constructorItemParameterConverters[i] = null;
+                                } else {
+                                    constructorParameterConverters[i] = null;
+                                    constructorItemParameterConverters[i] = converter;
+                                }
                             } else {
-                                constructorParameterConverters[i] = null;
-                                constructorItemParameterConverters[i] = converter;
+                                throw new UnsupportedOperationException("TODO implement");
                             }
                         } catch (final Exception e) {
                             throw new IllegalArgumentException(e);
diff --git a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/ObjectTypeTest.java b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/ObjectTypeTest.java
index 21f5701b..ccc5b833 100644
--- a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/ObjectTypeTest.java
+++ b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/ObjectTypeTest.java
@@ -48,6 +48,7 @@ public class ObjectTypeTest {
     public void testObjectConverterMapper() {
         Mapper mapper = new MapperBuilder()
                 .setAccessModeName(accessMode)
+                //X TODO .addObjectConverter or so
                 .build();
 
         String expectedJsonString = "{\"//javaType\":\"org.apache.johnzon.mapper.ObjectTypeTest$Mutt\"," +
@@ -79,15 +80,26 @@ public class ObjectTypeTest {
 
     public static class TestWithTypeConverter implements ObjectConverter<Dog> {
         @Override
-        public void writeJson(Dog instance, MappingGenerator jsonbGenerator) {
-            jsonbGenerator.getJsonGenerator().write("//javaType", instance.getClass().getName());
-            jsonbGenerator.writeObject(instance);
+        public void writeJson(Dog instance, MappingGenerator mappingGenerator) {
+            mappingGenerator.getJsonGenerator().write("//javaType", instance.getClass().getName());
+            mappingGenerator.writeObject(instance);
         }
 
         @Override
-        public Dog fromJson(MappingParser jsonParser, Type targetType) {
-            JsonObject jsonObject = jsonParser.getJsonReader().readObject();
+        public Dog fromJson(MappingParser mappingParser, Type targetType) {
+            JsonObject jsonObject = mappingParser.getJsonReader().readObject();
             String javaType = jsonObject.getString("//javaType");
+            Class targetClass = javaType != null ? getSubClass(targetType, javaType) : (Class) targetType;
+
+            return mappingParser.readObject(jsonObject, targetClass);
+        }
+
+
+        /**
+         * Helper method to check that javaType is really a subclass of targetType.
+         * Might get moved to a utility class
+         */
+        private Class getSubClass(Type targetType, String javaType) {
             if (javaType != null) {
                 // the following should get extracted in a utility class.
                 ClassLoader cl = Thread.currentThread().getContextClassLoader();
@@ -101,18 +113,17 @@ public class ObjectTypeTest {
                     if (targetType instanceof Class) {
                         targetClass = (Class) targetType;
                     } else if (targetType instanceof ParameterizedType) {
-                       targetClass = (Class)((ParameterizedType) targetType).getRawType();
+                        targetClass = (Class)((ParameterizedType) targetType).getRawType();
                     }
                     if (targetClass != null && targetClass.isAssignableFrom(subClass)) {
-                        targetType = subClass;
+                        return subClass;
                     }
                 } catch (ClassNotFoundException e) {
                     // continue without better class match
                 }
-
-                jsonParser.readObject(jsonObject, targetType);
             }
-            return null;
+
+            return (Class) targetType;
         }
     }
 
