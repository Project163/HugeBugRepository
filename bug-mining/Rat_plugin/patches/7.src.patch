diff --git a/apache-rat-plugin/pom.xml b/apache-rat-plugin/pom.xml
index f9053afe..a4b9c8fd 100644
--- a/apache-rat-plugin/pom.xml
+++ b/apache-rat-plugin/pom.xml
@@ -36,6 +36,7 @@
     <currentVersion>${project.version}</currentVersion>
     <doxiaVersion>1.0-alpha-8</doxiaVersion>
     <doxiaSitetoolsVersion>1.0-alpha-8</doxiaSitetoolsVersion>
+    <mavenPluginPluginVersion>3.1</mavenPluginPluginVersion>
   </properties>
   
   <build>
@@ -57,11 +58,43 @@
         </includes>
       </resource>
     </resources>
+    <pluginManagement>
+      <plugins>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-plugin-plugin</artifactId>
+          <version>${mavenPluginPluginVersion}</version>
+        </plugin>
+      </plugins>
+    </pluginManagement>
     <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-plugin-plugin</artifactId>
+        <version>${mavenPluginPluginVersion}</version>
+        <configuration>
+          <skipErrorNoDescriptorsFound>true</skipErrorNoDescriptorsFound>
+        </configuration>
+        <executions>
+          <execution>
+            <id>mojo-descriptor</id>
+            <goals>
+              <goal>descriptor</goal>
+            </goals>
+          </execution>
+          <!-- to generate help goal -->
+          <execution>
+            <id>help-goal</id>
+            <goals>
+              <goal>helpmojo</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-invoker-plugin</artifactId>
-        <version>1.5</version>
+        <version>1.6</version>
         <configuration>
           <projectsDirectory>src/test/invoker</projectsDirectory>
           <cloneProjectsTo>${project.build.directory}/invoker</cloneProjectsTo>
@@ -70,7 +103,7 @@
           </pomIncludes>
           <localRepositoryPath>${project.build.directory}/local-repo</localRepositoryPath>
           <settingsFile>src/test/invoker/settings.xml</settingsFile>
-          <postBuildHookScript>verify.bsh</postBuildHookScript>
+          <postBuildHookScript>verify</postBuildHookScript>
         </configuration>
         <executions>
           <execution>
@@ -95,6 +128,12 @@
       <artifactId>junit</artifactId>
     </dependency>
 
+    <dependency>
+      <groupId>org.apache.maven.plugin-tools</groupId>
+      <artifactId>maven-plugin-annotations</artifactId>
+      <version>${mavenPluginPluginVersion}</version>
+      <scope>provided</scope>
+    </dependency>
     <dependency>
       <groupId>org.apache.maven</groupId>
       <artifactId>maven-artifact</artifactId>
@@ -166,7 +205,7 @@
     <dependency>
       <groupId>org.codehaus.plexus</groupId>
       <artifactId>plexus-utils</artifactId>
-      <version>1.4</version>
+      <version>3.0.8</version>
     </dependency>
   </dependencies>
 
@@ -179,6 +218,7 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-plugin-plugin</artifactId>
+        <version>${mavenPluginPluginVersion}</version>
       </plugin>
     </plugins>
   </reporting>
diff --git a/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java b/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java
index f346c13a..c142f699 100644
--- a/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java
+++ b/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java
@@ -22,6 +22,8 @@ package org.apache.rat.mp;
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.plugin.MojoFailureException;
+import org.apache.maven.plugins.annotations.Component;
+import org.apache.maven.plugins.annotations.Parameter;
 import org.apache.maven.project.MavenProject;
 import org.apache.rat.Defaults;
 import org.apache.rat.Report;
@@ -72,25 +74,25 @@ public abstract class AbstractRatMojo extends AbstractMojo
     /**
      * The base directory, in which to search for files.
      * 
-     * @parameter expression="${rat.basedir}" default-value="${basedir}"
-     * @required
      */
+    @Parameter (property = "rat.basedir", defaultValue = "${basedir}", required = true)
     protected File basedir;
 
     /**
      * Specifies the licenses to accept. Deprecated, use {@link #licenses} instead.
      * 
-     * @parameter
      * @deprecated Use {@link #licenses} instead.
      */
+    @Parameter
     private HeaderMatcherSpecification[] licenseMatchers;
 
     /**
      * Specifies the licenses to accept. By default, these are added to the default
      * licenses, unless you set {@link #addDefaultLicenseMatchers} to true.
-     * @parameter
+     *
      * @since 0.8
      */
+    @Parameter
     private IHeaderMatcher[] licenses;
 
     /**
@@ -101,45 +103,46 @@ public abstract class AbstractRatMojo extends AbstractMojo
 
     /**
      * Specifies the license families to accept.
-     * @parameter
+     *
      * @since 0.8
      */
+    @Parameter
     private ILicenseFamily[] licenseFamilies;
     
     /**
      * Whether to add the default list of license matchers.
      * 
-     * @parameter expression="${rat.addDefaultLicenseMatchers}" default-value="true"
      */
+    @Parameter(property = "rat.addDefaultLicenseMatchers", defaultValue = "true")
     private boolean addDefaultLicenseMatchers;
 
     /**
      * Specifies files, which are included in the report. By default, all files are included.
      * 
-     * @parameter
      */
+    @Parameter
     private String[] includes;
 
     /**
      * Specifies files, which are excluded in the report. By default, no files are excluded.
      * 
-     * @parameter
      */
+    @Parameter
     private String[] excludes;
 
     /**
      * Whether to use the default excludes when scanning for files.
      * 
-     * @parameter expression="${rat.useDefaultExcludes}" default-value="true"
      */
+    @Parameter(property = "rat.useDefaultExcludes", defaultValue = "true")
     private boolean useDefaultExcludes;
 
     /**
      * Whether to use the Maven specific default excludes when scanning for files. Maven specific default excludes are
      * given by the constant MAVEN_DEFAULT_EXCLUDES: The target directory, the cobertura.ser file, and so on.
      * 
-     * @parameter expression="${rat.useMavenDefaultExcludes}" default-value="true"
      */
+    @Parameter(property = "rat.useMavenDefaultExcludes", defaultValue = "true")
     private boolean useMavenDefaultExcludes;
 
     /**
@@ -147,31 +150,30 @@ public abstract class AbstractRatMojo extends AbstractMojo
      * are given by the constant ECLIPSE_DEFAULT_EXCLUDES: The .classpath and .project files, the .settings directory,
      * and so on.
      * 
-     * @parameter expression="${rat.useEclipseDefaultExcludes}" default-value="true"
      */
+    @Parameter(property = "rat.useEclipseDefaultExcludes", defaultValue = "true")
     private boolean useEclipseDefaultExcludes;
 
     /**
      * Whether to use the IDEA specific default excludes when scanning for files. IDEA specific default excludes are
      * given by the constant IDEA_DEFAULT_EXCLUDES: The *.iml, *.ipr and *.iws files.
      * 
-     * @parameter expression="${rat.useIdeaDefaultExcludes}" default-value="true"
      */
+    @Parameter(property = "rat.useIdeaDefaultExcludes", defaultValue = "true")
     private boolean useIdeaDefaultExcludes;
 
     /**
      * Whether to exclude subprojects. This is recommended, if you want a
      * separate apache-rat-plugin report for each subproject.
      * 
-     * @parameter expression="${rat.excludeSubprojects}" default-value="true"
      */
+    @Parameter(property = "rat.excludeSubprojects", defaultValue = "true")
     private boolean excludeSubProjects;
     
     /**
-     * @parameter default-value="${project}"
-     * @required
-     * @readonly
+     *
      */
+    @Component
     private MavenProject project;
 
     /**
@@ -203,7 +205,7 @@ public abstract class AbstractRatMojo extends AbstractMojo
         {
             for (final HeaderMatcherSpecification spec : licenseMatchers) {
                 final String className = spec.getClassName();
-                final IHeaderMatcher headerMatcher = (IHeaderMatcher) newInstance(IHeaderMatcher.class, className);
+                final IHeaderMatcher headerMatcher = newInstance(IHeaderMatcher.class, className);
                 list.add(headerMatcher);
             }
         }
@@ -215,14 +217,14 @@ public abstract class AbstractRatMojo extends AbstractMojo
         return (IHeaderMatcher[]) list.toArray( new IHeaderMatcher[list.size()] );
     }
 
-    private Object newInstance( final Class clazz, final String className )
+    private <T> T newInstance( final Class<T> clazz, final String className )
         throws MojoExecutionException, MojoFailureException
     {
-        final Object o;
+        final T o;
         try
         {
             final ClassLoader cl = Thread.currentThread().getContextClassLoader();
-            o = cl.loadClass( className ).newInstance();
+            o = (T) cl.loadClass( className ).newInstance();
         }
         catch ( InstantiationException e )
         {
diff --git a/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatCheckMojo.java b/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatCheckMojo.java
index 32c63bfe..3560b651 100644
--- a/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatCheckMojo.java
+++ b/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatCheckMojo.java
@@ -28,47 +28,49 @@ import java.io.InputStream;
 
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.plugin.MojoFailureException;
+import org.apache.maven.plugins.annotations.LifecyclePhase;
+import org.apache.maven.plugins.annotations.Mojo;
+import org.apache.maven.plugins.annotations.Parameter;
 import org.apache.rat.Defaults;
 import org.apache.rat.ReportConfiguration;
 import org.apache.rat.report.claim.ClaimStatistic;
 
 /**
  * Run RAT to perform a violation check.
- * 
- * @goal check
- * @phase verify
+ *
  */
+@Mojo (name = "check", defaultPhase = LifecyclePhase.VERIFY)
 public class RatCheckMojo extends AbstractRatMojo
 {
     /**
      * Where to store the report.
-     * 
-     * @parameter expression="${rat.outputFile}" default-value="${project.build.directory}/rat.txt"
+     *
      */
+    @Parameter (property = "rat.outputFile", defaultValue = "${project.build.directory}/rat.txt")
     private File reportFile;
 
     /**
      * Output style of the report. Use "plain" (the default) for a plain text
      * report or "xml" for the raw XML report. Alternatively you can give the
      * path of an XSL transformation that will be applied on the raw XML to
-     * produce the report written to the output file. 
-     * 
-     * @parameter expression="${rat.outputStyle}" default-value="plain"
+     * produce the report written to the output file.
+     *
      */
+    @Parameter(property = "rat.outputStyle", defaultValue = "plain")
     private String reportStyle;
 
     /**
      * Maximum number of files with unapproved licenses.
-     * @parameter expression="${rat.numUnapprovedLicenses}" default-value="0"
      */
+    @Parameter(property = "rat.numUnapprovedLicenses", defaultValue = "0")
     private int numUnapprovedLicenses;
 
     /**
      * Whether to add license headers; possible values are
      * {@code forced}, {@code true}, and {@code false} (default).
      *
-     * @parameter expression="${rat.addLicenseHeaders}" default-value="false"
      */
+    @Parameter(property = "rat.addLicenseHeaders", defaultValue = "false")
     private String addLicenseHeaders;
 
     /**
@@ -76,10 +78,18 @@ public class RatCheckMojo extends AbstractRatMojo
      * ignored, unless {@code addLicenseHeaders} is set to {@code true},
      * or {@code forced}.
      *
-     * @parameter expression="${rat.copyrightMessage}"
      */
+    @Parameter(property = "rat.copyrightMessage")
     private String copyrightMessage;
 
+    /**
+     * Will ignore rat errors and display a log message if any.
+     * Its use is NOT RECOMMENDED, but quite convenient on occasion.
+     * @since 0.9
+     */
+    @Parameter(property = "rat.ignoreErrors", defaultValue = "false")
+    private boolean ignoreErrors;
+
     private ClaimStatistic getRawReport()
         throws MojoExecutionException, MojoFailureException
     {
@@ -144,7 +154,7 @@ public class RatCheckMojo extends AbstractRatMojo
 
     /**
      * Invoked by Maven to execute the Mojo.
-     * 
+     *
      * @throws MojoFailureException
      *             An error in the plugin configuration was detected.
      * @throws MojoExecutionException
@@ -166,8 +176,18 @@ public class RatCheckMojo extends AbstractRatMojo
     {
         if ( numUnapprovedLicenses < statistics.getNumUnApproved() )
         {
-            throw new RatCheckException( "Too many unapproved licenses: " + statistics.getNumUnApproved() );
+            if ( !ignoreErrors )
+            {
+                throw new RatCheckException( "Too many unapproved licenses: " + statistics.getNumUnApproved() );
+            }
+            else
+            {
+                getLog().warn( "Rat check:" + statistics.getNumUnApproved() + " errors on non approved has been ignored." );
+            }
+
         }
+
+
     }
 
     protected ReportConfiguration getConfiguration()
diff --git a/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatReportMojo.java b/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatReportMojo.java
index 17f5c47a..760f0c74 100644
--- a/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatReportMojo.java
+++ b/apache-rat-plugin/src/main/java/org/apache/rat/mp/RatReportMojo.java
@@ -37,6 +37,10 @@ import org.apache.maven.doxia.siterenderer.SiteRenderingContext;
 import org.apache.maven.doxia.siterenderer.sink.SiteRendererSink;
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.plugin.MojoFailureException;
+import org.apache.maven.plugins.annotations.Component;
+import org.apache.maven.plugins.annotations.Mojo;
+import org.apache.maven.plugins.annotations.Parameter;
+import org.apache.maven.plugins.annotations.ResolutionScope;
 import org.apache.maven.reporting.MavenReport;
 import org.apache.maven.reporting.MavenReportException;
 import org.apache.rat.Defaults;
@@ -58,39 +62,27 @@ import java.util.ResourceBundle;
 /**
  * Generates a report with RAT's output.
  * 
- * @goal rat
- * @requiresDependencyResolution test
  */
+@Mojo(name = "rat", requiresDependencyResolution = ResolutionScope.TEST)
 public class RatReportMojo extends AbstractRatMojo implements MavenReport
 {
     /**
      * Specifies the directory where the report will be generated
      * 
-     * @parameter default-value="${project.reporting.outputDirectory}"
-     * @required
      */
+    @Parameter(defaultValue = "${project.reporting.outputDirectory}", required = true)
     private File outputDirectory;
 
-    /**
-     * @component
-     */
+    @Component
     private Renderer siteRenderer;
 
-    /**
-     * @component
-     */
+    @Component
     private ArtifactFactory factory;
 
-    /**
-     * @component
-     */
+    @Component
     private ArtifactResolver resolver;
 
-    /**
-     * @parameter default-value="${localRepository}"
-     * @required
-     * @readonly
-     */
+    @Parameter(defaultValue = "${localRepository}", required = true, readonly = true)
     private ArtifactRepository localRepository;
 
     /**
diff --git a/apache-rat-plugin/src/test/invoker/it1/verify.bsh b/apache-rat-plugin/src/test/invoker/it1/verify.bsh
deleted file mode 100644
index 54cd2806..00000000
--- a/apache-rat-plugin/src/test/invoker/it1/verify.bsh
+++ /dev/null
@@ -1,23 +0,0 @@
-import java.io.*;
-
-File f = new File(basedir, "target/rat.txt").getAbsoluteFile();
-FileInputStream fis = new FileInputStream(f);
-Reader r = new InputStreamReader(fis);
-BufferedReader br = new BufferedReader(r);
-boolean found = false;
-for (;;) {
-    String line = br.readLine();
-    if (line == null) {
-        break;
-    }
-    if (line.indexOf("YAL__ src.apt") >= 0) {
-        found = true;
-        break;
-    }
-}
-br.close();
-r.close();
-fis.close();
-if (!found) {
-    throw new IllegalStateException("Expecting Yet Another License for src.apt");
-}
\ No newline at end of file
diff --git a/apache-rat-plugin/src/test/invoker/it1/verify.groovy b/apache-rat-plugin/src/test/invoker/it1/verify.groovy
new file mode 100644
index 00000000..43dcb8b2
--- /dev/null
+++ b/apache-rat-plugin/src/test/invoker/it1/verify.groovy
@@ -0,0 +1,3 @@
+content = new File( basedir, 'target/rat.txt' ).text;
+
+assert content.contains( 'YAL__ src.apt' );
\ No newline at end of file
