diff --git a/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java b/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java
index 1bb4b9578..40fe77c8b 100644
--- a/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java
+++ b/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java
@@ -154,18 +154,22 @@ public class TikaConfig {
      * class loader.
      *
      * @since Apache Tika 0.8
+     * @param loader the class loader through which parser implementations
+     *               are loaded, or <code>null</code> for no parsers
      * @throws MimeTypeException if the built-in media type rules are broken
      * @throws IOException  if the built-in media type rules can not be read
      */
     public TikaConfig(ClassLoader loader)
             throws MimeTypeException, IOException {
-        ParseContext context = new ParseContext();
-        Iterator<Parser> iterator =
-            ServiceRegistry.lookupProviders(Parser.class, loader);
-        while (iterator.hasNext()) {
-            Parser parser = iterator.next();
-            for (MediaType type : parser.getSupportedTypes(context)) {
-                parsers.put(type, parser);
+        if (loader != null) {
+            ParseContext context = new ParseContext();
+            Iterator<Parser> iterator =
+                ServiceRegistry.lookupProviders(Parser.class, loader);
+            while (iterator.hasNext()) {
+                Parser parser = iterator.next();
+                for (MediaType type : parser.getSupportedTypes(context)) {
+                    parsers.put(type, parser);
+                }
             }
         }
         mimeTypes = MimeTypesFactory.create("tika-mimetypes.xml");
@@ -181,7 +185,27 @@ public class TikaConfig {
      * @throws IOException  if the built-in media type rules can not be read
      */
     public TikaConfig() throws MimeTypeException, IOException {
-        this(Thread.currentThread().getContextClassLoader());
+        this(getContextClassLoader());
+    }
+
+    /**
+     * Returns the context class loader of the current thread. If such
+     * a class loader is not available, then the loader of this class or
+     * finally the system class loader is returned.
+     *
+     * @see <a href="https://issues.apache.org/jira/browse/TIKA-441">TIKA-441</a>
+     * @return context class loader, or <code>null</code> if no loader
+     *         is available
+     */
+    private static ClassLoader getContextClassLoader() {
+        ClassLoader loader = Thread.currentThread().getContextClassLoader();
+        if (loader == null) {
+            loader = TikaConfig.class.getClassLoader();
+        }
+        if (loader == null) {
+            loader = ClassLoader.getSystemClassLoader();
+        }
+        return loader;
     }
 
     /**
diff --git a/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java b/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java
index 4a8b455d8..9cad8d09e 100644
--- a/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java
+++ b/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java
@@ -99,10 +99,6 @@ final class MimeTypesReader implements MimeTypesReaderMetKeys {
         this.types = types;
     }
 
-    void read(String filepath) throws IOException, MimeTypeException {
-        read(MimeTypesReader.class.getClassLoader().getResourceAsStream(filepath));
-    }
-
     void read(InputStream stream) throws IOException, MimeTypeException {
         try {
             DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
