diff --git a/johnzon-jsonb/pom.xml b/johnzon-jsonb/pom.xml
index dcbd3708..82c367e5 100644
--- a/johnzon-jsonb/pom.xml
+++ b/johnzon-jsonb/pom.xml
@@ -37,7 +37,7 @@
     <dependency>
       <groupId>org.apache.geronimo.specs</groupId>
       <artifactId>geronimo-annotation_1.3_spec</artifactId>
-      <version>1.1</version>
+      <version>1.3</version>
       <scope>provided</scope>
       <optional>true</optional>
     </dependency>
diff --git a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializersMapTest.java b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializersMapTest.java
new file mode 100644
index 00000000..4e14592b
--- /dev/null
+++ b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializersMapTest.java
@@ -0,0 +1,106 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.johnzon.jsonb;
+
+import org.apache.johnzon.jsonb.test.JsonbRule;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+
+import javax.json.bind.annotation.JsonbTypeDeserializer;
+import javax.json.bind.annotation.JsonbTypeSerializer;
+import javax.json.bind.serializer.DeserializationContext;
+import javax.json.bind.serializer.JsonbDeserializer;
+import javax.json.bind.serializer.JsonbSerializer;
+import javax.json.bind.serializer.SerializationContext;
+import javax.json.stream.JsonGenerator;
+import javax.json.stream.JsonParser;
+import java.io.Serializable;
+import java.lang.reflect.Type;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+public class SerializersMapTest {
+    @Rule
+    public final JsonbRule jsonb = new JsonbRule().withFormatting(true);
+
+    @Before
+    public void init() {
+        MapDeSer.serializerCalled = false;
+        MapDeSer.deserializerCalled = false;
+    }
+
+    @Test
+    public void serializeMapTest() {
+        MapModel mapModel = new MapModel();
+        mapModel.map.put("key1", "value1");
+        mapModel.map.put("key2", "value2");
+
+        assertEquals("" +
+                "{\n" +
+                "  \"map\":{\n" +
+                "    \"key1\":\"value1\",\n" +
+                "    \"key2\":\"value2\"\n" +
+                "  }\n" +
+                "}" +
+                "", jsonb.toJson(mapModel));
+
+        assertTrue(MapDeSer.serializerCalled);
+        assertFalse(MapDeSer.deserializerCalled);
+    }
+
+    @Test
+    public void deserializeMapTest() {
+        final Map<String, String> expected = new HashMap<>();
+        expected.put("key1", "value1");
+        expected.put("key2", "value2");
+
+        assertEquals(expected, jsonb.fromJson("{\"map\":{\"key1\":\"value1\",\"key2\":\"value2\"}}", MapModel.class).map);
+
+        assertFalse(MapDeSer.serializerCalled);
+        assertTrue(MapDeSer.deserializerCalled);
+    }
+
+    public static class MapModel implements Serializable {
+        @JsonbTypeSerializer(MapDeSer.class)
+        @JsonbTypeDeserializer(MapDeSer.class)
+        public Map<String, String> map = new HashMap<>();
+    }
+
+    public static class MapDeSer<T> implements JsonbSerializer<T>, JsonbDeserializer<T> {
+        private static boolean serializerCalled;
+        private static boolean deserializerCalled;
+
+        @Override
+        public T deserialize(final JsonParser parser, final DeserializationContext ctx, final Type rtType) {
+            deserializerCalled = true;
+            return ctx.deserialize(rtType, parser);
+        }
+
+        @Override
+        public void serialize(final T obj, final JsonGenerator generator, final SerializationContext ctx) {
+            serializerCalled = true;
+            ctx.serialize(obj, generator);
+        }
+    }
+}
diff --git a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializersObjectWithEmbeddedListTest.java b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializersObjectWithEmbeddedListTest.java
new file mode 100644
index 00000000..81b8293e
--- /dev/null
+++ b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializersObjectWithEmbeddedListTest.java
@@ -0,0 +1,87 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.johnzon.jsonb;
+
+import org.apache.johnzon.jsonb.test.JsonbRule;
+import org.junit.Rule;
+import org.junit.Test;
+
+import javax.json.bind.annotation.JsonbTypeSerializer;
+import javax.json.bind.serializer.JsonbSerializer;
+import javax.json.bind.serializer.SerializationContext;
+import javax.json.stream.JsonGenerator;
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+
+public class SerializersObjectWithEmbeddedListTest {
+    @Rule
+    public final JsonbRule jsonb = new JsonbRule().withFormatting(true);
+
+    @Test
+    public void serializeTest() throws Exception {
+        ObjectModel objectModel = new ObjectModel();
+        objectModel.embeddedList.add("Text1");
+        objectModel.embeddedList.add("Text2");
+        objectModel.otherField = "Other Text";
+
+        WrapperModel wrapper = new WrapperModel();
+        wrapper.object = objectModel;
+
+        assertEquals("" +
+                "{\n" +
+                "  \"object\":{\n" +
+                "    \"embeddedList\":[\n" +
+                "      \"Text1\",\n" +
+                "      \"Text2\"\n" +
+                "    ],\n" +
+                "    \"otherField\":\"Other Text\",\n" +
+                "    \"otherField2\":\"Other Text\",\n" +
+                "    \"embeddedList2\":[\n" +
+                "      \"Text1\",\n" +
+                "      \"Text2\"\n" +
+                "    ],\n" +
+                "    \"otherField3\":\"Other Text\"\n" +
+                "  }\n" +
+                "}" +
+                "", jsonb.toJson(wrapper));
+    }
+
+    public static class WrapperModel {
+        public ObjectModel object;
+    }
+
+    @JsonbTypeSerializer(ObjectDeSer.class)
+    public static class ObjectModel {
+        public List<String> embeddedList = new ArrayList<>();
+        public String otherField;
+    }
+
+    public static class ObjectDeSer implements JsonbSerializer<ObjectModel> {
+        @Override
+        public void serialize(final ObjectModel obj, final JsonGenerator generator, final SerializationContext ctx) {
+            ctx.serialize("embeddedList", obj.embeddedList, generator);
+            ctx.serialize("otherField", obj.otherField, generator);
+            ctx.serialize("otherField2", obj.otherField, generator);
+            ctx.serialize("embeddedList2", obj.embeddedList, generator);
+            ctx.serialize("otherField3", obj.otherField, generator);
+        }
+    }
+}
diff --git a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/test/JsonbRule.java b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/test/JsonbRule.java
index b62d689b..2bb0a58f 100644
--- a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/test/JsonbRule.java
+++ b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/test/JsonbRule.java
@@ -18,11 +18,10 @@
  */
 package org.apache.johnzon.jsonb.test;
 
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.io.Reader;
-import java.io.Writer;
-import java.lang.reflect.Type;
+import org.apache.johnzon.jsonb.api.experimental.JsonbExtension;
+import org.junit.rules.TestRule;
+import org.junit.runner.Description;
+import org.junit.runners.model.Statement;
 
 import javax.json.JsonValue;
 import javax.json.bind.Jsonb;
@@ -31,11 +30,11 @@ import javax.json.bind.JsonbConfig;
 import javax.json.bind.JsonbException;
 import javax.json.stream.JsonGenerator;
 import javax.json.stream.JsonParser;
-
-import org.apache.johnzon.jsonb.api.experimental.JsonbExtension;
-import org.junit.rules.TestRule;
-import org.junit.runner.Description;
-import org.junit.runners.model.Statement;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.Reader;
+import java.io.Writer;
+import java.lang.reflect.Type;
 
 public class JsonbRule implements TestRule, Jsonb, JsonbExtension {
     private Jsonb jsonb;
@@ -47,6 +46,11 @@ public class JsonbRule implements TestRule, Jsonb, JsonbExtension {
         return this;
     }
 
+    public JsonbRule withFormatting(final boolean format) {
+        config.withFormatting(format);
+        return this;
+    }
+
     @Override
     public Statement apply(final Statement statement, final Description description) {
         return new Statement() {
