diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
index 8b8c4cd2..4d6e8034 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
@@ -47,7 +47,6 @@ import java.io.StringReader;
 import java.io.StringWriter;
 import java.io.Writer;
 import java.lang.reflect.Array;
-import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.math.BigDecimal;
@@ -104,79 +103,6 @@ public class Mapper implements Closeable {
         this.closeables = closeables;
     }
 
-    private static JsonGenerator writePrimitives(final JsonGenerator generator, final Object value) {
-        if (value == null) {
-            return null; // fake a write
-        }
-
-        final Class<?> type = value.getClass();
-        if (type == String.class) {
-            return generator.write(value.toString());
-        } else if (type == long.class || type == Long.class) {
-            return generator.write(Long.class.cast(value).longValue());
-        } else if (isInt(type)) {
-            return generator.write(Number.class.cast(value).intValue());
-        } else if (isFloat(type)) {
-            final double doubleValue = Number.class.cast(value).doubleValue();
-            if (Double.isNaN(doubleValue)) {
-                return generator;
-            }
-            return generator.write(doubleValue);
-        } else if (type == boolean.class || type == Boolean.class) {
-            return generator.write(Boolean.class.cast(value));
-        } else if (type == BigDecimal.class) {
-            return generator.write(BigDecimal.class.cast(value));
-        } else if (type == BigInteger.class) {
-            return generator.write(BigInteger.class.cast(value));
-        } else if (type == char.class || type == Character.class) {
-            return generator.write(Character.class.cast(value).toString());
-        }
-        return null;
-    }
-
-    private static JsonGenerator writePrimitives(final JsonGenerator generator, final String key, final Class<?> type, final Object value) {
-        if (type == String.class) {
-            return generator.write(key, value.toString());
-        } else if (type == long.class || type == Long.class) {
-            return generator.write(key, Long.class.cast(value).longValue());
-        } else if (isInt(type)) {
-            return generator.write(key, Number.class.cast(value).intValue());
-        } else if (isFloat(type)) {
-            final double doubleValue = Number.class.cast(value).doubleValue();
-            if (Double.isNaN(doubleValue)) {
-                return generator;
-            }
-            return generator.write(key, doubleValue);
-        } else if (type == boolean.class || type == Boolean.class) {
-            return generator.write(key, Boolean.class.cast(value));
-        } else if (type == BigDecimal.class) {
-            return generator.write(key, BigDecimal.class.cast(value));
-        } else if (type == BigInteger.class) {
-            return generator.write(key, BigInteger.class.cast(value));
-        } else if (type == char.class || type == Character.class) {
-            return generator.write(key, Character.class.cast(value).toString());
-        }
-        return generator;
-    }
-
-    private static boolean isInt(final Class<?> type) {
-        return type == int.class || type == Integer.class
-                || type == byte.class || type == Byte.class
-                || type == short.class || type == Short.class;
-    }
-
-    private static boolean isFloat(final Class<?> type) {
-        return type == double.class || type == Double.class
-                || type == float.class || type == Float.class;
-    }
-
-    private static <T> Object doConvertFrom(final T value, final Adapter<T, Object> converter) {
-        if (converter == null) {
-            throw new MapperException("can't convert " + value + " to String");
-        }
-        return converter.from(value);
-    }
-
     /**
      * @deprecated see MapperConfig
      */
@@ -236,24 +162,6 @@ public class Mapper implements Closeable {
         }
     }
 
-    private <T> JsonGenerator doWriteArray(final Collection<T> object, final JsonGenerator inGenerator) {
-        JsonGenerator generator = inGenerator;
-        if (object == null) {
-            generator = generator.writeStartArray().writeEnd();
-        } else {
-            generator = generator.writeStartArray();
-            for (final T t : object) {
-                if (JsonValue.class.isInstance(t)) {
-                    generator = generator.write(JsonValue.class.cast(t));
-                } else {
-                    generator = writeItem(generator, t);
-                }
-            }
-            generator = generator.writeEnd();
-        }
-        return generator;
-    }
-
     public <T> void writeIterable(final Iterable<T> object, final OutputStream stream) {
         writeIterable(object, new OutputStreamWriter(stream, config.getEncoding()));
     }
@@ -325,186 +233,6 @@ public class Mapper implements Closeable {
     }
 
 
-    private JsonGenerator doWriteObject(final JsonGenerator generator, final Object object) {
-        try {
-            JsonGenerator gen = generator;
-            if (object == null) {
-                return generator;
-            }
-
-            if (Map.class.isInstance(object)) {
-                gen = gen.writeStartObject();
-                gen = writeMapBody((Map<?, ?>) object, gen, null);
-                gen = gen.writeEnd();
-                return gen;
-            }
-
-            final JsonGenerator jsonGenerator = writePrimitives(generator, object);
-            if (jsonGenerator != null) {
-                return jsonGenerator;
-            }
-
-            final Class<?> objectClass = object.getClass();
-            if (objectClass.isEnum()) {
-                final Adapter adapter = findAdapter(objectClass);
-                final String adaptedValue = adapter.from(object).toString(); // we know it ends as String for enums
-                return gen.write(adaptedValue);
-            }
-
-            gen = gen.writeStartObject();
-            gen = doWriteObjectBody(gen, object);
-            return gen.writeEnd();
-        } catch (final InvocationTargetException e) {
-            throw new MapperException(e);
-        } catch (final IllegalAccessException e) {
-            throw new MapperException(e);
-        }
-    }
-
-    private JsonGenerator doWriteObjectBody(final JsonGenerator gen, final Object object) throws IllegalAccessException, InvocationTargetException {
-        final Class<?> objectClass = object.getClass();
-        final Mappings.ClassMapping classMapping = mappings.findOrCreateClassMapping(objectClass);
-        if (classMapping == null) {
-            throw new MapperException("No mapping for " + objectClass.getName());
-        }
-
-        JsonGenerator generator = gen;
-        for (final Map.Entry<String, Mappings.Getter> getterEntry : classMapping.getters.entrySet()) {
-            final Mappings.Getter getter = getterEntry.getValue();
-            if (getter.version >= 0 && config.getVersion() >= getter.version) {
-                continue;
-            }
-
-            final Object value = getter.reader.read(object);
-            if (JsonValue.class.isInstance(value)) {
-                generator = generator.write(getterEntry.getKey(), JsonValue.class.cast(value));
-                continue;
-            }
-
-            if (value == null) {
-                if (config.isSkipNull() && !getter.reader.isNillable()) {
-                    continue;
-                } else {
-                    gen.writeNull(getterEntry.getKey());
-                    continue;
-                }
-            }
-
-            final Object val = getter.converter == null ? value : getter.converter.from(value);
-
-            generator = writeValue(generator, val.getClass(),
-                    getter.primitive, getter.array,
-                    getter.collection, getter.map,
-                    getter.itemConverter,
-                    getterEntry.getKey(),
-                    val);
-        }
-        return generator;
-    }
-
-    private JsonGenerator writeMapBody(final Map<?, ?> object, final JsonGenerator gen, final Adapter itemConverter) throws InvocationTargetException, IllegalAccessException {
-        JsonGenerator generator = gen;
-        for (final Map.Entry<?, ?> entry : ((Map<?, ?>) object).entrySet()) {
-            final Object value = entry.getValue();
-            final Object key = entry.getKey();
-
-            if (value == null) {
-                if (config.isSkipNull()) {
-                    continue;
-                } else {
-                    gen.writeNull(key == null ? "null" : key.toString());
-                    continue;
-                }
-            }
-
-            final Class<?> valueClass = value.getClass();
-            final boolean primitive = Mappings.isPrimitive(valueClass);
-            final boolean clazz = mappings.getClassMapping(valueClass) != null;
-            final boolean array = clazz || primitive ? false : valueClass.isArray();
-            final boolean collection = clazz || primitive || array ? false : Collection.class.isAssignableFrom(valueClass);
-            final boolean map = clazz || primitive || array || collection ? false : Map.class.isAssignableFrom(valueClass);
-            generator = writeValue(generator, valueClass,
-                    primitive, array, collection, map, itemConverter,
-                    key == null ? "null" : key.toString(), value);
-        }
-        return generator;
-    }
-
-    private JsonGenerator writeValue(final JsonGenerator generator, final Class<?> type,
-                                     final boolean primitive, final boolean array,
-                                     final boolean collection, final boolean map,
-                                     final Adapter itemConverter,
-                                     final String key, final Object value) throws InvocationTargetException, IllegalAccessException {
-        if (array) {
-            final int length = Array.getLength(value);
-            if (length == 0 && config.isSkipEmptyArray()) {
-                return generator;
-            }
-
-            if(config.isTreatByteArrayAsBase64() && (type == byte[].class /*|| type == Byte[].class*/)) {
-                String base64EncodedByteArray = DatatypeConverter.printBase64Binary((byte[]) value);
-                generator.write(key, base64EncodedByteArray);
-                return generator;
-            }
-            if(config.isTreatByteArrayAsBase64URL() && (type == byte[].class /*|| type == Byte[].class*/)) {
-                return generator.write(key, String.valueOf(Adapter.class.cast(config.getAdapters().get(new AdapterKey(byte[].class, String.class))).to(value)));
-            }
-
-            JsonGenerator gen = generator.writeStartArray(key);
-            for (int i = 0; i < length; i++) {
-                final Object o = Array.get(value, i);
-                gen = writeItem(gen, itemConverter != null ? itemConverter.from(o) : o);
-            }
-            return gen.writeEnd();
-        } else if (collection) {
-            JsonGenerator gen = generator.writeStartArray(key);
-            for (final Object o : Collection.class.cast(value)) {
-                gen = writeItem(gen, itemConverter != null ? itemConverter.from(o) : o);
-            }
-            return gen.writeEnd();
-        } else if (map) {
-            JsonGenerator gen = generator.writeStartObject(key);
-            gen = writeMapBody((Map<?, ?>) value, gen, itemConverter);
-            return gen.writeEnd();
-        } else if (primitive) {
-            return writePrimitives(generator, key, type, value);
-        } else {
-            final Adapter converter = findAdapter(type);
-            if (converter != null) {
-                final Object adapted = doConvertFrom(value, converter);
-                final JsonGenerator written = writePrimitives(generator, key, adapted.getClass(), adapted);
-                if (written != null) {
-                    return written;
-                }
-                return writeValue(generator, String.class, true, false, false, false, null, key, adapted);
-            }
-            return doWriteObjectBody(generator.writeStartObject(key), value).writeEnd();
-        }
-    }
-
-    private JsonGenerator writeItem(final JsonGenerator generator, final Object o) {
-        JsonGenerator newGen = writePrimitives(generator, o);
-        if (newGen == null) {
-            if (Collection.class.isInstance(o)) {
-                newGen = doWriteArray(Collection.class.cast(o), generator);
-            } else if (o != null && o.getClass().isArray()) {
-                final int length = Array.getLength(o);
-                if (length > 0 || !config.isSkipEmptyArray()) {
-                    newGen = generator.writeStartArray();
-                    for (int i = 0; i < length; i++) {
-                        newGen = writeItem(newGen, Array.get(o, i));
-                    }
-                    newGen = newGen.writeEnd();
-                }
-            } else if (o == null) {
-                newGen = generator.writeNull();
-            } else {
-                newGen = doWriteObject(generator, o);
-            }
-        }
-        return newGen;
-    }
-
     public <T> T readObject(final String string, final Type clazz) {
         return readObject(new StringReader(string), clazz);
     }
