diff --git a/tika-translate/src/main/java/org/apache/tika/language/translate/MicrosoftTranslator.java b/tika-translate/src/main/java/org/apache/tika/language/translate/MicrosoftTranslator.java
index 8e157df28..85575deba 100644
--- a/tika-translate/src/main/java/org/apache/tika/language/translate/MicrosoftTranslator.java
+++ b/tika-translate/src/main/java/org/apache/tika/language/translate/MicrosoftTranslator.java
@@ -56,7 +56,7 @@ public class MicrosoftTranslator implements Translator {
                 props.load(stream);
                 clientId = props.getProperty(ID_PROPERTY);
                 clientSecret = props.getProperty(SECRET_PROPERTY);
-                if (!clientId.equals(DEFAULT_ID) && !clientSecret.equals(DEFAULT_SECRET)) available = true;
+                this.available = checkAvailable();   
             }
         } catch (IOException e) {
         	e.printStackTrace();
@@ -119,7 +119,7 @@ public class MicrosoftTranslator implements Translator {
      */
     public void setId(String id){
     	this.clientId = id;
-        if (!clientId.equals(DEFAULT_ID) && !clientSecret.equals(DEFAULT_SECRET)) available = true;
+        this.available = checkAvailable();   
     }
     
     /**
@@ -128,6 +128,13 @@ public class MicrosoftTranslator implements Translator {
      */
     public void setSecret(String secret){
     	this.clientSecret = secret;
-        if (!clientId.equals(DEFAULT_ID) && !clientSecret.equals(DEFAULT_SECRET)) available = true;    	
+        this.available = checkAvailable();   	
+    }
+    
+    private boolean checkAvailable(){
+       return clientId != null && 
+    		   !clientId.equals(DEFAULT_ID) && 
+    		   clientSecret != null && 
+    		   !clientSecret.equals(DEFAULT_SECRET);
     }
 }
diff --git a/tika-translate/src/test/java/org/apache/tika/language/translate/MicrosoftTranslatorTest.java b/tika-translate/src/test/java/org/apache/tika/language/translate/MicrosoftTranslatorTest.java
index 00ed883e9..a35281d51 100644
--- a/tika-translate/src/test/java/org/apache/tika/language/translate/MicrosoftTranslatorTest.java
+++ b/tika-translate/src/test/java/org/apache/tika/language/translate/MicrosoftTranslatorTest.java
@@ -21,24 +21,24 @@ import org.junit.Before;
 import org.junit.Test;
 
 import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
 
 /**
  * Test cases for the {@link MicrosoftTranslator} class.
  */
 public class MicrosoftTranslatorTest {
-    Tika tika;
+    MicrosoftTranslator translator;
     @Before
     public void setUp() {
-        tika = new Tika();
+        translator = new MicrosoftTranslator();
     }
 
     @Test
     public void testSimpleTranslate() throws Exception {
         String source = "hello";
         String expected = "salut";
-        String translated = tika.translate(source, "en", "fr");
-        System.err.println(tika.getTranslator().isAvailable());
-        if (tika.getTranslator().isAvailable()) assertTrue("Translate " + source + " to " + expected + " (was " + translated + ")",
+        String translated = translator.translate(source, "en", "fr");
+        if (translator.isAvailable()) assertTrue("Translate " + source + " to " + expected + " (was " + translated + ")",
                 expected.equalsIgnoreCase(translated));
     }
 
@@ -46,10 +46,31 @@ public class MicrosoftTranslatorTest {
     public void testSimpleDetectTranslate() throws Exception {
         String source = "hello";
         String expected = "salut";
-        String translated = tika.translate(source, "fr");
-        System.err.println(tika.getTranslator().isAvailable());
-        if (tika.getTranslator().isAvailable()) assertTrue("Translate " + source + " to " + expected + " (was " + translated + ")",
+        String translated = translator.translate(source, "fr");
+        if (translator.isAvailable()) assertTrue("Translate " + source + " to " + expected + " (was " + translated + ")",
                 expected.equalsIgnoreCase(translated));
     }
+    
+    @Test
+    public void testSettersAndIsAvailable(){
+    	try{
+    		translator.setId("foo");
+    		translator.setSecret("bar");
+    	}
+    	catch(Exception e){
+    		e.printStackTrace();
+    		fail(e.getMessage());
+    	}
+    	//reset
+    	translator = new MicrosoftTranslator();
+    	try{
+    		translator.setSecret("bar");
+    		translator.setId("foo");
+    	}
+    	catch(Exception e){
+    		e.printStackTrace();
+    		fail(e.getMessage());
+    	}
+    }
 
 }
