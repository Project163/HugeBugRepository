diff --git a/apache-rat-core/src/main/java/org/apache/rat/report/claim/ClaimStatistic.java b/apache-rat-core/src/main/java/org/apache/rat/report/claim/ClaimStatistic.java
index 139510c8..97d8dcc1 100644
--- a/apache-rat-core/src/main/java/org/apache/rat/report/claim/ClaimStatistic.java
+++ b/apache-rat-core/src/main/java/org/apache/rat/report/claim/ClaimStatistic.java
@@ -44,7 +44,7 @@ public class ClaimStatistic {
         BINARIES("A count of binary files.", -1, 0),
         /** count of distinct document types */
         DOCUMENT_TYPES("A count of distinct document types.", -1, 1),
-        /** count of generated files */
+        /** count of generated/ignored files */
         IGNORED("A count of ignored files.", -1, 0),
         /** count of license categories */
         LICENSE_CATEGORIES("A count of distinct license categories.", -1, 1),
@@ -60,11 +60,11 @@ public class ClaimStatistic {
         UNKNOWN("A count of unknown file types.", -1, 0);
 
         /** The description of the counter */
-        private String description;
+        private final String description;
         /** The default max value for the counter */
-        private int defaultMaxValue;
-        /** THe default minimum value for the counter */
-        private int defaultMinValue;
+        private final int defaultMaxValue;
+        /** The default minimum value for the counter */
+        private final int defaultMinValue;
 
         Counter(final String description, final int defaultMaxValue, final int defaultMinValue) {
             this.description = description;
@@ -273,7 +273,7 @@ public class ClaimStatistic {
 
         /**
          * Increment the count.
-         * @param count the count to increment by (may be negative)
+         * @param count the count to increment by (can be negative).
          * @return this.
          */
         public IntCounter increment(final int count) {
diff --git a/apache-rat-core/src/test/java/org/apache/rat/ReporterTest.java b/apache-rat-core/src/test/java/org/apache/rat/ReporterTest.java
index e292184b..d9ae423a 100644
--- a/apache-rat-core/src/test/java/org/apache/rat/ReporterTest.java
+++ b/apache-rat-core/src/test/java/org/apache/rat/ReporterTest.java
@@ -26,7 +26,6 @@ import static org.assertj.core.api.Fail.fail;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
-import java.io.IOException;
 import java.io.PrintStream;
 import java.nio.charset.StandardCharsets;
 
@@ -167,7 +166,7 @@ public class ReporterTest {
     
     private static Map<String, String> mapOf(String... parts) {
         Map<String, String> map = new HashMap<>();
-        for (int i=0; i<parts.length; i+=2) {
+        for (int i = 0; i < parts.length; i+=2) {
             map.put(parts[i], parts[i+1]);
         }
         return map;
@@ -204,7 +203,6 @@ public class ReporterTest {
         expected.put("/tri.txt", mapOf("encoding", "ISO-8859-1", "mediaType", "text/plain",
                 "type", "STANDARD"));
 
-
         File output = new File(tempDirectory, "testXMLOutput");
 
         CommandLine commandLine = new DefaultParser().parse(OptionCollection.buildOptions(), new String[]{"--output-style", "xml", "--output-file", output.getPath(), basedir});
@@ -219,7 +217,6 @@ public class ReporterTest {
             XmlUtils.assertAttributes(doc, xPath, String.format("/rat-report/resource[@name='%s']", entry.getKey()), entry.getValue());
         }
 
-
         NodeList nodeList = XmlUtils.getNodeList(doc, xPath, "/rat-report/resource/license[@approval='false']");
         assertThat(nodeList.getLength()).isEqualTo(2);
 
@@ -283,9 +280,6 @@ public class ReporterTest {
         expected.put("/generated.txt", Collections.emptyMap());
         expected.put("/plain.json", Collections.emptyMap());
         expected.put("/sub/Empty.txt", unknownLicense);
-        expected.put("/tri.txt", apacheLicense);
-        expected.put("/tri.txt", mapOf("approval", "true", "family", "BSD-3", "id", "BSD-3",
-                "name", "BSD 3 clause"));
         expected.put("/tri.txt", mapOf("approval", "true", "family", "BSD-3", "id", "TMF",
                 "name", "The Telemanagement Forum License"));
 
@@ -300,17 +294,16 @@ public class ReporterTest {
                         entry.getKey(), attrs.get("id")), attrs);
             }
         }
-
     }
 
     /**
      * Finds a node via xpath on the document. And then checks family, approval and
      * type of elements of the node.
      *
-     * @param doc The document to check/
+     * @param doc The document to check
      * @param xpath the XPath instance to use.
      * @param resource the xpath statement to locate the node.
-     * @param licenseInfo the license info for the node. (may = null)
+     * @param licenseInfo the license info for the node. (can be null)
      * @param type the type of resource located.
      * @throws Exception on XPath error.
      */
@@ -332,7 +325,7 @@ public class ReporterTest {
         }
     }
 
-    private ReportConfiguration initializeConfiguration() throws IOException {
+    private ReportConfiguration initializeConfiguration() {
         Defaults defaults = Defaults.builder().build();
         final File elementsFile = Resources.getExampleResource("exampleData");
         final ReportConfiguration configuration = new ReportConfiguration();
