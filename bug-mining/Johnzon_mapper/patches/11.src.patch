diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
index e733af06..45899c4d 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
@@ -317,7 +317,7 @@ public class Mapper {
 
             if (Map.class.isInstance(object)) {
                 gen = gen.writeStartObject();
-                gen = writeMapBody((Map<?, ?>) object, gen);
+                gen = writeMapBody((Map<?, ?>) object, gen, null);
                 gen = gen.writeEnd();
                 return gen;
             }
@@ -368,7 +368,7 @@ public class Mapper {
         return generator;
     }
 
-    private JsonGenerator writeMapBody(final Map<?, ?> object, final JsonGenerator gen) throws InvocationTargetException, IllegalAccessException {
+    private JsonGenerator writeMapBody(final Map<?, ?> object, final JsonGenerator gen, final Converter itemConverter) throws InvocationTargetException, IllegalAccessException {
         JsonGenerator generator = gen;
         for (final Map.Entry<?, ?> entry : ((Map<?, ?>) object).entrySet()) {
             final Object value = entry.getValue();
@@ -390,7 +390,7 @@ public class Mapper {
             final boolean collection = clazz || primitive || array ? false : Collection.class.isAssignableFrom(valueClass);
             final boolean map = clazz || primitive || array || collection ? false : Map.class.isAssignableFrom(valueClass);
             generator = writeValue(generator, valueClass,
-                    primitive, array, collection, map, null /* TODO? */,
+                    primitive, array, collection, map, itemConverter,
                     key == null ? "null" : key.toString(), value);
         }
         return generator;
@@ -427,7 +427,7 @@ public class Mapper {
             return gen.writeEnd();
         } else if (map) {
             JsonGenerator gen = generator.writeStartObject(key);
-            gen = writeMapBody((Map<?, ?>) value, gen);
+            gen = writeMapBody((Map<?, ?>) value, gen, itemConverter);
             return gen.writeEnd();
         } else if (primitive) {
             return writePrimitives(generator, key, type, value);
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/reflection/Mappings.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/reflection/Mappings.java
index 69cf6bb3..b75823c4 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/reflection/Mappings.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/reflection/Mappings.java
@@ -168,7 +168,6 @@ public class Mappings {
             this.reader = reader;
             this.version = version;
             this.array = array;
-            this.map = map && converter == null;
             this.collection = collection;
             this.primitive = primitive;
             if (converter != null && matches(reader.getType(), converter)) {
@@ -181,6 +180,7 @@ public class Mappings {
                 this.converter = null;
                 this.itemConverter = null;
             }
+            this.map = map && this.converter == null;
         }
 
         @Override
diff --git a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/ObjectConverterTest.java b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/ObjectConverterTest.java
index f138a0b6..20064be5 100644
--- a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/ObjectConverterTest.java
+++ b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/ObjectConverterTest.java
@@ -24,7 +24,9 @@ import org.junit.Test;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Comparator;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 public class ObjectConverterTest {
 
@@ -33,6 +35,8 @@ public class ObjectConverterTest {
         Contact contact = new Contact();
         contact.linkedPersons.addAll(Arrays.asList(new Person("f1", "l1"), new Person("f2", "l2")));
         contact.linkedPersonsArray = new Person[] { new Person("f3", "l3"), new Person("f4", "l4") };
+        contact.personMap.put("cinq", new Person("f5", "l5"));
+        contact.personMap.put("six", new Person("f6", "l6"));
 
         MapperBuilder mapperBuilder = new MapperBuilder();
         mapperBuilder.addConverter(Person.class, new PersonConverter());
@@ -45,7 +49,7 @@ public class ObjectConverterTest {
 
         String s = mapper.writeObjectAsString(contact);
         Contact c = mapper.readObject(s, Contact.class);
-        String expected = "{\"linkedPersons\":[\"f1|l1\",\"f2|l2\"],\"linkedPersonsArray\":[\"f3|l3\",\"f4|l4\"]}";
+        String expected = "{\"linkedPersons\":[\"f1|l1\",\"f2|l2\"],\"linkedPersonsArray\":[\"f3|l3\",\"f4|l4\"],\"personMap\":{\"six\":\"f6|l6\",\"cinq\":\"f5|l5\"}}";
         Assert.assertEquals(expected, s);
         Assert.assertEquals(contact, c);
     }
@@ -80,6 +84,9 @@ public class ObjectConverterTest {
         @JohnzonConverter(PersonConverter.class)
         private Person[] linkedPersonsArray;
 
+        @JohnzonConverter(PersonConverter.class)
+        private Map<String, Person> personMap = new HashMap<String, Person>();
+
         @Override
         public boolean equals(Object o) {
             if (this == o) {
@@ -90,7 +97,8 @@ public class ObjectConverterTest {
             }
 
             final Contact contact = Contact.class.cast(o);
-            return linkedPersons.equals(contact.linkedPersons) && Arrays.equals(linkedPersonsArray, contact.linkedPersonsArray);
+            return linkedPersons.equals(contact.linkedPersons) && personMap.equals(contact.personMap)
+                && Arrays.equals(linkedPersonsArray, contact.linkedPersonsArray);
 
         }
 
