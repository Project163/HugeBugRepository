diff --git a/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JsonbAccessMode.java b/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JsonbAccessMode.java
index c08d5297..87819caf 100644
--- a/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JsonbAccessMode.java
+++ b/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JsonbAccessMode.java
@@ -781,16 +781,18 @@ public class JsonbAccessMode implements AccessMode, Closeable {
         private ObjectConverter.Reader reader;
 
         ReaderConverters(final DecoratedType annotationHolder) {
+            final boolean numberType = isNumberType(annotationHolder.getType());
+            final boolean dateType = isDateType(annotationHolder.getType());
             final JsonbTypeDeserializer deserializer = annotationHolder.getAnnotation(JsonbTypeDeserializer.class);
             final JsonbTypeAdapter adapter = annotationHolder.getAnnotation(JsonbTypeAdapter.class);
-            JsonbDateFormat dateFormat = annotationHolder.getAnnotation(JsonbDateFormat.class);
-            JsonbNumberFormat numberFormat = annotationHolder.getAnnotation(JsonbNumberFormat.class);
+            JsonbDateFormat dateFormat = dateType ? annotationHolder.getAnnotation(JsonbDateFormat.class) : null;
+            JsonbNumberFormat numberFormat = numberType ? annotationHolder.getAnnotation(JsonbNumberFormat.class) : null;
             final JohnzonConverter johnzonConverter = annotationHolder.getAnnotation(JohnzonConverter.class);
             validateAnnotations(annotationHolder, adapter, dateFormat, numberFormat, johnzonConverter);
-            if (dateFormat == null && isDateType(annotationHolder.getType())) {
+            if (dateFormat == null && dateType) {
                 dateFormat = annotationHolder.getClassOrPackageAnnotation(JsonbDateFormat.class);
             }
-            if (numberFormat == null && isNumberType(annotationHolder.getType())) {
+            if (numberFormat == null && numberType) {
                 numberFormat = annotationHolder.getClassOrPackageAnnotation(JsonbNumberFormat.class);
             }
 
@@ -869,23 +871,25 @@ public class JsonbAccessMode implements AccessMode, Closeable {
         private Adapter<?, ?> converter;
         private ObjectConverter.Writer writer;
 
-        WriterConverters(final DecoratedType initialReader, final Types types) {
-            final JsonbTypeSerializer serializer = initialReader.getAnnotation(JsonbTypeSerializer.class);
-            final JsonbTypeAdapter adapter = initialReader.getAnnotation(JsonbTypeAdapter.class);
-            JsonbDateFormat dateFormat = initialReader.getAnnotation(JsonbDateFormat.class);
-            JsonbNumberFormat numberFormat = initialReader.getAnnotation(JsonbNumberFormat.class);
-            final JohnzonConverter johnzonConverter = initialReader.getAnnotation(JohnzonConverter.class);
-            validateAnnotations(initialReader, adapter, dateFormat, numberFormat, johnzonConverter);
-            if (dateFormat == null && isDateType(initialReader.getType())) {
-                dateFormat = initialReader.getClassOrPackageAnnotation(JsonbDateFormat.class);
+        WriterConverters(final DecoratedType reader, final Types types) {
+            final boolean numberType = isNumberType(reader.getType());
+            final boolean dateType = isDateType(reader.getType());
+            final JsonbTypeSerializer serializer = reader.getAnnotation(JsonbTypeSerializer.class);
+            final JsonbTypeAdapter adapter = reader.getAnnotation(JsonbTypeAdapter.class);
+            JsonbDateFormat dateFormat = dateType ? reader.getAnnotation(JsonbDateFormat.class) : null;
+            JsonbNumberFormat numberFormat = numberType ? reader.getAnnotation(JsonbNumberFormat.class) : null;
+            final JohnzonConverter johnzonConverter = reader.getAnnotation(JohnzonConverter.class);
+            validateAnnotations(reader, adapter, dateFormat, numberFormat, johnzonConverter);
+            if (dateFormat == null && isDateType(reader.getType())) {
+                dateFormat = reader.getClassOrPackageAnnotation(JsonbDateFormat.class);
             }
-            if (numberFormat == null && isNumberType(initialReader.getType())) {
-                numberFormat = initialReader.getClassOrPackageAnnotation(JsonbNumberFormat.class);
+            if (numberFormat == null && isNumberType(reader.getType())) {
+                numberFormat = reader.getClassOrPackageAnnotation(JsonbNumberFormat.class);
             }
 
             converter = adapter == null && dateFormat == null && numberFormat == null && johnzonConverter == null ?
-                    defaultConverters.get(new AdapterKey(initialReader.getType(), String.class)) :
-                    toConverter(types, initialReader.getType(), adapter, dateFormat, numberFormat);
+                    defaultConverters.get(new AdapterKey(reader.getType(), String.class)) :
+                    toConverter(types, reader.getType(), adapter, dateFormat, numberFormat);
 
             if (serializer != null) {
                 final Class<? extends JsonbSerializer> value = serializer.value();
diff --git a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/DefaultMappingTest.java b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/DefaultMappingTest.java
index 0d92a32c..e7076638 100644
--- a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/DefaultMappingTest.java
+++ b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/DefaultMappingTest.java
@@ -1067,10 +1067,11 @@ public class DefaultMappingTest {
         assertEquals("{\"aField\":\"aField\",\"aa\":\"aa\",\"bField\":\"bField\",\"bb\":\"bb\",\"cField\":\"cField\",\"cc\":\"cc\"}",
             JSONB.toJson(attributesOrderingWithInheritance));
 
+        // important, see OrderTest#deserializationRespectsOrderToo
         AttributesOrderingWithCounterClass attributesOrderingWithCounterClass = JSONB.fromJson("{\"second\":\"a\",\"third\":\"b\",\"first\":\"c\"}", AttributesOrderingWithCounterClass.class);
-        assertEquals("a1", attributesOrderingWithCounterClass.second);
-        assertEquals("b2", attributesOrderingWithCounterClass.third);
-        assertEquals("c0", attributesOrderingWithCounterClass.first);
+        assertEquals("a0", attributesOrderingWithCounterClass.second);
+        assertEquals("b1", attributesOrderingWithCounterClass.third);
+        assertEquals("c2", attributesOrderingWithCounterClass.first);
     }
 
     public static void toJsonNullValues() {
diff --git a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/OrderTest.java b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/OrderTest.java
index 355032d7..a2630d31 100644
--- a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/OrderTest.java
+++ b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/OrderTest.java
@@ -21,21 +21,8 @@ package org.apache.johnzon.jsonb;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
-import java.lang.reflect.Type;
-import java.util.LinkedList;
-import java.util.List;
-
 import javax.json.bind.annotation.JsonbPropertyOrder;
-import javax.json.bind.annotation.JsonbTypeDeserializer;
-import javax.json.bind.annotation.JsonbTypeSerializer;
-import javax.json.bind.serializer.DeserializationContext;
-import javax.json.bind.serializer.JsonbDeserializer;
-import javax.json.bind.serializer.JsonbSerializer;
-import javax.json.bind.serializer.SerializationContext;
-import javax.json.stream.JsonGenerator;
-import javax.json.stream.JsonParser;
-
-import org.apache.johnzon.jsonb.model.Holder;
+
 import org.apache.johnzon.jsonb.test.JsonbRule;
 import org.junit.Rule;
 import org.junit.Test;
@@ -51,147 +38,96 @@ public class OrderTest {
                 "\\{\\s*\"third\"\\s*:\\s*\"Third\"\\s*,\\s*\"fourth\"\\s*:\\s*\"Fourth\".*}"));
     }
 
-    @Test
-    public void typeSerializer() {
-        final HolderHolder container = new HolderHolder();
-        final StringHolder instance = new StringHolder();
-        instance.setInstance("Test String");
-        container.setInstance(instance);
-
-        final String json = jsonb.toJson(container);
-        assertTrue(json, json.matches(
-                "\\{\\s*\"instance\"\\s*:\\s*\\{\\s*\"instance\"\\s*:\\s*\"Test String Serialized\"\\s*}\\s*}"));
-
-        final HolderHolder unmarshalledObject = jsonb.fromJson("{ \"instance\" : { \"instance\" : \"Test String\" } }", HolderHolder.class);
-        assertEquals("Test String Deserialized", unmarshalledObject.getInstance().getInstance());
+    @Test // TODO: not sure it is good to respect json and not mapping, we can challenge the spec on it
+    public void deserializationRespectsOrderToo() {
+        final String json = this.jsonb.toJson(new PartialOrder() {{ setStringInstance("Test String"); }});
+        assertEquals("{\"longInstance\":0,\"intInstance\":0,\"stringInstance\":\"Test String\",\"anIntInstance\":0,\"anotherIntInstance\":0,\"yetAnotherIntInstance\":0}", json);
+        assertTrue(json, json.contains("anotherIntInstance"));
+        assertTrue(json, json.contains("anIntInstance"));
+        assertTrue(json, json.contains("yetAnotherIntInstance"));
+
+        final PartialOrder unmarshalledObject = jsonb.fromJson(
+                "{ \"anIntInstance\" : 100, \"yetAnotherIntInstance\":100, \"anotherIntInstance\": 100, " +
+                        "\"intInstance\" : 1, \"stringInstance\" : \"Test String\", \"longInstance\" : 0 }",
+                PartialOrder.class);
+        assertEquals(3, unmarshalledObject.getIntInstance());
+        assertEquals(100, unmarshalledObject.getAnotherIntInstance());
+        assertEquals(100, unmarshalledObject.getYetAnotherIntInstance());
+        assertEquals(100, unmarshalledObject.getAnIntInstance());
     }
 
-    @Test
-    public void arrayTypes() {
-        final ArrayHolder container = new ArrayHolder();
-        final StringHolder instance1 = new StringHolder();
-        instance1.setInstance("Test String 1");
-        final StringHolder instance2 = new StringHolder();
-        instance2.setInstance("Test String 2");
-        container.setInstance(new StringHolder[] { instance1, instance2 });
-
-        final String json = jsonb.toJson(container);
-        assertEquals("{\"instance\":[{\"instance\":\"Test String 1\"},{\"instance\":\"Test String 2\"}]}", json);
-
-        final ArrayHolder unmarshalledObject = jsonb.fromJson(
-                "{ \"instance\" : [ { \"instance\" : \"Test String 1\" }, { \"instance\" : \"Test String 2\" } ] }",
-                ArrayHolder.class);
-        assertEquals("Test String 1", unmarshalledObject.getInstance()[0].getInstance());
-    }
+    @JsonbPropertyOrder({ "longInstance", "intInstance", "stringInstance" })
+    public static class PartialOrder {
+        private int intInstance;
 
-    public static class StringHolder implements Holder<String> {
-        private String instance = "Test";
+        private String stringInstance;
 
-        public String getInstance() {
-            return instance;
-        }
+        private long longInstance;
 
-        public void setInstance(final String instance) {
-            this.instance = instance;
+        private int anIntInstance;
+
+        private int anotherIntInstance;
+
+        private int yetAnotherIntInstance;
+
+        public int getAnIntInstance() {
+            intInstance -= 10;
+            return anIntInstance;
         }
-    }
 
-    public static class SimpleContainerDeserializer implements JsonbDeserializer<StringHolder> {
-        @Override
-        public StringHolder deserialize(final JsonParser parser, final DeserializationContext ctx, final Type type) {
-            final StringHolder container = new StringHolder();
-
-            while (parser.hasNext()) {
-                final JsonParser.Event event = parser.next();
-                if (event == JsonParser.Event.START_OBJECT) {
-                    continue;
-                }
-                if (event == JsonParser.Event.END_OBJECT) {
-                    break;
-                }
-                if (event == JsonParser.Event.KEY_NAME && "instance".equals(parser.getString())) {
-                    container.setInstance(ctx.deserialize(String.class, parser) + " Deserialized");
-                }
-            }
+        public void setAnIntInstance(int anIntInstance) {
+            intInstance -= 30;
+            this.anIntInstance = anIntInstance;
+        }
 
-            return container;
+        public int getAnotherIntInstance() {
+            intInstance -= 100;
+            return anotherIntInstance;
         }
-    }
 
-    public static class SimpleContainerSerializer implements JsonbSerializer<StringHolder> {
-        @Override
-        public void serialize(final StringHolder container, final JsonGenerator generator,
-                              final SerializationContext ctx) {
-            generator.writeStartObject();
-            ctx.serialize("instance", container.getInstance() + " Serialized", generator);
-            generator.writeEnd();
+        public void setAnotherIntInstance(int anotherIntInstance) {
+            intInstance -= 300;
+            this.anotherIntInstance = anotherIntInstance;
         }
-    }
 
-    public static class HolderHolder implements Holder<StringHolder> {
-        @JsonbTypeSerializer(SimpleContainerSerializer.class)
-        @JsonbTypeDeserializer(SimpleContainerDeserializer.class)
-        private StringHolder instance;
+        public int getYetAnotherIntInstance() {
+            intInstance -= 1000;
+            return yetAnotherIntInstance;
+        }
 
-        @Override
-        public StringHolder getInstance() {
-            return instance;
+        public void setYetAnotherIntInstance(int yetAnotherIntInstance) {
+            intInstance -= 3000;
+            this.yetAnotherIntInstance = yetAnotherIntInstance;
         }
 
-        @Override
-        public void setInstance(StringHolder instance) {
-            this.instance = instance;
+        public String getStringInstance() {
+            return stringInstance;
         }
-    }
 
-    public static class ArrayHolder implements Holder<StringHolder[]> {
-        @JsonbTypeSerializer(StringArraySerializer.class)
-        @JsonbTypeDeserializer(StringArrayDeserializer.class)
-        private StringHolder[] instance;
+        public void setStringInstance(String stringInstance) {
+            this.stringInstance = stringInstance;
+            if (intInstance == 1) {
+                intInstance = 2;
+            }
+        }
 
-        @Override
-        public StringHolder[] getInstance() {
-            return instance;
+        public int getIntInstance() {
+            return intInstance;
         }
 
-        @Override
-        public void setInstance(final StringHolder[] instance) {
-            this.instance = instance;
+        public void setIntInstance(int intInstance) {
+            this.intInstance = intInstance;
         }
-    }
 
-    public static class StringArraySerializer implements JsonbSerializer<StringHolder[]> {
-        @Override
-        public void serialize(final StringHolder[] containers,
-                              final JsonGenerator jsonGenerator,
-                              final SerializationContext serializationContext) {
-            jsonGenerator.writeStartArray();
-            for (final StringHolder container : containers) {
-                serializationContext.serialize(container, jsonGenerator);
-            }
-            jsonGenerator.writeEnd();
+        public long getLongInstance() {
+            return longInstance;
         }
-    }
 
-    public static class StringArrayDeserializer implements JsonbDeserializer<StringHolder[]> {
-        @Override
-        public StringHolder[] deserialize(final JsonParser jsonParser,
-                                          final DeserializationContext deserializationContext,
-                                          final Type type) {
-            final List<StringHolder> containers = new LinkedList<>();
-
-            while (jsonParser.hasNext()) {
-                JsonParser.Event event = jsonParser.next();
-                if (event == JsonParser.Event.START_OBJECT) {
-                    containers.add(deserializationContext.deserialize(
-                            new StringHolder() {}.getClass().getGenericSuperclass(), jsonParser));
-                }
-                if (event == JsonParser.Event.END_OBJECT) {
-                    break;
-                }
+        public void setLongInstance(long longInstance) {
+            this.longInstance = longInstance;
+            if (intInstance == 2) {
+                intInstance = 3;
             }
-
-            return containers.toArray(new StringHolder[0]);
         }
     }
 
diff --git a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializerTest.java b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializerTest.java
index 2bd6f38e..79458353 100644
--- a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializerTest.java
+++ b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializerTest.java
@@ -25,6 +25,7 @@ import static org.junit.Assert.assertTrue;
 
 import java.lang.reflect.Type;
 import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
@@ -41,9 +42,48 @@ import javax.json.bind.serializer.SerializationContext;
 import javax.json.stream.JsonGenerator;
 import javax.json.stream.JsonParser;
 
+import org.apache.johnzon.jsonb.model.Holder;
+import org.apache.johnzon.jsonb.test.JsonbRule;
+import org.junit.Rule;
 import org.junit.Test;
 
 public class SerializerTest {
+    @Rule
+    public final JsonbRule jsonb = new JsonbRule();
+
+    @Test
+    public void typeSerializer() {
+        final HolderHolder container = new HolderHolder();
+        final StringHolder instance = new StringHolder();
+        instance.setInstance("Test String");
+        container.setInstance(instance);
+
+        final String json = jsonb.toJson(container);
+        assertTrue(json, json.matches(
+                "\\{\\s*\"instance\"\\s*:\\s*\\{\\s*\"instance\"\\s*:\\s*\"Test String Serialized\"\\s*}\\s*}"));
+
+        final HolderHolder unmarshalledObject = jsonb.fromJson("{ \"instance\" : { \"instance\" : \"Test String\" } }", HolderHolder.class);
+        assertEquals("Test String Deserialized", unmarshalledObject.getInstance().getInstance());
+    }
+
+    @Test
+    public void arrayTypes() {
+        final ArrayHolder container = new ArrayHolder();
+        final StringHolder instance1 = new StringHolder();
+        instance1.setInstance("Test String 1");
+        final StringHolder instance2 = new StringHolder();
+        instance2.setInstance("Test String 2");
+        container.setInstance(new StringHolder[] { instance1, instance2 });
+
+        final String json = jsonb.toJson(container);
+        assertEquals("{\"instance\":[{\"instance\":\"Test String 1\"},{\"instance\":\"Test String 2\"}]}", json);
+
+        final ArrayHolder unmarshalledObject = jsonb.fromJson(
+                "{ \"instance\" : [ { \"instance\" : \"Test String 1\" }, { \"instance\" : \"Test String 2\" } ] }",
+                ArrayHolder.class);
+        assertEquals("Test String 1", unmarshalledObject.getInstance()[0].getInstance());
+    }
+
 
     @Test
     public void roundTrip() {
@@ -131,6 +171,116 @@ public class SerializerTest {
         jsonb.close();
     }
 
+    public static class StringHolder implements Holder<String> {
+        private String instance = "Test";
+
+        public String getInstance() {
+            return instance;
+        }
+
+        public void setInstance(final String instance) {
+            this.instance = instance;
+        }
+    }
+
+    public static class SimpleContainerDeserializer implements JsonbDeserializer<StringHolder> {
+        @Override
+        public StringHolder deserialize(final JsonParser parser, final DeserializationContext ctx, final Type type) {
+            final StringHolder container = new StringHolder();
+
+            while (parser.hasNext()) {
+                final JsonParser.Event event = parser.next();
+                if (event == JsonParser.Event.START_OBJECT) {
+                    continue;
+                }
+                if (event == JsonParser.Event.END_OBJECT) {
+                    break;
+                }
+                if (event == JsonParser.Event.KEY_NAME && "instance".equals(parser.getString())) {
+                    container.setInstance(ctx.deserialize(String.class, parser) + " Deserialized");
+                }
+            }
+
+            return container;
+        }
+    }
+
+    public static class SimpleContainerSerializer implements JsonbSerializer<StringHolder> {
+        @Override
+        public void serialize(final StringHolder container, final JsonGenerator generator,
+                              final SerializationContext ctx) {
+            generator.writeStartObject();
+            ctx.serialize("instance", container.getInstance() + " Serialized", generator);
+            generator.writeEnd();
+        }
+    }
+
+    public static class HolderHolder implements Holder<StringHolder> {
+        @JsonbTypeSerializer(SimpleContainerSerializer.class)
+        @JsonbTypeDeserializer(SimpleContainerDeserializer.class)
+        private StringHolder instance;
+
+        @Override
+        public StringHolder getInstance() {
+            return instance;
+        }
+
+        @Override
+        public void setInstance(StringHolder instance) {
+            this.instance = instance;
+        }
+    }
+
+    public static class ArrayHolder implements Holder<StringHolder[]> {
+        @JsonbTypeSerializer(StringArraySerializer.class)
+        @JsonbTypeDeserializer(StringArrayDeserializer.class)
+        private StringHolder[] instance;
+
+        @Override
+        public StringHolder[] getInstance() {
+            return instance;
+        }
+
+        @Override
+        public void setInstance(final StringHolder[] instance) {
+            this.instance = instance;
+        }
+    }
+
+    public static class StringArraySerializer implements JsonbSerializer<StringHolder[]> {
+        @Override
+        public void serialize(final StringHolder[] containers,
+                              final JsonGenerator jsonGenerator,
+                              final SerializationContext serializationContext) {
+            jsonGenerator.writeStartArray();
+            for (final StringHolder container : containers) {
+                serializationContext.serialize(container, jsonGenerator);
+            }
+            jsonGenerator.writeEnd();
+        }
+    }
+
+    public static class StringArrayDeserializer implements JsonbDeserializer<StringHolder[]> {
+        @Override
+        public StringHolder[] deserialize(final JsonParser jsonParser,
+                                          final DeserializationContext deserializationContext,
+                                          final Type type) {
+            final List<StringHolder> containers = new LinkedList<>();
+
+            while (jsonParser.hasNext()) {
+                JsonParser.Event event = jsonParser.next();
+                if (event == JsonParser.Event.START_OBJECT) {
+                    containers.add(deserializationContext.deserialize(
+                            new StringHolder() {}.getClass().getGenericSuperclass(), jsonParser));
+                }
+                if (event == JsonParser.Event.END_OBJECT) {
+                    break;
+                }
+            }
+
+            return containers.toArray(new StringHolder[0]);
+        }
+    }
 
     public static class Foo {
         public String name;
