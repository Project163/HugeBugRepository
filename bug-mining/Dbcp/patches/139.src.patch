diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 8a65f67d..00a2f6ae 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -61,6 +61,9 @@ The <action> type attribute can be add,update,fix,remove.
 
   <body>
     <release version="2.1.2" date="TBD" description="TBD">
+      <action dev="psteitz" type="fix" issue="DBCP-444">
+        InvalidateConnection can result in closed connection returned by getConnection.
+      <action>
     </release>
     <release version="2.1.1" date="6 Aug 2015" description=
  "This is a patch release, including bug fixes only.">
diff --git a/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java b/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java
index 1a03ee62..59f3b102 100644
--- a/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java
+++ b/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java
@@ -1987,13 +1987,6 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
             throw new IllegalStateException("Cannot invalidate connection: Unwrapping poolable connection failed.", e);
         }
 
-        // attempt to close the connection for good measure
-        try {
-            connection.close();
-        } catch (Exception e) {
-            // ignore any exceptions here
-        }
-
         try {
             connectionPool.invalidateObject(poolableConnection);
         } catch (Exception e) {
diff --git a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java
index 6c7cff92..1f7e6240 100644
--- a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java
+++ b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java
@@ -718,6 +718,43 @@ public class TestBasicDataSource extends TestConnectionPool {
         ds.close();
     }
     
+    /**
+     * JIRA: DBCP-444
+     * Verify that invalidate does not return closed connection to the pool.
+     */
+    @Test
+    public void testConcurrentInvalidateBorrow() throws Exception {
+        ds.setDriverClassName("org.apache.commons.dbcp2.TesterConnRequestCountDriver");
+        ds.setUrl("jdbc:apache:commons:testerConnRequestCountDriver");
+        ds.setTestOnBorrow(true);
+        ds.setValidationQuery("SELECT DUMMY FROM DUAL");
+        ds.setMaxTotal(8);
+        ds.setLifo(true);
+        ds.setMaxWaitMillis(-1);
+        
+        // Threads just borrow and return - validation will trigger close check
+        TestThread testThread1 = new TestThread(1000,0);
+        Thread t1 = new Thread(testThread1);
+        t1.start();
+        TestThread testThread2 = new TestThread(1000,0);
+        Thread t2 = new Thread(testThread1);
+        t2.start();
+        
+        // Grab and invalidate connections
+        for (int i = 0; i < 1000; i++) {
+            Connection conn = ds.getConnection();
+            ds.invalidateConnection(conn);
+        }
+        
+        // Make sure borrow threads complete successfully
+        t1.join();
+        t2.join();
+        assertFalse(testThread1.failed());
+        assertFalse(testThread2.failed());
+        
+        ds.close();
+    }
+    
     /**
      * Make sure setting jmxName to null suppresses JMX registration of connection and statement pools.
      * JIRA: DBCP-434
