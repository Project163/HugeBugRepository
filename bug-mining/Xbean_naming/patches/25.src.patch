diff --git a/xbean-naming/src/main/java/org/apache/xbean/naming/context/WritableContext.java b/xbean-naming/src/main/java/org/apache/xbean/naming/context/WritableContext.java
index 9c65ceb8..f55395ca 100644
--- a/xbean-naming/src/main/java/org/apache/xbean/naming/context/WritableContext.java
+++ b/xbean-naming/src/main/java/org/apache/xbean/naming/context/WritableContext.java
@@ -120,11 +120,11 @@ public class WritableContext extends AbstractFederatedContext {
         if (super.removeBinding(name, removeNotEmptyContext)) {
             return true;
         }
-        removeBinding(bindingsRef, name, removeNotEmptyContext);
+        removeBinding(bindingsRef, name, getNameInNamespace(name), removeNotEmptyContext);
         return true;
     }
 
-    private boolean removeBinding(AtomicReference<Map<String, Object>> bindingsRef, String name, boolean removeNotEmptyContext) throws NamingException {
+    private boolean removeBinding(AtomicReference<Map<String, Object>> bindingsRef, String name, String nameInNamespace, boolean removeNotEmptyContext) throws NamingException {
         writeLock.lock();
         try {
             Map<String, Object> bindings = bindingsRef.get();
@@ -140,7 +140,7 @@ public class WritableContext extends AbstractFederatedContext {
             }
             bindingsRef.set(newBindings);
 
-            Map<String, Object> newIndex = removeFromIndex(name);
+            Map<String, Object> newIndex = removeFromIndex(nameInNamespace);
             indexRef.set(newIndex);
             return true;
         } finally {
@@ -234,7 +234,7 @@ public class WritableContext extends AbstractFederatedContext {
         }
 
         protected boolean removeBinding(String name, boolean removeNotEmptyContext) throws NamingException {
-            if (WritableContext.this.removeBinding(bindingsRef, name, false)) {
+            if (WritableContext.this.removeBinding(bindingsRef, name, getNameInNamespace(name), removeNotEmptyContext)) {
                 return true;
             }
             return super.removeBinding(name, false);
diff --git a/xbean-naming/src/test/java/org/apache/xbean/naming/context/WritableContextTest.java b/xbean-naming/src/test/java/org/apache/xbean/naming/context/WritableContextTest.java
index 312bdc9e..1767f20f 100644
--- a/xbean-naming/src/test/java/org/apache/xbean/naming/context/WritableContextTest.java
+++ b/xbean-naming/src/test/java/org/apache/xbean/naming/context/WritableContextTest.java
@@ -908,5 +908,67 @@ public class WritableContextTest extends AbstractContextTest {
         w.rebind("test/test/GBean/resourceSource", 1);
         assertEquals(new Integer(1), w.lookup("test/test/GBean/resourceSource"));
     }
+    
+    public void testRemoveDeepBinding_Leaf() throws Exception {
+        WritableContext w = new WritableContext("jca:");
+        // Test when only one object
+        w.addDeepBinding(w.getNameParser("").parse("test/test/GBean/resourceSource"), WritableContextTest.STRING_VAL, true, true);
+        assertEquals(WritableContextTest.STRING_VAL, w.lookup("test/test/GBean/resourceSource"));
+        w.removeDeepBinding(w.getNameParser("").parse("test/test/GBean/resourceSource"), true, true);
+        try {
+        	w.lookup("test");
+            fail("Expected NameNotFoundException");
+        } catch (NameNotFoundException expected) {
+        }
+        w.addDeepBinding(w.getNameParser("").parse("test/test/GBean/resourceSource"), WritableContextTest.STRING_VAL, true, true);
+        assertEquals(WritableContextTest.STRING_VAL, w.lookup("test/test/GBean/resourceSource"));
+        w.addDeepBinding(w.getNameParser("").parse("test/test/GBean/rresourceSource2"), new Integer(2), true, true);
+        assertEquals(new Integer(2), w.lookup("test/test/GBean/rresourceSource2"));
+
+        w.removeDeepBinding(w.getNameParser("").parse("test/test/GBean/resourceSource"), true, true);
+        assertEquals(new Integer(2), w.lookup("test/test/GBean/rresourceSource2"));
+        try {
+            w.lookup("test/test/GBean/resourceSource");
+            fail("Expected NameNotFoundException");
+        } catch (NameNotFoundException expected) {
+        }
+        w.removeDeepBinding(w.getNameParser("").parse("test/test/GBean/rresourceSource2"), true, true);
+        try {
+        	w.lookup("test");
+            fail("Expected NameNotFoundException");
+        } catch (NameNotFoundException expected) {
+        }
+    }
+    
+    public void testRemoveDeepBinding_Intermediate() throws Exception {
+        WritableContext w = new WritableContext("jca:");
+        // Test when only one object
+        w.addDeepBinding(w.getNameParser("").parse("test/test1/GBean/resourceSource"), WritableContextTest.STRING_VAL, true, true);
+        assertEquals(WritableContextTest.STRING_VAL, w.lookup("test/test1/GBean/resourceSource"));
+        w.removeDeepBinding(w.getNameParser("").parse("test/test1/GBean/resourceSource"), true, true);
+        try {
+        	w.lookup("test");
+            fail("Expected NameNotFoundException");
+        } catch (NameNotFoundException expected) {
+        }
+        w.addDeepBinding(w.getNameParser("").parse("test/test1/GBean/resourceSource"), WritableContextTest.STRING_VAL, true, true);
+        assertEquals(WritableContextTest.STRING_VAL, w.lookup("test/test1/GBean/resourceSource"));
+        w.addDeepBinding(w.getNameParser("").parse("test/test2/GBean/rresourceSource2"), new Integer(2), true, true);
+        assertEquals(new Integer(2), w.lookup("test/test2/GBean/rresourceSource2"));
+
+        w.removeDeepBinding(w.getNameParser("").parse("test/test1/GBean/resourceSource"), true, true);
+        assertEquals(new Integer(2), w.lookup("test/test2/GBean/rresourceSource2"));
+        try {
+            w.lookup("test/test1");
+            fail("Expected NameNotFoundException");
+        } catch (NameNotFoundException expected) {
+        }
+        w.removeDeepBinding(w.getNameParser("").parse("test/test2/GBean/rresourceSource2"), true, true);
+        try {
+        	w.lookup("test");
+            fail("Expected NameNotFoundException");
+        } catch (NameNotFoundException expected) {
+        }
+    }
 
 }
