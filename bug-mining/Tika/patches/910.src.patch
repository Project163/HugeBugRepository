diff --git a/CHANGES.txt b/CHANGES.txt
index 7ca2cd3f0..3bb490e38 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -116,6 +116,9 @@ Release 1.15 - ??
   * Extend support for increased PSM options up to 13 for modern 
     versions of Tesseract (TIKA-2357).
 
+  * Prevent potential resource leak by closing TrueTypeFont
+    via Cameron Rollheiser (TIKA-2370).
+
 Release 1.14 - 10/19/2016
 
   * Extract all headers from MSG/RFC822 (TIKA-2122).
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/font/FontParsersTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/font/FontParsersTest.java
index c01a152a2..cb95b7244 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/font/FontParsersTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/font/FontParsersTest.java
@@ -113,40 +113,4 @@ public class FontParsersTest {
         String content = handler.toString();
         assertEquals("", content);
     }
-
-    @Test
-    public void testTTFParsingNoLeaks() throws Exception {
-        Parser parser = new AutoDetectParser(); // Should auto-detect!
-        ContentHandler handler = new BodyContentHandler();
-        Metadata metadata = new Metadata();
-        ParseContext context = new ParseContext();
-
-        // Attempt to detect file leaks on unix systems.
-        OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();
-        if (MethodUtils.getMatchingAccessibleMethod(os.getClass(), "getOpenFileDescriptorCount", null) == null) {
-            return;
-        }
-
-        // Clone the font to a temporary file on disk, was having trouble reliably reproducing the leak with resources.
-        InputStream input = FontParsersTest.class.getResourceAsStream("/test-documents/testTrueType3.ttf");
-        Path tempDir = Files.createTempDirectory("fonts");
-        Path tempFont = tempDir.resolve("testTrueType3.ttf");
-        Files.copy(input, tempFont);
-        input.close();
-
-        // Record the expected file handle count.
-        long initialFileCount = (long)MethodUtils.invokeMethod(os, "getOpenFileDescriptorCount", null);
-        try (TikaInputStream stream = TikaInputStream.get(tempFont)) {
-            parser.parse(stream, handler, metadata, context);
-        }
-
-        // Check is any file handles leaked.
-        long finalFileCount = (long)MethodUtils.invokeMethod(os, "getOpenFileDescriptorCount", null);
-        if (initialFileCount != finalFileCount) {
-            fail("File leak detected. " + initialFileCount + " " + finalFileCount);
-        }
-
-        // Clean up temporary files.
-        FileUtils.deleteQuietly(tempDir.toFile());
-    }
 }
