diff --git a/core/src/main/java/org/apache/james/core/quota/QuotaCountUsage.java b/core/src/main/java/org/apache/james/core/quota/QuotaCountUsage.java
index 7e67f1b328..10e28185b9 100644
--- a/core/src/main/java/org/apache/james/core/quota/QuotaCountUsage.java
+++ b/core/src/main/java/org/apache/james/core/quota/QuotaCountUsage.java
@@ -18,63 +18,40 @@
  ****************************************************************/
 package org.apache.james.core.quota;
 
-import java.util.Optional;
-
 import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 
 public class QuotaCountUsage implements QuotaUsageValue<QuotaCountUsage, QuotaCountLimit> {
 
-    public static QuotaCountUsage unlimited() {
-        return new QuotaCountUsage(Optional.empty());
-    }
-
     public static QuotaCountUsage count(long value) {
-        return count(Optional.of(value));
-    }
-
-    public static QuotaCountUsage count(Optional<Long> value) {
         return new QuotaCountUsage(value);
     }
 
-    private final Optional<Long> value;
+    private final Long value;
 
-    private QuotaCountUsage(Optional<Long> value) {
+    private QuotaCountUsage(Long value) {
         this.value = value;
     }
 
     @Override
     public long asLong() {
-        return value.orElseThrow(IllegalStateException::new);
-    }
-
-    @Override
-    public boolean isLimited() {
-        return value.isPresent();
+        return value;
     }
 
     @Override
     public QuotaCountUsage add(long additionalValue) {
-        return new QuotaCountUsage(value.map(x -> x + additionalValue));
+        return new QuotaCountUsage(value + additionalValue);
     }
 
     @Override
     public QuotaCountUsage add(QuotaCountUsage additionalValue) {
-        if (additionalValue.isUnlimited()) {
-            return unlimited();
-        }
-        return new QuotaCountUsage(value.map(x -> x + additionalValue.asLong()));
-    }
-
-    @Override
-    public boolean greaterThan(QuotaCountUsage other) {
-        return value.orElse(Long.MAX_VALUE) > other.value.orElse(Long.MAX_VALUE);
+        return new QuotaCountUsage(value + additionalValue.asLong());
     }
 
     @Override
     public boolean exceedLimit(QuotaCountLimit limit) {
         if (limit.isLimited()) {
-            return value.orElse(Long.MAX_VALUE) > limit.asLong();
+            return value > limit.asLong();
         } else {
             return false;
         }
@@ -83,7 +60,7 @@ public class QuotaCountUsage implements QuotaUsageValue<QuotaCountUsage, QuotaCo
     @Override
     public String toString() {
         return MoreObjects.toStringHelper(this)
-            .add("value", value.map(String::valueOf).orElse("unlimited"))
+            .add("value", value.toString())
             .toString();
     }
 
diff --git a/core/src/main/java/org/apache/james/core/quota/QuotaSizeUsage.java b/core/src/main/java/org/apache/james/core/quota/QuotaSizeUsage.java
index 7bc74fb55a..d3ccfc5f32 100644
--- a/core/src/main/java/org/apache/james/core/quota/QuotaSizeUsage.java
+++ b/core/src/main/java/org/apache/james/core/quota/QuotaSizeUsage.java
@@ -18,65 +18,40 @@
  ****************************************************************/
 package org.apache.james.core.quota;
 
-import java.util.Optional;
-
 import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 
 public class QuotaSizeUsage implements QuotaUsageValue<QuotaSizeUsage, QuotaSizeLimit> {
 
-    public static final QuotaSizeUsage QUOTA_SIZE = new QuotaSizeUsage(Optional.empty());
-
-    public static QuotaSizeUsage unlimited() {
-        return QUOTA_SIZE;
-    }
-
     public static QuotaSizeUsage size(long value) {
-        return size(Optional.of(value));
-    }
-
-    public static QuotaSizeUsage size(Optional<Long> value) {
         return new QuotaSizeUsage(value);
     }
 
-    private final Optional<Long> value;
+    private final Long value;
 
-    private QuotaSizeUsage(Optional<Long> value) {
+    private QuotaSizeUsage(Long value) {
         this.value = value;
     }
 
     @Override
     public long asLong() {
-        return value.orElseThrow(IllegalStateException::new);
-    }
-
-    @Override
-    public boolean isLimited() {
-        return value.isPresent();
+        return value;
     }
 
     @Override
     public QuotaSizeUsage add(long additionalValue) {
-        return new QuotaSizeUsage(value.map(x -> x + additionalValue));
+        return new QuotaSizeUsage(value + additionalValue);
     }
 
     @Override
     public QuotaSizeUsage add(QuotaSizeUsage additionalValue) {
-        if (additionalValue.isUnlimited()) {
-            return unlimited();
-        }
-        return new QuotaSizeUsage(value.map(x -> x + additionalValue.asLong()));
-    }
-
-    @Override
-    public boolean greaterThan(QuotaSizeUsage other) {
-        return value.orElse(Long.MAX_VALUE) > other.value.orElse(Long.MAX_VALUE);
+        return new QuotaSizeUsage(value + additionalValue.asLong());
     }
 
     @Override
     public boolean exceedLimit(QuotaSizeLimit limit) {
         if (limit.isLimited()) {
-            return value.orElse(Long.MAX_VALUE) > limit.asLong();
+            return value > limit.asLong();
         } else {
             return false;
         }
@@ -85,7 +60,7 @@ public class QuotaSizeUsage implements QuotaUsageValue<QuotaSizeUsage, QuotaSize
     @Override
     public String toString() {
         return MoreObjects.toStringHelper(this)
-            .add("value", value.map(String::valueOf).orElse("unlimited"))
+            .add("value", value.toString())
             .toString();
     }
 
diff --git a/core/src/main/java/org/apache/james/core/quota/QuotaUsageValue.java b/core/src/main/java/org/apache/james/core/quota/QuotaUsageValue.java
index d96d55d1e6..1b28868ea9 100644
--- a/core/src/main/java/org/apache/james/core/quota/QuotaUsageValue.java
+++ b/core/src/main/java/org/apache/james/core/quota/QuotaUsageValue.java
@@ -18,27 +18,13 @@
  ****************************************************************/
 package org.apache.james.core.quota;
 
-import java.util.Optional;
-
 public interface QuotaUsageValue<T extends QuotaUsageValue<T, U>, U extends QuotaLimitValue<U>> {
 
-    static boolean isValidValue(Optional<Long> value) {
-        return !value.isPresent() || value.get() >= -1;
-    }
-
     long asLong();
 
-    boolean isLimited();
-
-    default boolean isUnlimited() {
-        return !isLimited();
-    }
-
     T add(long additionalValue);
 
     T add(T additionalValue);
 
-    boolean greaterThan(T other);
-
     boolean exceedLimit(U limit);
 }
diff --git a/core/src/test/java/org/apache/james/core/quota/QuotaUsageValueTest.java b/core/src/test/java/org/apache/james/core/quota/QuotaUsageValueTest.java
index 8e4ddcec4c..4deb73b95d 100644
--- a/core/src/test/java/org/apache/james/core/quota/QuotaUsageValueTest.java
+++ b/core/src/test/java/org/apache/james/core/quota/QuotaUsageValueTest.java
@@ -30,21 +30,6 @@ public interface QuotaUsageValueTest<T extends QuotaLimitValue<T>, U extends Quo
 
     T unlimited();
 
-    @Test
-    default void greaterThanShouldReturnFalseWhenFirstEqualToSecond() {
-        assertThat(usageInstance(1).greaterThan(usageInstance(1))).isFalse();
-    }
-
-    @Test
-    default void greaterThanShouldReturnFalseWhenFirstSmallerThanSecond() {
-        assertThat(usageInstance(1).greaterThan(usageInstance(2))).isFalse();
-    }
-
-    @Test
-    default void greaterThanShouldReturnTrueWhenFirstGreaterThanSecond() {
-        assertThat(usageInstance(2).greaterThan(usageInstance(1))).isTrue();
-    }
-
     @Test
     default void greaterThanShouldReturnFalseWhenUsageEqualToLimit() {
         assertThat(usageInstance(1).exceedLimit(limitInstance(1))).isFalse();
