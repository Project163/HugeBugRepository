diff --git a/tika-app/src/test/java/org/apache/tika/cli/TikaCLITest.java b/tika-app/src/test/java/org/apache/tika/cli/TikaCLITest.java
index ec1c1b2a3..291d6d79d 100644
--- a/tika-app/src/test/java/org/apache/tika/cli/TikaCLITest.java
+++ b/tika-app/src/test/java/org/apache/tika/cli/TikaCLITest.java
@@ -186,7 +186,7 @@ public class TikaCLITest extends TestCase{
             TikaCLI.main(params);
             
             // ChemDraw file, currently doesn't have the correct extension
-            File expected1 = new File(tempFile, "MBD002B040A.ole");
+            File expected1 = new File(tempFile, "MBD002B040A.bin");
             // OLE10Native
             File expected2 = new File(tempFile, "file5");
             // Image of one of the embedded resources
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/AbstractPOIFSExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/AbstractPOIFSExtractor.java
index 14c5af41b..4d1b00c0e 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/AbstractPOIFSExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/AbstractPOIFSExtractor.java
@@ -33,6 +33,9 @@ import org.apache.tika.extractor.ParsingEmbeddedDocumentExtractor;
 import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.mime.MediaType;
+import org.apache.tika.mime.MimeType;
+import org.apache.tika.mime.MimeTypeException;
+import org.apache.tika.mime.MimeTypes;
 import org.apache.tika.parser.ParseContext;
 import org.apache.tika.parser.microsoft.OfficeParser.POIFSDocumentType;
 import org.apache.tika.parser.pkg.ZipContainerDetector;
@@ -42,6 +45,7 @@ import org.xml.sax.SAXException;
 abstract class AbstractPOIFSExtractor {
     private final EmbeddedDocumentExtractor extractor;
     private TikaConfig tikaConfig;
+    private MimeTypes mimeTypes;
     private Detector detector;
 
     protected AbstractPOIFSExtractor(ParseContext context) {
@@ -54,19 +58,29 @@ abstract class AbstractPOIFSExtractor {
         }
         
         tikaConfig = context.get(TikaConfig.class);
+        mimeTypes = context.get(MimeTypes.class);
         detector = context.get(Detector.class);
     }
     
-    protected Detector getDetector() {
-       if (detector != null) return detector;
-       
+    // Note - these cache, but avoid creating the default TikaConfig if not needed
+    protected TikaConfig getTikaConfig() {
        if (tikaConfig == null) {
           tikaConfig = TikaConfig.getDefaultConfig();
        }
+       return tikaConfig;
+    }
+    protected Detector getDetector() {
+       if (detector != null) return detector;
        
-       detector = tikaConfig.getDetector();
+       detector = getTikaConfig().getDetector();
        return detector;
     }
+    protected MimeTypes getMimeTypes() {
+       if (mimeTypes != null) return mimeTypes;
+       
+       mimeTypes = getTikaConfig().getMimeRepository();
+       return mimeTypes;
+    }
     
     protected void handleEmbeddedResource(TikaInputStream resource, String filename,
           String mediaType, XHTMLContentHandler xhtml, boolean outputHtml)
@@ -144,8 +158,17 @@ abstract class AbstractPOIFSExtractor {
                    
                    // Try to work out what it is
                    MediaType mediaType = getDetector().detect(embedded, new Metadata());
+                   String extension = type.getExtension();
+                   try {
+                      MimeType mimeType = getMimeTypes().forName(mediaType.toString());
+                      extension = mimeType.getExtension();
+                   } catch(MimeTypeException mte) {
+                      // No details on this type are known
+                   }
+                   
+                   // Record what we can do about it
                    metadata.set(Metadata.CONTENT_TYPE, mediaType.getType().toString());
-                   metadata.set(Metadata.RESOURCE_NAME_KEY, dir.getName() + '.' + type.getExtension());
+                   metadata.set(Metadata.RESOURCE_NAME_KEY, dir.getName() + extension);
                 } catch(Exception e) {
                    throw new TikaException("Invalid embedded resource", e);
                 }
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/POIContainerExtractionTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/POIContainerExtractionTest.java
index ab4af8b87..69ef7cdf2 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/POIContainerExtractionTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/POIContainerExtractionTest.java
@@ -236,8 +236,7 @@ public class POIContainerExtractionTest extends AbstractPOIContainerExtractionTe
        assertEquals(2, handler.mediaTypes.size());
        
        assertEquals("image1.emf", handler.filenames.get(0));
-       //assertEquals("_1402837031.pdf", handler.filenames.get(1)); // TODO Fix, TIKA-48
-       assertEquals("_1402837031.ole", handler.filenames.get(1)); // TODO Fix, TIKA-48
+       assertEquals("_1402837031.pdf", handler.filenames.get(1));
 
        assertEquals(TYPE_EMF, handler.mediaTypes.get(0)); // Icon of embedded pdf
        assertEquals(TYPE_PDF, handler.mediaTypes.get(1)); // The embedded PDF itself
