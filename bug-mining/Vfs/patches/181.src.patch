diff --git a/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpClientFactory.java b/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpClientFactory.java
index 585abc73..15e43c0d 100644
--- a/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpClientFactory.java
+++ b/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpClientFactory.java
@@ -89,9 +89,9 @@ public final class SftpClientFactory {
                 session.setPassword(new String(password));
             }
 
-            final Integer timeout = builder.getTimeout(fileSystemOptions);
-            if (timeout != null) {
-                session.setTimeout(timeout.intValue());
+            final Integer sessionTimeout = builder.getSessionTimeoutMillis(fileSystemOptions);
+            if (sessionTimeout != null) {
+                session.setTimeout(sessionTimeout.intValue());
             }
 
             final UserInfo userInfo = builder.getUserInfo(fileSystemOptions);
diff --git a/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileSystem.java b/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileSystem.java
index a7e539b7..58aecfce 100644
--- a/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileSystem.java
+++ b/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileSystem.java
@@ -51,6 +51,8 @@ public class SftpFileSystem extends AbstractFileSystem {
     // private final JSch jSch;
 
     private ChannelSftp idleChannel;
+    
+    private final int connectTimeoutMillis;
 
     /**
      * Cache for the user ID (-1 when not set)
@@ -66,6 +68,8 @@ public class SftpFileSystem extends AbstractFileSystem {
             final FileSystemOptions fileSystemOptions) {
         super(rootName, null, fileSystemOptions);
         this.session = session;
+        final SftpFileSystemConfigBuilder builder = SftpFileSystemConfigBuilder.getInstance();
+        this.connectTimeoutMillis = builder.getConnectTimeoutMillis(fileSystemOptions);
     }
 
     @Override
@@ -98,7 +102,7 @@ public class SftpFileSystem extends AbstractFileSystem {
                 idleChannel = null;
             } else {
                 channel = (ChannelSftp) session.openChannel("sftp");
-                channel.connect();
+                channel.connect(connectTimeoutMillis);
                 final Boolean userDirIsRoot = SftpFileSystemConfigBuilder.getInstance()
                         .getUserDirIsRoot(getFileSystemOptions());
                 final String workingDirectory = getRootName().getPath();
@@ -271,7 +275,7 @@ public class SftpFileSystem extends AbstractFileSystem {
         channel.setInputStream(null);
         try (final InputStreamReader stream = new InputStreamReader(channel.getInputStream())) {
             channel.setErrStream(System.err, true);
-            channel.connect();
+            channel.connect(connectTimeoutMillis);
 
             // Read the stream
             final char[] buffer = new char[EXEC_BUFFER_SIZE];
diff --git a/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileSystemConfigBuilder.java b/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileSystemConfigBuilder.java
index 30bc3f81..9cc0bf9b 100644
--- a/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileSystemConfigBuilder.java
+++ b/commons-vfs2/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileSystemConfigBuilder.java
@@ -30,6 +30,10 @@ import com.jcraft.jsch.UserInfo;
  * The config builder for various SFTP configuration options.
  */
 public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder {
+    
+    private static final int DEFAULT_CONNECT_TIMEOUT_MILLIS = 0;
+    private static final int DEFAULT_SESSION_TIMEOUT_MILLIS = 0;
+
     /**
      * Proxy type.
      */
@@ -78,12 +82,31 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder {
         }
     }
 
+    private static final String _PREFIX = SftpFileSystemConfigBuilder.class.getName();
+
+    private static final SftpFileSystemConfigBuilder BUILDER = new SftpFileSystemConfigBuilder();
+
+    private static final String COMPRESSION = _PREFIX + "COMPRESSION";
+
+    private static final String CONNECT_TIMEOUT_MILLIS = _PREFIX + ".CONNECT_TIMEOUT_MILLIS";
+    private static final String ENCODING = _PREFIX + ".ENCODING";
+    private static final String HOST_KEY_CHECK_ASK = "ask";
+    private static final String HOST_KEY_CHECK_NO = "no";
+    private static final String HOST_KEY_CHECK_YES = "yes";
+    private static final String IDENTITIES = _PREFIX + ".IDENTITIES";
+    private static final String IDENTITY_REPOSITORY_FACTORY = _PREFIX + "IDENTITY_REPOSITORY_FACTORY";
+    private static final String KNOWN_HOSTS = _PREFIX + ".KNOWN_HOSTS";
+    private static final String PREFERRED_AUTHENTICATIONS = _PREFIX + ".PREFERRED_AUTHENTICATIONS";
+    private static final String PROXY_COMMAND = _PREFIX + ".PROXY_COMMAND";
+
+    private static final String PROXY_HOST = _PREFIX + ".PROXY_HOST";
     /** HTTP Proxy. */
     public static final ProxyType PROXY_HTTP = new ProxyType("http");
-
+    private static final String PROXY_OPTIONS = _PREFIX + ".PROXY_OPTIONS";
+    private static final String PROXY_PASSWORD = _PREFIX + ".PROXY_PASSWORD";
+    private static final String PROXY_PORT = _PREFIX + ".PROXY_PORT";
     /** SOCKS Proxy. */
     public static final ProxyType PROXY_SOCKS5 = new ProxyType("socks");
-
     /**
      * Connects to the SFTP server through a remote host reached by SSH.
      * <p>
@@ -97,33 +120,11 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder {
      */
     public static final ProxyType PROXY_STREAM = new ProxyType("stream");
 
-    private static final String _PREFIX = SftpFileSystemConfigBuilder.class.getName();
-    private static final SftpFileSystemConfigBuilder BUILDER = new SftpFileSystemConfigBuilder();
-    private static final String COMPRESSION = _PREFIX + "COMPRESSION";
-    private static final String HOST_KEY_CHECK_ASK = "ask";
-    private static final String HOST_KEY_CHECK_NO = "no";
-    private static final String HOST_KEY_CHECK_YES = "yes";
-    private static final String IDENTITIES = _PREFIX + ".IDENTITIES";
-    private static final String IDENTITY_REPOSITORY_FACTORY = _PREFIX + "IDENTITY_REPOSITORY_FACTORY";
-    private static final String KNOWN_HOSTS = _PREFIX + ".KNOWN_HOSTS";
-    private static final String PREFERRED_AUTHENTICATIONS = _PREFIX + ".PREFERRED_AUTHENTICATIONS";
-
-    private static final String PROXY_HOST = _PREFIX + ".PROXY_HOST";
-    private static final String PROXY_USER = _PREFIX + ".PROXY_USER";
-    private static final String PROXY_OPTIONS = _PREFIX + ".PROXY_OPTIONS";
     private static final String PROXY_TYPE = _PREFIX + ".PROXY_TYPE";
-    private static final String PROXY_PORT = _PREFIX + ".PROXY_PORT";
-    private static final String PROXY_PASSWORD = _PREFIX + ".PROXY_PASSWORD";
-    private static final String PROXY_COMMAND = _PREFIX + ".PROXY_COMMAND";
-
+    private static final String PROXY_USER = _PREFIX + ".PROXY_USER";
+    private static final String SESSION_TIMEOUT_MILLIS = _PREFIX + ".TIMEOUT";
     private static final String STRICT_HOST_KEY_CHECKING = _PREFIX + ".STRICT_HOST_KEY_CHECKING";
-    private static final String TIMEOUT = _PREFIX + ".TIMEOUT";
     private static final String USER_DIR_IS_ROOT = _PREFIX + ".USER_DIR_IS_ROOT";
-    private static final String ENCODING = _PREFIX + ".ENCODING";
-
-    private SftpFileSystemConfigBuilder() {
-        super("sftp.");
-    }
 
     /**
      * Gets the singleton builder.
@@ -134,6 +135,10 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder {
         return BUILDER;
     }
 
+    private SftpFileSystemConfigBuilder() {
+        super("sftp.");
+    }
+
     /**
      * @param opts The FileSystem options.
      * @return The names of the compression algorithms, comma-separated.
@@ -148,6 +153,16 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder {
         return SftpFileSystem.class;
     }
 
+    /**
+     * @param opts The FileSystem options.
+     * @return The connect timeout value in milliseconds.
+     * @see #setConnectTimeoutMillis
+     * @since 2.3
+     */
+    public Integer getConnectTimeoutMillis(final FileSystemOptions opts) {
+        return this.getInteger(opts, CONNECT_TIMEOUT_MILLIS, DEFAULT_CONNECT_TIMEOUT_MILLIS);
+    }
+
     /**
      * Gets the file name encoding.
      *
@@ -308,6 +323,16 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder {
         return this.getString(opts, PROXY_USER);
     }
 
+    /**
+     * @param opts The FileSystem options.
+     * @return The session timeout value in milliseconds.
+     * @see #setSessionTimeoutMillis
+     * @since 2.3
+     */
+    public Integer getSessionTimeoutMillis(final FileSystemOptions opts) {
+        return this.getInteger(opts, SESSION_TIMEOUT_MILLIS, DEFAULT_SESSION_TIMEOUT_MILLIS);
+    }
+
     /**
      * @param opts The FileSystem options.
      * @return the option value The host key checking.
@@ -321,9 +346,11 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder {
      * @param opts The FileSystem options.
      * @return The timeout value in milliseconds.
      * @see #setTimeout
+     * @deprecated Use {@link #getSessionTimeoutMillis(FileSystemOptions)}
      */
+    @Deprecated
     public Integer getTimeout(final FileSystemOptions opts) {
-        return this.getInteger(opts, TIMEOUT);
+        return this.getInteger(opts, SESSION_TIMEOUT_MILLIS);
     }
 
     /**
@@ -363,6 +390,17 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder {
         this.setParam(opts, COMPRESSION, compression);
     }
 
+    /**
+     * Sets the timeout value to create a Jsch connection.
+     *
+     * @param opts The FileSystem options.
+     * @param timeout The connect timeout in milliseconds.
+     * @since 2.3
+     */
+    public void setConnectTimeoutMillis(final FileSystemOptions opts, final Integer timeout) {
+        this.setParam(opts, CONNECT_TIMEOUT_MILLIS, timeout);
+    }
+
     /**
      * Sets the file name encoding.
      *
@@ -538,6 +576,17 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder {
         this.setParam(opts, PROXY_USER, proxyUser);
     }
 
+    /**
+     * Sets the timeout value on Jsch session.
+     *
+     * @param opts The FileSystem options.
+     * @param timeout The session timeout in milliseconds.
+     * @since 2.3
+     */
+    public void setSessionTimeoutMillis(final FileSystemOptions opts, final Integer timeout) {
+        this.setParam(opts, SESSION_TIMEOUT_MILLIS, timeout);
+    }
+
     /**
      * Configures the host key checking to use.
      * <p>
@@ -566,9 +615,11 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder {
      *
      * @param opts The FileSystem options.
      * @param timeout The timeout in milliseconds.
+     * @deprecated Use {@link #setSessionTimeoutMillis(FileSystemOptions, Integer)}
      */
+    @Deprecated
     public void setTimeout(final FileSystemOptions opts, final Integer timeout) {
-        this.setParam(opts, TIMEOUT, timeout);
+        this.setParam(opts, SESSION_TIMEOUT_MILLIS, timeout);
     }
 
     /**
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index a658bf39..f0ee6f1c 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -53,6 +53,9 @@ The <action> type attribute can be add,update,fix,remove.
       <action issue="VFS-646" dev="ggregory" type="update">
         Update Apache Commons Compress from 1.14 to 1.15.
       </action>
+      <action issue="VFS-589" dev="ggregory" type="add" due-to="L, Gary Gregory">
+        SFTP moveTo operation hangs if the server does not support SSH channelExec.
+      </action>
     </release>
     <release version="2.2" date="2017-10-06" description="New features and bug fix release.">
       <action issue="VFS-642" dev="pschumacher" type="update" due-to="ilangoldfeld">
