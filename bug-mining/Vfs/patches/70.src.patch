diff --git a/core/src/main/java/org/apache/commons/vfs2/impl/VirtualFileProvider.java b/core/src/main/java/org/apache/commons/vfs2/impl/VirtualFileProvider.java
index 5a4796f6..69a65cb5 100644
--- a/core/src/main/java/org/apache/commons/vfs2/impl/VirtualFileProvider.java
+++ b/core/src/main/java/org/apache/commons/vfs2/impl/VirtualFileProvider.java
@@ -20,6 +20,7 @@ import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileType;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractVfsContainer;
 
 
@@ -29,8 +30,7 @@ import org.apache.commons.vfs2.provider.AbstractVfsContainer;
  * @author <a href="http://commons.apache.org/vfs/team-list.html">Commons VFS team</a>
  * @version $Revision$ $Date$
  */
-public class VirtualFileProvider
-    extends AbstractVfsContainer
+public class VirtualFileProvider extends AbstractVfsContainer
 {
     /**
      * Creates a virtual file system, with the supplied file as its root.
@@ -38,10 +38,9 @@ public class VirtualFileProvider
      * @return A FileObject in the FileSystem.
      * @throws FileSystemException if an error occurs.
      */
-    public FileObject createFileSystem(final FileObject rootFile)
-        throws FileSystemException
+    public FileObject createFileSystem(final FileObject rootFile) throws FileSystemException
     {
-        final FileName rootName =
+        final AbstractFileName rootName = (AbstractFileName)
             getContext().getFileSystemManager().resolveName(rootFile.getName(), FileName.ROOT_PATH);
         // final FileName rootName =
         //    new BasicFileName(rootFile.getName(), FileName.ROOT_PATH);
@@ -59,7 +58,7 @@ public class VirtualFileProvider
      */
     public FileObject createFileSystem(final String rootUri) throws FileSystemException
     {
-        final FileName rootName =
+        final AbstractFileName rootName =
             new VirtualFileName(rootUri, FileName.ROOT_PATH, FileType.FOLDER);
         // final FileName rootName =
         //    new BasicFileName(rootUri, FileName.ROOT_PATH);
diff --git a/core/src/main/java/org/apache/commons/vfs2/impl/VirtualFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/impl/VirtualFileSystem.java
index 4ed95ebc..6dd18d69 100644
--- a/core/src/main/java/org/apache/commons/vfs2/impl/VirtualFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/impl/VirtualFileSystem.java
@@ -23,6 +23,7 @@ import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemOptions;
 import org.apache.commons.vfs2.FileType;
 import org.apache.commons.vfs2.NameScope;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileSystem;
 import org.apache.commons.vfs2.provider.DelegateFileObject;
 
@@ -39,12 +40,11 @@ import java.util.Map;
  * @version $Revision$ $Date$
  * @todo Handle nested junctions.
  */
-public class VirtualFileSystem
-    extends AbstractFileSystem
+public class VirtualFileSystem extends AbstractFileSystem
 {
     private final Map<FileName, FileObject> junctions = new HashMap<FileName, FileObject>();
 
-    public VirtualFileSystem(final FileName rootName, final FileSystemOptions fileSystemOptions)
+    public VirtualFileSystem(final AbstractFileName rootName, final FileSystemOptions fileSystemOptions)
     {
         super(rootName, null, fileSystemOptions);
     }
@@ -76,8 +76,7 @@ public class VirtualFileSystem
      * file is not cached.
      */
     @Override
-    protected FileObject createFile(final FileName name)
-        throws Exception
+    protected FileObject createFile(final AbstractFileName name) throws Exception
     {
         // Find the file that the name points to
         final FileName junctionPoint = getJunctionForFile(name);
@@ -132,9 +131,9 @@ public class VirtualFileSystem
             // Create ancestors of junction point
             FileName childName = junctionName;
             boolean done = false;
-            for (FileName parentName = childName.getParent();
+            for (AbstractFileName parentName = (AbstractFileName) childName.getParent();
                  !done && parentName != null;
-                 childName = parentName, parentName = parentName.getParent())
+                 childName = parentName, parentName = (AbstractFileName) parentName.getParent())
             {
                 DelegateFileObject file = (DelegateFileObject) getFileFromCache(parentName);
                 if (file == null)
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileObject.java
index 244a05fd..2f4fd2c3 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileObject.java
@@ -96,10 +96,10 @@ public abstract class AbstractFileObject implements FileObject
      * @param fs the file system
      * @throws ClassCastException if {@code name} is not an instance of {@link AbstractFileName}
      */
-    protected AbstractFileObject(final FileName name,
+    protected AbstractFileObject(final AbstractFileName name,
                                  final AbstractFileSystem fs)
     {
-        this.name = (AbstractFileName) name;
+        this.name = name;
         this.fs = fs;
         fs.fileObjectHanded(this);
     }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileSystem.java
index 41f89712..3d7b4848 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileSystem.java
@@ -165,8 +165,7 @@ public abstract class AbstractFileSystem
      * Creates a file object.  This method is called only if the requested
      * file is not cached.
      */
-    protected abstract FileObject createFile(final FileName name)
-        throws Exception;
+    protected abstract FileObject createFile(final AbstractFileName name) throws Exception;
 
     /**
      * Adds the capabilities of this file system.
@@ -343,7 +342,7 @@ public abstract class AbstractFileSystem
         {
             try
             {
-                file = createFile(name);
+                file = createFile((AbstractFileName) name);
             }
             catch (Exception e)
             {
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/DelegateFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/DelegateFileObject.java
index 590e1317..fedac8d2 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/DelegateFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/DelegateFileObject.java
@@ -42,15 +42,13 @@ import java.util.Set;
  * @version $Revision$ $Date$
  * @todo Extract subclass that overlays the children
  */
-public class DelegateFileObject
-    extends AbstractFileObject
-    implements FileListener
+public class DelegateFileObject extends AbstractFileObject implements FileListener
 {
     private FileObject file;
     private final Set<String> children = new HashSet<String>();
     private boolean ignoreEvent;
 
-    public DelegateFileObject(final FileName name,
+    public DelegateFileObject(final AbstractFileName name,
                               final AbstractFileSystem fileSystem,
                               final FileObject file) throws FileSystemException
     {
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/bzip2/Bzip2FileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/bzip2/Bzip2FileObject.java
index 84fd93db..b59401d9 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/bzip2/Bzip2FileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/bzip2/Bzip2FileObject.java
@@ -19,9 +19,9 @@ package org.apache.commons.vfs2.provider.bzip2;
 //TODO: Revert to [compress]
 //import org.apache.commons.compress.bzip2.CBZip2InputStream;
 //import org.apache.commons.compress.bzip2.CBZip2OutputStream;
-import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.compressed.CompressedFileFileObject;
 import org.apache.commons.vfs2.provider.compressed.CompressedFileFileSystem;
 
@@ -37,7 +37,7 @@ import java.io.OutputStream;
  */
 public class Bzip2FileObject extends CompressedFileFileObject
 {
-    protected Bzip2FileObject(FileName name, FileObject container, CompressedFileFileSystem fs)
+    protected Bzip2FileObject(AbstractFileName name, FileObject container, CompressedFileFileSystem fs)
     {
         super(name, container, fs);
     }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/bzip2/Bzip2FileSystem.java b/core/src/main/java/org/apache/commons/vfs2/provider/bzip2/Bzip2FileSystem.java
index 474d7ea8..ec4c8a9c 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/bzip2/Bzip2FileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/bzip2/Bzip2FileSystem.java
@@ -21,6 +21,7 @@ import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemOptions;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.compressed.CompressedFileFileSystem;
 
 import java.util.Collection;
@@ -39,7 +40,7 @@ public class Bzip2FileSystem extends CompressedFileFileSystem
     }
 
     @Override
-    protected FileObject createFile(FileName name) throws FileSystemException
+    protected FileObject createFile(AbstractFileName name) throws FileSystemException
     {
         return new Bzip2FileObject(name, getParentLayer(), this);
     }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/compressed/CompressedFileFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/compressed/CompressedFileFileObject.java
index a2302442..69187aed 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/compressed/CompressedFileFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/compressed/CompressedFileFileObject.java
@@ -21,6 +21,7 @@ import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileType;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileObject;
 
 /**
@@ -30,14 +31,12 @@ import org.apache.commons.vfs2.provider.AbstractFileObject;
  * @author <a href="http://commons.apache.org/vfs/team-list.html">Commons VFS team</a>
  * @version $Revision$ $Date$
  */
-public abstract class CompressedFileFileObject
-    extends AbstractFileObject
-    implements FileObject
+public abstract class CompressedFileFileObject extends AbstractFileObject implements FileObject
 {
     private final FileObject container;
     private final String[] children;
 
-    protected CompressedFileFileObject(FileName name, FileObject container, CompressedFileFileSystem fs)
+    protected CompressedFileFileObject(AbstractFileName name, FileObject container, CompressedFileFileSystem fs)
     {
         super(name, fs);
         this.container = container;
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/compressed/CompressedFileFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/provider/compressed/CompressedFileFileSystem.java
index e9f7b2d6..ef218876 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/compressed/CompressedFileFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/compressed/CompressedFileFileSystem.java
@@ -22,6 +22,7 @@ import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystem;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemOptions;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileSystem;
 
 import java.util.Collection;
@@ -60,5 +61,5 @@ public abstract class CompressedFileFileSystem
      * Creates a file object.
      */
     @Override
-    protected abstract FileObject createFile(final FileName name) throws FileSystemException;
+    protected abstract FileObject createFile(final AbstractFileName name) throws FileSystemException;
 }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileObject.java
index aee09d5f..871b4811 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileObject.java
@@ -35,6 +35,7 @@ import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileType;
 import org.apache.commons.vfs2.RandomAccessContent;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileObject;
 import org.apache.commons.vfs2.provider.UriParser;
 import org.apache.commons.vfs2.util.FileObjectUtils;
@@ -49,8 +50,7 @@ import org.apache.commons.vfs2.util.RandomAccessMode;
  * @author <a href="http://commons.apache.org/vfs/team-list.html">Commons VFS team</a>
  * @version $Revision$ $Date$
  */
-public class FtpFileObject
-    extends AbstractFileObject
+public class FtpFileObject extends AbstractFileObject
 {
     private static final Map<String, FTPFile> EMPTY_FTP_FILE_MAP =
         Collections.unmodifiableMap(new TreeMap<String, FTPFile>());
@@ -67,7 +67,7 @@ public class FtpFileObject
 
     private boolean inRefresh;
 
-    protected FtpFileObject(final FileName name,
+    protected FtpFileObject(final AbstractFileName name,
                             final FtpFileSystem fileSystem,
                             final FileName rootName)
         throws FileSystemException
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileSystem.java
index 777254f7..58c7cb07 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileSystem.java
@@ -19,11 +19,11 @@ package org.apache.commons.vfs2.provider.ftp;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.commons.vfs2.Capability;
-import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemOptions;
 import org.apache.commons.vfs2.VfsLog;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileSystem;
 import org.apache.commons.vfs2.provider.GenericFileName;
 
@@ -142,7 +142,7 @@ public class FtpFileSystem extends AbstractFileSystem
      * Creates a file object.
      */
     @Override
-    protected FileObject createFile(final FileName name)
+    protected FileObject createFile(final AbstractFileName name)
         throws FileSystemException
     {
         return new FtpFileObject(name, this, getRootName());
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/gzip/GzipFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/gzip/GzipFileObject.java
index 835b1365..e71e22bf 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/gzip/GzipFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/gzip/GzipFileObject.java
@@ -16,8 +16,8 @@
  */
 package org.apache.commons.vfs2.provider.gzip;
 
-import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.compressed.CompressedFileFileObject;
 import org.apache.commons.vfs2.provider.compressed.CompressedFileFileSystem;
 
@@ -34,7 +34,7 @@ import java.util.zip.GZIPOutputStream;
  */
 public class GzipFileObject extends CompressedFileFileObject
 {
-    protected GzipFileObject(FileName name, FileObject container, CompressedFileFileSystem fs)
+    protected GzipFileObject(AbstractFileName name, FileObject container, CompressedFileFileSystem fs)
     {
         super(name, container, fs);
     }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/gzip/GzipFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/provider/gzip/GzipFileSystem.java
index f9d0bb8e..40544ed3 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/gzip/GzipFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/gzip/GzipFileSystem.java
@@ -21,6 +21,7 @@ import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemOptions;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.compressed.CompressedFileFileSystem;
 
 import java.util.Collection;
@@ -39,7 +40,7 @@ public class GzipFileSystem extends CompressedFileFileSystem
     }
 
     @Override
-    protected FileObject createFile(FileName name) throws FileSystemException
+    protected FileObject createFile(AbstractFileName name) throws FileSystemException
     {
         return new GzipFileObject(name, getParentLayer(), this);
     }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileObject.java
index c93c3021..15e9179b 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileObject.java
@@ -25,11 +25,11 @@ import org.apache.commons.httpclient.methods.HeadMethod;
 import org.apache.commons.httpclient.util.DateUtil;
 import org.apache.commons.httpclient.util.URIUtil;
 
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileObject;
 import org.apache.commons.vfs2.provider.URLFileName;
 import org.apache.commons.vfs2.util.MonitorInputStream;
 import org.apache.commons.vfs2.util.RandomAccessMode;
-import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileType;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileNotFoundException;
@@ -47,15 +47,13 @@ import java.net.HttpURLConnection;
  * @version $Revision$ $Date$
  * @todo status codes
  */
-public class HttpFileObject
-    extends AbstractFileObject
+public class HttpFileObject extends AbstractFileObject
 {
     private final HttpFileSystem fileSystem;
     private final String urlCharset;
     private HeadMethod method;
 
-    protected HttpFileObject(final FileName name,
-                             final HttpFileSystem fileSystem)
+    protected HttpFileObject(final AbstractFileName name, final HttpFileSystem fileSystem)
     {
         super(name, fileSystem);
         this.fileSystem = fileSystem;
@@ -66,8 +64,7 @@ public class HttpFileObject
      * Detaches this file object from its file resource.
      */
     @Override
-    protected void doDetach()
-        throws Exception
+    protected void doDetach() throws Exception
     {
         method = null;
     }
@@ -77,8 +74,7 @@ public class HttpFileObject
      * value of this method is cached, so the implementation can be expensive.
      */
     @Override
-    protected FileType doGetType()
-        throws Exception
+    protected FileType doGetType() throws Exception
     {
         // Use the HEAD method to probe the file.
         method = new HeadMethod();
@@ -105,8 +101,7 @@ public class HttpFileObject
      * Lists the children of this file.
      */
     @Override
-    protected String[] doListChildren()
-        throws Exception
+    protected String[] doListChildren() throws Exception
     {
         throw new Exception("Not implemented.");
     }
@@ -115,8 +110,7 @@ public class HttpFileObject
      * Returns the size of the file content (in bytes).
      */
     @Override
-    protected long doGetContentSize()
-        throws Exception
+    protected long doGetContentSize() throws Exception
     {
         final Header header = method.getResponseHeader("content-length");
         if (header == null)
@@ -133,8 +127,7 @@ public class HttpFileObject
      * This implementation throws an exception.
      */
     @Override
-    protected long doGetLastModifiedTime()
-        throws Exception
+    protected long doGetLastModifiedTime() throws Exception
     {
         final Header header = method.getResponseHeader("last-modified");
         if (header == null)
@@ -154,8 +147,7 @@ public class HttpFileObject
      * <p>The returned stream does not have to be buffered.
      */
     @Override
-    protected InputStream doGetInputStream()
-        throws Exception
+    protected InputStream doGetInputStream() throws Exception
     {
         final GetMethod getMethod = new GetMethod();
         setupMethod(getMethod);
@@ -199,8 +191,7 @@ public class HttpFileObject
     /**
      * An InputStream that cleans up the HTTP connection on close.
      */
-    static class HttpInputStream
-        extends MonitorInputStream
+    static class HttpInputStream extends MonitorInputStream
     {
         private final GetMethod method;
 
@@ -215,8 +206,7 @@ public class HttpFileObject
          * Called after the stream has been closed.
          */
         @Override
-        protected void onClose()
-            throws IOException
+        protected void onClose() throws IOException
         {
             method.releaseConnection();
         }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileSystem.java
index f8bd7e3b..1ac2b4a3 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileSystem.java
@@ -20,10 +20,10 @@ import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.HttpConnectionManager;
 import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
 import org.apache.commons.vfs2.Capability;
-import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystem;
 import org.apache.commons.vfs2.FileSystemOptions;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileSystem;
 import org.apache.commons.vfs2.provider.GenericFileName;
 
@@ -81,7 +81,7 @@ public class HttpFileSystem
      * file is not cached.
      */
     @Override
-    protected FileObject createFile(final FileName name)
+    protected FileObject createFile(final AbstractFileName name)
         throws Exception
     {
         return new HttpFileObject(name, this);
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/jar/JarFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/jar/JarFileObject.java
index cac13b94..4751bfd6 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/jar/JarFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/jar/JarFileObject.java
@@ -16,8 +16,8 @@
  */
 package org.apache.commons.vfs2.provider.jar;
 
-import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileSystemException;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.zip.ZipFileObject;
 
 import java.io.IOException;
@@ -44,7 +44,7 @@ public class JarFileObject extends ZipFileObject
 
     private Attributes attributes;
 
-    protected JarFileObject(final FileName name,
+    protected JarFileObject(final AbstractFileName name,
                             final ZipEntry entry,
                             final JarFileSystem fs,
                             final boolean zipExists) throws FileSystemException
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/jar/JarFileProvider.java b/core/src/main/java/org/apache/commons/vfs2/provider/jar/JarFileProvider.java
index f8238736..e3c74903 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/jar/JarFileProvider.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/jar/JarFileProvider.java
@@ -23,6 +23,7 @@ import org.apache.commons.vfs2.FileSystem;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemOptions;
 import org.apache.commons.vfs2.FileType;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.LayeredFileName;
 import org.apache.commons.vfs2.provider.zip.ZipFileProvider;
 
@@ -39,8 +40,7 @@ import java.util.Collections;
  * @author <a href="http://commons.apache.org/vfs/team-list.html">Commons VFS team</a>
  * @version $Revision$ $Date$
  */
-public class JarFileProvider
-    extends ZipFileProvider
+public class JarFileProvider extends ZipFileProvider
 {
     static final Collection<Capability> capabilities;
 
@@ -78,7 +78,7 @@ public class JarFileProvider
                                             final FileSystemOptions fileSystemOptions)
         throws FileSystemException
     {
-        final FileName name =
+        final AbstractFileName name =
             new LayeredFileName(scheme, file.getName(), FileName.ROOT_PATH, FileType.FOLDER);
         return new JarFileSystem(name, file, fileSystemOptions);
     }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/jar/JarFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/provider/jar/JarFileSystem.java
index 8df2dc72..fd9a969a 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/jar/JarFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/jar/JarFileSystem.java
@@ -17,10 +17,10 @@
 package org.apache.commons.vfs2.provider.jar;
 
 import org.apache.commons.vfs2.Capability;
-import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemOptions;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.zip.ZipFileObject;
 import org.apache.commons.vfs2.provider.zip.ZipFileSystem;
 
@@ -40,12 +40,11 @@ import java.util.zip.ZipFile;
  * @author <a href="http://commons.apache.org/vfs/team-list.html">Commons VFS team</a>
  * @version $Revision$ $Date$
  */
-public class JarFileSystem
-    extends ZipFileSystem
+public class JarFileSystem extends ZipFileSystem
 {
     private Attributes attributes;
 
-    protected JarFileSystem(final FileName rootName,
+    protected JarFileSystem(final AbstractFileName rootName,
                             final FileObject file,
                             final FileSystemOptions fileSystemOptions) throws FileSystemException
     {
@@ -66,7 +65,7 @@ public class JarFileSystem
     }
 
     @Override
-    protected ZipFileObject createZipFileObject(FileName name,
+    protected ZipFileObject createZipFileObject(AbstractFileName name,
                                                 ZipEntry entry) throws FileSystemException
     {
         return new JarFileObject(name, entry, this, true);
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFile.java b/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFile.java
index 2b894334..f57dbcd6 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFile.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFile.java
@@ -16,11 +16,11 @@
  */
 package org.apache.commons.vfs2.provider.local;
 
-import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileType;
 import org.apache.commons.vfs2.RandomAccessContent;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileObject;
 import org.apache.commons.vfs2.provider.UriParser;
 import org.apache.commons.vfs2.util.RandomAccessMode;
@@ -39,9 +39,7 @@ import java.io.IOException;
  * @author <a href="http://commons.apache.org/vfs/team-list.html">Commons VFS team</a>
  * @version $Revision$ $Date$
  */
-public class LocalFile
-    extends AbstractFileObject
-    implements FileObject
+public class LocalFile extends AbstractFileObject implements FileObject
 {
     private final String rootFile;
 
@@ -52,7 +50,7 @@ public class LocalFile
      */
     protected LocalFile(final LocalFileSystem fileSystem,
                         final String rootFile,
-                        final FileName name) throws FileSystemException
+                        final AbstractFileName name) throws FileSystemException
     {
         super(name, fileSystem);
         this.rootFile = rootFile;
@@ -70,8 +68,7 @@ public class LocalFile
      * Attaches this file object to its file resource.
      */
     @Override
-    protected void doAttach()
-        throws Exception
+    protected void doAttach() throws Exception
     {
         if (file == null)
         {
@@ -87,8 +84,7 @@ public class LocalFile
      * Returns the file's type.
      */
     @Override
-    protected FileType doGetType()
-        throws Exception
+    protected FileType doGetType() throws Exception
     {
         // JDK BUG: 6192331
         // if (!file.exists())
@@ -115,8 +111,7 @@ public class LocalFile
      * Returns the children of the file.
      */
     @Override
-    protected String[] doListChildren()
-        throws Exception
+    protected String[] doListChildren() throws Exception
     {
         return UriParser.encode(file.list());
     }
@@ -125,8 +120,7 @@ public class LocalFile
      * Deletes this file, and all children.
      */
     @Override
-    protected void doDelete()
-        throws Exception
+    protected void doDelete() throws Exception
     {
         if (!file.delete())
         {
@@ -153,8 +147,7 @@ public class LocalFile
      * Creates this folder.
      */
     @Override
-    protected void doCreateFolder()
-        throws Exception
+    protected void doCreateFolder() throws Exception
     {
         if (!file.mkdirs())
         {
@@ -203,8 +196,7 @@ public class LocalFile
      * @since 2.0
      */
     @Override
-    protected boolean doSetLastModifiedTime(final long modtime)
-        throws FileSystemException
+    protected boolean doSetLastModifiedTime(final long modtime) throws FileSystemException
     {
         return file.setLastModified(modtime);
     }
@@ -213,8 +205,7 @@ public class LocalFile
      * Creates an input stream to read the content from.
      */
     @Override
-    protected InputStream doGetInputStream()
-        throws Exception
+    protected InputStream doGetInputStream() throws Exception
     {
         return new FileInputStream(file);
     }
@@ -233,8 +224,7 @@ public class LocalFile
      * Returns the size of the file content (in bytes).
      */
     @Override
-    protected long doGetContentSize()
-        throws Exception
+    protected long doGetContentSize() throws Exception
     {
         return file.length();
     }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFileSystem.java
index fc2730c4..9dc1a3a4 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/local/LocalFileSystem.java
@@ -23,6 +23,7 @@ import org.apache.commons.vfs2.FileSelector;
 import org.apache.commons.vfs2.FileSystem;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemOptions;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileSystem;
 
 import java.io.File;
@@ -53,7 +54,7 @@ public class LocalFileSystem
      * Creates a file object.
      */
     @Override
-    protected FileObject createFile(final FileName name) throws FileSystemException
+    protected FileObject createFile(final AbstractFileName name) throws FileSystemException
     {
         // Create the file
         return new LocalFile(this, rootFile, name);
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileObject.java
index ee2e55ca..7d1f3b4c 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileObject.java
@@ -21,11 +21,11 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 
-import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileType;
 import org.apache.commons.vfs2.RandomAccessContent;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileObject;
 import org.apache.commons.vfs2.util.RandomAccessMode;
 
@@ -50,7 +50,7 @@ public class RamFileObject extends AbstractFileObject implements FileObject
      * @param name The name of the file.
      * @param fs The FileSystem.
      */
-    protected RamFileObject(FileName name, RamFileSystem fs)
+    protected RamFileObject(AbstractFileName name, RamFileSystem fs)
     {
         super(name, fs);
         this.fs = fs;
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileSystem.java
index 6fc38f41..1992a543 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/ram/RamFileSystem.java
@@ -34,6 +34,7 @@ import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemOptions;
 import org.apache.commons.vfs2.FileType;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileSystem;
 
 /**
@@ -51,8 +52,7 @@ public class RamFileSystem extends AbstractFileSystem implements Serializable
      * @param rootName The root file name.
      * @param fileSystemOptions The FileSystem options.
      */
-    protected RamFileSystem(FileName rootName,
-            FileSystemOptions fileSystemOptions)
+    protected RamFileSystem(FileName rootName, FileSystemOptions fileSystemOptions)
     {
         super(rootName, null, fileSystemOptions);
         this.cache = Collections.synchronizedMap(new HashMap<FileName, RamFileData>());
@@ -69,7 +69,7 @@ public class RamFileSystem extends AbstractFileSystem implements Serializable
      * @see org.apache.commons.vfs2.provider.AbstractFileSystem#createFile(org.apache.commons.vfs2.FileName)
      */
     @Override
-    protected FileObject createFile(FileName name) throws Exception
+    protected FileObject createFile(AbstractFileName name) throws Exception
     {
         RamFileObject file = new RamFileObject(name, this);
         return file;
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileObject.java
index b6ea1f4f..931b14c1 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileObject.java
@@ -20,7 +20,6 @@ import com.jcraft.jsch.ChannelSftp;
 import com.jcraft.jsch.ChannelSftp.LsEntry;
 import com.jcraft.jsch.SftpATTRS;
 import com.jcraft.jsch.SftpException;
-import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileNotFoundException;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
@@ -28,6 +27,7 @@ import org.apache.commons.vfs2.FileType;
 import org.apache.commons.vfs2.NameScope;
 import org.apache.commons.vfs2.RandomAccessContent;
 import org.apache.commons.vfs2.VFS;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileObject;
 import org.apache.commons.vfs2.provider.UriParser;
 import org.apache.commons.vfs2.util.FileObjectUtils;
@@ -59,7 +59,7 @@ public class SftpFileObject extends AbstractFileObject implements FileObject
 
     private boolean inRefresh;
 
-    protected SftpFileObject(final FileName name,
+    protected SftpFileObject(final AbstractFileName name,
             final SftpFileSystem fileSystem) throws FileSystemException
     {
         super(name, fileSystem);
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileSystem.java
index 9d150d8b..2a4dbb43 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileSystem.java
@@ -22,12 +22,12 @@ import com.jcraft.jsch.Session;
 import com.jcraft.jsch.SftpException;
 
 import org.apache.commons.vfs2.Capability;
-import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystem;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemOptions;
 import org.apache.commons.vfs2.UserAuthenticationData;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.util.UserAuthenticatorUtils;
 import org.apache.commons.vfs2.provider.AbstractFileSystem;
 import org.apache.commons.vfs2.provider.GenericFileName;
@@ -190,7 +190,7 @@ public class SftpFileSystem
      * file is not cached.
      */
     @Override
-    protected FileObject createFile(final FileName name)
+    protected FileObject createFile(final AbstractFileName name)
         throws FileSystemException
     {
         return new SftpFileObject(name, this);
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/tar/TarFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/tar/TarFileObject.java
index ac3236ec..5418b010 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/tar/TarFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/tar/TarFileObject.java
@@ -22,6 +22,7 @@ import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileType;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileObject;
 
 import java.io.InputStream;
@@ -31,9 +32,7 @@ import java.util.HashSet;
  * A file in a Tar file system.
  * @author <a href="http://commons.apache.org/vfs/team-list.html">Commons VFS team</a>
  */
-public class TarFileObject
-    extends AbstractFileObject
-    implements FileObject
+public class TarFileObject extends AbstractFileObject implements FileObject
 {
     /** The TarEntry */
     protected TarEntry entry;
@@ -41,7 +40,7 @@ public class TarFileObject
     private final TarFileSystem fs;
     private FileType type;
 
-    protected TarFileObject(FileName name,
+    protected TarFileObject(AbstractFileName name,
                             TarEntry entry,
                             TarFileSystem fs,
                             boolean tarExists) throws FileSystemException
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/tar/TarFileProvider.java b/core/src/main/java/org/apache/commons/vfs2/provider/tar/TarFileProvider.java
index a7113f4c..58724bd3 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/tar/TarFileProvider.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/tar/TarFileProvider.java
@@ -23,6 +23,7 @@ import org.apache.commons.vfs2.FileSystem;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemOptions;
 import org.apache.commons.vfs2.FileType;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractLayeredFileProvider;
 import org.apache.commons.vfs2.provider.FileProvider;
 import org.apache.commons.vfs2.provider.LayeredFileName;
@@ -35,9 +36,7 @@ import java.util.Collections;
  * A file system provider for Tar files.  Provides read-only file systems.
  * @author <a href="http://commons.apache.org/vfs/team-list.html">Commons VFS team</a>
  */
-public class TarFileProvider
-    extends AbstractLayeredFileProvider
-    implements FileProvider
+public class TarFileProvider extends AbstractLayeredFileProvider implements FileProvider
 {
     /** The provider's capabilities */
     protected static final Collection<Capability> capabilities =
@@ -70,7 +69,7 @@ public class TarFileProvider
                                             final FileSystemOptions fileSystemOptions)
         throws FileSystemException
     {
-        final FileName rootName =
+        final AbstractFileName rootName =
             new LayeredFileName(scheme, file.getName(), FileName.ROOT_PATH, FileType.FOLDER);
         return new TarFileSystem(rootName, file, fileSystemOptions);
     }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/tar/TarFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/provider/tar/TarFileSystem.java
index 9ed8412c..29e04da7 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/tar/TarFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/tar/TarFileSystem.java
@@ -22,13 +22,13 @@ package org.apache.commons.vfs2.provider.tar;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.commons.vfs2.Capability;
-import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystem;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemOptions;
 import org.apache.commons.vfs2.Selectors;
 import org.apache.commons.vfs2.VfsLog;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileSystem;
 import org.apache.commons.vfs2.provider.UriParser;
 import org.apache.commons.vfs2.provider.bzip2.Bzip2FileObject;
@@ -48,16 +48,14 @@ import java.util.zip.GZIPInputStream;
  * @author <a href="http://commons.apache.org/vfs/team-list.html">Commons VFS team</a>
  * @version $Revision$ $Date$
  */
-public class TarFileSystem
-    extends AbstractFileSystem
-    implements FileSystem
+public class TarFileSystem extends AbstractFileSystem implements FileSystem
 {
     private static final Log LOG = LogFactory.getLog(TarFileSystem.class);
 
     private final File file;
     private TarInputStream tarFile;
 
-    protected TarFileSystem(final FileName rootName,
+    protected TarFileSystem(final AbstractFileName rootName,
                             final FileObject parentLayer,
                             final FileSystemOptions fileSystemOptions)
         throws FileSystemException
@@ -90,7 +88,8 @@ public class TarFileSystem
             TarEntry entry;
             while ((entry = getTarFile().getNextEntry()) != null)
             {
-                FileName name = getFileSystemManager().resolveName(getRootName(), UriParser.encode(entry.getName()));
+                AbstractFileName name = (AbstractFileName) getFileSystemManager().resolveName(getRootName(),
+                    UriParser.encode(entry.getName()));
 
                 // Create the file
                 TarFileObject fileObj;
@@ -109,9 +108,9 @@ public class TarFileSystem
                 // Make sure all ancestors exist
                 // TODO - create these on demand
                 TarFileObject parent = null;
-                for (FileName parentName = name.getParent();
+                for (AbstractFileName parentName = (AbstractFileName) name.getParent();
                      parentName != null;
-                     fileObj = parent, parentName = parentName.getParent())
+                     fileObj = parent, parentName = (AbstractFileName) parentName.getParent())
                 {
                     // Locate the parent
                     parent = (TarFileObject) getFileFromCache(parentName);
@@ -193,7 +192,7 @@ public class TarFileSystem
         return tarFile;
     }
 
-    protected TarFileObject createTarFileObject(final FileName name,
+    protected TarFileObject createTarFileObject(final AbstractFileName name,
                                                 final TarEntry entry) throws FileSystemException
     {
         return new TarFileObject(name, entry, this, true);
@@ -252,7 +251,7 @@ public class TarFileSystem
      * Creates a file object.
      */
     @Override
-    protected FileObject createFile(final FileName name) throws FileSystemException
+    protected FileObject createFile(final AbstractFileName name) throws FileSystemException
     {
         // This is only called for files which do not exist in the Tar file
         return new TarFileObject(name, null, this, false);
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/url/UrlFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/url/UrlFileObject.java
index 8baf3b25..72357662 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/url/UrlFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/url/UrlFileObject.java
@@ -21,6 +21,7 @@ import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileType;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileObject;
 import org.apache.commons.vfs2.provider.URLFileName;
 
@@ -39,14 +40,12 @@ import java.net.URLConnection;
  * @todo Implement set lastModified and get/set attribute
  * @todo Implement getOutputStream()
  */
-public class UrlFileObject
-    extends AbstractFileObject
-    implements FileObject
+public class UrlFileObject extends AbstractFileObject implements FileObject
 {
     private URL url;
 
     protected UrlFileObject(final UrlFileSystem fs,
-                            final FileName fileName)
+                            final AbstractFileName fileName)
     {
         super(fileName, fs);
     }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/url/UrlFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/provider/url/UrlFileSystem.java
index 17bd6f00..8e1c5524 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/url/UrlFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/url/UrlFileSystem.java
@@ -21,6 +21,7 @@ import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystem;
 import org.apache.commons.vfs2.FileSystemOptions;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileSystem;
 
 import java.util.Collection;
@@ -44,7 +45,7 @@ public class UrlFileSystem
      * Creates a file object.
      */
     @Override
-    protected FileObject createFile(final FileName name)
+    protected FileObject createFile(final AbstractFileName name)
     {
         return new UrlFileObject(this, name);
     }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileObject.java
index 06fa9825..708f8b32 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileObject.java
@@ -24,6 +24,7 @@ import org.apache.commons.httpclient.methods.RequestEntity;
 import org.apache.commons.httpclient.methods.ByteArrayRequestEntity;
 import org.apache.commons.httpclient.params.HttpMethodParams;
 import org.apache.commons.httpclient.util.DateUtil;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.URLFileName;
 import org.apache.commons.vfs2.provider.DefaultFileContent;
 import org.apache.commons.vfs2.provider.http.HttpFileObject;
@@ -34,7 +35,6 @@ import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileType;
 import org.apache.commons.vfs2.NameScope;
 import org.apache.commons.vfs2.FileNotFolderException;
-import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileNotFoundException;
 import org.apache.commons.vfs2.FileContentInfoFactory;
 import org.apache.jackrabbit.webdav.client.methods.DavMethod;
@@ -91,7 +91,7 @@ public class WebdavFileObject extends HttpFileObject implements FileObject
     /** The FileSystemConfigBuilder */
     private final WebdavFileSystemConfigBuilder builder;
 
-    protected WebdavFileObject(final FileName name, final WebdavFileSystem fileSystem)
+    protected WebdavFileObject(final AbstractFileName name, final WebdavFileSystem fileSystem)
     {
         super(name, fileSystem);
         this.fileSystem = fileSystem;
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileSystem.java
index 63ccb14a..9bdd4eb1 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileSystem.java
@@ -21,10 +21,10 @@ import java.util.Collection;
 
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.vfs2.Capability;
-import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystem;
 import org.apache.commons.vfs2.FileSystemOptions;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.DefaultURLStreamHandler;
 import org.apache.commons.vfs2.provider.GenericFileName;
 import org.apache.commons.vfs2.provider.http.HttpFileSystem;
@@ -67,7 +67,7 @@ public class WebdavFileSystem extends HttpFileSystem implements FileSystem
      * @return The created FileObject.
      */
     @Override
-    protected FileObject createFile(final FileName name)
+    protected FileObject createFile(final AbstractFileName name)
     {
 
         return new WebdavFileObject(name, this);
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileObject.java
index e5109102..e14f3536 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileObject.java
@@ -20,6 +20,7 @@ import org.apache.commons.vfs2.FileName;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileType;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileObject;
 
 import java.io.InputStream;
@@ -32,9 +33,7 @@ import java.util.zip.ZipEntry;
  * @author <a href="http://commons.apache.org/vfs/team-list.html">Commons VFS team</a>
  * @version $Revision$ $Date$
  */
-public class ZipFileObject
-    extends AbstractFileObject
-    implements FileObject
+public class ZipFileObject extends AbstractFileObject implements FileObject
 {
     /** The ZipEntry. */
     protected ZipEntry entry;
@@ -44,7 +43,7 @@ public class ZipFileObject
 
     private FileType type;
 
-    protected ZipFileObject(FileName name,
+    protected ZipFileObject(AbstractFileName name,
                             ZipEntry entry,
                             ZipFileSystem fs,
                             boolean zipExists) throws FileSystemException
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileProvider.java b/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileProvider.java
index 0372f738..039d52d9 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileProvider.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileProvider.java
@@ -23,6 +23,7 @@ import org.apache.commons.vfs2.FileSystem;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemOptions;
 import org.apache.commons.vfs2.FileType;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractLayeredFileProvider;
 import org.apache.commons.vfs2.provider.FileProvider;
 import org.apache.commons.vfs2.provider.LayeredFileName;
@@ -37,9 +38,7 @@ import java.util.Collections;
  * @author <a href="http://commons.apache.org/vfs/team-list.html">Commons VFS team</a>
  * @version $Revision$ $Date$
  */
-public class ZipFileProvider
-    extends AbstractLayeredFileProvider
-    implements FileProvider
+public class ZipFileProvider extends AbstractLayeredFileProvider implements FileProvider
 {
     /** The list of capabilities this provider supports */
     protected static final Collection<Capability> capabilities =
@@ -73,7 +72,7 @@ public class ZipFileProvider
                                             final FileSystemOptions fileSystemOptions)
         throws FileSystemException
     {
-        final FileName rootName =
+        final AbstractFileName rootName =
             new LayeredFileName(scheme, file.getName(), FileName.ROOT_PATH, FileType.FOLDER);
         return new ZipFileSystem(rootName, file, fileSystemOptions);
     }
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileSystem.java
index 276a73e2..f3a02633 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileSystem.java
@@ -26,6 +26,7 @@ import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemOptions;
 import org.apache.commons.vfs2.Selectors;
 import org.apache.commons.vfs2.VfsLog;
+import org.apache.commons.vfs2.provider.AbstractFileName;
 import org.apache.commons.vfs2.provider.AbstractFileSystem;
 import org.apache.commons.vfs2.provider.UriParser;
 
@@ -44,16 +45,14 @@ import java.util.zip.ZipFile;
  * @author <a href="http://commons.apache.org/vfs/team-list.html">Commons VFS team</a>
  * @version $Revision$ $Date$
  */
-public class ZipFileSystem
-    extends AbstractFileSystem
-    implements FileSystem
+public class ZipFileSystem extends AbstractFileSystem implements FileSystem
 {
     private static final Log LOG = LogFactory.getLog(ZipFileSystem.class);
 
     private final File file;
     private ZipFile zipFile;
 
-  public ZipFileSystem(final FileName rootName,
+  public ZipFileSystem(final AbstractFileName rootName,
                          final FileObject parentLayer,
                          final FileSystemOptions fileSystemOptions)
         throws FileSystemException
@@ -87,7 +86,8 @@ public class ZipFileSystem
             while (entries.hasMoreElements())
             {
                 ZipEntry entry = entries.nextElement();
-                FileName name = getFileSystemManager().resolveName(getRootName(), UriParser.encode(entry.getName()));
+                AbstractFileName name = (AbstractFileName) getFileSystemManager().resolveName(getRootName(),
+                    UriParser.encode(entry.getName()));
 
                 // Create the file
                 ZipFileObject fileObj;
@@ -106,9 +106,9 @@ public class ZipFileSystem
                 // Make sure all ancestors exist
                 // TODO - create these on demand
                 ZipFileObject parent;
-                for (FileName parentName = name.getParent();
+                for (AbstractFileName parentName = (AbstractFileName) name.getParent();
                      parentName != null;
-                     fileObj = parent, parentName = parentName.getParent())
+                     fileObj = parent, parentName = (AbstractFileName) parentName.getParent())
                 {
                     // Locate the parent
                     parent = (ZipFileObject) getFileFromCache(parentName);
@@ -143,7 +143,7 @@ public class ZipFileSystem
         return zipFile;
     }
 
-    protected ZipFileObject createZipFileObject(final FileName name,
+    protected ZipFileObject createZipFileObject(final AbstractFileName name,
                                                 final ZipEntry entry) throws FileSystemException
     {
         return new ZipFileObject(name, entry, this, true);
@@ -193,7 +193,7 @@ public class ZipFileSystem
      * Creates a file object.
      */
     @Override
-    protected FileObject createFile(final FileName name) throws FileSystemException
+    protected FileObject createFile(final AbstractFileName name) throws FileSystemException
     {
         // This is only called for files which do not exist in the Zip file
         return new ZipFileObject(name, null, this, false);
