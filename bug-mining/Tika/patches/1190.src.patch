diff --git a/tika-batch/src/main/java/org/apache/tika/batch/BatchProcessDriverCLI.java b/tika-batch/src/main/java/org/apache/tika/batch/BatchProcessDriverCLI.java
index 35cfc0869..a1d4050b2 100644
--- a/tika-batch/src/main/java/org/apache/tika/batch/BatchProcessDriverCLI.java
+++ b/tika-batch/src/main/java/org/apache/tika/batch/BatchProcessDriverCLI.java
@@ -203,7 +203,7 @@ public class BatchProcessDriverCLI {
         return numRestarts;
     }
 
-    public boolean getUserInterrupted() {
+    public boolean isUserInterrupted() {
         return userInterrupted;
     }
 
diff --git a/tika-batch/src/main/java/org/apache/tika/batch/ParserFactory.java b/tika-batch/src/main/java/org/apache/tika/batch/ParserFactory.java
index 6908a17f7..d8c69f9a9 100644
--- a/tika-batch/src/main/java/org/apache/tika/batch/ParserFactory.java
+++ b/tika-batch/src/main/java/org/apache/tika/batch/ParserFactory.java
@@ -26,7 +26,7 @@ public abstract class ParserFactory {
 
     public abstract Parser getParser(TikaConfig config);
 
-    public boolean getParseRecursively() {
+    public boolean isParseRecursively() {
         return parseRecursively;
     }
 
diff --git a/tika-batch/src/test/java/org/apache/tika/batch/fs/BatchDriverTest.java b/tika-batch/src/test/java/org/apache/tika/batch/fs/BatchDriverTest.java
index 57e56f555..7a77c1499 100644
--- a/tika-batch/src/test/java/org/apache/tika/batch/fs/BatchDriverTest.java
+++ b/tika-batch/src/test/java/org/apache/tika/batch/fs/BatchDriverTest.java
@@ -49,7 +49,7 @@ public class BatchDriverTest extends FSBatchTestBase {
         driver.execute();
 
         assertEquals(0, driver.getNumRestarts());
-        assertFalse(driver.getUserInterrupted());
+        assertFalse(driver.isUserInterrupted());
         assertEquals(5, countChildren(outputDir));
 
         assertContains("first test file",
@@ -69,7 +69,7 @@ public class BatchDriverTest extends FSBatchTestBase {
         driver.execute();
         //could be one or two depending on timing
         assertTrue(driver.getNumRestarts() > 0);
-        assertFalse(driver.getUserInterrupted());
+        assertFalse(driver.isUserInterrupted());
         assertContains("first test file",
                 readFileToString(outputDir.resolve("test6_ok.xml.xml"), UTF_8));
     }
@@ -89,7 +89,7 @@ public class BatchDriverTest extends FSBatchTestBase {
         BatchProcessDriverCLI driver = getNewDriver("/tika-batch-config-test.xml", mod);
         driver.execute();
         assertEquals(0, driver.getNumRestarts());
-        assertFalse(driver.getUserInterrupted());
+        assertFalse(driver.isUserInterrupted());
         assertEquals(2, countChildren(outputDir));
         Path test2 = outputDir.resolve("test2_norestart.xml.xml");
         assertTrue("test2_norestart.xml", Files.exists(test2));
@@ -109,7 +109,7 @@ public class BatchDriverTest extends FSBatchTestBase {
         BatchProcessDriverCLI driver = getNewDriver("/tika-batch-config-test.xml", args);
         driver.execute();
         assertEquals(1, driver.getNumRestarts());
-        assertFalse(driver.getUserInterrupted());
+        assertFalse(driver.isUserInterrupted());
         assertContains("first test file",
                 readFileToString(outputDir.resolve("test2_ok.xml.xml"), UTF_8));
     }
@@ -127,7 +127,7 @@ public class BatchDriverTest extends FSBatchTestBase {
         BatchProcessDriverCLI driver = getNewDriver("/tika-batch-config-test.xml", commandLine);
         driver.execute();
         assertEquals(3, driver.getNumRestarts());
-        assertFalse(driver.getUserInterrupted());
+        assertFalse(driver.isUserInterrupted());
         assertContains("first test file",
                 readFileToString(outputDir.resolve("test6_ok.xml.xml"), UTF_8));
     }
@@ -149,7 +149,7 @@ public class BatchDriverTest extends FSBatchTestBase {
         BatchProcessDriverCLI driver = getNewDriver("/tika-batch-config-test.xml", commandLine);
         driver.execute();
         assertEquals(2, driver.getNumRestarts());
-        assertFalse(driver.getUserInterrupted());
+        assertFalse(driver.isUserInterrupted());
         assertEquals(3, countChildren(outputDir));
     }
 
diff --git a/tika-core/src/main/java/org/apache/tika/sax/EndDocumentShieldingContentHandler.java b/tika-core/src/main/java/org/apache/tika/sax/EndDocumentShieldingContentHandler.java
index 8c91ad3ca..03325ed36 100644
--- a/tika-core/src/main/java/org/apache/tika/sax/EndDocumentShieldingContentHandler.java
+++ b/tika-core/src/main/java/org/apache/tika/sax/EndDocumentShieldingContentHandler.java
@@ -47,7 +47,7 @@ public class EndDocumentShieldingContentHandler extends ContentHandlerDecorator
        super.endDocument();
     }
     
-    public boolean getEndDocumentWasCalled() {
+    public boolean isEndDocumentWasCalled() {
        return endDocumentCalled;
     }
 }
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-crypto-module/src/main/java/org/apache/tika/parser/crypto/TSDParser.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-crypto-module/src/main/java/org/apache/tika/parser/crypto/TSDParser.java
index 1b48ccbc4..f2ae7a63a 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-crypto-module/src/main/java/org/apache/tika/parser/crypto/TSDParser.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-crypto-module/src/main/java/org/apache/tika/parser/crypto/TSDParser.java
@@ -215,13 +215,13 @@ public class TSDParser extends AbstractParser {
             this.algorithm = algorithm;
         }
 
-        public Boolean getParseBuilt() {
+        public Boolean isParseBuilt() {
             return parseBuilt;
         }
 
         public String getParseBuiltStr() {
-            return String.valueOf(this.getParseBuilt() != null ?
-                    this.getParseBuilt() : false);
+            return String.valueOf(this.isParseBuilt() != null ?
+                    this.isParseBuilt() : false);
         }
 
         public void setParseBuilt(Boolean parseBuilt) {
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/HtmlParser.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/HtmlParser.java
index adf591a3d..ed01db586 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/HtmlParser.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/HtmlParser.java
@@ -240,7 +240,7 @@ public class HtmlParser extends AbstractEncodingDetectorParser {
         this.extractScripts = extractScripts;
     }
 
-    public boolean getExtractScripts() {
+    public boolean isExtractScripts() {
         return extractScripts;
     }
 
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/AbstractOfficeParser.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/AbstractOfficeParser.java
index 3c51afac6..2b22b4b4b 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/AbstractOfficeParser.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/AbstractOfficeParser.java
@@ -40,39 +40,39 @@ public abstract class AbstractOfficeParser extends AbstractParser {
     }
 
     /**
-     * @see OfficeParserConfig#getIncludeDeletedContent
+     * @see OfficeParserConfig#isIncludeDeletedContent
      *
      * @return
      */
-    public boolean getIncludeDeletedContent() {
-        return defaultOfficeParserConfig.getIncludeDeletedContent();
+    public boolean isIncludeDeletedContent() {
+        return defaultOfficeParserConfig.isIncludeDeletedContent();
     }
 
     /**
-     * @see OfficeParserConfig#getIncludeMoveFromContent()
+     * @see OfficeParserConfig#isIncludeMoveFromContent()
      *
      * @return
      */
 
-    public boolean getIncludeMoveFromContent() {
-        return defaultOfficeParserConfig.getIncludeMoveFromContent();
+    public boolean isIncludeMoveFromContent() {
+        return defaultOfficeParserConfig.isIncludeMoveFromContent();
     }
 
     /**
-     * @see OfficeParserConfig#getUseSAXDocxExtractor()
+     * @see OfficeParserConfig#isUseSAXDocxExtractor()
      *
      * @return
      */
-    public boolean getUseSAXDocxExtractor() {
-        return defaultOfficeParserConfig.getUseSAXDocxExtractor();
+    public boolean isUseSAXDocxExtractor() {
+        return defaultOfficeParserConfig.isUseSAXDocxExtractor();
     }
 
     /**
-     * @see OfficeParserConfig#getExtractMacros()
+     * @see OfficeParserConfig#isExtractMacros()
      * @return whether or not to extract macros
      */
-    public boolean getExtractMacros() {
-        return defaultOfficeParserConfig.getExtractMacros();
+    public boolean isExtractMacros() {
+        return defaultOfficeParserConfig.isExtractMacros();
     }
 
     @Field
@@ -111,7 +111,7 @@ public abstract class AbstractOfficeParser extends AbstractParser {
     }
 
     void getConcatenatePhoneticRuns() {
-        defaultOfficeParserConfig.getConcatenatePhoneticRuns();
+        defaultOfficeParserConfig.isConcatenatePhoneticRuns();
     }
 
     /**
@@ -129,8 +129,8 @@ public abstract class AbstractOfficeParser extends AbstractParser {
     }
 
 
-    public boolean getExtractAllAlternativesFromMSG() {
-        return defaultOfficeParserConfig.getExtractAllAlternativesFromMSG();
+    public boolean isExtractAllAlternativesFromMSG() {
+        return defaultOfficeParserConfig.isExtractAllAlternativesFromMSG();
     }
 
     /**
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ExcelExtractor.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ExcelExtractor.java
index ddf6cd463..e731c0a54 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ExcelExtractor.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ExcelExtractor.java
@@ -329,7 +329,7 @@ public class ExcelExtractor extends AbstractPOIFSExtractor {
                 hssfRequest.addListener(formatListener, FormatRecord.sid);
                 hssfRequest.addListener(formatListener, ExtendedFormatRecord.sid);
                 hssfRequest.addListener(formatListener, DrawingGroupRecord.sid);
-                if (extractor.officeParserConfig.getIncludeHeadersAndFooters()) {
+                if (extractor.officeParserConfig.isIncludeHeadersAndFooters()) {
                     hssfRequest.addListener(formatListener, HeaderRecord.sid);
                     hssfRequest.addListener(formatListener, FooterRecord.sid);
                 }
@@ -456,7 +456,7 @@ public class ExcelExtractor extends AbstractPOIFSExtractor {
                     LabelSSTRecord sst = (LabelSSTRecord) record;
                     UnicodeString unicode = sstRecord.getString(sst.getSSTIndex());
                     String cellString = null;
-                    if (officeParserConfig.getConcatenatePhoneticRuns()) {
+                    if (officeParserConfig.isConcatenatePhoneticRuns()) {
                         String phonetic = (unicode != null
                                 && unicode.getExtendedRst() != null
                                 && unicode.getExtendedRst().getPhoneticText() != null
@@ -497,7 +497,7 @@ public class ExcelExtractor extends AbstractPOIFSExtractor {
                     break;
 
                 case TextObjectRecord.sid:
-                    if (extractor.officeParserConfig.getIncludeShapeBasedContent()) {
+                    if (extractor.officeParserConfig.isIncludeShapeBasedContent()) {
                         TextObjectRecord tor = (TextObjectRecord) record;
                         addTextCell(record, tor.getStr().getString());
                     }
@@ -515,14 +515,14 @@ public class ExcelExtractor extends AbstractPOIFSExtractor {
                     break;
                     
                 case HeaderRecord.sid:
-                	if (extractor.officeParserConfig.getIncludeHeadersAndFooters()) {
+                	if (extractor.officeParserConfig.isIncludeHeadersAndFooters()) {
                         HeaderRecord headerRecord = (HeaderRecord) record;
                         addTextCell(record, headerRecord.getText());
                     }
                     break;
                 	
                 case FooterRecord.sid:
-                    if (extractor.officeParserConfig.getIncludeHeadersAndFooters()) {
+                    if (extractor.officeParserConfig.isIncludeHeadersAndFooters()) {
                         FooterRecord footerRecord = (FooterRecord) record;
                         addTextCell(record, footerRecord.getText());
                     }
@@ -631,7 +631,7 @@ public class ExcelExtractor extends AbstractPOIFSExtractor {
                         handler.startElement("tr");
                         handler.startElement("td");
                         currentRow++;
-                    } while (officeParserConfig.getIncludeMissingRows() &&
+                    } while (officeParserConfig.isIncludeMissingRows() &&
                              currentRow < entry.getKey().y);
                     currentRow = entry.getKey().y;
                     currentColumn = 0;
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java
index 79fa38cda..b77d29279 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java
@@ -44,7 +44,6 @@ import org.apache.poi.poifs.filesystem.POIFSFileSystem;
 import org.apache.poi.sl.usermodel.Comment;
 import org.apache.poi.sl.usermodel.ShapeContainer;
 import org.apache.poi.sl.usermodel.SimpleShape;
-import org.apache.poi.sl.usermodel.TextParagraph;
 import org.apache.tika.exception.EncryptedDocumentException;
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.extractor.EmbeddedDocumentUtil;
@@ -93,14 +92,14 @@ public class HSLFExtractor extends AbstractPOIFSExtractor {
         for (HSLFSlide slide : _slides) {
             xhtml.startElement("div", "class", "slide");
             HeadersFooters slideHeaderFooters =
-                    (officeParserConfig.getIncludeHeadersAndFooters()) ?
+                    (officeParserConfig.isIncludeHeadersAndFooters()) ?
                             slide.getHeadersFooters() : null;
 
             HeadersFooters notesHeadersFooters =
-                    (officeParserConfig.getIncludeHeadersAndFooters()) ?
+                    (officeParserConfig.isIncludeHeadersAndFooters()) ?
                             ss.getNotesHeadersFooters() : null;
 
-            if (officeParserConfig.getIncludeHeadersAndFooters()) {
+            if (officeParserConfig.isIncludeHeadersAndFooters()) {
                 // Slide header, if present
                 if (slideHeaderFooters != null && slideHeaderFooters.isHeaderVisible() && slideHeaderFooters.getHeaderText() != null) {
                     xhtml.startElement("p", "class", "slide-header");
@@ -112,7 +111,7 @@ public class HSLFExtractor extends AbstractPOIFSExtractor {
             }
 
             // Slide master, if present
-            if (officeParserConfig.getIncludeSlideMasterContent()) {
+            if (officeParserConfig.isIncludeSlideMasterContent()) {
                 extractMaster(xhtml, slide.getMasterSheet());
             }
             // Slide text
@@ -132,7 +131,7 @@ public class HSLFExtractor extends AbstractPOIFSExtractor {
             //end slide content
             xhtml.endElement("div");
 
-            if (officeParserConfig.getIncludeHeadersAndFooters()) {
+            if (officeParserConfig.isIncludeHeadersAndFooters()) {
                 // Slide footer, if present
                 if (slideHeaderFooters != null && slideHeaderFooters.isFooterVisible() && slideHeaderFooters.getFooterText() != null) {
                     xhtml.startElement("p", "class", "slide-footer");
@@ -151,7 +150,7 @@ public class HSLFExtractor extends AbstractPOIFSExtractor {
         }
 
         handleSlideEmbeddedPictures(ss, xhtml);
-        if (officeParserConfig.getExtractMacros()) {
+        if (officeParserConfig.isExtractMacros()) {
             extractMacros(ss, xhtml);
         }
         // All slides done
@@ -199,7 +198,7 @@ public class HSLFExtractor extends AbstractPOIFSExtractor {
     private void handleNotes(HSLFSlide slide,
                              HeadersFooters notesHeaderFooters, XHTMLContentHandler xhtml) throws SAXException, TikaException, IOException {
 
-        if (!officeParserConfig.getIncludeSlideNotes()) {
+        if (!officeParserConfig.isIncludeSlideNotes()) {
             return;
         }
         // Find the Notes for this slide and extract inline
@@ -211,7 +210,7 @@ public class HSLFExtractor extends AbstractPOIFSExtractor {
         xhtml.startElement("div", "class", "notes");
 
         // Repeat the Notes header, if set
-        if (officeParserConfig.getIncludeHeadersAndFooters() &&
+        if (officeParserConfig.isIncludeHeadersAndFooters() &&
                 notesHeaderFooters != null &&
                 notesHeaderFooters.isHeaderVisible() &&
                 notesHeaderFooters.getHeaderText() != null) {
@@ -237,7 +236,7 @@ public class HSLFExtractor extends AbstractPOIFSExtractor {
         xhtml.endElement("div");
 
         // Repeat the Notes footer, if set
-        if (officeParserConfig.getIncludeHeadersAndFooters() &&
+        if (officeParserConfig.isIncludeHeadersAndFooters() &&
                 notesHeaderFooters != null &&
                 notesHeaderFooters.isFooterVisible() &&
                 notesHeaderFooters.getFooterText() != null) {
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/OfficeParser.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/OfficeParser.java
index dc03d3324..43cecfa10 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/OfficeParser.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/OfficeParser.java
@@ -132,7 +132,7 @@ public class OfficeParser extends AbstractOfficeParser {
             parse(root, context, metadata, xhtml);
             OfficeParserConfig officeParserConfig = context.get(OfficeParserConfig.class);
 
-            if (officeParserConfig.getExtractMacros()) {
+            if (officeParserConfig.isExtractMacros()) {
                 //now try to get macros.
                 //Note that macros are handled separately for ppt in HSLFExtractor.
 
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/OfficeParserConfig.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/OfficeParserConfig.java
index 53498b1dc..92401723a 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/OfficeParserConfig.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/OfficeParserConfig.java
@@ -52,7 +52,7 @@ public class OfficeParserConfig implements Serializable {
      *
      * @return whether or not to extract macros
      */
-    public boolean getExtractMacros() {
+    public boolean isExtractMacros() {
         return extractMacros;
     }
     /**
@@ -66,7 +66,7 @@ public class OfficeParserConfig implements Serializable {
         this.includeDeletedContent = includeDeletedContent;
     }
 
-    public boolean getIncludeDeletedContent() {
+    public boolean isIncludeDeletedContent() {
         return includeDeletedContent;
     }
 
@@ -87,7 +87,7 @@ public class OfficeParserConfig implements Serializable {
         this.includeMoveFromContent = includeMoveFromContent;
     }
 
-    public boolean getIncludeMoveFromContent() {
+    public boolean isIncludeMoveFromContent() {
         return includeMoveFromContent;
     }
 
@@ -105,7 +105,7 @@ public class OfficeParserConfig implements Serializable {
         this.includeShapeBasedContent = includeShapeBasedContent;
     }
 
-    public boolean getIncludeShapeBasedContent() {
+    public boolean isIncludeShapeBasedContent() {
         return includeShapeBasedContent;
     }
 
@@ -122,10 +122,10 @@ public class OfficeParserConfig implements Serializable {
         this.includeHeadersAndFooters = includeHeadersAndFooters;
     }
 
-    public boolean getIncludeHeadersAndFooters() {
+    public boolean isIncludeHeadersAndFooters() {
         return includeHeadersAndFooters;
     }
-    public boolean getUseSAXDocxExtractor() {
+    public boolean isUseSAXDocxExtractor() {
         return useSAXDocxExtractor;
     }
 
@@ -153,12 +153,12 @@ public class OfficeParserConfig implements Serializable {
         this.useSAXPptxExtractor = useSAXPptxExtractor;
     }
 
-    public boolean getUseSAXPptxExtractor() {
+    public boolean isUseSAXPptxExtractor() {
         return useSAXPptxExtractor;
     }
 
 
-    public boolean getConcatenatePhoneticRuns() {
+    public boolean isConcatenatePhoneticRuns() {
         return concatenatePhoneticRuns;
     }
 
@@ -191,7 +191,7 @@ public class OfficeParserConfig implements Serializable {
         this.extractAllAlternativesFromMSG = extractAllAlternativesFromMSG;
     }
 
-    public boolean getExtractAllAlternativesFromMSG() {
+    public boolean isExtractAllAlternativesFromMSG() {
         return extractAllAlternativesFromMSG;
     }
 
@@ -205,11 +205,11 @@ public class OfficeParserConfig implements Serializable {
         this.includeMissingRows = includeMissingRows;
     }
 
-    public boolean getIncludeMissingRows() {
+    public boolean isIncludeMissingRows() {
         return includeMissingRows;
     }
 
-    public boolean getIncludeSlideNotes() {
+    public boolean isIncludeSlideNotes() {
         return includeSlideNotes;
     }
 
@@ -230,7 +230,7 @@ public class OfficeParserConfig implements Serializable {
      * @since 1.19.1
      * @return whether or not to process content in slide masters
      */
-    public boolean getIncludeSlideMasterContent() {
+    public boolean isIncludeSlideMasterContent() {
         return includeSlideMasterContent;
     }
 
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/OutlookExtractor.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/OutlookExtractor.java
index 9e09bbe20..a170b1fb9 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/OutlookExtractor.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/OutlookExtractor.java
@@ -133,7 +133,7 @@ public class OutlookExtractor extends AbstractPOIFSExtractor {
     public OutlookExtractor(DirectoryNode root, ParseContext context) throws TikaException {
         super(context);
         this.parseContext = context;
-        this.extractAllAlternatives = context.get(OfficeParserConfig.class).getExtractAllAlternativesFromMSG();
+        this.extractAllAlternatives = context.get(OfficeParserConfig.class).isExtractAllAlternativesFromMSG();
         try {
             this.msg = new MAPIMessage(root);
         } catch (IOException e) {
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java
index 6b3d08c8b..cf347f910 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java
@@ -173,7 +173,7 @@ public class WordExtractor extends AbstractPOIFSExtractor {
         PicturesSource pictures = new PicturesSource(document);
         HeaderStories headerFooter = null;
         // Do any headers, if present
-        if (officeParserConfig.getIncludeHeadersAndFooters()) {
+        if (officeParserConfig.isIncludeHeadersAndFooters()) {
             headerFooter = new HeaderStories(document);
             Range[] headers = new Range[]{headerFooter.getFirstHeaderSubrange(),
                     headerFooter.getEvenHeaderSubrange(), headerFooter.getOddHeaderSubrange()};
@@ -187,7 +187,7 @@ public class WordExtractor extends AbstractPOIFSExtractor {
             i += handleParagraph(p, 0, r, document, FieldsDocumentPart.MAIN, pictures, pictureTable, listManager, xhtml);
         }
 
-        if (officeParserConfig.getIncludeShapeBasedContent()) {
+        if (officeParserConfig.isIncludeShapeBasedContent()) {
             // Do everything else
             for (String paragraph : wordExtractor.getMainTextboxText()) {
                 xhtml.element("p", paragraph);
@@ -206,7 +206,7 @@ public class WordExtractor extends AbstractPOIFSExtractor {
             xhtml.element("p", paragraph);
         }
 
-        if (officeParserConfig.getIncludeHeadersAndFooters()) {
+        if (officeParserConfig.isIncludeHeadersAndFooters()) {
             // Do any footers, if present
             Range[] footers = new Range[]{headerFooter.getFirstFooterSubrange(),
                     headerFooter.getEvenFooterSubrange(), headerFooter.getOddFooterSubrange()};
@@ -609,7 +609,7 @@ public class WordExtractor extends AbstractPOIFSExtractor {
             return true;
         }
         return !cr.isMarkedDeleted() ||
-                (cr.isMarkedDeleted() && officeParserConfig.getIncludeDeletedContent());
+                (cr.isMarkedDeleted() && officeParserConfig.isIncludeDeletedContent());
     }
 
     public static class TagAndStyle {
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java
index 5e3341c17..4660f29bb 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/AbstractOOXMLExtractor.java
@@ -29,7 +29,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-import org.apache.poi.extractor.POITextExtractor;
 import org.apache.poi.ooxml.POIXMLDocument;
 import org.apache.poi.ooxml.extractor.ExtractorFactory;
 import org.apache.poi.ooxml.extractor.POIXMLTextExtractor;
@@ -422,7 +421,7 @@ public abstract class AbstractOOXMLExtractor implements OOXMLExtractor {
     void handleMacros(PackagePart macroPart, ContentHandler handler) throws TikaException, SAXException {
         OfficeParserConfig officeParserConfig = context.get(OfficeParserConfig.class);
 
-        if (officeParserConfig.getExtractMacros()) {
+        if (officeParserConfig.isExtractMacros()) {
             try (InputStream is = macroPart.getInputStream()) {
                 try (POIFSFileSystem poifs = new POIFSFileSystem(is)) {
                     //Macro reading exceptions are already swallowed here
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/OOXMLExtractorFactory.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/OOXMLExtractorFactory.java
index f0af25b9d..29dc41f6f 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/OOXMLExtractorFactory.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/OOXMLExtractorFactory.java
@@ -155,11 +155,11 @@ public class OOXMLExtractorFactory {
             // This has already been set by OOXMLParser's call to configure()
             // We can rely on this being non-null.
             OfficeParserConfig config = context.get(OfficeParserConfig.class);
-            if (config.getUseSAXDocxExtractor()) {
+            if (config.isUseSAXDocxExtractor()) {
                 poiExtractor = trySXWPF(pkg);
             }
             if (poiExtractor == null) {
-                poiExtractor = tryXSLF(pkg, config.getUseSAXPptxExtractor());
+                poiExtractor = tryXSLF(pkg, config.isUseSAXPptxExtractor());
             }
             if (type.equals(OOXMLParser.XPS)) {
                 poiExtractor = new XPSTextExtractor(pkg);
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/OOXMLTikaBodyPartHandler.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/OOXMLTikaBodyPartHandler.java
index dcf255600..ae17a5f2c 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/OOXMLTikaBodyPartHandler.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/OOXMLTikaBodyPartHandler.java
@@ -74,8 +74,8 @@ public class OOXMLTikaBodyPartHandler implements OOXMLWordAndPowerPointTextHandl
         this.xhtml = xhtml;
         this.styles = styles;
         this.listManager = listManager;
-        this.includeDeletedText = parserConfig.getIncludeDeletedContent();
-        this.includeMoveFromText = parserConfig.getIncludeMoveFromContent();
+        this.includeDeletedText = parserConfig.isIncludeDeletedContent();
+        this.includeMoveFromText = parserConfig.isIncludeMoveFromContent();
     }
 
     @Override
@@ -332,7 +332,7 @@ public class OOXMLTikaBodyPartHandler implements OOXMLWordAndPowerPointTextHandl
     }
 
     @Override
-    public boolean getIncludeDeletedText() {
+    public boolean isIncludeDeletedText() {
         return includeDeletedText;
     }
 
@@ -363,7 +363,7 @@ public class OOXMLTikaBodyPartHandler implements OOXMLWordAndPowerPointTextHandl
     }
 
     @Override
-    public boolean getIncludeMoveFromText() {
+    public boolean isIncludeMoveFromText() {
         return includeMoveFromText;
     }
 
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/OOXMLWordAndPowerPointTextHandler.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/OOXMLWordAndPowerPointTextHandler.java
index f0ba26533..b7a2436fc 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/OOXMLWordAndPowerPointTextHandler.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/OOXMLWordAndPowerPointTextHandler.java
@@ -22,7 +22,6 @@ import java.util.Date;
 import java.util.Map;
 
 import org.apache.poi.xwpf.usermodel.UnderlinePatterns;
-import org.apache.tika.parser.microsoft.OfficeParserConfig;
 import org.apache.tika.utils.DateUtils;
 import org.xml.sax.Attributes;
 import org.xml.sax.SAXException;
@@ -499,12 +498,12 @@ public class OOXMLWordAndPowerPointTextHandler extends DefaultHandler {
         }
 
         if (editType.equals(EditType.MOVE_FROM) && inT) {
-            if (bodyContentsHandler.getIncludeMoveFromText()) {
+            if (bodyContentsHandler.isIncludeMoveFromText()) {
                 appendToBuffer(ch, start, length);
             }
         } else if (inT) {
             appendToBuffer(ch, start, length);
-        } else if (bodyContentsHandler.getIncludeDeletedText() && editType.equals(EditType.DELETE)) {
+        } else if (bodyContentsHandler.isIncludeDeletedText() && editType.equals(EditType.DELETE)) {
             appendToBuffer(ch, start, length);
         } else if (inV) {
             appendToBuffer(ch, start, length);
@@ -522,7 +521,7 @@ public class OOXMLWordAndPowerPointTextHandler extends DefaultHandler {
 
         if (inT) {
             appendToBuffer(ch, start, length);
-        } else if (bodyContentsHandler.getIncludeDeletedText() && inDelText) {
+        } else if (bodyContentsHandler.isIncludeDeletedText() && inDelText) {
             appendToBuffer(ch, start, length);
         }
     }
@@ -570,13 +569,13 @@ public class OOXMLWordAndPowerPointTextHandler extends DefaultHandler {
 
         void endEditedSection();
 
-        boolean getIncludeDeletedText();
+        boolean isIncludeDeletedText();
 
         void footnoteReference(String id);
 
         void endnoteReference(String id);
 
-        boolean getIncludeMoveFromText();
+        boolean isIncludeMoveFromText();
 
         void embeddedOLERef(String refId);
 
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/POIXMLTextExtractorDecorator.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/POIXMLTextExtractorDecorator.java
index 56d8a71c9..758b04a84 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/POIXMLTextExtractorDecorator.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/POIXMLTextExtractorDecorator.java
@@ -32,7 +32,7 @@ public class POIXMLTextExtractorDecorator extends AbstractOOXMLExtractor {
         super(context, extractor);
         
         if (extractor instanceof XSSFExcelExtractor) {
-            ((XSSFExcelExtractor)extractor).setIncludeTextBoxes(config.getIncludeShapeBasedContent());
+            ((XSSFExcelExtractor)extractor).setIncludeTextBoxes(config.isIncludeShapeBasedContent());
         }
     }
 
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java
index a56f8e133..2372e1554 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXSLFPowerPointExtractorDecorator.java
@@ -50,8 +50,6 @@ import org.xml.sax.ContentHandler;
 import org.xml.sax.SAXException;
 import org.xml.sax.helpers.DefaultHandler;
 
-import javax.xml.parsers.SAXParser;
-
 /**
  * SAX/Streaming pptx extractior
  */
@@ -122,7 +120,7 @@ public class SXSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {
             }
         }
 
-        if (config.getIncludeSlideMasterContent()) {
+        if (config.isIncludeSlideMasterContent()) {
             handleGeneralTextContainingPart(XSLFRelation.SLIDE_MASTER.getRelation(),
                     "slide-master",
                     mainDocument,
@@ -197,7 +195,7 @@ public class SXSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {
 
         xhtml.endElement("div");
 
-        if (config.getIncludeSlideMasterContent()) {
+        if (config.isIncludeSlideMasterContent()) {
             handleGeneralTextContainingPart(XSLFRelation.SLIDE_LAYOUT.getRelation(),
                     "slide-master-content", slidePart,
                     metadata,
@@ -205,13 +203,13 @@ public class SXSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {
                             new OOXMLTikaBodyPartHandler(xhtml), linkedRelationships))
             );
         }
-        if (config.getIncludeSlideNotes()) {
+        if (config.isIncludeSlideNotes()) {
             handleGeneralTextContainingPart(XSLFRelation.NOTES.getRelation(),
                     "slide-notes", slidePart,
                     metadata,
                     new OOXMLWordAndPowerPointTextHandler(
                             new OOXMLTikaBodyPartHandler(xhtml), linkedRelationships));
-            if (config.getIncludeSlideMasterContent()) {
+            if (config.isIncludeSlideMasterContent()) {
                 handleGeneralTextContainingPart(XSLFRelation.NOTES_MASTER.getRelation(),
                         "slide-notes-master", slidePart,
                         metadata,
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java
index 57bbfeb3a..edad9703a 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/SXWPFWordExtractorDecorator.java
@@ -48,8 +48,6 @@ import org.apache.tika.utils.XMLReaderUtils;
 import org.apache.xmlbeans.XmlException;
 import org.xml.sax.SAXException;
 
-import javax.xml.parsers.SAXParser;
-
 /**
  * This is an experimental, alternative extractor for docx files.
  * This streams the main document content rather than loading the
@@ -136,7 +134,7 @@ public class SXWPFWordExtractorDecorator extends AbstractOOXMLExtractor {
                     ExceptionUtils.getStackTrace(e));
         }
 
-        if (config.getIncludeHeadersAndFooters()) {
+        if (config.isIncludeHeadersAndFooters()) {
             //headers
             try {
                 PackageRelationshipCollection headersPRC = documentPart.getRelationshipsByType(XWPFRelation.HEADER.getRelation());
@@ -169,7 +167,7 @@ public class SXWPFWordExtractorDecorator extends AbstractOOXMLExtractor {
                 XWPFRelation.ENDNOTE.getRelation(),
         }) {
             //skip footers if we shouldn't extract them
-            if (! config.getIncludeHeadersAndFooters() &&
+            if (! config.isIncludeHeadersAndFooters() &&
                     rel.equals(XWPFRelation.FOOTER.getRelation())) {
                 continue;
             }
@@ -198,7 +196,7 @@ public class SXWPFWordExtractorDecorator extends AbstractOOXMLExtractor {
                     new OfflineContentHandler(new EmbeddedContentHandler(
                             new OOXMLWordAndPowerPointTextHandler(
                                     new OOXMLTikaBodyPartHandler(xhtml, styles, listManager,
-                                            config), linkedRelationships, config.getIncludeShapeBasedContent(), config.getConcatenatePhoneticRuns()))),
+                                            config), linkedRelationships, config.isIncludeShapeBasedContent(), config.isConcatenatePhoneticRuns()))),
                     context);
         } catch (TikaException|IOException e) {
             metadata.add(TikaCoreProperties.TIKA_META_EXCEPTION_WARNING,
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSLFPowerPointExtractorDecorator.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSLFPowerPointExtractorDecorator.java
index 2b7e5ce8e..5df00418a 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSLFPowerPointExtractorDecorator.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSLFPowerPointExtractorDecorator.java
@@ -30,13 +30,11 @@ import org.apache.poi.openxml4j.opc.PackageRelationship;
 import org.apache.poi.openxml4j.opc.PackageRelationshipCollection;
 import org.apache.poi.openxml4j.opc.PackagingURIHelper;
 import org.apache.poi.openxml4j.opc.TargetMode;
-import org.apache.poi.sl.extractor.SlideShowExtractor;
 import org.apache.poi.sl.usermodel.Placeholder;
 import org.apache.poi.xslf.extractor.XSLFPowerPointExtractor;
 import org.apache.poi.xslf.usermodel.XMLSlideShow;
 import org.apache.poi.xslf.usermodel.XSLFComment;
 import org.apache.poi.xslf.usermodel.XSLFCommentAuthors;
-import org.apache.poi.xslf.usermodel.XSLFComments;
 import org.apache.poi.xslf.usermodel.XSLFGraphicFrame;
 import org.apache.poi.xslf.usermodel.XSLFGroupShape;
 import org.apache.poi.xslf.usermodel.XSLFHyperlink;
@@ -110,7 +108,7 @@ public class XSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {
             extractContent(slide.getShapes(), false, xhtml, slideDesc);
             xhtml.endElement("div");
 
-            if (config.getIncludeSlideMasterContent()) {
+            if (config.isIncludeSlideMasterContent()) {
                 // slide layout which is the master sheet for this slide
                 xhtml.startElement("div", "class", "slide-master-content");
                 XSLFSlideLayout slideLayout = slide.getMasterSheet();
@@ -121,7 +119,7 @@ public class XSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {
                 XSLFSheet slideMaster = slideLayout.getMasterSheet();
                 extractContent(slideMaster.getShapes(), true, xhtml, null);
             }
-            if (config.getIncludeSlideNotes()) {
+            if (config.isIncludeSlideNotes()) {
                 // notes (if present)
                 XSLFNotes slideNotes = slide.getNotes();
                 if (slideNotes != null) {
@@ -205,7 +203,7 @@ public class XSLFPowerPointExtractorDecorator extends AbstractOOXMLExtractor {
                 boolean inHyperlink = false;
                 for (XSLFTextParagraph p : txt.getTextParagraphs()) {
                     xhtml.startElement("p");
-                    if (! config.getIncludeHeadersAndFooters() && p.isHeaderOrFooter()) {
+                    if (! config.isIncludeHeadersAndFooters() && p.isHeaderOrFooter()) {
                         continue;
                     }
                     for (XSLFTextRun run : p.getTextRuns()) {
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java
index 56a0f105a..5f56ebaab 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/XSSFExcelExtractorDecorator.java
@@ -105,7 +105,7 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {
     }
 
     protected void configureExtractor(POIXMLTextExtractor extractor, Locale locale) {
-        ((XSSFEventBasedExcelExtractor)extractor).setIncludeTextBoxes(config.getIncludeShapeBasedContent());
+        ((XSSFEventBasedExcelExtractor)extractor).setIncludeTextBoxes(config.isIncludeShapeBasedContent());
         ((XSSFEventBasedExcelExtractor)extractor).setFormulasNotResults(false);
         ((XSSFEventBasedExcelExtractor)extractor).setLocale(locale);
         //given that we load our own shared strings table, setting:
@@ -142,7 +142,7 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {
             styles = xssfReader.getStylesTable();
 
             iter = (XSSFReader.SheetIterator) xssfReader.getSheetsData();
-            strings = new ReadOnlySharedStringsTable(container, config.getConcatenatePhoneticRuns());
+            strings = new ReadOnlySharedStringsTable(container, config.isConcatenatePhoneticRuns());
         } catch (InvalidFormatException e) {
             throw new XmlException(e);
         } catch (OpenXML4JException oe) {
@@ -184,7 +184,7 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {
             }
             
             // Do text held in shapes, if required
-            if (config.getIncludeShapeBasedContent()) {
+            if (config.isIncludeShapeBasedContent()) {
                 List<XSSFShape> shapes = iter.getShapes();
                 processShapes(shapes, xhtml);
             }
@@ -413,8 +413,8 @@ public class XSSFExcelExtractorDecorator extends AbstractOOXMLExtractor {
         private int lastSeenCol = -1;
 
         protected SheetTextAsHTML(OfficeParserConfig config, XHTMLContentHandler xhtml) {
-            this.includeHeadersFooters = config.getIncludeHeadersAndFooters();
-            this.includeMissingRows = config.getIncludeMissingRows();
+            this.includeHeadersFooters = config.isIncludeHeadersAndFooters();
+            this.includeMissingRows = config.isIncludeMissingRows();
             this.xhtml = xhtml;
             headers = new ArrayList<String>();
             footers = new ArrayList<String>();
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/XWPFWordExtractorDecorator.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/XWPFWordExtractorDecorator.java
index 9ad3877bc..a41e3e71f 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/XWPFWordExtractorDecorator.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/XWPFWordExtractorDecorator.java
@@ -116,7 +116,7 @@ public class XWPFWordExtractorDecorator extends AbstractOOXMLExtractor {
         XWPFHeaderFooterPolicy hfPolicy = document.getHeaderFooterPolicy();
         XWPFListManager listManager = new XWPFListManager(document.getNumbering());
         // headers
-        if (hfPolicy != null && config.getIncludeHeadersAndFooters()) {
+        if (hfPolicy != null && config.isIncludeHeadersAndFooters()) {
             extractHeaders(xhtml, hfPolicy, listManager);
         }
 
@@ -147,7 +147,7 @@ public class XWPFWordExtractorDecorator extends AbstractOOXMLExtractor {
         );
 
         // then all document footers
-        if (hfPolicy != null && config.getIncludeHeadersAndFooters()) {
+        if (hfPolicy != null && config.isIncludeHeadersAndFooters()) {
             extractFooters(xhtml, hfPolicy, listManager);
         }
     }
@@ -189,7 +189,7 @@ public class XWPFWordExtractorDecorator extends AbstractOOXMLExtractor {
         XWPFHeaderFooterPolicy headerFooterPolicy = null;
         if (paragraph.getCTP().getPPr() != null) {
             CTSectPr ctSectPr = paragraph.getCTP().getPPr().getSectPr();
-            if (ctSectPr != null && config.getIncludeHeadersAndFooters()) {
+            if (ctSectPr != null && config.isIncludeHeadersAndFooters()) {
                 headerFooterPolicy =
                         new XWPFHeaderFooterPolicy(document, ctSectPr);
                 extractHeaders(xhtml, headerFooterPolicy, listManager);
@@ -331,7 +331,7 @@ public class XWPFWordExtractorDecorator extends AbstractOOXMLExtractor {
         // Also extract any paragraphs embedded in text boxes
         //Note "w:txbxContent//"...must look for all descendant paragraphs
         //not just the immediate children of txbxContent -- TIKA-2807
-        if (config.getIncludeShapeBasedContent()) {
+        if (config.isIncludeShapeBasedContent()) {
             for (XmlObject embeddedParagraph : paragraph.getCTP().selectPath("declare namespace w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' declare namespace wps='http://schemas.microsoft.com/office/word/2010/wordprocessingShape' .//*/wps:txbx/w:txbxContent//w:p")) {
                 extractParagraph(new XWPFParagraph(CTP.Factory.parse(embeddedParagraph.xmlText()), paragraph.getBody()), listManager, xhtml);
             }
@@ -340,7 +340,7 @@ public class XWPFWordExtractorDecorator extends AbstractOOXMLExtractor {
         // Finish this paragraph
         xhtml.endElement(tag);
 
-        if (headerFooterPolicy != null && config.getIncludeHeadersAndFooters()) {
+        if (headerFooterPolicy != null && config.isIncludeHeadersAndFooters()) {
             extractFooters(xhtml, headerFooterPolicy, listManager);
         }
     }
@@ -366,7 +366,7 @@ public class XWPFWordExtractorDecorator extends AbstractOOXMLExtractor {
         // open/close required tags if run changes formatting
         FormattingUtils.ensureFormattingState(xhtml, FormattingUtils.toTags(run), formattingState);
 
-        if (config.getConcatenatePhoneticRuns()) {
+        if (config.isConcatenatePhoneticRuns()) {
             xhtml.characters(run.toString());
         } else {
             xhtml.characters(run.text());
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/xslf/XSLFEventBasedPowerPointExtractor.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/xslf/XSLFEventBasedPowerPointExtractor.java
index 76750caaf..ec161cf39 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/xslf/XSLFEventBasedPowerPointExtractor.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/xslf/XSLFEventBasedPowerPointExtractor.java
@@ -169,7 +169,7 @@ public class XSLFEventBasedPowerPointExtractor extends POIXMLTextExtractor {
         }
 
         @Override
-        public boolean getIncludeDeletedText() {
+        public boolean isIncludeDeletedText() {
             return false;
         }
 
@@ -184,7 +184,7 @@ public class XSLFEventBasedPowerPointExtractor extends POIXMLTextExtractor {
         }
 
         @Override
-        public boolean getIncludeMoveFromText() {
+        public boolean isIncludeMoveFromText() {
             return false;
         }
 
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFEventBasedWordExtractor.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFEventBasedWordExtractor.java
index fef4e9e07..4fd226e13 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFEventBasedWordExtractor.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/XWPFEventBasedWordExtractor.java
@@ -324,7 +324,7 @@ public class XWPFEventBasedWordExtractor extends POIXMLTextExtractor {
         }
 
         @Override
-        public boolean getIncludeDeletedText() {
+        public boolean isIncludeDeletedText() {
             return true;
         }
 
@@ -339,7 +339,7 @@ public class XWPFEventBasedWordExtractor extends POIXMLTextExtractor {
         }
 
         @Override
-        public boolean getIncludeMoveFromText() {
+        public boolean isIncludeMoveFromText() {
             return false;
         }
 
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-miscoffice-module/src/main/java/org/apache/tika/parser/mif/MIFParser.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-miscoffice-module/src/main/java/org/apache/tika/parser/mif/MIFParser.java
index 2a44390a0..19d5eb579 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-miscoffice-module/src/main/java/org/apache/tika/parser/mif/MIFParser.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-miscoffice-module/src/main/java/org/apache/tika/parser/mif/MIFParser.java
@@ -77,7 +77,7 @@ public class MIFParser extends AbstractEncodingDetectorParser {
             MIFExtractor.parse(reader, getContentHandler(parseHandler, metadata));
             xhtml.endDocument();
 
-            if (parseHandler.getEndDocumentWasCalled()) {
+            if (parseHandler.isEndDocumentWasCalled()) {
                 parseHandler.reallyEndDocument();
             }
         }
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-miscoffice-module/src/main/java/org/apache/tika/parser/odf/OpenDocumentParser.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-miscoffice-module/src/main/java/org/apache/tika/parser/odf/OpenDocumentParser.java
index b2e55ca4d..40b701d06 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-miscoffice-module/src/main/java/org/apache/tika/parser/odf/OpenDocumentParser.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-miscoffice-module/src/main/java/org/apache/tika/parser/odf/OpenDocumentParser.java
@@ -176,7 +176,7 @@ public class OpenDocumentParser extends AbstractParser {
         }
 
         // Only now call the end document
-        if (handler.getEndDocumentWasCalled()) {
+        if (handler.isEndDocumentWasCalled()) {
             handler.reallyEndDocument();
         }
     }
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/ImagePreprocessor.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/ImagePreprocessor.java
index 8ec3badbd..7f006da6f 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/ImagePreprocessor.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/ImagePreprocessor.java
@@ -208,7 +208,7 @@ class ImagePreprocessor {
 
             DefaultExecutor executor = new DefaultExecutor();
             // determine the angle of rotation required to make the text horizontal
-            if (config.getApplyRotation() && hasPython(config)) {
+            if (config.isApplyRotation() && hasPython(config)) {
                 CommandLine commandLine = new CommandLine(getPythonPath(config));
                 String[] args = {"-W",
                         "ignore",
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java
index f6c9d5213..9ded5f381 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java
@@ -181,7 +181,7 @@ public class TesseractOCRConfig implements Serializable {
 
         // set parameters for ImageMagick
         setEnableImageProcessing(
-                getProp(props, "enableImageProcessing", getEnableImageProcessing()));
+                getProp(props, "enableImageProcessing", isEnableImageProcessing()));
         setImageMagickPath(
                 getProp(props, "ImageMagickPath", getImageMagickPath()));
         setDensity(
@@ -195,7 +195,7 @@ public class TesseractOCRConfig implements Serializable {
         setResize(
                 getProp(props, "resize", getResize()));
         setApplyRotation(
-        		getProp(props, "applyRotation", getApplyRotation()));
+        		getProp(props, "applyRotation", isApplyRotation()));
 
         setPythonPath(
                 getProp(props, "pythonPath", getPythonPath()));
@@ -330,7 +330,7 @@ public class TesseractOCRConfig implements Serializable {
      *
      * @return whether or not to maintain interword spacing.
      */
-    public boolean getPreserveInterwordSpacing() {
+    public boolean isPreserveInterwordSpacing() {
         return preserveInterwordSpacing;
     }
     /**
@@ -414,7 +414,7 @@ public class TesseractOCRConfig implements Serializable {
      * @return image processing is enabled or not
      * @see #setEnableImageProcessing(boolean)
      */
-    public boolean getEnableImageProcessing() {
+    public boolean isEnableImageProcessing() {
         return enableImageProcessing;
     }
 
@@ -572,11 +572,12 @@ public class TesseractOCRConfig implements Serializable {
     public String getPythonPath() {
         return pythonPath;
     }
+
     /**
      * @return Whether or not a rotation value should be calculated and passed to ImageMagick before performing OCR.
      * (Requires that Python is installed).
      */
-    public boolean getApplyRotation() {
+    public boolean isApplyRotation() {
     	return this.applyRotation;
     }
 
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java
index 09afd9fd8..28fb5b845 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java
@@ -238,7 +238,7 @@ public class TesseractOCRParser extends AbstractParser implements Initializable
             if (size >= config.getMinFileSizeToOcr() && size <= config.getMaxFileSizeToOcr()) {
 
             	// Process image
-            	if (config.getEnableImageProcessing()) {
+            	if (config.isEnableImageProcessing()) {
                     if (! ImagePreprocessor.hasImageMagick(config)) {
                         LOG.warn("User has selected to preprocess images, but I can't find ImageMagick." +
                                 "Backing off to original file.");
@@ -339,7 +339,7 @@ public class TesseractOCRParser extends AbstractParser implements Initializable
         cmd.addAll(Arrays.asList(
                 "-c", "page_separator=" + config.getPageSeparator(),
                 "-c",
-                (config.getPreserveInterwordSpacing())? "preserve_interword_spaces=1" : "preserve_interword_spaces=0",
+                (config.isPreserveInterwordSpacing())? "preserve_interword_spaces=1" : "preserve_interword_spaces=0",
                 config.getOutputType().name().toLowerCase(Locale.US)
         ));
         LOG.debug("Tesseract command: " + String.join(" ", cmd));
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/test/java/org/apache/tika/parser/ocr/TesseractOCRConfigTest.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/test/java/org/apache/tika/parser/ocr/TesseractOCRConfigTest.java
index f34ade216..530e1a320 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/test/java/org/apache/tika/parser/ocr/TesseractOCRConfigTest.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/test/java/org/apache/tika/parser/ocr/TesseractOCRConfigTest.java
@@ -47,7 +47,7 @@ public class TesseractOCRConfigTest extends TikaTest {
         assertEquals("Invalid default colorpsace value", "gray" , config.getColorspace());
         assertEquals("Invalid default filter value", "triangle" , config.getFilter());
         assertEquals("Invalid default resize value", 900 , config.getResize());
-        assertEquals("Invalid default applyRotation value", false, config.getApplyRotation());
+        assertEquals("Invalid default applyRotation value", false, config.isApplyRotation());
     }
 
     @Test
@@ -68,7 +68,7 @@ public class TesseractOCRConfigTest extends TikaTest {
         assertEquals("Invalid overridden depth value", 8 , config.getDepth());
         assertEquals("Invalid overridden filter value", "box" , config.getFilter());	
         assertEquals("Invalid overridden resize value", 300 , config.getResize());
-        assertEquals("Invalid default applyRotation value", false, config.getApplyRotation());
+        assertEquals("Invalid default applyRotation value", false, config.isApplyRotation());
     }
 
     @Test
@@ -91,7 +91,7 @@ public class TesseractOCRConfigTest extends TikaTest {
         assertEquals("Invalid overridden depth value", 8 , config.getDepth());
         assertEquals("Invalid overridden filter value", "box" , config.getFilter());
         assertEquals("Invalid overridden resize value", 300 , config.getResize());
-        assertEquals("Invalid overridden applyRotation value", true, config.getApplyRotation());
+        assertEquals("Invalid overridden applyRotation value", true, config.isApplyRotation());
     }
 
     @Test
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/test/java/org/apache/tika/parser/ocr/TesseractOCRParserTest.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/test/java/org/apache/tika/parser/ocr/TesseractOCRParserTest.java
index 8c68fee0f..f91e04666 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/test/java/org/apache/tika/parser/ocr/TesseractOCRParserTest.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-ocr-module/src/test/java/org/apache/tika/parser/ocr/TesseractOCRParserTest.java
@@ -18,11 +18,9 @@ package org.apache.tika.parser.ocr;
 
 import org.apache.tika.TikaTest;
 import org.apache.tika.config.TikaConfig;
-import org.apache.tika.metadata.HttpHeaders;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaCoreProperties;
 import org.apache.tika.mime.MediaType;
-import org.apache.tika.parser.CompositeParser;
 import org.apache.tika.parser.ParseContext;
 import org.apache.tika.parser.Parser;
 import org.apache.tika.parser.external.ExternalParser;
@@ -152,7 +150,7 @@ public class TesseractOCRParserTest extends TikaTest {
             Assert.assertEquals(241, tesseractOCRConfig.getTimeout());
             Assert.assertEquals(TesseractOCRConfig.OUTPUT_TYPE.HOCR, tesseractOCRConfig.getOutputType());
             Assert.assertEquals("ceb", tesseractOCRConfig.getLanguage());
-            Assert.assertEquals(false, tesseractOCRConfig.getApplyRotation());
+            Assert.assertEquals(false, tesseractOCRConfig.isApplyRotation());
             assertContains("myspecial", tesseractOCRConfig.getTesseractPath());
         }
     }
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/AbstractPDF2XHTML.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/AbstractPDF2XHTML.java
index 38d30265a..f60e53c92 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/AbstractPDF2XHTML.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/AbstractPDF2XHTML.java
@@ -403,7 +403,7 @@ class AbstractPDF2XHTML extends PDFTextStripper {
     }
 
     void handleCatchableIOE(IOException e) throws IOException {
-        if (config.getCatchIntermediateIOExceptions()) {
+        if (config.isCatchIntermediateIOExceptions()) {
             if (e.getCause() instanceof SAXException && e.getCause().getMessage() != null &&
                     e.getCause().getMessage().contains("Your document contained more than")) {
                 //TODO -- is there a cleaner way of checking for:
@@ -498,7 +498,7 @@ class AbstractPDF2XHTML extends PDFTextStripper {
                     handleWidget((PDAnnotationWidget)annotation);
                 }
                 // TODO: remove once PDFBOX-1143 is fixed:
-                if (config.getExtractAnnotationText()) {
+                if (config.isExtractAnnotationText()) {
                     PDActionURI uri = getActionURI(annotation);
                     if (uri != null) {
                         String link = uri.getURI();
@@ -567,7 +567,7 @@ class AbstractPDF2XHTML extends PDFTextStripper {
             unmappedUnicodeCharsPerPage = 0;
         }
 
-        if (config.getExtractFontNames()) {
+        if (config.isExtractFontNames()) {
 
             for (COSName n : page.getResources().getFontNames()) {
                 PDFont font = page.getResources().getFont(n);
@@ -619,7 +619,7 @@ class AbstractPDF2XHTML extends PDFTextStripper {
 
     private void handleDestinationOrAction(PDDestinationOrAction action,
                                            ActionTrigger actionTrigger) throws IOException, SAXException, TikaException {
-        if (action == null || ! config.getExtractActions()) {
+        if (action == null || ! config.isExtractActions()) {
             return;
         }
         AttributesImpl attributes = new AttributesImpl();
@@ -677,7 +677,7 @@ class AbstractPDF2XHTML extends PDFTextStripper {
     protected void endDocument(PDDocument pdf) throws IOException {
         try {
             // Extract text for any bookmarks:
-			if(config.getExtractBookmarksText()) {
+			if(config.isExtractBookmarksText()) {
                 extractBookmarkText();
             }
 
@@ -690,7 +690,7 @@ class AbstractPDF2XHTML extends PDFTextStripper {
             extractXMPXFA(pdf, metadata, context);
 
             //extract acroform data at end of doc
-            if (config.getExtractAcroFormContent() == true) {
+            if (config.isExtractAcroFormContent() == true) {
                 try {
                     extractAcroForm(pdf);
                 } catch (IOException e) {
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/ImageGraphicsEngine.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/ImageGraphicsEngine.java
index 2e9024321..6a9f40248 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/ImageGraphicsEngine.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/ImageGraphicsEngine.java
@@ -45,15 +45,11 @@ import org.apache.tika.exception.TikaMemoryLimitException;
 import org.apache.tika.exception.ZeroByteFileException;
 import org.apache.tika.extractor.EmbeddedDocumentExtractor;
 import org.apache.tika.extractor.EmbeddedDocumentUtil;
-import org.apache.tika.extractor.ParsingEmbeddedDocumentExtractor;
 import org.apache.tika.io.BoundedInputStream;
 import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaCoreProperties;
-import org.apache.tika.parser.EmptyParser;
 import org.apache.tika.parser.ParseContext;
-import org.apache.tika.parser.Parser;
-import org.apache.tika.parser.RecursiveParserWrapper;
 import org.apache.tika.sax.EmbeddedContentHandler;
 import org.apache.tika.sax.XHTMLContentHandler;
 import org.xml.sax.SAXException;
@@ -117,7 +113,7 @@ class ImageGraphicsEngine extends PDFGraphicsStreamEngine {
         this.xhtml = xhtml;
         this.parentMetadata = parentMetadata;
         this.parseContext = parseContext;
-        this.extractInlineImageMetadataOnly = pdfParserConfig.getExtractInlineImageMetadataOnly();
+        this.extractInlineImageMetadataOnly = pdfParserConfig.isExtractInlineImageMetadataOnly();
     }
 
     void run() throws IOException {
@@ -164,7 +160,7 @@ class ImageGraphicsEngine extends PDFGraphicsStreamEngine {
 
             PDImageXObject xobject = (PDImageXObject) pdImage;
             Integer cachedNumber = processedInlineImages.get(xobject.getCOSObject());
-            if (cachedNumber != null && pdfParserConfig.getExtractUniqueInlineImagesOnly()) {
+            if (cachedNumber != null && pdfParserConfig.isExtractUniqueInlineImagesOnly()) {
                 // skip duplicate image
                 return;
             }
@@ -380,7 +376,7 @@ class ImageGraphicsEngine extends PDFGraphicsStreamEngine {
     }
 
     void handleCatchableIOE(IOException e) throws IOException {
-        if (pdfParserConfig.getCatchIntermediateIOExceptions()) {
+        if (pdfParserConfig.isCatchIntermediateIOExceptions()) {
             if (e.getCause() instanceof SAXException && e.getCause().getMessage() != null &&
                     e.getCause().getMessage().contains("Your document contained more than")) {
                 //TODO -- is there a cleaner way of checking for:
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDF2XHTML.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDF2XHTML.java
index 572087dde..6de2f1746 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDF2XHTML.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDF2XHTML.java
@@ -51,7 +51,7 @@ class PDF2XHTML extends AbstractPDF2XHTML {
     /**
      * This keeps track of the pdf object ids for inline
      * images that have been processed.
-     * If {@link PDFParserConfig#getExtractUniqueInlineImagesOnly()
+     * If {@link PDFParserConfig#isExtractUniqueInlineImagesOnly()
      * is true, this will be checked before extracting an embedded image.
      * The integer keeps track of the inlineImageCounter for that image.
      * This integer is used to identify images in the markup.
@@ -86,7 +86,7 @@ class PDF2XHTML extends AbstractPDF2XHTML {
             // Extract text using a dummy Writer as we override the
             // key methods to output to the given content
             // handler.
-            if (config.getDetectAngles()) {
+            if (config.isDetectAngles()) {
                 pdf2XHTML = new AngleDetectingPDF2XHTML(document, handler, context, metadata, config);
             } else {
                 pdf2XHTML = new PDF2XHTML(document, handler, context, metadata, config);
@@ -147,8 +147,8 @@ class PDF2XHTML extends AbstractPDF2XHTML {
     }
 
     void extractImages(PDPage page) throws SAXException, IOException {
-        if (config.getExtractInlineImages() == false
-                && config.getExtractInlineImageMetadataOnly() == false) {
+        if (config.isExtractInlineImages() == false
+                && config.isExtractInlineImageMetadataOnly() == false) {
             return;
         }
 
@@ -158,7 +158,7 @@ class PDF2XHTML extends AbstractPDF2XHTML {
         List<IOException> engineExceptions = engine.getExceptions();
         if (engineExceptions.size() > 0) {
             IOException first = engineExceptions.remove(0);
-            if (config.getCatchIntermediateIOExceptions()) {
+            if (config.isCatchIntermediateIOExceptions()) {
                 exceptions.addAll(engineExceptions);
             }
             throw first;
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDFParser.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDFParser.java
index 6a268387f..89ed18b89 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDFParser.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDFParser.java
@@ -125,7 +125,7 @@ public class PDFParser extends AbstractParser implements Initializable {
             throws IOException, SAXException, TikaException {
 
         PDFParserConfig localConfig = context.get(PDFParserConfig.class, defaultConfig);
-        if (localConfig.getSetKCMS()) {
+        if (localConfig.isSetKCMS()) {
             System.setProperty("sun.java2d.cmm", "sun.java2d.cmm.kcms.KcmsServiceProvider");
         }
 
@@ -162,7 +162,7 @@ public class PDFParser extends AbstractParser implements Initializable {
                     handleXFAOnly(pdfDocument, handler, metadata, context);
                 } else if (localConfig.getOcrStrategy().equals(PDFParserConfig.OCR_STRATEGY.OCR_ONLY)) {
                     OCR2XHTML.process(pdfDocument, handler, context, metadata, localConfig);
-                } else if (hasMarkedContent && localConfig.getExtractMarkedContent()) {
+                } else if (hasMarkedContent && localConfig.isExtractMarkedContent()) {
                     PDFMarkedContent2XHTML.process(pdfDocument, handler, context, metadata, localConfig);
                 } else {
                     PDF2XHTML.process(pdfDocument, handler, context, metadata, localConfig);
@@ -361,7 +361,7 @@ public class PDFParser extends AbstractParser implements Initializable {
     }
 
     private boolean shouldHandleXFAOnly(boolean hasXFA, PDFParserConfig config) {
-        return config.getIfXFAExtractOnlyXFA() && hasXFA;
+        return config.isIfXFAExtractOnlyXFA() && hasXFA;
     }
 
     private void handleXFAOnly(PDDocument pdDocument, ContentHandler handler,
@@ -390,8 +390,8 @@ public class PDFParser extends AbstractParser implements Initializable {
     /**
      * @see #setEnableAutoSpace(boolean)
      */
-    public boolean getEnableAutoSpace() {
-        return defaultConfig.getEnableAutoSpace();
+    public boolean isEnableAutoSpace() {
+        return defaultConfig.isEnableAutoSpace();
     }
 
     /**
@@ -410,8 +410,8 @@ public class PDFParser extends AbstractParser implements Initializable {
      *
      * @deprecated use {@link #getPDFParserConfig()}
      */
-    public boolean getExtractAnnotationText() {
-        return defaultConfig.getExtractAnnotationText();
+    public boolean isExtractAnnotationText() {
+        return defaultConfig.isExtractAnnotationText();
     }
 
     /**
@@ -426,8 +426,8 @@ public class PDFParser extends AbstractParser implements Initializable {
      * @see #setSuppressDuplicateOverlappingText(boolean)
      * @deprecated use {@link #getPDFParserConfig()}
      */
-    public boolean getSuppressDuplicateOverlappingText() {
-        return defaultConfig.getSuppressDuplicateOverlappingText();
+    public boolean isSuppressDuplicateOverlappingText() {
+        return defaultConfig.isSuppressDuplicateOverlappingText();
     }
 
     /**
@@ -448,8 +448,8 @@ public class PDFParser extends AbstractParser implements Initializable {
      * @see #setSortByPosition(boolean)
      * @deprecated use {@link #getPDFParserConfig()}
      */
-    public boolean getSortByPosition() {
-        return defaultConfig.getSortByPosition();
+    public boolean isSortByPosition() {
+        return defaultConfig.isSortByPosition();
     }
 
     /**
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDFParserConfig.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDFParserConfig.java
index 179e2081f..b031a72ca 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDFParserConfig.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDFParserConfig.java
@@ -24,8 +24,6 @@ import java.util.Properties;
 
 import org.apache.pdfbox.rendering.ImageType;
 import org.apache.pdfbox.text.PDFTextStripper;
-import org.apache.tika.config.Field;
-import org.apache.tika.exception.TikaConfigException;
 
 /**
  * Config for PDFParser.
@@ -193,40 +191,40 @@ public class PDFParserConfig implements Serializable {
             }
         }
         setEnableAutoSpace(
-                getBooleanProp(props.getProperty("enableAutoSpace"), getEnableAutoSpace()));
+                getBooleanProp(props.getProperty("enableAutoSpace"), isEnableAutoSpace()));
         setSuppressDuplicateOverlappingText(
                 getBooleanProp(props.getProperty("suppressDuplicateOverlappingText"),
-                        getSuppressDuplicateOverlappingText()));
+                        isSuppressDuplicateOverlappingText()));
         setExtractAnnotationText(
                 getBooleanProp(props.getProperty("extractAnnotationText"),
-                        getExtractAnnotationText()));
+                        isExtractAnnotationText()));
         setSortByPosition(
                 getBooleanProp(props.getProperty("sortByPosition"),
-                        getSortByPosition()));
+                        isSortByPosition()));
         setExtractAcroFormContent(
                 getBooleanProp(props.getProperty("extractAcroFormContent"),
-                        getExtractAcroFormContent()));
+                        isExtractAcroFormContent()));
 		setExtractBookmarksText(
 				getBooleanProp(props.getProperty("extractBookmarksText"),
-						getExtractBookmarksText()));
+						isExtractBookmarksText()));
         setExtractInlineImages(
                 getBooleanProp(props.getProperty("extractInlineImages"),
-                        getExtractInlineImages()));
+                        isExtractInlineImages()));
         setExtractUniqueInlineImagesOnly(
                 getBooleanProp(props.getProperty("extractUniqueInlineImagesOnly"),
-                        getExtractUniqueInlineImagesOnly()));
+                        isExtractUniqueInlineImagesOnly()));
         setExtractInlineImageMetadataOnly(
                 getBooleanProp(props.getProperty("extractInlineImageMetadataOnly"),
-                        getExtractInlineImageMetadataOnly())
+                        isExtractInlineImageMetadataOnly())
         );
         setExtractFontNames(
                 getBooleanProp(props.getProperty("extractFontNames"),
-                        getExtractFontNames()));
+                        isExtractFontNames()));
 
 
         setIfXFAExtractOnlyXFA(
             getBooleanProp(props.getProperty("ifXFAExtractOnlyXFA"),
-                getIfXFAExtractOnlyXFA()));
+                isIfXFAExtractOnlyXFA()));
 
         setCatchIntermediateIOExceptions(
                 getBooleanProp(props.getProperty("catchIntermediateIOExceptions"),
@@ -284,7 +282,7 @@ public class PDFParserConfig implements Serializable {
      *
      * @return whether or not to extract only inline image metadata and not render the images
      */
-    boolean getExtractInlineImageMetadataOnly() {
+    boolean isExtractInlineImageMetadataOnly() {
         return extractInlineImageMetadataOnly;
     }
 
@@ -300,7 +298,7 @@ public class PDFParserConfig implements Serializable {
         this.extractMarkedContent = extractMarkedContent;
     }
 
-    public boolean getExtractMarkedContent() {
+    public boolean isExtractMarkedContent() {
         return extractMarkedContent;
     }
 
@@ -310,8 +308,8 @@ public class PDFParserConfig implements Serializable {
      * @param pdf2XHTML
      */
     public void configure(PDF2XHTML pdf2XHTML) {
-        pdf2XHTML.setSortByPosition(getSortByPosition());
-        if (getEnableAutoSpace()) {
+        pdf2XHTML.setSortByPosition(isSortByPosition());
+        if (isEnableAutoSpace()) {
             pdf2XHTML.setWordSeparator(" ");
         } else {
             pdf2XHTML.setWordSeparator("");
@@ -325,13 +323,13 @@ public class PDFParserConfig implements Serializable {
         if (getDropThreshold() != null) {
             pdf2XHTML.setDropThreshold(dropThreshold);
         }
-        pdf2XHTML.setSuppressDuplicateOverlappingText(getSuppressDuplicateOverlappingText());
+        pdf2XHTML.setSuppressDuplicateOverlappingText(isSuppressDuplicateOverlappingText());
     }
 
     /**
      * @see #setExtractAcroFormContent(boolean)
      */
-    public boolean getExtractAcroFormContent() {
+    public boolean isExtractAcroFormContent() {
         return extractAcroFormContent;
     }
 
@@ -351,7 +349,7 @@ public class PDFParserConfig implements Serializable {
      * @see #setIfXFAExtractOnlyXFA(boolean)
      * @return how to handle XFA data if it exists
      */
-    public boolean getIfXFAExtractOnlyXFA() {
+    public boolean isIfXFAExtractOnlyXFA() {
         return ifXFAExtractOnlyXFA;
     }
 
@@ -369,7 +367,7 @@ public class PDFParserConfig implements Serializable {
 	/**
 	 * @see #setExtractBookmarksText(boolean)
 	 */
-	public boolean getExtractBookmarksText() {
+	public boolean isExtractBookmarksText() {
 		return extractBookmarksText;
 	}
 
@@ -391,13 +389,13 @@ public class PDFParserConfig implements Serializable {
 	    this.extractFontNames = extractFontNames;
     }
 
-    public boolean getExtractFontNames() {
+    public boolean isExtractFontNames() {
 	    return extractFontNames;
     }
 	/**
      * @see #setExtractInlineImages(boolean)
      */
-    public boolean getExtractInlineImages() {
+    public boolean isExtractInlineImages() {
         return extractInlineImages;
     }
 
@@ -422,7 +420,7 @@ public class PDFParserConfig implements Serializable {
     /**
      * @see #setExtractUniqueInlineImagesOnly(boolean)
      */
-    public boolean getExtractUniqueInlineImagesOnly() {
+    public boolean isExtractUniqueInlineImagesOnly() {
         return extractUniqueInlineImagesOnly;
     }
 
@@ -454,7 +452,7 @@ public class PDFParserConfig implements Serializable {
     /**
      * @see #setEnableAutoSpace(boolean)
      */
-    public boolean getEnableAutoSpace() {
+    public boolean isEnableAutoSpace() {
         return enableAutoSpace;
     }
 
@@ -471,7 +469,7 @@ public class PDFParserConfig implements Serializable {
     /**
      * @see #setSuppressDuplicateOverlappingText(boolean)
      */
-    public boolean getSuppressDuplicateOverlappingText() {
+    public boolean isSuppressDuplicateOverlappingText() {
         return suppressDuplicateOverlappingText;
     }
 
@@ -492,7 +490,7 @@ public class PDFParserConfig implements Serializable {
     /**
      * @see #setExtractAnnotationText(boolean)
      */
-    public boolean getExtractAnnotationText() {
+    public boolean isExtractAnnotationText() {
         return extractAnnotationText;
     }
 
@@ -507,7 +505,7 @@ public class PDFParserConfig implements Serializable {
     /**
      * @see #setSortByPosition(boolean)
      */
-    public boolean getSortByPosition() {
+    public boolean isSortByPosition() {
         return sortByPosition;
     }
 
@@ -576,19 +574,11 @@ public class PDFParserConfig implements Serializable {
     /**
      * See {@link #setCatchIntermediateIOExceptions(boolean)}
      * @return whether or not to catch IOExceptions
-     * @deprecated use {@link #getCatchIntermediateIOExceptions()}
      */
     public boolean isCatchIntermediateIOExceptions() {
         return catchIntermediateIOExceptions;
     }
 
-    /**
-     * See {@link #setCatchIntermediateIOExceptions(boolean)}
-     * @return whether or not to catch IOExceptions
-     */
-    public boolean getCatchIntermediateIOExceptions() {
-        return catchIntermediateIOExceptions;
-    }
     /**
      * The PDFBox parser will throw an IOException if there is
      * a problem with a stream.  If this is set to <code>true</code>,
@@ -766,7 +756,7 @@ public class PDFParserConfig implements Serializable {
      * @see #setExtractActions(boolean)
      * @return whether or not to extract PDActions
      */
-    public boolean getExtractActions() {
+    public boolean isExtractActions() {
         return extractActions;
     }
 
@@ -813,7 +803,7 @@ public class PDFParserConfig implements Serializable {
         this.setKCMS = setKCMS;
     }
 
-    public boolean getSetKCMS() {
+    public boolean isSetKCMS() {
         return setKCMS;
     }
 
@@ -841,7 +831,7 @@ public class PDFParserConfig implements Serializable {
         this.detectAngles = detectAngles;
     }
 
-    public boolean getDetectAngles() {
+    public boolean isDetectAngles() {
         return detectAngles;
     }
 
@@ -852,49 +842,49 @@ public class PDFParserConfig implements Serializable {
 
         PDFParserConfig config = (PDFParserConfig) o;
 
-        if (getEnableAutoSpace() != config.getEnableAutoSpace()) return false;
-        if (getSuppressDuplicateOverlappingText() != config.getSuppressDuplicateOverlappingText()) return false;
-        if (getExtractAnnotationText() != config.getExtractAnnotationText()) return false;
-        if (getSortByPosition() != config.getSortByPosition()) return false;
-        if (getExtractAcroFormContent() != config.getExtractAcroFormContent()) return false;
-		if (getExtractBookmarksText() != config.getExtractBookmarksText()) return false;
-        if (getExtractInlineImages() != config.getExtractInlineImages()) return false;
-        if (getExtractUniqueInlineImagesOnly() != config.getExtractUniqueInlineImagesOnly()) return false;
-        if (getIfXFAExtractOnlyXFA() != config.getIfXFAExtractOnlyXFA()) return false;
+        if (isEnableAutoSpace() != config.isEnableAutoSpace()) return false;
+        if (isSuppressDuplicateOverlappingText() != config.isSuppressDuplicateOverlappingText()) return false;
+        if (isExtractAnnotationText() != config.isExtractAnnotationText()) return false;
+        if (isSortByPosition() != config.isSortByPosition()) return false;
+        if (isExtractAcroFormContent() != config.isExtractAcroFormContent()) return false;
+		if (isExtractBookmarksText() != config.isExtractBookmarksText()) return false;
+        if (isExtractInlineImages() != config.isExtractInlineImages()) return false;
+        if (isExtractUniqueInlineImagesOnly() != config.isExtractUniqueInlineImagesOnly()) return false;
+        if (isIfXFAExtractOnlyXFA() != config.isIfXFAExtractOnlyXFA()) return false;
         if (getOcrDPI() != config.getOcrDPI()) return false;
-        if (getCatchIntermediateIOExceptions() != config.getCatchIntermediateIOExceptions()) return false;
+        if (isCatchIntermediateIOExceptions() != config.isCatchIntermediateIOExceptions()) return false;
         if (!getAverageCharTolerance().equals(config.getAverageCharTolerance())) return false;
         if (!getSpacingTolerance().equals(config.getSpacingTolerance())) return false;
         if (!getDropThreshold().equals(config.getDropThreshold())) return false;
         if (!getOcrStrategy().equals(config.getOcrStrategy())) return false;
         if (getOcrImageType() != config.getOcrImageType()) return false;
         if (!getOcrImageFormatName().equals(config.getOcrImageFormatName())) return false;
-        if (getExtractActions() != config.getExtractActions()) return false;
+        if (isExtractActions() != config.isExtractActions()) return false;
         if (!getAccessChecker().equals(config.getAccessChecker())) return false;
         return getMaxMainMemoryBytes() == config.getMaxMainMemoryBytes();
     }
 
     @Override
     public int hashCode() {
-        int result = (getEnableAutoSpace() ? 1 : 0);
-        result = 31 * result + (getSuppressDuplicateOverlappingText() ? 1 : 0);
-        result = 31 * result + (getExtractAnnotationText() ? 1 : 0);
-        result = 31 * result + (getSortByPosition() ? 1 : 0);
-        result = 31 * result + (getExtractAcroFormContent() ? 1 : 0);
-		result = 31 * result + (getExtractBookmarksText() ? 1 : 0);
-        result = 31 * result + (getExtractInlineImages() ? 1 : 0);
-        result = 31 * result + (getExtractUniqueInlineImagesOnly() ? 1 : 0);
+        int result = (isEnableAutoSpace() ? 1 : 0);
+        result = 31 * result + (isSuppressDuplicateOverlappingText() ? 1 : 0);
+        result = 31 * result + (isExtractAnnotationText() ? 1 : 0);
+        result = 31 * result + (isSortByPosition() ? 1 : 0);
+        result = 31 * result + (isExtractAcroFormContent() ? 1 : 0);
+		result = 31 * result + (isExtractBookmarksText() ? 1 : 0);
+        result = 31 * result + (isExtractInlineImages() ? 1 : 0);
+        result = 31 * result + (isExtractUniqueInlineImagesOnly() ? 1 : 0);
         result = 31 * result + getAverageCharTolerance().hashCode();
         result = 31 * result + getSpacingTolerance().hashCode();
         result = 31 * result + getDropThreshold().hashCode();
-        result = 31 * result + (getIfXFAExtractOnlyXFA() ? 1 : 0);
+        result = 31 * result + (isIfXFAExtractOnlyXFA() ? 1 : 0);
         result = 31 * result + ocrStrategy.hashCode();
         result = 31 * result + getOcrDPI();
         result = 31 * result + getOcrImageType().hashCode();
         result = 31 * result + getOcrImageFormatName().hashCode();
         result = 31 * result + getAccessChecker().hashCode();
-        result = 31 * result + (getCatchIntermediateIOExceptions() ? 1 : 0);
-        result = 31 * result + (getExtractActions() ? 1 : 0);
+        result = 31 * result + (isCatchIntermediateIOExceptions() ? 1 : 0);
+        result = 31 * result + (isExtractActions() ? 1 : 0);
         result = 31 * result + Long.valueOf(getMaxMainMemoryBytes()).hashCode();
         return result;
     }
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java
index 798c41956..f34129d3e 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-pdf-module/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java
@@ -26,7 +26,6 @@ import static org.junit.Assert.fail;
 import static org.junit.Assume.assumeTrue;
 
 import java.io.InputStream;
-import java.nio.file.Path;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -47,10 +46,7 @@ import org.apache.tika.exception.AccessPermissionException;
 import org.apache.tika.exception.EncryptedDocumentException;
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.exception.ZeroByteFileException;
-import org.apache.tika.extractor.ContainerExtractor;
 import org.apache.tika.extractor.DocumentSelector;
-import org.apache.tika.extractor.ParserContainerExtractor;
-import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Font;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.Office;
@@ -65,7 +61,6 @@ import org.apache.tika.parser.CompositeParser;
 import org.apache.tika.parser.ParseContext;
 import org.apache.tika.parser.Parser;
 import org.apache.tika.parser.PasswordProvider;
-import org.apache.tika.sax.AbstractRecursiveParserWrapperHandler;
 import org.apache.tika.sax.BodyContentHandler;
 import org.apache.tika.sax.ContentHandlerDecorator;
 import org.apache.tika.sax.RecursiveParserWrapperHandler;
@@ -1134,13 +1129,13 @@ public class PDFParserTest extends TikaTest {
             assertTrue(pdfParser instanceof PDFParser);
             PDFParserConfig pdfParserConfig = ((PDFParser)pdfParser).getPDFParserConfig();
             assertEquals(new AccessChecker(true), pdfParserConfig.getAccessChecker());
-            assertEquals(true, pdfParserConfig.getExtractInlineImages());
-            assertEquals(false, pdfParserConfig.getExtractUniqueInlineImagesOnly());
+            assertEquals(true, pdfParserConfig.isExtractInlineImages());
+            assertEquals(false, pdfParserConfig.isExtractUniqueInlineImagesOnly());
             assertEquals(314, pdfParserConfig.getOcrDPI());
             assertEquals(2.1f, pdfParserConfig.getOcrImageQuality(), .01f);
             assertEquals("jpeg", pdfParserConfig.getOcrImageFormatName());
             assertEquals(524288000, pdfParserConfig.getMaxMainMemoryBytes());
-            assertEquals(false, pdfParserConfig.getCatchIntermediateIOExceptions());
+            assertEquals(false, pdfParserConfig.isCatchIntermediateIOExceptions());
 
         }
     }
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/txt/Icu4jEncodingDetector.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/txt/Icu4jEncodingDetector.java
index 3af8d3569..c9202e3ac 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/txt/Icu4jEncodingDetector.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/txt/Icu4jEncodingDetector.java
@@ -94,7 +94,7 @@ public class Icu4jEncodingDetector implements EncodingDetector {
         this.stripMarkup = stripMarkup;
     }
 
-    public boolean getStripMarkup() {
+    public boolean isStripMarkup() {
         return stripMarkup;
     }
 
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-xml-module/src/main/java/org/apache/tika/parser/xliff/XLZParser.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-xml-module/src/main/java/org/apache/tika/parser/xliff/XLZParser.java
index b40be84e2..246b7f08a 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-xml-module/src/main/java/org/apache/tika/parser/xliff/XLZParser.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-modules/tika-parser-xml-module/src/main/java/org/apache/tika/parser/xliff/XLZParser.java
@@ -110,7 +110,7 @@ public class XLZParser extends AbstractParser {
             }
         }
 
-        if (handler.getEndDocumentWasCalled()) {
+        if (handler.isEndDocumentWasCalled()) {
             handler.reallyEndDocument();
         }
     }
diff --git a/tika-parsers/tika-parsers-classic/tika-parsers-classic-package/src/test/java/org/apache/tika/config/TikaEncodingDetectorTest.java b/tika-parsers/tika-parsers-classic/tika-parsers-classic-package/src/test/java/org/apache/tika/config/TikaEncodingDetectorTest.java
index 4d5c66b4e..8fdf7fb3e 100644
--- a/tika-parsers/tika-parsers-classic/tika-parsers-classic-package/src/test/java/org/apache/tika/config/TikaEncodingDetectorTest.java
+++ b/tika-parsers/tika-parsers-classic/tika-parsers-classic-package/src/test/java/org/apache/tika/config/TikaEncodingDetectorTest.java
@@ -87,7 +87,7 @@ public class TikaEncodingDetectorTest extends AbstractTikaConfigTest {
         assertTrue(detector instanceof CompositeEncodingDetector);
         List<EncodingDetector> detectors = ((CompositeEncodingDetector) detector).getDetectors();
         assertEquals(2, detectors.size());
-        assertTrue(((Icu4jEncodingDetector) detectors.get(0)).getStripMarkup());
+        assertTrue(((Icu4jEncodingDetector) detectors.get(0)).isStripMarkup());
         assertTrue(detectors.get(1) instanceof NonDetectingEncodingDetector);
     }
 
