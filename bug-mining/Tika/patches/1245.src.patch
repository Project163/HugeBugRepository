diff --git a/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/TikaServerConfig.java b/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/TikaServerConfig.java
index b69c361b8..990ffdf3f 100644
--- a/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/TikaServerConfig.java
+++ b/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/TikaServerConfig.java
@@ -52,6 +52,15 @@ public class TikaServerConfig extends ConfigBase {
      * etc.) before timing out and shutting down the forked process.
      */
     public static final long DEFAULT_TASK_TIMEOUT_MILLIS = 300000;
+
+    /**
+     * Clients may not set a timeout less than this amount.  This hinders
+     * malicious clients from setting the timeout to a very low value
+     * and DoS the server by forcing timeout restarts.  Making tika-server
+     * available to untrusted clients is dangerous.
+     */
+    public static final long DEFAULT_MINIMUM_TIMEOUT_MILLIS = 30000;
+
     /**
      * How often to check to see that the task hasn't timed out
      */
@@ -94,6 +103,7 @@ public class TikaServerConfig extends ConfigBase {
     private int maxRestarts = -1;
     private long maxFiles = 100000;
     private long taskTimeoutMillis = DEFAULT_TASK_TIMEOUT_MILLIS;
+    private long minimumTimeoutMillis = DEFAULT_MINIMUM_TIMEOUT_MILLIS;
     private long taskPulseMillis = DEFAULT_TASK_PULSE_MILLIS;
     private long maxforkedStartupMillis = DEFAULT_FORKED_STARTUP_MILLIS;
     private boolean enableUnsecureFeatures = false;
@@ -352,6 +362,14 @@ public class TikaServerConfig extends ConfigBase {
         return args;
     }
 
+    public long getMinimumTimeoutMillis() {
+        return minimumTimeoutMillis;
+    }
+
+    public void setMinimumTimeoutMillis(long minimumTimeoutMillis) {
+        this.minimumTimeoutMillis = minimumTimeoutMillis;
+    }
+
     public String getIdBase() {
         return idBase;
     }
diff --git a/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/TikaResource.java b/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/TikaResource.java
index 2757cfbf6..90d33524b 100644
--- a/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/TikaResource.java
+++ b/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/TikaResource.java
@@ -378,6 +378,12 @@ public class TikaResource {
                         TIKA_SERVER_CONFIG.getTaskTimeoutMillis() + "ms)");
             }
             timeoutMillis = tikaTaskTimeout.getTimeoutMillis();
+            if (timeoutMillis < TIKA_SERVER_CONFIG.getMinimumTimeoutMillis()) {
+                throw new WebApplicationException(
+                        new IllegalArgumentException("taskTimeoutMillis must be > " +
+                        "minimumTimeoutMillis, currently set to (" + TIKA_SERVER_CONFIG.getMinimumTimeoutMillis() +
+                        "ms)"), Response.Status.BAD_REQUEST);
+            }
         }
         return timeoutMillis;
     }
diff --git a/tika-server/tika-server-core/src/main/resources/tika-server-config-default.xml b/tika-server/tika-server-core/src/main/resources/tika-server-config-default.xml
index 56a288984..8683f5da3 100644
--- a/tika-server/tika-server-core/src/main/resources/tika-server-config-default.xml
+++ b/tika-server/tika-server-core/src/main/resources/tika-server-config-default.xml
@@ -63,6 +63,8 @@
       <!-- maximum time to allow per parse before shutting down and restarting
           the forked parser. Not allowed if nofork=true. -->
       <taskTimeoutMillis>300000</taskTimeoutMillis>
+      <!-- clients cannot specify a timeout less than this amount -->
+      <minimumTimeoutMillis>30000</minimumTimeoutMillis>
       <!-- how often to check whether a parse has timed out.
           Not allowed if nofork=true. -->
       <taskPulseMillis>10000</taskPulseMillis>
diff --git a/tika-server/tika-server-core/src/test/java/org/apache/tika/server/core/IntegrationTestBase.java b/tika-server/tika-server-core/src/test/java/org/apache/tika/server/core/IntegrationTestBase.java
index 4187500fb..8c3112112 100644
--- a/tika-server/tika-server-core/src/test/java/org/apache/tika/server/core/IntegrationTestBase.java
+++ b/tika-server/tika-server-core/src/test/java/org/apache/tika/server/core/IntegrationTestBase.java
@@ -50,7 +50,7 @@ public class IntegrationTestBase extends TikaTest {
     static final String TEST_HEAVY_HANG_SHORT = "test-documents/mock/heavy_hang_100.xml";
     static final String TEST_STDOUT_STDERR = "test-documents/mock/testStdOutErr.xml";
     static final String TEST_STATIC_STDOUT_STDERR = "test-documents/mock/testStaticStdOutErr.xml";
-    static final String META_PATH = "/rmeta";
+    static final String RMETA_PATH = "/rmeta";
     static final String STATUS_PATH = "/status";
 
     static final long MAX_WAIT_MS = 60000;
diff --git a/tika-server/tika-server-core/src/test/java/org/apache/tika/server/core/TikaServerIntegrationTest.java b/tika-server/tika-server-core/src/test/java/org/apache/tika/server/core/TikaServerIntegrationTest.java
index c073657b8..aed028731 100644
--- a/tika-server/tika-server-core/src/test/java/org/apache/tika/server/core/TikaServerIntegrationTest.java
+++ b/tika-server/tika-server-core/src/test/java/org/apache/tika/server/core/TikaServerIntegrationTest.java
@@ -35,6 +35,7 @@ import javax.ws.rs.core.Response;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import org.apache.cxf.helpers.IOUtils;
 import org.apache.cxf.jaxrs.client.WebClient;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
@@ -67,7 +68,7 @@ public class TikaServerIntegrationTest extends IntegrationTestBase {
 
         Response response = null;
         try {
-            response = WebClient.create(endPoint + META_PATH).accept("application/json")
+            response = WebClient.create(endPoint + RMETA_PATH).accept("application/json")
                     .put(ClassLoader.getSystemResourceAsStream(TEST_OOM));
         } catch (Exception e) {
             //oom may or may not cause an exception depending
@@ -88,7 +89,7 @@ public class TikaServerIntegrationTest extends IntegrationTestBase {
         String serverId = getServerId();
         Response response = null;
         try {
-            response = WebClient.create(endPoint + META_PATH).accept("application/json")
+            response = WebClient.create(endPoint + RMETA_PATH).accept("application/json")
                     .put(ClassLoader.getSystemResourceAsStream(TEST_OOM));
         } catch (Exception e) {
             //oom may or may not cause an exception depending
@@ -102,6 +103,20 @@ public class TikaServerIntegrationTest extends IntegrationTestBase {
         assertTrue(getNumRestarts() < 3);
     }
 
+    @Test
+    public void testMinimumTimeoutInHeader() throws Exception {
+        startProcess(new String[]{"-config", getConfig(
+                "tika-config-server-basic.xml")});
+        awaitServerStartup();
+
+        Response response = WebClient.create(endPoint + RMETA_PATH)
+                    .accept("application/json")
+                    .header(TimeoutConfig.X_TIKA_TIMEOUT_MILLIS, 1)
+                    .put(ClassLoader.getSystemResourceAsStream(TEST_HEAVY_HANG));
+        assertEquals(Response.Status.BAD_REQUEST.getStatusCode(),
+                    response.getStatus());
+    }
+
     @Test
     public void testTaskTimeoutHeader() throws Exception {
 
@@ -111,7 +126,7 @@ public class TikaServerIntegrationTest extends IntegrationTestBase {
         String serverId = getServerId();
         Response response = null;
         try {
-            response = WebClient.create(endPoint + META_PATH)
+            response = WebClient.create(endPoint + RMETA_PATH)
                     .accept("application/json")
                     .header(TimeoutConfig.X_TIKA_TIMEOUT_MILLIS, 100)
                     .put(ClassLoader.getSystemResourceAsStream(TEST_HEAVY_HANG));
@@ -136,7 +151,7 @@ public class TikaServerIntegrationTest extends IntegrationTestBase {
         awaitServerStartup();
         Response response = null;
         try {
-            response = WebClient.create(endPoint + META_PATH).accept("application/json")
+            response = WebClient.create(endPoint + RMETA_PATH).accept("application/json")
                     .put(ClassLoader.getSystemResourceAsStream(TEST_OOM));
         } catch (Exception e) {
             //oom may or may not cause an exception depending
@@ -174,7 +189,7 @@ public class TikaServerIntegrationTest extends IntegrationTestBase {
         awaitServerStartup();
         Response response = null;
         try {
-            response = WebClient.create(endPoint + META_PATH).accept("application/json")
+            response = WebClient.create(endPoint + RMETA_PATH).accept("application/json")
                     .put(ClassLoader.getSystemResourceAsStream(TEST_SYSTEM_EXIT));
         } catch (Exception e) {
             //sys exit causes catchable problems for the client
@@ -193,7 +208,7 @@ public class TikaServerIntegrationTest extends IntegrationTestBase {
         awaitServerStartup();
         Response response = null;
         try {
-            response = WebClient.create(endPoint + META_PATH).accept("application/json")
+            response = WebClient.create(endPoint + RMETA_PATH).accept("application/json")
                     .put(ClassLoader.getSystemResourceAsStream(TEST_HEAVY_HANG_SHORT));
         } catch (Exception e) {
             //potential exception depending on timing
@@ -210,7 +225,7 @@ public class TikaServerIntegrationTest extends IntegrationTestBase {
         awaitServerStartup();
         Response response = null;
         try {
-            response = WebClient.create(endPoint + META_PATH).accept("application/json")
+            response = WebClient.create(endPoint + RMETA_PATH).accept("application/json")
                     .put(ClassLoader.getSystemResourceAsStream(TEST_HEAVY_HANG));
         } catch (Exception e) {
             //catchable exception when server shuts down.
@@ -252,7 +267,7 @@ public class TikaServerIntegrationTest extends IntegrationTestBase {
                 new String[]{"-config", getConfig("tika-config-server-timeout-10000.xml")});
         awaitServerStartup();
 
-        Response response = WebClient.create(endPoint + META_PATH).accept("application/json")
+        Response response = WebClient.create(endPoint + RMETA_PATH).accept("application/json")
                 .put(ClassLoader.getSystemResourceAsStream(TEST_STDOUT_STDERR));
         Reader reader = new InputStreamReader((InputStream) response.getEntity(), UTF_8);
         List<Metadata> metadataList = JsonMetadataList.fromJson(reader);
@@ -270,7 +285,7 @@ public class TikaServerIntegrationTest extends IntegrationTestBase {
                 new String[]{"-config", getConfig("tika-config-server-timeout-10000.xml")});
         awaitServerStartup();
 
-        Response response = WebClient.create(endPoint + META_PATH).accept("application/json")
+        Response response = WebClient.create(endPoint + RMETA_PATH).accept("application/json")
                 .put(ClassLoader.getSystemResourceAsStream(TEST_STATIC_STDOUT_STDERR));
         Reader reader = new InputStreamReader((InputStream) response.getEntity(), UTF_8);
         List<Metadata> metadataList = JsonMetadataList.fromJson(reader);
@@ -296,7 +311,7 @@ public class TikaServerIntegrationTest extends IntegrationTestBase {
         serverThread.start();
         awaitServerStartup();
 
-        Response response = WebClient.create(endPoint + META_PATH).accept("application/json")
+        Response response = WebClient.create(endPoint + RMETA_PATH).accept("application/json")
                 .put(ClassLoader.getSystemResourceAsStream(TEST_STDOUT_STDERR));
         Reader reader = new InputStreamReader((InputStream) response.getEntity(), UTF_8);
         List<Metadata> metadataList = JsonMetadataList.fromJson(reader);
@@ -336,7 +351,7 @@ public class TikaServerIntegrationTest extends IntegrationTestBase {
                 } else if (r.nextFloat() < 0.02) {
                     file = TEST_HEAVY_HANG;
                 }
-                response = WebClient.create(endPoint + META_PATH).accept("application/json")
+                response = WebClient.create(endPoint + RMETA_PATH).accept("application/json")
                         .put(ClassLoader.getSystemResourceAsStream(file));
             } catch (Exception e) {
                 ex = true;
@@ -368,7 +383,7 @@ public class TikaServerIntegrationTest extends IntegrationTestBase {
             Response response = null;
 
             try {
-                response = WebClient.create(endPoint + META_PATH).accept("application/json")
+                response = WebClient.create(endPoint + RMETA_PATH).accept("application/json")
                         .put(ClassLoader.getSystemResourceAsStream(TEST_HELLO_WORLD));
             } catch (ProcessingException e) {
                 continue;
diff --git a/tika-server/tika-server-core/src/test/resources/configs/tika-config-server-basic.xml b/tika-server/tika-server-core/src/test/resources/configs/tika-config-server-basic.xml
index b136aca7f..7937a2b56 100644
--- a/tika-server/tika-server-core/src/test/resources/configs/tika-config-server-basic.xml
+++ b/tika-server/tika-server-core/src/test/resources/configs/tika-config-server-basic.xml
@@ -19,6 +19,7 @@
   <server>
     <params>
       <taskTimeoutMillis>120000</taskTimeoutMillis>
+      <minimumTimeoutMillis>10</minimumTimeoutMillis>
       <port>9999</port>
       <maxFiles>1000</maxFiles>
       <forkedJvmArgs>
diff --git a/tika-server/tika-server-core/src/test/resources/configs/tika-config-server.xml b/tika-server/tika-server-core/src/test/resources/configs/tika-config-server.xml
index 8e042bd64..fcfa69ff2 100644
--- a/tika-server/tika-server-core/src/test/resources/configs/tika-config-server.xml
+++ b/tika-server/tika-server-core/src/test/resources/configs/tika-config-server.xml
@@ -20,6 +20,7 @@
     <params>
       <port>9999</port>
       <taskTimeoutMillis>54321</taskTimeoutMillis>
+      <minimumTimeoutMillis>10</minimumTimeoutMillis>
       <enableUnsecureFeatures>true</enableUnsecureFeatures>
       <maxFiles>20</maxFiles>
       <forkedJvmArgs>
