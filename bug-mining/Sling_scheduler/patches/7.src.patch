diff --git a/pom.xml b/pom.xml
index f9b09f2..9c9627b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -58,7 +58,7 @@
                             *
                         </Import-Package>
                         <Export-Package>
-                            org.apache.sling.commons.scheduler;version=2.1.0
+                            org.apache.sling.commons.scheduler;version=2.2.0
                         </Export-Package>
                         <Private-Package>
                             org.apache.sling.commons.scheduler.impl
diff --git a/src/main/java/org/apache/sling/commons/scheduler/Scheduler.java b/src/main/java/org/apache/sling/commons/scheduler/Scheduler.java
index 8342eda..2815be6 100644
--- a/src/main/java/org/apache/sling/commons/scheduler/Scheduler.java
+++ b/src/main/java/org/apache/sling/commons/scheduler/Scheduler.java
@@ -30,9 +30,19 @@ import java.util.NoSuchElementException;
 public interface Scheduler {
 
     /** Name of the configuration property to define the period for a job.
-     * The period is expressed in seconds.*/
+     * The period is expressed in seconds.
+     * This property needs to be of type Long.
+     */
     String PROPERTY_SCHEDULER_PERIOD = "scheduler.period";
 
+    /** Name of the configuration property to define if a periodically job
+     * should be scheduled immediate.
+     * Default is to not startup immediate, the job is started the first time
+     * after the period has expired.
+     * This property needs to be of type Boolean.
+     * @since 2.2.0 .*/
+    String PROPERTY_SCHEDULER_IMMEDIATE = "scheduler.immediate";
+
     /** Name of the configuration property to define the cron expression for a job. */
     String PROPERTY_SCHEDULER_EXPRESSION = "scheduler.expression";
 
@@ -76,6 +86,25 @@ public interface Scheduler {
     void addPeriodicJob(String name, Object job, Map<String, Serializable> config, long period, boolean canRunConcurrently)
     throws Exception;
 
+    /**
+     * Schedule a periodic job.
+     * Note that if a job with the same name has already been added, the old job is cancelled and this new job replaces
+     * the old job.
+     *
+     * @param name The name of the job - or null. If no name is specified it can't be cancelled.
+     * @param job The job to execute (either {@link Job} or {@link Runnable}).
+     * @param config An optional configuration object - this configuration is only passed to the job the job implements {@link Job}.
+     * @param period Every period seconds this job is started.
+     * @param canRunConcurrently Whether this job can run even if previous scheduled runs are still running.
+     * @param startImmediate Whether to start the job immediately for the first time or wait for the period to expire.
+     * @throws IllegalArgumentException If the job has not the correct type.
+     * @throws Exception If the job can't be scheduled.
+     * @since 2.2
+     */
+    void addPeriodicJob(String name, Object job, Map<String, Serializable> config, long period, boolean canRunConcurrently,
+            boolean startImmediate)
+    throws Exception;
+
     /**
      * Fire a job immediately and only once.
      *
diff --git a/src/main/java/org/apache/sling/commons/scheduler/impl/QuartzScheduler.java b/src/main/java/org/apache/sling/commons/scheduler/impl/QuartzScheduler.java
index c44c1e2..0c5a046 100644
--- a/src/main/java/org/apache/sling/commons/scheduler/impl/QuartzScheduler.java
+++ b/src/main/java/org/apache/sling/commons/scheduler/impl/QuartzScheduler.java
@@ -47,6 +47,7 @@ import org.quartz.JobDetail;
 import org.quartz.JobKey;
 import org.quartz.SchedulerException;
 import org.quartz.SimpleScheduleBuilder;
+import org.quartz.SimpleTrigger;
 import org.quartz.Trigger;
 import org.quartz.TriggerBuilder;
 import org.quartz.impl.DirectSchedulerFactory;
@@ -181,7 +182,6 @@ public class QuartzScheduler implements Scheduler {
         final String runID = new Date().toString().replace(' ', '_');
         factory.createScheduler(QUARTZ_SCHEDULER_NAME, runID, quartzPool, new RAMJobStore());
         // quartz does not provide a way to get the scheduler by name AND runID, so we have to iterate!
-        @SuppressWarnings("unchecked")
         final Iterator<org.quartz.Scheduler> allSchedulersIter = factory.getAllSchedulers().iterator();
         org.quartz.Scheduler s = null;
         while ( s == null && allSchedulersIter.hasNext() ) {
@@ -347,15 +347,33 @@ public class QuartzScheduler implements Scheduler {
                                final Map<String, Serializable> config,
                                final long period,
                                final boolean canRunConcurrently)
+    throws SchedulerException {
+        this.addPeriodicJob(name, job, config, period, canRunConcurrently, false);
+    }
+
+    /**
+     * @see org.apache.sling.commons.scheduler.Scheduler#addPeriodicJob(java.lang.String, java.lang.Object, java.util.Map, long, boolean, boolean)
+     */
+    public void addPeriodicJob(final String name,
+            final Object job,
+            final Map<String, Serializable> config,
+            final long period,
+            final boolean canRunConcurrently,
+            final boolean startImmediate)
     throws SchedulerException {
         final long ms = period * 1000;
         final String jobName = this.getJobName(name);
 
-        final Trigger trigger = TriggerBuilder.newTrigger()
-            .withIdentity(jobName)
-            .startAt(new Date(System.currentTimeMillis() + ms))
-            .withSchedule(SimpleScheduleBuilder.simpleSchedule().repeatForever().withIntervalInMilliseconds(ms))
-            .build();
+        final TriggerBuilder<SimpleTrigger> builder = TriggerBuilder.newTrigger()
+                .withIdentity(jobName)
+                .startAt(new Date(System.currentTimeMillis() + ms))
+                .withSchedule(SimpleScheduleBuilder.simpleSchedule().repeatForever().withIntervalInMilliseconds(ms));
+        final Trigger trigger;
+        if ( startImmediate ) {
+            trigger = builder.startNow().build();
+        } else {
+            trigger = builder.startAt(new Date(System.currentTimeMillis() + ms)).build();
+        }
 
         this.scheduleJob(jobName, job, config, trigger, canRunConcurrently);
     }
@@ -524,7 +542,11 @@ public class QuartzScheduler implements Scheduler {
                             if ( period < 1 ) {
                                 this.logger.debug("Ignoring service {} : scheduler period is less than 1.", ref);
                             } else {
-                                this.addPeriodicJob(name, job, null, period, (concurrent != null ? concurrent : true));
+                                boolean immediate = false;
+                                if ( ref.getProperty(Scheduler.PROPERTY_SCHEDULER_IMMEDIATE) != null ) {
+                                    immediate = (Boolean)ref.getProperty(Scheduler.PROPERTY_SCHEDULER_IMMEDIATE);
+                                }
+                                this.addPeriodicJob(name, job, null, period, (concurrent != null ? concurrent : true), immediate);
                             }
                         } else {
                             this.logger.debug("Ignoring servce {} : no scheduling property found.", ref);
