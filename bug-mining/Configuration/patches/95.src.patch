diff --git a/src/java/org/apache/commons/configuration/SubsetConfiguration.java b/src/java/org/apache/commons/configuration/SubsetConfiguration.java
index e818eade..e52ad8f7 100644
--- a/src/java/org/apache/commons/configuration/SubsetConfiguration.java
+++ b/src/java/org/apache/commons/configuration/SubsetConfiguration.java
@@ -120,7 +120,7 @@ public class SubsetConfiguration extends AbstractConfiguration
     }
 
     /**
-     * Return the parent configuation for this subset.
+     * Return the parent configuration for this subset.
      *
      * @return the parent configuration
      */
@@ -205,7 +205,7 @@ public class SubsetConfiguration extends AbstractConfiguration
             }
         });
     }
-
+    
     protected Object interpolate(Object base)
     {
         if (delimiter == null && "".equals(prefix))
@@ -215,6 +215,7 @@ public class SubsetConfiguration extends AbstractConfiguration
         else
         {
             SubsetConfiguration config = new SubsetConfiguration(parent, "");
+            getInterpolator().registerLocalLookups(config.getInterpolator());
             return config.interpolate(base);
         }
     }
diff --git a/src/java/org/apache/commons/configuration/interpol/ConfigurationInterpolator.java b/src/java/org/apache/commons/configuration/interpol/ConfigurationInterpolator.java
index 595f4224..36976f54 100644
--- a/src/java/org/apache/commons/configuration/interpol/ConfigurationInterpolator.java
+++ b/src/java/org/apache/commons/configuration/interpol/ConfigurationInterpolator.java
@@ -322,6 +322,16 @@ public class ConfigurationInterpolator extends StrLookup
         }
         return lookup;
     }
+    
+    /**
+     * Registers the local lookup instances for the given interpolator.
+     * 
+     * @param interpolator the instance receiving the local lookups
+     * @since upcoming
+     */
+    public void registerLocalLookups(ConfigurationInterpolator interpolator) {
+        interpolator.localLookups.putAll(localLookups);
+    }
 
     // static initializer, sets up the map with the standard lookups
     static
diff --git a/src/test/org/apache/commons/configuration/TestSubsetConfiguration.java b/src/test/org/apache/commons/configuration/TestSubsetConfiguration.java
index 8397a4c1..f4dabd51 100644
--- a/src/test/org/apache/commons/configuration/TestSubsetConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestSubsetConfiguration.java
@@ -25,6 +25,8 @@ import java.util.List;
 import java.util.NoSuchElementException;
 import java.util.Set;
 
+import org.apache.commons.configuration.interpol.ConfigurationInterpolator;
+import org.apache.commons.lang.text.StrLookup;
 import junit.framework.TestCase;
 
 /**
@@ -158,7 +160,7 @@ public class TestSubsetConfiguration extends TestCase
         assertEquals("prefix", "prefix", subset.getPrefix());
     }
 
-    public void testThrowtExceptionOnMissing()
+    public void testThrowExceptionOnMissing()
     {
         BaseConfiguration config = new BaseConfiguration();
         config.setThrowExceptionOnMissing(true);
@@ -281,4 +283,32 @@ public class TestSubsetConfiguration extends TestCase
         assertFalse("Wrong value of list parsing flag in parent", config
                 .isDelimiterParsingDisabled());
     }
+
+    /**
+     * Tests manipulating the interpolator.
+     */
+    public void testInterpolator()
+    {
+        BaseConfiguration config = new BaseConfiguration();
+        AbstractConfiguration subset = (AbstractConfiguration) config
+                .subset("prefix");
+        InterpolationTestHelper.testGetInterpolator(subset);
+    }
+    
+    // TODO: Next step
+    public void todoTestLocalLookupsInInterpolorAreInherited() {
+        BaseConfiguration config = new BaseConfiguration();
+        ConfigurationInterpolator interpolator = config.getInterpolator();
+        interpolator.registerLookup("brackets", new StrLookup(){
+
+            public String lookup(String key) {
+                return "(" + key +")";
+            }
+            
+        });
+        config.setProperty("prefix.var", "${brackets:x}");
+        AbstractConfiguration subset = (AbstractConfiguration) config
+                .subset("prefix");
+        assertEquals("Local lookup was not inherited", "(x)", subset.getString("var", ""));
+    }
 }
