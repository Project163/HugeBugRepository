diff --git a/src/main/java/org/apache/commons/configuration/beanutils/XMLBeanDeclaration.java b/src/main/java/org/apache/commons/configuration/beanutils/XMLBeanDeclaration.java
index 8b9ad0bc..e53b4a52 100644
--- a/src/main/java/org/apache/commons/configuration/beanutils/XMLBeanDeclaration.java
+++ b/src/main/java/org/apache/commons/configuration/beanutils/XMLBeanDeclaration.java
@@ -29,6 +29,7 @@ import org.apache.commons.configuration.HierarchicalConfiguration;
 import org.apache.commons.configuration.ex.ConfigurationRuntimeException;
 import org.apache.commons.configuration.interpol.ConfigurationInterpolator;
 import org.apache.commons.configuration.tree.NodeHandler;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * <p>
@@ -515,7 +516,7 @@ public class XMLBeanDeclaration implements BeanDeclaration
     BeanDeclaration createBeanDeclaration(NodeData<?> node)
     {
         for (HierarchicalConfiguration<?> config : getConfiguration()
-                .configurationsAt(node.nodeName()))
+                .configurationsAt(node.escapedNodeName(getConfiguration())))
         {
             if (node.matchesConfigRootNode(config))
             {
@@ -636,6 +637,21 @@ public class XMLBeanDeclaration implements BeanDeclaration
             return handler.nodeName(node);
         }
 
+        /**
+         * Returns the unescaped name of the node stored in this data object.
+         * This method handles the case that the node name may contain reserved
+         * characters with a special meaning for the current expression engine.
+         * In this case, the characters affected have to be escaped accordingly.
+         *
+         * @param config the configuration
+         * @return the escaped node name
+         */
+        public String escapedNodeName(HierarchicalConfiguration<?> config)
+        {
+            return config.getExpressionEngine().nodeKey(node,
+                    StringUtils.EMPTY, handler);
+        }
+
         /**
          * Returns a list with the children of the wrapped node, again wrapped
          * into {@code NodeData} objects.
diff --git a/src/test/java/org/apache/commons/configuration/beanutils/TestXMLBeanDeclaration.java b/src/test/java/org/apache/commons/configuration/beanutils/TestXMLBeanDeclaration.java
index 2d3b2073..c05ba414 100644
--- a/src/test/java/org/apache/commons/configuration/beanutils/TestXMLBeanDeclaration.java
+++ b/src/test/java/org/apache/commons/configuration/beanutils/TestXMLBeanDeclaration.java
@@ -340,6 +340,22 @@ public class TestXMLBeanDeclaration
         }
     }
 
+    /**
+     * Tests whether reserved characters in the node names of nested bean declarations
+     * are handled correctly. This is related to CONFIGURATION-567.
+     */
+    @Test
+    public void testGetNestedBeanDeclarationsReservedCharacter()
+    {
+        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();
+        String key = KEY + ".address..private";
+        setupBeanDeclaration(config, key, COMPLEX_ATTRIBUTES[0], COMPLEX_VALUES[0]);
+        XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);
+
+        Map<String, Object> nested = decl.getNestedBeanDeclarations();
+        assertTrue("Key not found", nested.containsKey("address.private"));
+    }
+
     /**
      * Tests whether the factory method for creating nested bean declarations
      * gets called.
@@ -522,7 +538,7 @@ public class TestXMLBeanDeclaration
      * @param names an array with the names of the properties
      * @param values an array with the corresponding values
      */
-    private static void setupBeanDeclaration(HierarchicalConfiguration config,
+    private static void setupBeanDeclaration(HierarchicalConfiguration<?> config,
             String key, String[] names, String[] values)
     {
         for (int i = 0; i < names.length; i++)
