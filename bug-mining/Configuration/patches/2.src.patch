diff --git a/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java b/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
index 49cb4f98..0f4ccc46 100644
--- a/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
+++ b/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2004-2005 The Apache Software Foundation.
+ * Copyright 2004-2006 The Apache Software Foundation.
  *
  * Licensed under the Apache License, Version 2.0 (the "License")
  * you may not use this file except in compliance with the License.
@@ -127,7 +127,7 @@ public abstract class AbstractFileConfiguration extends BaseConfiguration implem
         this();
 
         // store the file name
-        setPath(fileName);
+        setFileName(fileName);
 
         // load the file
         load();
diff --git a/src/java/org/apache/commons/configuration/ConfigurationUtils.java b/src/java/org/apache/commons/configuration/ConfigurationUtils.java
index 07a56d3d..d944ce76 100644
--- a/src/java/org/apache/commons/configuration/ConfigurationUtils.java
+++ b/src/java/org/apache/commons/configuration/ConfigurationUtils.java
@@ -46,6 +46,9 @@ public final class ConfigurationUtils
     /** Constant for the file URL protocol.*/
     static final String PROTOCOL_FILE = "file";
 
+    /** Constant for the resource path separator.*/
+    static final String RESOURCE_PATH_SEPARATOR = "/";
+
     /** The logger.*/
     private static Log log = LogFactory.getLog(ConfigurationUtils.class);
 
@@ -401,17 +404,30 @@ public final class ConfigurationUtils
             }
         }
 
+        String resourceName = null;
+        if (url == null)
+        {
+            if (base != null)
+            {
+                resourceName = base + RESOURCE_PATH_SEPARATOR + name;
+            }
+            else
+            {
+                resourceName = name;
+            }
+        }
+
         // attempt to load from the context classpath
         if (url == null)
         {
             ClassLoader loader = Thread.currentThread().getContextClassLoader();
             if (loader != null)
             {
-                url = loader.getResource(name);
+                url = loader.getResource(resourceName);
 
                 if (url != null)
                 {
-                    log.debug("Configuration loaded from the context classpath (" + name + ")");
+                    log.debug("Configuration loaded from the context classpath (" + resourceName + ")");
                 }
             }
         }
@@ -419,11 +435,11 @@ public final class ConfigurationUtils
         // attempt to load from the system classpath
         if (url == null)
         {
-            url = ClassLoader.getSystemResource(name);
+            url = ClassLoader.getSystemResource(resourceName);
 
             if (url != null)
             {
-                log.debug("Configuration loaded from the system classpath (" + name + ")");
+                log.debug("Configuration loaded from the system classpath (" + resourceName + ")");
             }
         }
 
diff --git a/src/test/org/apache/commons/configuration/TestFileConfiguration.java b/src/test/org/apache/commons/configuration/TestFileConfiguration.java
index ed2ca8f1..e1e886c6 100644
--- a/src/test/org/apache/commons/configuration/TestFileConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestFileConfiguration.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2004-2005 The Apache Software Foundation.
+ * Copyright 2004-2006 The Apache Software Foundation.
  *
  * Licensed under the Apache License, Version 2.0 (the "License")
  * you may not use this file except in compliance with the License.
@@ -17,6 +17,7 @@
 package org.apache.commons.configuration;
 
 import java.net.URL;
+import java.util.Iterator;
 import java.util.Properties;
 import java.io.File;
 import java.io.FileInputStream;
@@ -37,6 +38,8 @@ public class TestFileConfiguration extends TestCase
 {
     private static final File TARGET_DIR = new File("target");
 
+    private static final String RESOURCE_NAME = "config/deep/deeptest.properties";
+
     public void testSetURL() throws Exception
     {
         // http URL
@@ -474,4 +477,24 @@ public class TestFileConfiguration extends TestCase
             // ok
         }
     }
+
+    /**
+     * Tests whether the constructor behaves the same as setFileName() when the
+     * configuration source is in the classpath.
+     */
+    public void testInitFromClassPath() throws ConfigurationException
+    {
+        PropertiesConfiguration config1 = new PropertiesConfiguration();
+        config1.setFileName(RESOURCE_NAME);
+        config1.load();
+        PropertiesConfiguration config2 = new PropertiesConfiguration(
+                RESOURCE_NAME);
+
+        for (Iterator it = config1.getKeys(); it.hasNext();)
+        {
+            String key = (String) it.next();
+            assertEquals("Wrong value for key " + key,
+                    config1.getProperty(key), config2.getProperty(key));
+        }
+    }
 }
\ No newline at end of file
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 0d924921..ac4d849e 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,11 @@
   <body>
 
     <release version="1.3-SNAPSHOT" date="in SVN">
+      <action dev="oheger" type="update" issue="CONFIGURATION-216">
+        If a configuration file was to be loaded from classpath, the
+        constructor of AbstractFileConfiguration dropped the file's path. The
+        path is now taken into account.
+      </action>
       <action dev="oheger" type="update" issue="CONFIGURATION-214">
         The getter methods for numeric data types in AbstractConfiguration now
         support conversions between different Number types, e.g. you can now
