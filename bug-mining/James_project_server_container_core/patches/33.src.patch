diff --git a/server/container/core/src/main/java/org/apache/james/server/core/MailImpl.java b/server/container/core/src/main/java/org/apache/james/server/core/MailImpl.java
index 9ca5610b7f..f6046d91f2 100644
--- a/server/container/core/src/main/java/org/apache/james/server/core/MailImpl.java
+++ b/server/container/core/src/main/java/org/apache/james/server/core/MailImpl.java
@@ -125,15 +125,19 @@ public class MailImpl implements Disposable, Mail {
             .build();
     }
 
-    public static Builder builder() {
-        return new Builder();
+    public static RequireName builder() {
+        return Builder::new;
+    }
+
+    public interface RequireName {
+        Builder name(String name);
     }
 
     public static class Builder {
 
+        private final String name;
         private Optional<MimeMessage> mimeMessage;
         private List<MailAddress> recipients;
-        private Optional<String> name;
         private Optional<MailAddress> sender;
         private Optional<String> state;
         private Optional<String> errorMessage;
@@ -143,10 +147,12 @@ public class MailImpl implements Disposable, Mail {
         private Optional<String> remoteHost;
         private PerRecipientHeaders perRecipientHeaders;
 
-        private Builder() {
+        private Builder(String name) {
+            Preconditions.checkNotNull(name);
+            Preconditions.checkArgument(!name.isEmpty(), "name must not be empty");
+            this.name = name;
             mimeMessage = Optional.empty();
             recipients = Lists.newArrayList();
-            name = Optional.empty();
             sender = Optional.empty();
             state = Optional.empty();
             errorMessage = Optional.empty();
@@ -190,11 +196,6 @@ public class MailImpl implements Disposable, Mail {
             return addRecipients(recipient);
         }
 
-        public Builder name(String name) {
-            this.name = Optional.ofNullable(name);
-            return this;
-        }
-
         public Builder sender(MailAddress sender) {
             return sender(Optional.ofNullable(sender));
         }
@@ -264,10 +265,9 @@ public class MailImpl implements Disposable, Mail {
         }
 
         public MailImpl build() {
-            MailImpl mail = new MailImpl(state.orElse(DEFAULT), attributes, recipients, perRecipientHeaders);
+            MailImpl mail = new MailImpl(name, state.orElse(DEFAULT), attributes, recipients, perRecipientHeaders);
 
             mimeMessage.ifPresent(Throwing.consumer(mail::setMessage).sneakyThrow());
-            name.ifPresent(mail::setName);
             sender.ifPresent(mail::setSender);
             errorMessage.ifPresent(mail::setErrorMessage);
             lastUpdated.ifPresent(mail::setLastUpdated);
@@ -398,10 +398,12 @@ public class MailImpl implements Disposable, Mail {
      */
     private PerRecipientHeaders perRecipientSpecificHeaders;
 
-    private MailImpl(String state,
+    private MailImpl(String name,
+                     String state,
                      Map<AttributeName, Attribute> attributes,
                      List<MailAddress> recipients,
                      PerRecipientHeaders perRecipientHeaders) {
+        setName(name);
         setState(state);
         setAttributes(attributes);
         setRecipients(recipients);
@@ -420,6 +422,8 @@ public class MailImpl implements Disposable, Mail {
 
     @Override
     public void setName(String name) {
+        Preconditions.checkNotNull(name);
+        Preconditions.checkArgument(!name.isEmpty(), "name must not be empty");
         this.name = name;
     }
 
diff --git a/server/container/core/src/test/java/org/apache/james/server/core/MailImplTest.java b/server/container/core/src/test/java/org/apache/james/server/core/MailImplTest.java
index 14951fba4b..3d8ce83c60 100644
--- a/server/container/core/src/test/java/org/apache/james/server/core/MailImplTest.java
+++ b/server/container/core/src/test/java/org/apache/james/server/core/MailImplTest.java
@@ -45,7 +45,7 @@ public class MailImplTest extends ContractMailTest {
 
     @Override
     public MailImpl newMail() {
-        return MailImpl.builder().build();
+        return MailImpl.builder().name("mail-id").build();
     }
 
     private MimeMessage emptyMessage;
@@ -61,6 +61,7 @@ public class MailImplTest extends ContractMailTest {
     public void mailImplShouldHaveSensibleInitialValues() throws MessagingException {
         MailImpl mail = newMail();
 
+        assertThat(mail.getName()).isEqualTo("mail-id");
         assertThat(mail.hasAttributes()).describedAs("no initial attributes").isFalse();
         assertThat(mail.getErrorMessage()).describedAs("no initial error").isNull();
         assertThat(mail.getLastUpdated()).isCloseTo(new Date(), TimeUnit.SECONDS.toMillis(1));
@@ -70,7 +71,6 @@ public class MailImplTest extends ContractMailTest {
         assertThat(mail.getState()).describedAs("default initial state").isEqualTo(Mail.DEFAULT);
         assertThat(mail.getMessage()).isNull();
         assertThat(mail.getMaybeSender()).isEqualTo(MaybeSender.nullSender());
-        assertThat(mail.getName()).isNull();
     }
 
     @Test
@@ -210,6 +210,7 @@ public class MailImplTest extends ContractMailTest {
     public void getMaybeSenderShouldHandleNullSender() {
         assertThat(
             MailImpl.builder()
+                .name("mail-id")
                 .sender(MailAddress.nullSender())
                 .build()
                 .getMaybeSender())
@@ -220,6 +221,7 @@ public class MailImplTest extends ContractMailTest {
     public void getMaybeSenderShouldHandleNoSender() {
         assertThat(
             MailImpl.builder()
+                .name("mail-id")
                 .build()
                 .getMaybeSender())
             .isEqualTo(MaybeSender.nullSender());
@@ -229,6 +231,7 @@ public class MailImplTest extends ContractMailTest {
     public void getMaybeSenderShouldHandleSender() {
         assertThat(
             MailImpl.builder()
+                .name("mail-id")
                 .sender(MailAddressFixture.SENDER)
                 .build()
                 .getMaybeSender())
@@ -239,6 +242,7 @@ public class MailImplTest extends ContractMailTest {
     public void hasSenderShouldReturnFalseWhenSenderIsNull() {
         assertThat(
             MailImpl.builder()
+                .name("mail-id")
                 .sender(MailAddress.nullSender())
                 .build()
                 .hasSender())
@@ -249,6 +253,7 @@ public class MailImplTest extends ContractMailTest {
     public void hasSenderShouldReturnFalseWhenSenderIsNotSpecified() {
         assertThat(
             MailImpl.builder()
+                .name("mail-id")
                 .build()
                 .hasSender())
             .isFalse();
@@ -258,9 +263,34 @@ public class MailImplTest extends ContractMailTest {
     public void hasSenderShouldReturnTrueWhenSenderIsSpecified() {
         assertThat(
             MailImpl.builder()
+                .name("mail-id")
                 .sender(MailAddressFixture.SENDER)
                 .build()
                 .hasSender())
             .isTrue();
     }
+
+    @Test
+    public void builderShouldNotAllowNullName() {
+        assertThatThrownBy(() -> MailImpl.builder().name(null))
+            .isInstanceOf(NullPointerException.class);
+    }
+
+    @Test
+    public void builderShouldNotAllowEmptyName() {
+        assertThatThrownBy(() -> MailImpl.builder().name(""))
+            .isInstanceOf(IllegalArgumentException.class);
+    }
+
+    @Test
+    public void MailImplShouldNotAllowSettingNullName() {
+        assertThatThrownBy(() -> newMail().setName(null))
+            .isInstanceOf(NullPointerException.class);
+    }
+
+    @Test
+    public void MailImplShouldNotAllowSettingEmptyName() {
+        assertThatThrownBy(() -> newMail().setName(""))
+            .isInstanceOf(IllegalArgumentException.class);
+    }
 }
