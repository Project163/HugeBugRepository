diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index e055cb4e..54ec39af 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -78,6 +78,10 @@ The <action> type attribute can be add,update,fix,remove.
       <action dev="markt" issue="DBCP-143" type="update">
         Remove deprecated SQLNestedException. 
       </action>
+      <action dev="markt" issue="DBCP-384" type="fix">
+        Fix threading issues with accessToUnderlyingConnectionAllowed attribute
+        of PoolingDriver which is used to support unit testing.
+      </action>
     </release>
     <release version="1.5.1" date="TBD" description="TBD">
       <action dev="markt" issue="DBCP-405" type="fix">
diff --git a/src/java/org/apache/commons/dbcp2/PoolingDriver.java b/src/java/org/apache/commons/dbcp2/PoolingDriver.java
index 0b17856b..b9b84f9b 100644
--- a/src/java/org/apache/commons/dbcp2/PoolingDriver.java
+++ b/src/java/org/apache/commons/dbcp2/PoolingDriver.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.commons.dbcp2;
 
 import java.sql.CallableStatement;
@@ -61,29 +60,27 @@ public class PoolingDriver implements Driver {
             new HashMap<>();
 
     /** Controls access to the underlying connection */
-    private static boolean accessToUnderlyingConnectionAllowed = false;
+    private final boolean accessToUnderlyingConnectionAllowed;
 
     public PoolingDriver() {
+        this(true);
     }
 
     /**
-     * Returns the value of the accessToUnderlyingConnectionAllowed property.
-     *
-     * @return true if access to the underlying is allowed, false otherwise.
+     * For unit testing purposes.
      */
-    public static synchronized boolean isAccessToUnderlyingConnectionAllowed() {
-        return accessToUnderlyingConnectionAllowed;
+    protected PoolingDriver(boolean accessToUnderlyingConnectionAllowed) {
+        this.accessToUnderlyingConnectionAllowed = accessToUnderlyingConnectionAllowed;
     }
-
+    
+    
     /**
-     * Sets the value of the accessToUnderlyingConnectionAllowed property.
-     * It controls if the PoolGuard allows access to the underlying connection.
-     * (Default: false)
+     * Returns the value of the accessToUnderlyingConnectionAllowed property.
      *
-     * @param allow Access to the underlying connection is granted when true.
+     * @return true if access to the underlying is allowed, false otherwise.
      */
-    public static synchronized void setAccessToUnderlyingConnectionAllowed(boolean allow) {
-        accessToUnderlyingConnectionAllowed = allow;
+    protected boolean isAccessToUnderlyingConnectionAllowed() {
+        return accessToUnderlyingConnectionAllowed;
     }
 
     public synchronized ObjectPool<Connection> getConnectionPool(String name)
@@ -219,7 +216,7 @@ public class PoolingDriver implements Driver {
      * PoolGuardConnectionWrapper is a Connection wrapper that makes sure a
      * closed connection cannot be used anymore.
      */
-    static private class PoolGuardConnectionWrapper extends DelegatingConnection {
+    private class PoolGuardConnectionWrapper extends DelegatingConnection {
 
         private final ObjectPool<Connection> pool;
         private Connection delegate;
diff --git a/src/test/org/apache/commons/dbcp2/TestPoolingDriver.java b/src/test/org/apache/commons/dbcp2/TestPoolingDriver.java
index 38912bf1..58c9675b 100644
--- a/src/test/org/apache/commons/dbcp2/TestPoolingDriver.java
+++ b/src/test/org/apache/commons/dbcp2/TestPoolingDriver.java
@@ -80,9 +80,8 @@ public class TestPoolingDriver extends TestConnectionPool {
         pcf.setPool(pool);
 
         assertNotNull(pcf);
-        driver = new PoolingDriver();
+        driver = new PoolingDriver(true);
         driver.registerPool("test",pool);
-        PoolingDriver.setAccessToUnderlyingConnectionAllowed(true);
     }
 
     @Override
