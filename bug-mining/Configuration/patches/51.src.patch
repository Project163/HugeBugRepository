diff --git a/src/java/org/apache/commons/configuration/DefaultConfigurationBuilder.java b/src/java/org/apache/commons/configuration/DefaultConfigurationBuilder.java
index 8b300d68..29282dd3 100644
--- a/src/java/org/apache/commons/configuration/DefaultConfigurationBuilder.java
+++ b/src/java/org/apache/commons/configuration/DefaultConfigurationBuilder.java
@@ -30,10 +30,12 @@ import org.apache.commons.configuration.beanutils.BeanFactory;
 import org.apache.commons.configuration.beanutils.BeanHelper;
 import org.apache.commons.configuration.beanutils.DefaultBeanFactory;
 import org.apache.commons.configuration.beanutils.XMLBeanDeclaration;
+import org.apache.commons.configuration.event.ConfigurationErrorListener;
 import org.apache.commons.configuration.tree.ConfigurationNode;
 import org.apache.commons.configuration.tree.DefaultExpressionEngine;
 import org.apache.commons.configuration.tree.OverrideCombiner;
 import org.apache.commons.configuration.tree.UnionCombiner;
+import org.apache.commons.logging.LogFactory;
 
 /**
  * <p>
@@ -120,7 +122,11 @@ import org.apache.commons.configuration.tree.UnionCombiner;
  * <tr>
  * <td valign="top"><code>config-optional</code></td>
  * <td>Declares a configuration as optional. This means that errors that occur
- * when creating the configuration are silently ignored.</td>
+ * when creating the configuration are ignored. (However
+ * <code>{@link ConfigurationErrorListener}</code>s registered at the builder
+ * instance will get notified about this error: they receive an event of type
+ * <code>EVENT_ERR_LOAD_OPTIONAL</code>. The key property of this event contains
+ * the name of the optional configuration source that caused this problem.)</td>
  * </tr>
  * </table>
  * </p>
@@ -178,6 +184,12 @@ public class DefaultConfigurationBuilder extends XMLConfiguration implements
             .getName()
             + "/ADDITIONAL_CONFIG";
 
+    /**
+     * Constant for the type of error events caused by optional configurations
+     * that cannot be loaded.
+     */
+    public static final int EVENT_ERR_LOAD_OPTIONAL = 51;
+
     /** Constant for the name of the configuration bean factory. */
     static final String CONFIG_BEAN_FACTORY_NAME = DefaultConfigurationBuilder.class
             .getName()
@@ -329,6 +341,8 @@ public class DefaultConfigurationBuilder extends XMLConfiguration implements
         super();
         providers = new HashMap();
         registerDefaultProviders();
+        setLogger(LogFactory.getLog(getClass()));
+        addErrorLogListener();  // log errors per default
     }
 
     /**
@@ -1061,6 +1075,12 @@ public class DefaultConfigurationBuilder extends XMLConfiguration implements
                 }
                 else
                 {
+                    // Notify registered error listeners
+                    decl.getConfigurationBuilder().fireError(
+                            EVENT_ERR_LOAD_OPTIONAL,
+                            decl.getConfiguration().getString(ATTR_NAME), null,
+                            ex);
+
                     if (decl.isForceCreate())
                     {
                         try
diff --git a/src/test/org/apache/commons/configuration/TestDefaultConfigurationBuilder.java b/src/test/org/apache/commons/configuration/TestDefaultConfigurationBuilder.java
index fe8523d0..7e4b3989 100644
--- a/src/test/org/apache/commons/configuration/TestDefaultConfigurationBuilder.java
+++ b/src/test/org/apache/commons/configuration/TestDefaultConfigurationBuilder.java
@@ -31,8 +31,7 @@ import junit.framework.TestCase;
  * Test class for DefaultConfigurationBuilder.
  *
  * @author Oliver Heger
- * @version $Id: TestDefaultConfigurationBuilder.java 384601 2006-03-09
- * 20:22:58Z oheger $
+ * @version $Id$
  */
 public class TestDefaultConfigurationBuilder extends TestCase
 {
@@ -70,6 +69,7 @@ public class TestDefaultConfigurationBuilder extends TestCase
         System.setProperty("test_file_xml", "test.xml");
         System.setProperty("test_file_combine", "testcombine1.xml");
         factory = new DefaultConfigurationBuilder();
+        factory.clearErrorListeners();  // avoid exception messages
     }
 
     /**
@@ -400,6 +400,16 @@ public class TestDefaultConfigurationBuilder extends TestCase
                 .getString("test.configuration"));
     }
 
+    /**
+     * Tests whether a default log error listener is registered at the builder
+     * instance.
+     */
+    public void testLogErrorListener()
+    {
+        assertEquals("No default error listener registered", 1,
+                new DefaultConfigurationBuilder().getErrorListeners().size());
+    }
+
     /**
      * Tests loading a definition file that contains optional configurations.
      */
@@ -411,6 +421,20 @@ public class TestDefaultConfigurationBuilder extends TestCase
         assertEquals("value", config.getProperty("element"));
     }
 
+    /**
+     * Tests whether loading a failing optional configuration causes an error
+     * event.
+     */
+    public void testLoadOptionalErrorEvent() throws Exception
+    {
+        factory.clearErrorListeners();
+        ConfigurationErrorListenerImpl listener = new ConfigurationErrorListenerImpl();
+        factory.addErrorListener(listener);
+        prepareOptionalTest("configuration", false);
+        listener.verify(DefaultConfigurationBuilder.EVENT_ERR_LOAD_OPTIONAL,
+                OPTIONAL_NAME, null);
+    }
+
     /**
      * Tests loading a definition file with optional and non optional
      * configuration sources. One non optional does not exist, so this should
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 0ecc80bc..fb0e2105 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,11 @@
 
   <body>
     <release version="1.5-SNAPSHOT" date="in SVN" description="">
+      <action dev="oheger" type="add" issue="CONFIGURATION-285">
+        DefaultConfigurationBuilder will now notify registered error listeners
+        about optional configuration sources that could not be created. Before
+        exceptions thrown by optional configurations were swallowed
+      </action>
       <action dev="oheger" type="fix" issue="CONFIGURATION-283">
         ConfigurationUtils.convertToHierarchical() now correctly deals with
         property values containing escaped list delimiters. This also affects
