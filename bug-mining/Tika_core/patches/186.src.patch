diff --git a/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java b/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java
index 09a14326e..997b2bfbc 100644
--- a/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java
+++ b/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java
@@ -29,6 +29,7 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.regex.Pattern;
+import org.apache.tika.io.IOUtils;
 
 /**
  * Internal utility class that Tika uses to look up service providers.
@@ -329,7 +330,7 @@ public class ServiceLoader {
         InputStream stream = resource.openStream();
         try {
             BufferedReader reader =
-                new BufferedReader(new InputStreamReader(stream, "UTF-8"));
+                new BufferedReader(new InputStreamReader(stream, IOUtils.UTF_8));
             String line = reader.readLine();
             while (line != null) {
                 line = COMMENT.matcher(line).replaceFirst("");
diff --git a/tika-core/src/main/java/org/apache/tika/detect/MagicDetector.java b/tika-core/src/main/java/org/apache/tika/detect/MagicDetector.java
index 97c9837ee..9f51efb5b 100644
--- a/tika-core/src/main/java/org/apache/tika/detect/MagicDetector.java
+++ b/tika-core/src/main/java/org/apache/tika/detect/MagicDetector.java
@@ -19,14 +19,13 @@ package org.apache.tika.detect;
 import java.io.CharArrayWriter;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.UnsupportedEncodingException;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.charset.Charset;
 import java.util.Locale;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.mime.MediaType;
 
@@ -99,11 +98,7 @@ public class MagicDetector implements Detector {
         } else if (type.equals("stringignorecase")) {
             decoded = decodeString(value.toLowerCase(Locale.ROOT), type);
         } else if (type.equals("byte")) {
-            try {
-                decoded = tmpVal.getBytes("UTF-8");
-            } catch (UnsupportedEncodingException e) {
-                throw new AssertionError("UTF-8 not supported.");
-            }
+            decoded = tmpVal.getBytes(IOUtils.UTF_8);
         } else if (type.equals("host16") || type.equals("little16")) {
             int i = Integer.parseInt(tmpVal, radix);
             decoded = new byte[] { (byte) (i & 0x00FF), (byte) (i >> 8) };
@@ -399,7 +394,7 @@ public class MagicDetector implements Detector {
                     flags = Pattern.CASE_INSENSITIVE;
                 }
                 
-                Pattern p = Pattern.compile(new String(this.pattern, "UTF-8"), flags);
+                Pattern p = Pattern.compile(new String(this.pattern, IOUtils.UTF_8), flags);
 
                 ByteBuffer bb = ByteBuffer.wrap(buffer);
                 CharBuffer result = ISO_8859_1.decode(bb);
diff --git a/tika-core/src/main/java/org/apache/tika/detect/NameDetector.java b/tika-core/src/main/java/org/apache/tika/detect/NameDetector.java
index 18418a22f..42fb2b470 100644
--- a/tika-core/src/main/java/org/apache/tika/detect/NameDetector.java
+++ b/tika-core/src/main/java/org/apache/tika/detect/NameDetector.java
@@ -22,6 +22,7 @@ import java.net.URLDecoder;
 import java.util.Map;
 import java.util.regex.Pattern;
 
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.mime.MediaType;
 
@@ -119,7 +120,7 @@ public class NameDetector implements Detector {
             int percent = name.indexOf('%');
             if (percent != -1) {
                 try {
-                    name = URLDecoder.decode(name, "UTF-8");
+                    name = URLDecoder.decode(name, IOUtils.UTF_8.name());
                 } catch (UnsupportedEncodingException e) {
                     throw new IllegalStateException("UTF-8 not supported", e);
                 }
diff --git a/tika-core/src/main/java/org/apache/tika/embedder/ExternalEmbedder.java b/tika-core/src/main/java/org/apache/tika/embedder/ExternalEmbedder.java
index 8f069b170..11a8a7c03 100644
--- a/tika-core/src/main/java/org/apache/tika/embedder/ExternalEmbedder.java
+++ b/tika-core/src/main/java/org/apache/tika/embedder/ExternalEmbedder.java
@@ -413,7 +413,7 @@ public class ExternalEmbedder implements Embedder {
             if (process.exitValue() != 0) {
                 throw new TikaException("There was an error executing the command line" +
                         "\nExecutable Command:\n\n" + cmd +
-                        "\nExecutable Error:\n\n" + stdErrOutputStream.toString("UTF-8"));
+                        "\nExecutable Error:\n\n" + stdErrOutputStream.toString(IOUtils.UTF_8.name()));
             }
         }
     }
diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java
index 930598ea0..d25f7e34a 100644
--- a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java
+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java
@@ -263,7 +263,7 @@ class ForkClient {
             String manifest =
                 "Main-Class: " + ForkServer.class.getName() + "\n";
             jar.putNextEntry(new ZipEntry("META-INF/MANIFEST.MF"));
-            jar.write(manifest.getBytes("UTF-8"));
+            jar.write(manifest.getBytes(IOUtils.UTF_8));
 
             Class<?>[] bootstrap = {
                     ForkServer.class, ForkObjectInputStream.class,
diff --git a/tika-core/src/main/java/org/apache/tika/io/IOUtils.java b/tika-core/src/main/java/org/apache/tika/io/IOUtils.java
index 908fa3008..b05dc2187 100644
--- a/tika-core/src/main/java/org/apache/tika/io/IOUtils.java
+++ b/tika-core/src/main/java/org/apache/tika/io/IOUtils.java
@@ -28,9 +28,9 @@ import java.io.OutputStream;
 import java.io.OutputStreamWriter;
 import java.io.Reader;
 import java.io.StringWriter;
-import java.io.UnsupportedEncodingException;
 import java.io.Writer;
 import java.nio.channels.Channel;
+import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -77,6 +77,9 @@ import java.util.List;
  */
 public class IOUtils {
 
+    //TODO: switch to StandardCharsets when we move to Java 1.7
+    public static final Charset UTF_8 = Charset.forName("UTF-8");
+
     /**
      * The default buffer size to use.
      */
@@ -255,7 +258,7 @@ public class IOUtils {
      */
     @Deprecated
     public static byte[] toByteArray(String input) throws IOException {
-        return input.getBytes("UTF-8");
+        return input.getBytes(IOUtils.UTF_8);
     }
 
     // read char[]
@@ -393,7 +396,7 @@ public class IOUtils {
      */
     @Deprecated
     public static String toString(byte[] input) throws IOException {
-        return new String(input, "UTF-8");
+        return new String(input, IOUtils.UTF_8);
     }
 
     /**
@@ -415,7 +418,7 @@ public class IOUtils {
             throws IOException {
         // If no encoding is specified, default to UTF-8.
         if (encoding == null) {
-            return new String(input, "UTF-8");
+            return new String(input, IOUtils.UTF_8);
         } else {
             return new String(input, encoding);
         }
@@ -437,7 +440,7 @@ public class IOUtils {
      * @since Commons IO 1.1
      */
     public static List<String> readLines(InputStream input) throws IOException {
-        InputStreamReader reader = new InputStreamReader(input, "UTF-8");
+        InputStreamReader reader = new InputStreamReader(input, IOUtils.UTF_8);
         return readLines(reader);
     }
 
@@ -531,13 +534,8 @@ public class IOUtils {
      * @since Commons IO 1.1
      */
     public static InputStream toInputStream(String input) {
-        try {
-            byte[] bytes = input.getBytes("UTF-8");
-            return new ByteArrayInputStream(bytes);
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
-
+        byte[] bytes = input.getBytes(IOUtils.UTF_8);
+        return new ByteArrayInputStream(bytes);
     }
 
     /**
@@ -554,7 +552,7 @@ public class IOUtils {
      * @since Commons IO 1.1
      */
     public static InputStream toInputStream(String input, String encoding) throws IOException {
-        byte[] bytes = encoding != null ? input.getBytes(encoding) : input.getBytes("UTF-8");
+        byte[] bytes = encoding != null ? input.getBytes(encoding) : input.getBytes(IOUtils.UTF_8);
         return new ByteArrayInputStream(bytes);
     }
 
@@ -592,7 +590,7 @@ public class IOUtils {
      */
     public static void write(byte[] data, Writer output) throws IOException {
         if (data != null) {
-            output.write(new String(data, "UTF-8"));
+            output.write(new String(data, IOUtils.UTF_8));
         }
     }
 
@@ -660,7 +658,7 @@ public class IOUtils {
     public static void write(char[] data, OutputStream output)
             throws IOException {
         if (data != null) {
-            output.write(new String(data).getBytes("UTF-8"));
+            output.write(new String(data).getBytes(IOUtils.UTF_8));
         }
     }
 
@@ -786,7 +784,7 @@ public class IOUtils {
     public static void write(String data, OutputStream output)
             throws IOException {
         if (data != null) {
-            output.write(data.getBytes("UTF-8"));
+            output.write(data.getBytes(IOUtils.UTF_8));
         }
     }
 
@@ -855,7 +853,7 @@ public class IOUtils {
     public static void write(StringBuffer data, OutputStream output)
             throws IOException {
         if (data != null) {
-            output.write(data.toString().getBytes("UTF-8"));
+            output.write(data.toString().getBytes(IOUtils.UTF_8));
         }
     }
 
@@ -961,7 +959,7 @@ public class IOUtils {
      */
     public static void copy(InputStream input, Writer output)
             throws IOException {
-        InputStreamReader in = new InputStreamReader(input, "UTF-8");
+        InputStreamReader in = new InputStreamReader(input, IOUtils.UTF_8);
         copy(in, output);
     }
 
@@ -1068,7 +1066,7 @@ public class IOUtils {
      */
     public static void copy(Reader input, OutputStream output)
             throws IOException {
-        OutputStreamWriter out = new OutputStreamWriter(output, "UTF-8");
+        OutputStreamWriter out = new OutputStreamWriter(output, IOUtils.UTF_8);
         copy(input, out);
         // XXX Unless anyone is planning on rewriting OutputStreamWriter, we
         // have to flush here.
diff --git a/tika-core/src/main/java/org/apache/tika/language/LanguageIdentifier.java b/tika-core/src/main/java/org/apache/tika/language/LanguageIdentifier.java
index 8a072b92e..ff49406c3 100644
--- a/tika-core/src/main/java/org/apache/tika/language/LanguageIdentifier.java
+++ b/tika-core/src/main/java/org/apache/tika/language/LanguageIdentifier.java
@@ -25,6 +25,8 @@ import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
 
+import org.apache.tika.io.IOUtils;
+
 /**
  * Identifier of the language that best matches a given content profile.
  * The content profile is compared to generic language profiles based on
@@ -44,7 +46,6 @@ public class LanguageIdentifier {
     private static final Map<String, LanguageProfile> PROFILES =
         new HashMap<String, LanguageProfile>();
     private static final String PROFILE_SUFFIX = ".ngp";
-    private static final String PROFILE_ENCODING = "UTF-8";
 
     private static Properties props = new Properties();
     private static String errors = "";
@@ -76,7 +77,7 @@ public class LanguageIdentifier {
                 LanguageIdentifier.class.getResourceAsStream(language + PROFILE_SUFFIX);
             try {
                 BufferedReader reader =
-                    new BufferedReader(new InputStreamReader(stream, PROFILE_ENCODING));
+                    new BufferedReader(new InputStreamReader(stream, IOUtils.UTF_8));
                 String line = reader.readLine();
                 while (line != null) {
                     if (line.length() > 0 && !line.startsWith("#")) {
diff --git a/tika-core/src/main/java/org/apache/tika/language/LanguageProfilerBuilder.java b/tika-core/src/main/java/org/apache/tika/language/LanguageProfilerBuilder.java
index cdf760b6d..099ec592d 100644
--- a/tika-core/src/main/java/org/apache/tika/language/LanguageProfilerBuilder.java
+++ b/tika-core/src/main/java/org/apache/tika/language/LanguageProfilerBuilder.java
@@ -33,8 +33,9 @@ import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import org.apache.tika.exception.TikaException;
 
+import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 /**
  * This class runs a ngram analysis over submitted text, results might be used
  * for automatic language identification.
@@ -341,7 +342,7 @@ public class LanguageProfilerBuilder {
 
         ngrams.clear();
         ngramcounts = new int[maxLength + 1];
-        BufferedReader reader = new BufferedReader(new InputStreamReader(is, "UTF-8"));
+        BufferedReader reader = new BufferedReader(new InputStreamReader(is, IOUtils.UTF_8));
         String line = null;
 
         while ((line = reader.readLine()) != null) {
@@ -405,7 +406,7 @@ public class LanguageProfilerBuilder {
      */
     public void save(OutputStream os) throws IOException {
         os.write(("# NgramProfile generated at " + new Date() + 
-                  " for Apache Tika Language Identification\n").getBytes("UTF-8"));
+                  " for Apache Tika Language Identification\n").getBytes(IOUtils.UTF_8));
 
         // And then each ngram
 
@@ -432,7 +433,7 @@ public class LanguageProfilerBuilder {
         for (int i = 0; i < list.size(); i++) {
             NGramEntry e = list.get(i);
             String line = e.toString() + " " + e.getCount() + "\n";
-            os.write(line.getBytes("UTF-8"));
+            os.write(line.getBytes(IOUtils.UTF_8));
         }
         os.flush();
     }
diff --git a/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java b/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java
index 506439cde..21a274414 100644
--- a/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java
+++ b/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java
@@ -24,7 +24,6 @@ import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStream;
 import java.io.Reader;
-import java.io.UnsupportedEncodingException;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Map;
@@ -232,7 +231,7 @@ public class ExternalParser extends AbstractParser {
      */
     private void extractOutput(InputStream stream, XHTMLContentHandler xhtml)
             throws SAXException, IOException {
-        Reader reader = new InputStreamReader(stream, "UTF-8");
+        Reader reader = new InputStreamReader(stream, IOUtils.UTF_8);
         try {
             xhtml.startDocument();
             xhtml.startElement("p");
@@ -293,11 +292,7 @@ public class ExternalParser extends AbstractParser {
        new Thread() {
           public void run() {
              BufferedReader reader;
-             try {
-                 reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"));
-             } catch (UnsupportedEncodingException e) {
-                 throw new AssertionError("UTF-8 not supported.");
-             }
+              reader = new BufferedReader(new InputStreamReader(stream, IOUtils.UTF_8));
              try {
                 String line;
                 while ( (line = reader.readLine()) != null ) {
diff --git a/tika-core/src/test/java/org/apache/tika/detect/TextDetectorTest.java b/tika-core/src/test/java/org/apache/tika/detect/TextDetectorTest.java
index c50fc1492..26280c97d 100644
--- a/tika-core/src/test/java/org/apache/tika/detect/TextDetectorTest.java
+++ b/tika-core/src/test/java/org/apache/tika/detect/TextDetectorTest.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.util.Arrays;
 
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.mime.MediaType;
 import org.junit.Test;
@@ -54,8 +55,8 @@ public class TextDetectorTest {
 
     @Test
     public void testDetectText() throws Exception {
-        assertText("Hello, World!".getBytes("UTF-8"));
-        assertText(" \t\r\n".getBytes("UTF-8"));
+        assertText("Hello, World!".getBytes(IOUtils.UTF_8));
+        assertText(" \t\r\n".getBytes(IOUtils.UTF_8));
         assertNotText(new byte[] { -1, -2, -3, 0x09, 0x0A, 0x0C, 0x0D, 0x1B });
         assertNotText(new byte[] { 0 });
         assertNotText(new byte[] { 'H', 'e', 'l', 'l', 'o', 0 });
diff --git a/tika-core/src/test/java/org/apache/tika/io/TailStreamTest.java b/tika-core/src/test/java/org/apache/tika/io/TailStreamTest.java
index 0b4d3158c..35b99d46b 100644
--- a/tika-core/src/test/java/org/apache/tika/io/TailStreamTest.java
+++ b/tika-core/src/test/java/org/apache/tika/io/TailStreamTest.java
@@ -23,7 +23,6 @@ import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.UnsupportedEncodingException;
 import java.util.Arrays;
 
 import org.junit.Test;
@@ -69,11 +68,7 @@ public class TailStreamTest
      */
     private static InputStream generateStream(int from, int length)
     {
-        try {
-            return new ByteArrayInputStream(generateText(from, length).getBytes("UTF-8"));
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
+        return new ByteArrayInputStream(generateText(from, length).getBytes(IOUtils.UTF_8));
     }
 
     /**
@@ -128,7 +123,7 @@ public class TailStreamTest
         TailStream stream = new TailStream(generateStream(0, 2 * count), count);
         readStream(stream);
         assertEquals("Wrong buffer", generateText(count, count), new String(
-                stream.getTail(), "UTF-8"));
+                stream.getTail(), IOUtils.UTF_8));
     }
 
     /**
@@ -149,7 +144,7 @@ public class TailStreamTest
             read = stream.read(buf);
         }
         assertEquals("Wrong buffer", generateText(count - tailSize, tailSize),
-                new String(stream.getTail(), "UTF-8"));
+                new String(stream.getTail(), IOUtils.UTF_8));
         stream.close();
     }
 
@@ -169,7 +164,7 @@ public class TailStreamTest
         stream.reset();
         readStream(stream);
         assertEquals("Wrong buffer", generateText(tailSize, tailSize),
-                new String(stream.getTail(), "UTF-8"));
+                new String(stream.getTail(), IOUtils.UTF_8));
     }
 
     /**
@@ -185,7 +180,7 @@ public class TailStreamTest
         byte[] buf = new byte[count];
         stream.read(buf);
         assertEquals("Wrong buffer", generateText(count - tailSize, tailSize),
-                new String(stream.getTail(), "UTF-8"));
+                new String(stream.getTail(), IOUtils.UTF_8));
         stream.close();
     }
 
@@ -202,7 +197,7 @@ public class TailStreamTest
         assertEquals("Wrong skip result", skipCount, stream.skip(skipCount));
         assertEquals("Wrong buffer",
                 generateText(skipCount - tailSize, tailSize),
-                new String(stream.getTail(), "UTF-8"));
+                new String(stream.getTail(), IOUtils.UTF_8));
         stream.close();
     }
 
@@ -216,7 +211,7 @@ public class TailStreamTest
         TailStream stream = new TailStream(generateStream(0, count), 2 * count);
         assertEquals("Wrong skip result", count, stream.skip(2 * count));
         assertEquals("Wrong buffer", generateText(0, count),
-                new String(stream.getTail(), "UTF-8"));
+                new String(stream.getTail(), IOUtils.UTF_8));
         stream.close();
     }
 
diff --git a/tika-core/src/test/java/org/apache/tika/io/TikaInputStreamTest.java b/tika-core/src/test/java/org/apache/tika/io/TikaInputStreamTest.java
index abef52ba6..4c71baaaa 100644
--- a/tika-core/src/test/java/org/apache/tika/io/TikaInputStreamTest.java
+++ b/tika-core/src/test/java/org/apache/tika/io/TikaInputStreamTest.java
@@ -16,6 +16,10 @@
  */
 package org.apache.tika.io;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -27,11 +31,7 @@ import java.io.OutputStream;
 import java.net.URL;
 
 import org.apache.tika.metadata.Metadata;
-
 import org.junit.Test;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
 
 public class TikaInputStreamTest {
 
@@ -62,7 +62,7 @@ public class TikaInputStreamTest {
     @Test
     public void testStreamBased() throws IOException {
         InputStream input =
-            new ByteArrayInputStream("Hello, World!".getBytes("UTF-8"));
+            new ByteArrayInputStream("Hello, World!".getBytes(IOUtils.UTF_8));
         InputStream stream = TikaInputStream.get(input);
 
         File file = TikaInputStream.get(stream).getFile();
@@ -89,7 +89,7 @@ public class TikaInputStreamTest {
         File file = File.createTempFile("tika-", ".tmp");
         OutputStream stream = new FileOutputStream(file);
         try {
-            stream.write(data.getBytes("UTF-8"));
+            stream.write(data.getBytes(IOUtils.UTF_8));
         } finally {
             stream.close();
         }
@@ -108,7 +108,7 @@ public class TikaInputStreamTest {
     private String readStream(InputStream stream) throws IOException {
         ByteArrayOutputStream buffer = new ByteArrayOutputStream();
         IOUtils.copy(stream, buffer);
-        return buffer.toString("UTF-8");
+        return buffer.toString(IOUtils.UTF_8.name());
     }
 
     @Test
diff --git a/tika-core/src/test/java/org/apache/tika/language/LanguageIdentifierTest.java b/tika-core/src/test/java/org/apache/tika/language/LanguageIdentifierTest.java
index 9748d2954..4d6f4d09a 100644
--- a/tika-core/src/test/java/org/apache/tika/language/LanguageIdentifierTest.java
+++ b/tika-core/src/test/java/org/apache/tika/language/LanguageIdentifierTest.java
@@ -16,16 +16,16 @@
  */
 package org.apache.tika.language;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.Writer;
 import java.util.HashMap;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
 import org.apache.tika.io.IOUtils;
 import org.junit.Before;
 import org.junit.Test;
@@ -139,7 +139,7 @@ public class LanguageIdentifierTest {
         InputStream stream =
             LanguageIdentifierTest.class.getResourceAsStream(language + ".test");
         try {
-            IOUtils.copy(new InputStreamReader(stream, "UTF-8"), writer);
+            IOUtils.copy(new InputStreamReader(stream, IOUtils.UTF_8), writer);
         } finally {
             stream.close();
         }
diff --git a/tika-core/src/test/java/org/apache/tika/language/LanguageProfilerBuilderTest.java b/tika-core/src/test/java/org/apache/tika/language/LanguageProfilerBuilderTest.java
index c5409fc2b..cd3c4d8e0 100644
--- a/tika-core/src/test/java/org/apache/tika/language/LanguageProfilerBuilderTest.java
+++ b/tika-core/src/test/java/org/apache/tika/language/LanguageProfilerBuilderTest.java
@@ -17,6 +17,9 @@
 
 package org.apache.tika.language;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileInputStream;
@@ -27,12 +30,10 @@ import java.io.InputStreamReader;
 import java.net.URISyntaxException;
 
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.junit.After;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
 public class LanguageProfilerBuilderTest {
     /* Test members */
     private LanguageProfilerBuilder ngramProfile = null;
@@ -40,7 +41,6 @@ public class LanguageProfilerBuilderTest {
     private final String profileName = "../tika-core/src/test/resources/org/apache/tika/language/langbuilder/"
             + LanguageProfilerBuilderTest.class.getName();
     private final String corpusName = "langbuilder/welsh_corpus.txt";
-    private final String encoding = "UTF-8";
     private final String FILE_EXTENSION = "ngp";
     private final String LANGUAGE = "welsh";
     private final int maxlen = 1000;
@@ -50,7 +50,7 @@ public class LanguageProfilerBuilderTest {
         InputStream is =
                 LanguageProfilerBuilderTest.class.getResourceAsStream(corpusName);
         try {
-            ngramProfile = LanguageProfilerBuilder.create(profileName, is , encoding);
+            ngramProfile = LanguageProfilerBuilder.create(profileName, is , IOUtils.UTF_8.name());
         } finally {
             is.close();
         }
@@ -82,7 +82,7 @@ public class LanguageProfilerBuilderTest {
                 + FILE_EXTENSION));
         try {
             BufferedReader reader = new BufferedReader(new InputStreamReader(
-                    stream, encoding));
+                    stream, IOUtils.UTF_8));
             String line = reader.readLine();
             while (line != null) {
                 if (line.length() > 0 && !line.startsWith("#")) {// skips the
diff --git a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java
index 1fe8636cc..f93415900 100644
--- a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java
+++ b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java
@@ -25,8 +25,8 @@ import java.io.InputStream;
 import java.net.URL;
 
 import org.apache.tika.config.TikaConfig;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
-
 import org.junit.Before;
 import org.junit.Test;
 
@@ -85,7 +85,7 @@ public class MimeDetectionTest {
                 new ByteArrayInputStream("\ufefftest".getBytes("UTF-16BE")),
                 new Metadata()));
         assertEquals(MediaType.TEXT_PLAIN, mimeTypes.detect(
-                new ByteArrayInputStream("\ufefftest".getBytes("UTF-8")),
+                new ByteArrayInputStream("\ufefftest".getBytes(IOUtils.UTF_8)),
                 new Metadata()));
     }
 
@@ -195,7 +195,7 @@ public class MimeDetectionTest {
     @Test
     public void testNotXML() throws IOException {
         assertEquals(MediaType.TEXT_PLAIN, mimeTypes.detect(
-                new ByteArrayInputStream("<!-- test -->".getBytes("UTF-8")),
+                new ByteArrayInputStream("<!-- test -->".getBytes(IOUtils.UTF_8)),
                 new Metadata()));
     }
 
@@ -219,7 +219,7 @@ public class MimeDetectionTest {
      */
     @Test    
     public void testMimeMagicClashSamePriority() throws IOException {
-        byte[] helloWorld = "Hello, World!".getBytes("UTF-8");
+        byte[] helloWorld = "Hello, World!".getBytes(IOUtils.UTF_8);
         MediaType helloType = MediaType.parse("hello/world-file");
         MediaType helloXType = MediaType.parse("hello/x-world-hello");
         Metadata metadata;
diff --git a/tika-core/src/test/java/org/apache/tika/sax/BasicContentHandlerFactoryTest.java b/tika-core/src/test/java/org/apache/tika/sax/BasicContentHandlerFactoryTest.java
index 37ac6bab3..12507be71 100644
--- a/tika-core/src/test/java/org/apache/tika/sax/BasicContentHandlerFactoryTest.java
+++ b/tika-core/src/test/java/org/apache/tika/sax/BasicContentHandlerFactoryTest.java
@@ -16,6 +16,10 @@
  */
 package org.apache.tika.sax;
 
+import static junit.framework.Assert.assertFalse;
+import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -23,6 +27,7 @@ import java.io.UnsupportedEncodingException;
 import java.util.Set;
 
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.mime.MediaType;
 import org.apache.tika.parser.ParseContext;
@@ -34,15 +39,12 @@ import org.xml.sax.SAXException;
 import org.xml.sax.helpers.AttributesImpl;
 import org.xml.sax.helpers.DefaultHandler;
 
-import static junit.framework.Assert.assertFalse;
-import static junit.framework.Assert.assertTrue;
-import static org.junit.Assert.assertEquals;
-
 /**
  * Test cases for the {@link org.apache.tika.sax.BodyContentHandler} class.
  */
 public class BasicContentHandlerFactoryTest {
-    private static final String ENCODING = "UTF-8";
+
+    private static final String ENCODING = IOUtils.UTF_8.name();
     //default max char len (at least in WriteOutContentHandler is 100k)
     private static final int OVER_DEFAULT = 120000;
 
diff --git a/tika-core/src/test/java/org/apache/tika/sax/BodyContentHandlerTest.java b/tika-core/src/test/java/org/apache/tika/sax/BodyContentHandlerTest.java
index 7680b1697..1a278db2b 100644
--- a/tika-core/src/test/java/org/apache/tika/sax/BodyContentHandlerTest.java
+++ b/tika-core/src/test/java/org/apache/tika/sax/BodyContentHandlerTest.java
@@ -21,6 +21,7 @@ import static org.junit.Assert.assertEquals;
 import java.io.ByteArrayOutputStream;
 import java.io.OutputStream;
 
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.junit.Test;
 
@@ -45,7 +46,7 @@ public class BodyContentHandlerTest {
         xhtml.element("p", "Test text");
         xhtml.endDocument();
 
-        assertEquals("Test text\n", buffer.toString("UTF-8"));
+        assertEquals("Test text\n", buffer.toString(IOUtils.UTF_8.name()));
     }
 
 }
