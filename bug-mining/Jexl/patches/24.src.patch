diff --git a/src/main/java/org/apache/commons/jexl2/JexlException.java b/src/main/java/org/apache/commons/jexl2/JexlException.java
index be08fcf0..f18a533f 100644
--- a/src/main/java/org/apache/commons/jexl2/JexlException.java
+++ b/src/main/java/org/apache/commons/jexl2/JexlException.java
@@ -123,8 +123,9 @@ public class JexlException extends RuntimeException {
             msg.append(dbg.end());
             msg.append("]: '");
             msg.append(dbg.data());
-            msg.append("' ");
+            msg.append("'");
         }
+        msg.append(' ');
         msg.append(super.getMessage());
         Throwable cause = getCause();
         if (cause != null && NULL_OPERAND == cause.getMessage()) {
diff --git a/src/main/java/org/apache/commons/jexl2/parser/Parser.jjt b/src/main/java/org/apache/commons/jexl2/parser/Parser.jjt
index e0e06269..45cbff4c 100644
--- a/src/main/java/org/apache/commons/jexl2/parser/Parser.jjt
+++ b/src/main/java/org/apache/commons/jexl2/parser/Parser.jjt
@@ -556,9 +556,9 @@ void Reference() : {}
 
 <*> TOKEN :
 {
-    <STRING_LITERAL :
-        ("\"" ( ~["\"","\n","\r"] | "\\" ["u","n","t","b","r","f","\\","\""] )* "\"" )
-     |
-        ("\'" ( ~["\'","\n","\r"] | "\\" ["u","n","t","b","r","f","\\","\'"])* "\'" )
-    >
+  < STRING_LITERAL:
+    "\"" (~["\"","\\","\n","\r","\u2028","\u2029"] | "\\" ~["\n","\r","\u2028","\u2029"])* "\""
+  |
+    "'" (~["'","\\","\n","\r","\u2028","\u2029"] | "\\" ~["\n","\r","\u2028","\u2029"])* "'"
+  >
 }
diff --git a/src/test/java/org/apache/commons/jexl2/IssuesTest.java b/src/test/java/org/apache/commons/jexl2/IssuesTest.java
index 9bdcdd4e..83784001 100644
--- a/src/test/java/org/apache/commons/jexl2/IssuesTest.java
+++ b/src/test/java/org/apache/commons/jexl2/IssuesTest.java
@@ -332,4 +332,45 @@ public class IssuesTest extends JexlTestCase {
         assertEquals("bye...", script.execute(ctxt));
     }
 
+    public void test97() throws Exception {
+        JexlContext ctxt = new MapContext();
+        for(char v = 'a'; v <= 'z'; ++v) {
+            ctxt.set(Character.toString(v), 10);
+        }
+        String input =
+            "(((((((((((((((((((((((((z+y)/x)*w)-v)*u)/t)-s)*r)/q)+p)-o)*n)-m)+l)*k)+j)/i)+h)*g)+f)/e)+d)-c)/b)+a)";
+
+        JexlEngine jexl = new JexlEngine();
+        Expression script;
+        // Make sure everything is loaded...
+        long start = System.nanoTime();
+        script = jexl.createExpression(input);
+        Object value = script.evaluate(ctxt);
+        assertEquals(Integer.valueOf(11), value);
+        long end = System.nanoTime();
+        System.out.printf("Parse took %.3f seconds\n", (end-start)/1e+9);
+    }
+
+    public static class fn98 {
+        public String replace(String str, String target, String replacement) {
+            return str.replace(target, replacement);
+        }
+    }
+    
+    public void test98() throws Exception {
+        String[] exprs = {
+            "fn:replace('DOMAIN\\somename', '\\\\', '\\\\\\\\')",
+            "fn:replace(\"DOMAIN\\somename\", \"\\\\\", \"\\\\\\\\\")",
+            "fn:replace('DOMAIN\\somename', '\\u005c', '\\u005c\\u005c')"
+        };
+        JexlEngine jexl = new JexlEngine();
+        Map<String,Object> funcs = new HashMap<String,Object>();
+        funcs.put("fn", new fn98());
+        jexl.setFunctions(funcs);
+        for(String expr : exprs) {
+            Object value = jexl.createExpression(expr).evaluate(null);
+            assertEquals(expr, "DOMAIN\\\\somename", value);
+        }
+    }
+
 }
