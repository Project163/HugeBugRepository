diff --git a/johnzon-jsonb/src/main/java/org/apache/johnzon/jaxrs/jsonb/jaxrs/JsonbJaxrsProvider.java b/johnzon-jsonb/src/main/java/org/apache/johnzon/jaxrs/jsonb/jaxrs/JsonbJaxrsProvider.java
index 15e26fc7..20d547a5 100644
--- a/johnzon-jsonb/src/main/java/org/apache/johnzon/jaxrs/jsonb/jaxrs/JsonbJaxrsProvider.java
+++ b/johnzon-jsonb/src/main/java/org/apache/johnzon/jaxrs/jsonb/jaxrs/JsonbJaxrsProvider.java
@@ -18,6 +18,7 @@
  */
 package org.apache.johnzon.jaxrs.jsonb.jaxrs;
 
+import static java.util.Optional.ofNullable;
 import static java.util.stream.Collectors.toMap;
 
 import javax.json.JsonStructure;
@@ -29,6 +30,7 @@ import javax.ws.rs.Produces;
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.MultivaluedMap;
+import javax.ws.rs.core.NoContentException;
 import javax.ws.rs.core.Response;
 import javax.ws.rs.core.StreamingOutput;
 import javax.ws.rs.ext.MessageBodyReader;
@@ -63,7 +65,9 @@ public class JsonbJaxrsProvider<T> implements MessageBodyWriter<T>, MessageBodyR
     protected final Collection<String> ignores;
     protected final JsonbConfig config = new JsonbConfig();
     protected volatile Function<Class<?>, Jsonb> delegate = null;
+    protected volatile ReadImpl readImpl = null;
     private boolean customized;
+    private Boolean throwNoContentExceptionOnEmptyStreams;
 
     @Context
     private Providers providers;
@@ -80,6 +84,11 @@ public class JsonbJaxrsProvider<T> implements MessageBodyWriter<T>, MessageBodyR
         return ignores != null && ignores.contains(type.getName());
     }
 
+    public void setThrowNoContentExceptionOnEmptyStreams(final boolean throwNoContentExceptionOnEmptyStreams) {
+        this.throwNoContentExceptionOnEmptyStreams = throwNoContentExceptionOnEmptyStreams;
+        // customized = false since it is not a jsonb customization but a MBR one
+    }
+
     // config - main containers support the configuration of providers this way
     public void setFailOnUnknownProperties(final boolean active) {
         config.setProperty("johnzon.fail-on-unknown-properties", active);
@@ -187,8 +196,9 @@ public class JsonbJaxrsProvider<T> implements MessageBodyWriter<T>, MessageBodyR
 
     @Override
     public T readFrom(final Class<T> type, final Type genericType, final Annotation[] annotations, final MediaType mediaType,
-            final MultivaluedMap<String, String> httpHeaders, final InputStream entityStream) throws WebApplicationException {
-        return getJsonb(type).fromJson(entityStream, genericType);
+            final MultivaluedMap<String, String> httpHeaders, final InputStream entityStream) throws WebApplicationException, IOException {
+        final Jsonb jsonb = getJsonb(type);
+        return (T) readImpl.doRead(jsonb, genericType, entityStream);
     }
 
     @Override
@@ -205,22 +215,63 @@ public class JsonbJaxrsProvider<T> implements MessageBodyWriter<T>, MessageBodyR
         if (delegate == null){
             synchronized (this) {
                 if (delegate == null) {
+                    if (throwNoContentExceptionOnEmptyStreams == null) {
+                        throwNoContentExceptionOnEmptyStreams = initThrowNoContentExceptionOnEmptyStreams();
+                    }
                     final ContextResolver<Jsonb> contextResolver = providers.getContextResolver(Jsonb.class, MediaType.APPLICATION_JSON_TYPE);
                     if (contextResolver != null) {
                         if (customized) {
-                            Logger.getLogger(JsonbJaxrsProvider.class.getName())
-                                  .warning("Customizations done on the Jsonb instance will be ignored because a ContextResolver<Jsonb> was found");
+                            logger().warning("Customizations done on the Jsonb instance will be ignored because a ContextResolver<Jsonb> was found");
+                        }
+                        if (throwNoContentExceptionOnEmptyStreams) {
+                            logger().warning("Using a ContextResolver<Jsonb>, NoContentException will not be thrown for empty streams");
                         }
                         delegate = new DynamicInstance(contextResolver); // faster than contextResolver::getContext
                     } else {
-                        delegate = new ProvidedInstance(createJsonb()); // don't recreate it
+                        // don't recreate it for perfs
+                        delegate = new ProvidedInstance(createJsonb());
                     }
                 }
+                readImpl = throwNoContentExceptionOnEmptyStreams ?
+                        this::doReadWithNoContentException :
+                        this::doRead;
             }
         }
         return delegate.apply(type);
     }
 
+    private boolean initThrowNoContentExceptionOnEmptyStreams() {
+        try {
+            ofNullable(Thread.currentThread().getContextClassLoader())
+                    .orElseGet(ClassLoader::getSystemClassLoader)
+                    .loadClass("javax.ws.rs.core.Feature");
+            return true;
+        } catch (final NoClassDefFoundError | ClassNotFoundException e) {
+            return false;
+        }
+    }
+
+    private Object doRead(final Jsonb jsonb, final Type t, final InputStream stream) {
+        return jsonb.fromJson(stream, t);
+    }
+
+    private Object doReadWithNoContentException(final Jsonb jsonb, final Type t, final InputStream stream) throws NoContentException {
+        try {
+            return doRead(jsonb, t, stream);
+        } catch (final IllegalStateException ise) {
+            if (ise.getClass().getName()
+                    .equals("org.apache.johnzon.core.JsonReaderImpl$NothingToRead")) {
+                // spec enables to return an empty java object but it does not mean anything in JSON context so just fail
+                throw new NoContentException(ise);
+            }
+            throw ise;
+        }
+    }
+
+    private Logger logger() {
+        return Logger.getLogger(JsonbJaxrsProvider.class.getName());
+    }
+
     @Override
     public synchronized void close() throws Exception {
         if (AutoCloseable.class.isInstance(delegate)) {
@@ -228,6 +279,10 @@ public class JsonbJaxrsProvider<T> implements MessageBodyWriter<T>, MessageBodyR
         }
     }
 
+    private interface ReadImpl {
+        Object doRead(Jsonb jsonb, Type type, InputStream entityStream) throws IOException;
+    }
+
     private static final class DynamicInstance implements Function<Class<?>, Jsonb> {
         private final ContextResolver<Jsonb> contextResolver;
 
diff --git a/johnzon-jsonb/src/test/java/org/apache/johnzon/jaxrs/jsonb/jaxrs/JsonbJaxrsProviderTest.java b/johnzon-jsonb/src/test/java/org/apache/johnzon/jaxrs/jsonb/jaxrs/JsonbJaxrsProviderTest.java
new file mode 100644
index 00000000..ae148787
--- /dev/null
+++ b/johnzon-jsonb/src/test/java/org/apache/johnzon/jaxrs/jsonb/jaxrs/JsonbJaxrsProviderTest.java
@@ -0,0 +1,91 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.johnzon.jaxrs.jsonb.jaxrs;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Field;
+import java.nio.charset.StandardCharsets;
+
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.MultivaluedHashMap;
+import javax.ws.rs.core.NoContentException;
+import javax.ws.rs.ext.ContextResolver;
+
+import org.apache.cxf.jaxrs.impl.ProvidersImpl;
+import org.apache.johnzon.core.JsonReaderImpl;
+import org.junit.Test;
+
+public class JsonbJaxrsProviderTest {
+    @Test(expected = NoContentException.class)
+    public void noContentExceptionAuto() throws IOException { // we run on jaxrs 2 in the build
+        readFoo(null, new ByteArrayInputStream(new byte[0]));
+    }
+
+    @Test(expected = NoContentException.class)
+    public void noContentException() throws IOException {
+        readFoo(true, new ByteArrayInputStream(new byte[0]));
+    }
+
+    @Test(expected = JsonReaderImpl.NothingToRead.class)
+    public void noContentExceptionDisabled() throws IOException {
+        readFoo(false, new ByteArrayInputStream(new byte[0]));
+    }
+
+    @Test // just to ensure we didnt break soemthing on read impl
+    public void validTest() throws IOException {
+        final Foo foo = readFoo(null, new ByteArrayInputStream("{\"name\":\"ok\"}".getBytes(StandardCharsets.UTF_8)));
+        assertEquals("ok", foo.name);
+    }
+
+    private Foo readFoo(final Boolean set, final InputStream stream) throws IOException {
+        return new JsonbJaxrsProvider<Foo>() {{
+            if (set != null) {
+                setThrowNoContentExceptionOnEmptyStreams(set);
+            }
+            setProviders(this);
+        }}.readFrom(Foo.class, Foo.class, new Annotation[0],
+                MediaType.APPLICATION_JSON_TYPE, new MultivaluedHashMap<>(),
+                stream);
+    }
+
+    private void setProviders(final JsonbJaxrsProvider<Foo> provider) {
+        try {
+            final Field providers = JsonbJaxrsProvider.class.getDeclaredField("providers");
+            providers.setAccessible(true);
+            providers.set(provider, new ProvidersImpl(null) {
+                @Override
+                public <T> ContextResolver<T> getContextResolver(final Class<T> contextType, final MediaType mediaType) {
+                    return null;
+                }
+            });
+        } catch (final Exception e) {
+            fail(e.getMessage());
+        }
+    }
+
+    public static class Foo {
+        public String name;
+    }
+}
diff --git a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/jaxrs/JsonbJaxRsTest.java b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/jaxrs/JsonbJaxRsTest.java
index 91fca7d8..890f7ab4 100644
--- a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/jaxrs/JsonbJaxRsTest.java
+++ b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/jaxrs/JsonbJaxRsTest.java
@@ -168,7 +168,7 @@ public class JsonbJaxRsTest {
                 return null;
             }
         };
-        final List<Johnzon> johnzons = client().path("johnzon/all2").get(new GenericType<List<Johnzon>>(list));
+        final List<Johnzon> johnzons = client().path("johnzon/all2").get(new GenericType<List<Johnzon>>(list) {});
         assertEquals(2, johnzons.size());
         int i = 1;
         for (final Johnzon f : johnzons) {
