diff --git a/core/src/main/java/org/apache/james/core/MailAddress.java b/core/src/main/java/org/apache/james/core/MailAddress.java
index 2c67d79692..58ef7058cb 100644
--- a/core/src/main/java/org/apache/james/core/MailAddress.java
+++ b/core/src/main/java/org/apache/james/core/MailAddress.java
@@ -379,12 +379,12 @@ public class MailAddress implements java.io.Serializable {
      *
      * @return the address
      */
-    public InternetAddress toInternetAddress() {
+    public Optional<InternetAddress> toInternetAddress() {
         try {
-            return new InternetAddress(toString());
+            return Optional.of(new InternetAddress(toString()));
         } catch (javax.mail.internet.AddressException ae) {
-            //impossible really
-            return null;
+            LOGGER.warn("A valid address '{}' as per James criterial fails to parse as a javax.mail InternetAdrress", asString());
+            return Optional.empty();
         }
     }
 
diff --git a/core/src/test/java/org/apache/james/core/MailAddressTest.java b/core/src/test/java/org/apache/james/core/MailAddressTest.java
index a00a789542..1920c357b9 100644
--- a/core/src/test/java/org/apache/james/core/MailAddressTest.java
+++ b/core/src/test/java/org/apache/james/core/MailAddressTest.java
@@ -117,7 +117,7 @@ class MailAddressTest {
     @MethodSource("goodAddresses")
     void toInternetAddressShouldNoop(String mailAddress) throws Exception {
         assertThat(new MailAddress(mailAddress).toInternetAddress())
-            .isNotNull();
+            .isNotEmpty();
     }
 
     @ParameterizedTest
@@ -171,7 +171,7 @@ class MailAddressTest {
         InternetAddress b = new InternetAddress(GOOD_ADDRESS);
         MailAddress a = new MailAddress(b);
 
-        assertThat(a.toInternetAddress()).isEqualTo(b);
+        assertThat(a.toInternetAddress()).contains(b);
         assertThat(a.toString()).isEqualTo(GOOD_ADDRESS);
     }
 
