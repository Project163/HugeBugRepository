diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/JsonbGenerator.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/JsonbGenerator.java
new file mode 100644
index 00000000..9edfa011
--- /dev/null
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/JsonbGenerator.java
@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.johnzon.mapper;
+
+import javax.json.stream.JsonGenerator;
+
+/**
+ * Handles writing Json for Objects.
+ * Internally it uses a {@link JsonGenerator} to write JSON
+ *
+ * To write JSON-P structure elements you can use the {@link #getJsonGenerator()} method.
+ *
+ */
+public interface JsonbGenerator {
+
+    /**
+     * @return the {@link JsonGenerator} used internally to write the JSON output.
+     */
+    JsonGenerator getJsonGenerator();
+
+    /**
+     * Write the given Object o into the current JSON layer.
+     * This will <em>not</em> open a new json layer ('{', '}')
+     * but really just write the attributes of o to the currently opened layer.
+     *
+     * Consider you have a class
+     * <pre>
+     *     public class Customer {
+     *         private String firstName;
+     *         private String lastName;
+     *         private Address address;
+     *         ...
+     *     }
+     * </pre>
+     * then the resulting JSON String will e.g. look like
+     * <pre>
+     *     "firstName":"Karl", "lastName":"SomeName", "address":{"street":"mystreet"}
+     * </pre>
+     * @param o the object to write
+     * @return itself, for easier chaining of commands
+     */
+    JsonbGenerator writeObject(Object o);
+
+
+}
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/JsonbParser.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/JsonbParser.java
new file mode 100644
index 00000000..ef128f38
--- /dev/null
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/JsonbParser.java
@@ -0,0 +1,40 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.johnzon.mapper;
+
+import javax.json.stream.JsonGenerator;
+import javax.json.stream.JsonParser;
+
+/**
+ * Handles reading Json for Objects.
+ * Internally it uses a {@link JsonParser} to write JSON
+ *
+ * To write JSON-P structure elements you can use the {@link #getJsonParser()} ()} method.
+ *
+ */
+public interface JsonbParser {
+
+    /**
+     * @return the {@link JsonGenerator} used internally to write the JSON output.
+     */
+    JsonParser getJsonParser();
+
+
+
+}
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
index f3bbcd92..063a6e33 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
@@ -82,7 +82,6 @@ import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
 import static java.util.Arrays.asList;
-import static javafx.scene.input.KeyCode.T;
 
 public class Mapper implements Closeable {
     private static final Adapter<Object, String> FALLBACK_CONVERTER = new ConverterAdapter<Object>(new FallbackConverter());
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/ObjectConverter.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/ObjectConverter.java
new file mode 100644
index 00000000..e831e80e
--- /dev/null
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/ObjectConverter.java
@@ -0,0 +1,39 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.johnzon.mapper;
+
+import java.lang.reflect.Type;
+
+import javax.json.stream.JsonGenerator;
+import javax.json.stream.JsonParser;
+
+/**
+ * Convert a given Java Type a nested JSON representation.
+ * And the other way around.
+ *
+ * An example would be to convert a custom Project POJO, like Dog.class
+ * to it's JSON representation
+ *
+ * @param <T>
+ */
+public interface ObjectConverter<T> {
+    void writeJson(T instance, JsonbGenerator jsonbGenerator);
+
+    T fromJson(JsonbParser jsonbParser, Type targetType);
+}
diff --git a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/ObjectTypeTest.java b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/ObjectTypeTest.java
new file mode 100644
index 00000000..9d90b47f
--- /dev/null
+++ b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/ObjectTypeTest.java
@@ -0,0 +1,133 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.johnzon.mapper;
+
+
+import java.lang.reflect.Type;
+import java.util.Arrays;
+
+
+import org.junit.Assert;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+@RunWith(Parameterized.class)
+public class ObjectTypeTest {
+
+
+    @Parameterized.Parameter
+    public String accessMode;
+
+    @Parameterized.Parameters(name = "{0}")
+    public static Iterable<String> modes() {
+        return Arrays.asList("field", "method", "both", "strict-method");
+    }
+
+
+    @Test
+    public void testObjectConverterMapper() {
+        Mapper mapper = new MapperBuilder()
+                .setAccessModeName(accessMode)
+                .build();
+
+        String jsonString = "{ \"//javaType\": \"org.apache.johnzon.mapper.ObjectTypeTest$Customer\", \"firstName\":\"Bruce\", \"lastName\":\"Wayne\" }";
+
+        Poodle mum = new Poodle();
+        mum.setName("Rosa");
+        mum.setHairCut(true);
+
+        Beagle dad = new Beagle();
+        dad.setName("Gnarl");
+
+        Beagle grandPa = new Beagle();
+        grandPa.setName("Wuffi");
+        dad.setFather(grandPa);
+
+        Mutt snoopie = new Mutt();
+        snoopie.setName("Snoopie");
+        snoopie.setFather(dad);
+        snoopie.setMother(mum);
+
+        String json = mapper.writeObjectAsString(snoopie);
+        Assert.assertNotNull(json);
+    }
+
+
+    public static class TestWithTypeConverter implements ObjectConverter<Dog> {
+        @Override
+        public void writeJson(Dog instance, JsonbGenerator jsonGenerator) {
+            jsonGenerator.getJsonGenerator().write("//javaType", instance.getClass().getName());
+
+        }
+
+        @Override
+        public Dog fromJson(JsonbParser jsonParser, Type targetType) {
+            return null;
+        }
+    }
+
+    public static class Dog {
+        private String name;
+        private Dog father;
+        private Dog mother;
+
+        public String getName() {
+            return name;
+        }
+
+        public void setName(String name) {
+            this.name = name;
+        }
+
+        public Dog getFather() {
+            return father;
+        }
+
+        public void setFather(Dog father) {
+            this.father = father;
+        }
+
+        public Dog getMother() {
+            return mother;
+        }
+
+        public void setMother(Dog mother) {
+            this.mother = mother;
+        }
+    }
+
+    public static class Beagle extends Dog {
+    }
+
+    public static class Poodle extends Dog {
+        boolean hairCut = false;
+
+        public boolean isHairCut() {
+            return hairCut;
+        }
+
+        public void setHairCut(boolean hairCut) {
+            this.hairCut = hairCut;
+        }
+    }
+
+    public static class Mutt extends Dog {
+    }
+}
\ No newline at end of file
