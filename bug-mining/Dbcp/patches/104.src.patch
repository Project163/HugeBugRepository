diff --git a/src/main/java/org/apache/commons/dbcp2/DelegatingCallableStatement.java b/src/main/java/org/apache/commons/dbcp2/DelegatingCallableStatement.java
index c46889cd..b84f5d90 100644
--- a/src/main/java/org/apache/commons/dbcp2/DelegatingCallableStatement.java
+++ b/src/main/java/org/apache/commons/dbcp2/DelegatingCallableStatement.java
@@ -74,326 +74,325 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     /** Sets my delegate. */
     public void setDelegate(CallableStatement s) {
         super.setDelegate(s);
-        _stmt = s;
     }
 
     @Override
     public void registerOutParameter(int parameterIndex, int sqlType) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).registerOutParameter( parameterIndex,  sqlType); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter( parameterIndex,  sqlType); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void registerOutParameter(int parameterIndex, int sqlType, int scale) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).registerOutParameter( parameterIndex,  sqlType,  scale); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter( parameterIndex,  sqlType,  scale); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public boolean wasNull() throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).wasNull(); } catch (SQLException e) { handleException(e); return false; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).wasNull(); } catch (SQLException e) { handleException(e); return false; } }
 
     @Override
     public String getString(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getString( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getString( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public boolean getBoolean(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getBoolean( parameterIndex); } catch (SQLException e) { handleException(e); return false; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBoolean( parameterIndex); } catch (SQLException e) { handleException(e); return false; } }
 
     @Override
     public byte getByte(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getByte( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getByte( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
 
     @Override
     public short getShort(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getShort( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getShort( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
 
     @Override
     public int getInt(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getInt( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getInt( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
 
     @Override
     public long getLong(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getLong( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getLong( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
 
     @Override
     public float getFloat(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getFloat( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getFloat( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
 
     @Override
     public double getDouble(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getDouble( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDouble( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
 
     /** @deprecated */
     @Override
     @Deprecated
     public BigDecimal getBigDecimal(int parameterIndex, int scale) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getBigDecimal( parameterIndex,  scale); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBigDecimal( parameterIndex,  scale); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public byte[] getBytes(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getBytes( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBytes( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Date getDate(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getDate( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDate( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Time getTime(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getTime( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTime( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Timestamp getTimestamp(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getTimestamp( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTimestamp( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Object getObject(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getObject( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getObject( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public BigDecimal getBigDecimal(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getBigDecimal( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBigDecimal( parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Object getObject(int i, Map<String,Class<?>> map) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getObject( i, map); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getObject( i, map); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Ref getRef(int i) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getRef( i); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getRef( i); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Blob getBlob(int i) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getBlob( i); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBlob( i); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Clob getClob(int i) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getClob( i); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getClob( i); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Array getArray(int i) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getArray( i); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getArray( i); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Date getDate(int parameterIndex, Calendar cal) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getDate( parameterIndex,  cal); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDate( parameterIndex,  cal); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Time getTime(int parameterIndex, Calendar cal) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getTime( parameterIndex,  cal); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTime( parameterIndex,  cal); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Timestamp getTimestamp(int parameterIndex, Calendar cal) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getTimestamp( parameterIndex,  cal); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTimestamp( parameterIndex,  cal); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public void registerOutParameter(int paramIndex, int sqlType, String typeName) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).registerOutParameter( paramIndex,  sqlType,  typeName); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter( paramIndex,  sqlType,  typeName); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void registerOutParameter(String parameterName, int sqlType) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).registerOutParameter(parameterName, sqlType); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter(parameterName, sqlType); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).registerOutParameter(parameterName, sqlType, scale); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter(parameterName, sqlType, scale); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).registerOutParameter(parameterName, sqlType, typeName); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).registerOutParameter(parameterName, sqlType, typeName); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public URL getURL(int parameterIndex) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getURL(parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getURL(parameterIndex); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public void setURL(String parameterName, URL val) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setURL(parameterName, val); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setURL(parameterName, val); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setNull(String parameterName, int sqlType) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setNull(parameterName, sqlType); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setNull(parameterName, sqlType); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setBoolean(String parameterName, boolean x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setBoolean(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setBoolean(parameterName, x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setByte(String parameterName, byte x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setByte(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setByte(parameterName, x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setShort(String parameterName, short x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setShort(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setShort(parameterName, x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setInt(String parameterName, int x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setInt(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setInt(parameterName, x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setLong(String parameterName, long x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setLong(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setLong(parameterName, x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setFloat(String parameterName, float x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setFloat(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setFloat(parameterName, x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setDouble(String parameterName, double x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setDouble(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setDouble(parameterName, x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setBigDecimal(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setBigDecimal(parameterName, x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setString(String parameterName, String x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setString(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setString(parameterName, x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setBytes(String parameterName, byte [] x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setBytes(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setBytes(parameterName, x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setDate(String parameterName, Date x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setDate(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setDate(parameterName, x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setTime(String parameterName, Time x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setTime(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setTime(parameterName, x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setTimestamp(String parameterName, Timestamp x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setTimestamp(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setTimestamp(parameterName, x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setAsciiStream(String parameterName, InputStream x, int length) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setAsciiStream(parameterName, x, length); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setAsciiStream(parameterName, x, length); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setBinaryStream(String parameterName, InputStream x, int length) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setBinaryStream(parameterName, x, length); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setBinaryStream(parameterName, x, length); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setObject(parameterName, x, targetSqlType, scale); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setObject(parameterName, x, targetSqlType, scale); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setObject(String parameterName, Object x, int targetSqlType) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setObject(parameterName, x, targetSqlType); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setObject(parameterName, x, targetSqlType); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setObject(String parameterName, Object x) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setObject(parameterName, x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setObject(parameterName, x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setCharacterStream(String parameterName, Reader reader, int length) throws SQLException
-    { checkOpen(); ((CallableStatement)_stmt).setCharacterStream(parameterName, reader, length); }
+    { checkOpen(); ((CallableStatement)getDelegate()).setCharacterStream(parameterName, reader, length); }
 
     @Override
     public void setDate(String parameterName, Date x, Calendar cal) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setDate(parameterName, x, cal); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setDate(parameterName, x, cal); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setTime(String parameterName, Time x, Calendar cal) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setTime(parameterName, x, cal); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setTime(parameterName, x, cal); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setTimestamp(String parameterName, Timestamp x, Calendar cal) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setTimestamp(parameterName, x, cal); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setTimestamp(parameterName, x, cal); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setNull(String parameterName, int sqlType, String typeName) throws SQLException
-    { checkOpen(); try { ((CallableStatement)_stmt).setNull(parameterName, sqlType, typeName); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((CallableStatement)getDelegate()).setNull(parameterName, sqlType, typeName); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public String getString(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getString(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getString(parameterName); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public boolean getBoolean(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getBoolean(parameterName); } catch (SQLException e) { handleException(e); return false; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBoolean(parameterName); } catch (SQLException e) { handleException(e); return false; } }
 
     @Override
     public byte getByte(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getByte(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getByte(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
 
     @Override
     public short getShort(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getShort(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getShort(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
 
     @Override
     public int getInt(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getInt(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getInt(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
 
     @Override
     public long getLong(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getLong(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getLong(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
 
     @Override
     public float getFloat(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getFloat(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getFloat(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
 
     @Override
     public double getDouble(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getDouble(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDouble(parameterName); } catch (SQLException e) { handleException(e); return 0; } }
 
     @Override
     public byte[] getBytes(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getBytes(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBytes(parameterName); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Date getDate(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getDate(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDate(parameterName); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Time getTime(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getTime(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTime(parameterName); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Timestamp getTimestamp(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getTimestamp(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTimestamp(parameterName); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Object getObject(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getObject(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getObject(parameterName); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public BigDecimal getBigDecimal(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getBigDecimal(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBigDecimal(parameterName); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Object getObject(String parameterName, Map<String,Class<?>> map) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getObject(parameterName, map); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getObject(parameterName, map); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Ref getRef(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getRef(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getRef(parameterName); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Blob getBlob(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getBlob(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getBlob(parameterName); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Clob getClob(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getClob(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getClob(parameterName); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Array getArray(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getArray(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getArray(parameterName); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Date getDate(String parameterName, Calendar cal) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getDate(parameterName, cal); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getDate(parameterName, cal); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Time getTime(String parameterName, Calendar cal) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getTime(parameterName, cal); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTime(parameterName, cal); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getTimestamp(parameterName, cal); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getTimestamp(parameterName, cal); } catch (SQLException e) { handleException(e); return null; } }
 
     @Override
     public URL getURL(String parameterName) throws SQLException
-    { checkOpen(); try { return ((CallableStatement)_stmt).getURL(parameterName); } catch (SQLException e) { handleException(e); return null; } }
+    { checkOpen(); try { return ((CallableStatement)getDelegate()).getURL(parameterName); } catch (SQLException e) { handleException(e); return null; } }
 
 /* JDBC_4_ANT_KEY_BEGIN */
 
@@ -401,7 +400,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public RowId getRowId(int parameterIndex) throws SQLException {
         checkOpen();
         try {
-            return ((CallableStatement)_stmt).getRowId(parameterIndex);
+            return ((CallableStatement)getDelegate()).getRowId(parameterIndex);
         }
         catch (SQLException e) {
             handleException(e);
@@ -413,7 +412,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public RowId getRowId(String parameterName) throws SQLException {
         checkOpen();
         try {
-            return ((CallableStatement)_stmt).getRowId(parameterName);
+            return ((CallableStatement)getDelegate()).getRowId(parameterName);
         }
         catch (SQLException e) {
             handleException(e);
@@ -425,7 +424,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setRowId(String parameterName, RowId value) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setRowId(parameterName, value);
+            ((CallableStatement)getDelegate()).setRowId(parameterName, value);
         }
         catch (SQLException e) {
             handleException(e);
@@ -436,7 +435,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setNString(String parameterName, String value) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setNString(parameterName, value);
+            ((CallableStatement)getDelegate()).setNString(parameterName, value);
         }
         catch (SQLException e) {
             handleException(e);
@@ -447,7 +446,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setNCharacterStream(String parameterName, Reader reader, long length) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setNCharacterStream(parameterName, reader, length);
+            ((CallableStatement)getDelegate()).setNCharacterStream(parameterName, reader, length);
         }
         catch (SQLException e) {
             handleException(e);
@@ -458,7 +457,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setNClob(String parameterName, NClob value) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setNClob(parameterName, value);
+            ((CallableStatement)getDelegate()).setNClob(parameterName, value);
         }
         catch (SQLException e) {
             handleException(e);
@@ -469,7 +468,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setClob(String parameterName, Reader reader, long length) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setClob(parameterName, reader, length);
+            ((CallableStatement)getDelegate()).setClob(parameterName, reader, length);
         }
         catch (SQLException e) {
             handleException(e);
@@ -480,7 +479,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setBlob(String parameterName, InputStream inputStream, long length) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setBlob(parameterName, inputStream, length);
+            ((CallableStatement)getDelegate()).setBlob(parameterName, inputStream, length);
         }
         catch (SQLException e) {
             handleException(e);
@@ -491,7 +490,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setNClob(String parameterName, Reader reader, long length) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setNClob(parameterName, reader, length);
+            ((CallableStatement)getDelegate()).setNClob(parameterName, reader, length);
         }
         catch (SQLException e) {
             handleException(e);
@@ -502,7 +501,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public NClob getNClob(int parameterIndex) throws SQLException {
         checkOpen();
         try {
-            return ((CallableStatement)_stmt).getNClob(parameterIndex);
+            return ((CallableStatement)getDelegate()).getNClob(parameterIndex);
         }
         catch (SQLException e) {
             handleException(e);
@@ -514,7 +513,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public NClob getNClob(String parameterName) throws SQLException {
         checkOpen();
         try {
-            return ((CallableStatement)_stmt).getNClob(parameterName);
+            return ((CallableStatement)getDelegate()).getNClob(parameterName);
         }
         catch (SQLException e) {
             handleException(e);
@@ -526,7 +525,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setSQLXML(String parameterName, SQLXML value) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setSQLXML(parameterName, value);
+            ((CallableStatement)getDelegate()).setSQLXML(parameterName, value);
         }
         catch (SQLException e) {
             handleException(e);
@@ -537,7 +536,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public SQLXML getSQLXML(int parameterIndex) throws SQLException {
         checkOpen();
         try {
-            return ((CallableStatement)_stmt).getSQLXML(parameterIndex);
+            return ((CallableStatement)getDelegate()).getSQLXML(parameterIndex);
         }
         catch (SQLException e) {
             handleException(e);
@@ -549,7 +548,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public SQLXML getSQLXML(String parameterName) throws SQLException {
         checkOpen();
         try {
-            return ((CallableStatement)_stmt).getSQLXML(parameterName);
+            return ((CallableStatement)getDelegate()).getSQLXML(parameterName);
         }
         catch (SQLException e) {
             handleException(e);
@@ -561,7 +560,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public String getNString(int parameterIndex) throws SQLException {
         checkOpen();
         try {
-            return ((CallableStatement)_stmt).getNString(parameterIndex);
+            return ((CallableStatement)getDelegate()).getNString(parameterIndex);
         }
         catch (SQLException e) {
             handleException(e);
@@ -573,7 +572,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public String getNString(String parameterName) throws SQLException {
         checkOpen();
         try {
-            return ((CallableStatement)_stmt).getNString(parameterName);
+            return ((CallableStatement)getDelegate()).getNString(parameterName);
         }
         catch (SQLException e) {
             handleException(e);
@@ -585,7 +584,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public Reader getNCharacterStream(int parameterIndex) throws SQLException {
         checkOpen();
         try {
-            return ((CallableStatement)_stmt).getNCharacterStream(parameterIndex);
+            return ((CallableStatement)getDelegate()).getNCharacterStream(parameterIndex);
         }
         catch (SQLException e) {
             handleException(e);
@@ -597,7 +596,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public Reader getNCharacterStream(String parameterName) throws SQLException {
         checkOpen();
         try {
-            return ((CallableStatement)_stmt).getNCharacterStream(parameterName);
+            return ((CallableStatement)getDelegate()).getNCharacterStream(parameterName);
         }
         catch (SQLException e) {
             handleException(e);
@@ -609,7 +608,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public Reader getCharacterStream(int parameterIndex) throws SQLException {
         checkOpen();
         try {
-            return ((CallableStatement)_stmt).getCharacterStream(parameterIndex);
+            return ((CallableStatement)getDelegate()).getCharacterStream(parameterIndex);
         }
         catch (SQLException e) {
             handleException(e);
@@ -621,7 +620,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public Reader getCharacterStream(String parameterName) throws SQLException {
         checkOpen();
         try {
-            return ((CallableStatement)_stmt).getCharacterStream(parameterName);
+            return ((CallableStatement)getDelegate()).getCharacterStream(parameterName);
         }
         catch (SQLException e) {
             handleException(e);
@@ -633,7 +632,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setBlob(String parameterName, Blob blob) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setBlob(parameterName, blob);
+            ((CallableStatement)getDelegate()).setBlob(parameterName, blob);
         }
         catch (SQLException e) {
             handleException(e);
@@ -644,7 +643,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setClob(String parameterName, Clob clob) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setClob(parameterName, clob);
+            ((CallableStatement)getDelegate()).setClob(parameterName, clob);
         }
         catch (SQLException e) {
             handleException(e);
@@ -655,7 +654,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setAsciiStream(String parameterName, InputStream inputStream, long length) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setAsciiStream(parameterName, inputStream, length);
+            ((CallableStatement)getDelegate()).setAsciiStream(parameterName, inputStream, length);
         }
         catch (SQLException e) {
             handleException(e);
@@ -666,7 +665,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setBinaryStream(String parameterName, InputStream inputStream, long length) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setBinaryStream(parameterName, inputStream, length);
+            ((CallableStatement)getDelegate()).setBinaryStream(parameterName, inputStream, length);
         }
         catch (SQLException e) {
             handleException(e);
@@ -677,7 +676,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setCharacterStream(String parameterName, Reader reader, long length) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setCharacterStream(parameterName, reader, length);
+            ((CallableStatement)getDelegate()).setCharacterStream(parameterName, reader, length);
         }
         catch (SQLException e) {
             handleException(e);
@@ -688,7 +687,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setAsciiStream(String parameterName, InputStream inputStream) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setAsciiStream(parameterName, inputStream);
+            ((CallableStatement)getDelegate()).setAsciiStream(parameterName, inputStream);
         }
         catch (SQLException e) {
             handleException(e);
@@ -699,7 +698,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setBinaryStream(String parameterName, InputStream inputStream) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setBinaryStream(parameterName, inputStream);
+            ((CallableStatement)getDelegate()).setBinaryStream(parameterName, inputStream);
         }
         catch (SQLException e) {
             handleException(e);
@@ -710,7 +709,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setCharacterStream(String parameterName, Reader reader) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setCharacterStream(parameterName, reader);
+            ((CallableStatement)getDelegate()).setCharacterStream(parameterName, reader);
         }
         catch (SQLException e) {
             handleException(e);
@@ -721,7 +720,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setNCharacterStream(String parameterName, Reader reader) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setNCharacterStream(parameterName, reader);
+            ((CallableStatement)getDelegate()).setNCharacterStream(parameterName, reader);
         }
         catch (SQLException e) {
             handleException(e);
@@ -732,7 +731,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setClob(String parameterName, Reader reader) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setClob(parameterName, reader);
+            ((CallableStatement)getDelegate()).setClob(parameterName, reader);
         }
         catch (SQLException e) {
             handleException(e);
@@ -743,7 +742,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setBlob(String parameterName, InputStream inputStream) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setBlob(parameterName, inputStream);
+            ((CallableStatement)getDelegate()).setBlob(parameterName, inputStream);
         }
         catch (SQLException e) {
             handleException(e);
@@ -754,7 +753,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public void setNClob(String parameterName, Reader reader) throws SQLException {
         checkOpen();
         try {
-            ((CallableStatement)_stmt).setNClob(parameterName, reader);
+            ((CallableStatement)getDelegate()).setNClob(parameterName, reader);
         }
         catch (SQLException e) {
             handleException(e);
@@ -767,7 +766,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
             throws SQLException {
         checkOpen();
         try {
-            return ((CallableStatement)_stmt).getObject(parameterIndex, type);
+            return ((CallableStatement)getDelegate()).getObject(parameterIndex, type);
 }
         catch (SQLException e) {
             handleException(e);
@@ -780,7 +779,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
             throws SQLException {
         checkOpen();
         try {
-            return ((CallableStatement)_stmt).getObject(parameterName, type);
+            return ((CallableStatement)getDelegate()).getObject(parameterName, type);
         }
         catch (SQLException e) {
             handleException(e);
diff --git a/src/main/java/org/apache/commons/dbcp2/DelegatingPreparedStatement.java b/src/main/java/org/apache/commons/dbcp2/DelegatingPreparedStatement.java
index 9e5e3600..e49c201f 100644
--- a/src/main/java/org/apache/commons/dbcp2/DelegatingPreparedStatement.java
+++ b/src/main/java/org/apache/commons/dbcp2/DelegatingPreparedStatement.java
@@ -73,17 +73,16 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     /** Sets my delegate. */
     public void setDelegate(PreparedStatement s) {
         super.setDelegate(s);
-        _stmt = s;
     }
 
     @Override
     public ResultSet executeQuery() throws SQLException {
         checkOpen();
-        if (_conn != null) {
-            _conn.setLastUsed();
+        if (getConnectionInternal() != null) {
+            getConnectionInternal().setLastUsed();
         }
         try {
-            return DelegatingResultSet.wrapResultSet(this,((PreparedStatement)_stmt).executeQuery());
+            return DelegatingResultSet.wrapResultSet(this,((PreparedStatement)getDelegate()).executeQuery());
         }
         catch (SQLException e) {
             handleException(e);
@@ -94,11 +93,11 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     @Override
     public int executeUpdate() throws SQLException {
         checkOpen();
-        if (_conn != null) {
-            _conn.setLastUsed();
+        if (getConnectionInternal() != null) {
+            getConnectionInternal().setLastUsed();
         }
         try {
-            return ((PreparedStatement) _stmt).executeUpdate();
+            return ((PreparedStatement) getDelegate()).executeUpdate();
         } catch (SQLException e) {
             handleException(e);
             return 0;
@@ -107,98 +106,98 @@ public class DelegatingPreparedStatement extends DelegatingStatement
 
     @Override
     public void setNull(int parameterIndex, int sqlType) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setNull(parameterIndex,sqlType); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setNull(parameterIndex,sqlType); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setBoolean(int parameterIndex, boolean x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setBoolean(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setBoolean(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setByte(int parameterIndex, byte x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setByte(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setByte(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setShort(int parameterIndex, short x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setShort(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setShort(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setInt(int parameterIndex, int x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setInt(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setInt(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setLong(int parameterIndex, long x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setLong(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setLong(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setFloat(int parameterIndex, float x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setFloat(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setFloat(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setDouble(int parameterIndex, double x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setDouble(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setDouble(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setBigDecimal(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setBigDecimal(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setString(int parameterIndex, String x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setString(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setString(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setBytes(int parameterIndex, byte[] x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setBytes(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setBytes(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setDate(int parameterIndex, java.sql.Date x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setDate(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setDate(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setTime(int parameterIndex, java.sql.Time x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setTime(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setTime(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setTimestamp(int parameterIndex, java.sql.Timestamp x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setTimestamp(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setTimestamp(parameterIndex,x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setAsciiStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setAsciiStream(parameterIndex,x,length); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setAsciiStream(parameterIndex,x,length); } catch (SQLException e) { handleException(e); } }
 
     /** @deprecated */
     @Deprecated
     @Override
     public void setUnicodeStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setUnicodeStream(parameterIndex,x,length); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setUnicodeStream(parameterIndex,x,length); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setBinaryStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setBinaryStream(parameterIndex,x,length); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setBinaryStream(parameterIndex,x,length); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void clearParameters() throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).clearParameters(); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).clearParameters(); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setObject(parameterIndex, x, targetSqlType, scale); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setObject(parameterIndex, x, targetSqlType, scale); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setObject(parameterIndex, x, targetSqlType); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setObject(parameterIndex, x, targetSqlType); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setObject(int parameterIndex, Object x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setObject(parameterIndex, x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setObject(parameterIndex, x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public boolean execute() throws SQLException {
         checkOpen();
-        if (_conn != null) {
-            _conn.setLastUsed();
+        if (getConnectionInternal() != null) {
+            getConnectionInternal().setLastUsed();
         }
         try {
-            return ((PreparedStatement) _stmt).execute();
+            return ((PreparedStatement) getDelegate()).execute();
         } catch (SQLException e) {
             handleException(e);
             return false;
@@ -207,47 +206,47 @@ public class DelegatingPreparedStatement extends DelegatingStatement
 
     @Override
     public void addBatch() throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).addBatch(); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).addBatch(); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setCharacterStream(int parameterIndex, java.io.Reader reader, int length) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setCharacterStream(parameterIndex,reader,length); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setCharacterStream(parameterIndex,reader,length); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setRef(int i, Ref x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setRef(i,x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setRef(i,x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setBlob(int i, Blob x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setBlob(i,x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setBlob(i,x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setClob(int i, Clob x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setClob(i,x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setClob(i,x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setArray(int i, Array x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setArray(i,x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setArray(i,x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public ResultSetMetaData getMetaData() throws SQLException
-    { checkOpen(); try { return ((PreparedStatement)_stmt).getMetaData(); } catch (SQLException e) { handleException(e); throw new AssertionError(); } }
+    { checkOpen(); try { return ((PreparedStatement)getDelegate()).getMetaData(); } catch (SQLException e) { handleException(e); throw new AssertionError(); } }
 
     @Override
     public void setDate(int parameterIndex, java.sql.Date x, Calendar cal) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setDate(parameterIndex,x,cal); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setDate(parameterIndex,x,cal); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setTime(int parameterIndex, java.sql.Time x, Calendar cal) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setTime(parameterIndex,x,cal); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setTime(parameterIndex,x,cal); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setTimestamp(int parameterIndex, java.sql.Timestamp x, Calendar cal) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setTimestamp(parameterIndex,x,cal); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setTimestamp(parameterIndex,x,cal); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public void setNull(int paramIndex, int sqlType, String typeName) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setNull(paramIndex,sqlType,typeName); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setNull(paramIndex,sqlType,typeName); } catch (SQLException e) { handleException(e); } }
 
     /**
      * Returns a String representation of this object.
@@ -257,16 +256,16 @@ public class DelegatingPreparedStatement extends DelegatingStatement
      */
     @Override
     public String toString() {
-    return _stmt.toString();
+    return getDelegate().toString();
     }
 
     @Override
     public void setURL(int parameterIndex, java.net.URL x) throws SQLException
-    { checkOpen(); try { ((PreparedStatement)_stmt).setURL(parameterIndex, x); } catch (SQLException e) { handleException(e); } }
+    { checkOpen(); try { ((PreparedStatement)getDelegate()).setURL(parameterIndex, x); } catch (SQLException e) { handleException(e); } }
 
     @Override
     public java.sql.ParameterMetaData getParameterMetaData() throws SQLException
-    { checkOpen(); try { return ((PreparedStatement)_stmt).getParameterMetaData(); } catch (SQLException e) { handleException(e); throw new AssertionError(); } }
+    { checkOpen(); try { return ((PreparedStatement)getDelegate()).getParameterMetaData(); } catch (SQLException e) { handleException(e); throw new AssertionError(); } }
 
 /* JDBC_4_ANT_KEY_BEGIN */
 
@@ -274,7 +273,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setRowId(int parameterIndex, RowId value) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setRowId(parameterIndex, value);
+            ((PreparedStatement)getDelegate()).setRowId(parameterIndex, value);
         }
         catch (SQLException e) {
             handleException(e);
@@ -285,7 +284,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setNString(int parameterIndex, String value) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setNString(parameterIndex, value);
+            ((PreparedStatement)getDelegate()).setNString(parameterIndex, value);
         }
         catch (SQLException e) {
             handleException(e);
@@ -296,7 +295,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setNCharacterStream(parameterIndex, value, length);
+            ((PreparedStatement)getDelegate()).setNCharacterStream(parameterIndex, value, length);
         }
         catch (SQLException e) {
             handleException(e);
@@ -307,7 +306,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setNClob(int parameterIndex, NClob value) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setNClob(parameterIndex, value);
+            ((PreparedStatement)getDelegate()).setNClob(parameterIndex, value);
         }
         catch (SQLException e) {
             handleException(e);
@@ -318,7 +317,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setClob(parameterIndex, reader, length);
+            ((PreparedStatement)getDelegate()).setClob(parameterIndex, reader, length);
         }
         catch (SQLException e) {
             handleException(e);
@@ -329,7 +328,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setBlob(parameterIndex, inputStream, length);
+            ((PreparedStatement)getDelegate()).setBlob(parameterIndex, inputStream, length);
         }
         catch (SQLException e) {
             handleException(e);
@@ -340,7 +339,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setNClob(parameterIndex, reader, length);
+            ((PreparedStatement)getDelegate()).setNClob(parameterIndex, reader, length);
         }
         catch (SQLException e) {
             handleException(e);
@@ -351,7 +350,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setSQLXML(int parameterIndex, SQLXML value) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setSQLXML(parameterIndex, value);
+            ((PreparedStatement)getDelegate()).setSQLXML(parameterIndex, value);
         }
         catch (SQLException e) {
             handleException(e);
@@ -362,7 +361,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setAsciiStream(int parameterIndex, InputStream inputStream, long length) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setAsciiStream(parameterIndex, inputStream, length);
+            ((PreparedStatement)getDelegate()).setAsciiStream(parameterIndex, inputStream, length);
         }
         catch (SQLException e) {
             handleException(e);
@@ -373,7 +372,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setBinaryStream(int parameterIndex, InputStream inputStream, long length) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setBinaryStream(parameterIndex, inputStream, length);
+            ((PreparedStatement)getDelegate()).setBinaryStream(parameterIndex, inputStream, length);
         }
         catch (SQLException e) {
             handleException(e);
@@ -384,7 +383,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setCharacterStream(parameterIndex, reader, length);
+            ((PreparedStatement)getDelegate()).setCharacterStream(parameterIndex, reader, length);
         }
         catch (SQLException e) {
             handleException(e);
@@ -395,7 +394,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setAsciiStream(int parameterIndex, InputStream inputStream) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setAsciiStream(parameterIndex, inputStream);
+            ((PreparedStatement)getDelegate()).setAsciiStream(parameterIndex, inputStream);
         }
         catch (SQLException e) {
             handleException(e);
@@ -406,7 +405,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setBinaryStream(int parameterIndex, InputStream inputStream) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setBinaryStream(parameterIndex, inputStream);
+            ((PreparedStatement)getDelegate()).setBinaryStream(parameterIndex, inputStream);
         }
         catch (SQLException e) {
             handleException(e);
@@ -417,7 +416,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setCharacterStream(parameterIndex, reader);
+            ((PreparedStatement)getDelegate()).setCharacterStream(parameterIndex, reader);
         }
         catch (SQLException e) {
             handleException(e);
@@ -428,7 +427,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setNCharacterStream(int parameterIndex, Reader reader) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setNCharacterStream(parameterIndex, reader);
+            ((PreparedStatement)getDelegate()).setNCharacterStream(parameterIndex, reader);
         }
         catch (SQLException e) {
             handleException(e);
@@ -439,7 +438,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setClob(int parameterIndex, Reader reader) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setClob(parameterIndex, reader);
+            ((PreparedStatement)getDelegate()).setClob(parameterIndex, reader);
         }
         catch (SQLException e) {
             handleException(e);
@@ -450,7 +449,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setBlob(parameterIndex, inputStream);
+            ((PreparedStatement)getDelegate()).setBlob(parameterIndex, inputStream);
         }
         catch (SQLException e) {
             handleException(e);
@@ -461,7 +460,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setNClob(int parameterIndex, Reader reader) throws SQLException {
         checkOpen();
         try {
-            ((PreparedStatement)_stmt).setNClob(parameterIndex, reader);
+            ((PreparedStatement)getDelegate()).setNClob(parameterIndex, reader);
         }
         catch (SQLException e) {
             handleException(e);
diff --git a/src/main/java/org/apache/commons/dbcp2/DelegatingStatement.java b/src/main/java/org/apache/commons/dbcp2/DelegatingStatement.java
index e9a91f4d..7eab1ce4 100644
--- a/src/main/java/org/apache/commons/dbcp2/DelegatingStatement.java
+++ b/src/main/java/org/apache/commons/dbcp2/DelegatingStatement.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.commons.dbcp2;
 
 import java.sql.Connection;
@@ -45,9 +44,9 @@ import java.util.List;
  */
 public class DelegatingStatement extends AbandonedTrace implements Statement {
     /** My delegate. */
-    protected Statement _stmt = null;
+    private Statement _stmt = null;
     /** The connection that created me. **/
-    protected DelegatingConnection<?> _conn = null;
+    private DelegatingConnection<?> _conn = null;
 
     /**
      * Create a wrapper for the Statement which traces this
@@ -139,7 +138,15 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
         _stmt = s;
     }
 
-    protected boolean _closed = false;
+    private boolean _closed = false;
+
+    protected boolean isClosedInternal() {
+        return _closed;
+    }
+
+    protected void setClosedInternal(boolean closed) {
+        this._closed = closed;
+    }
 
     protected void checkOpen() throws SQLException {
         if(isClosed()) {
@@ -212,7 +219,11 @@ public class DelegatingStatement extends AbandonedTrace implements Statement {
     @Override
     public Connection getConnection() throws SQLException {
         checkOpen();
-        return _conn; // return the delegating connection that created this
+        return getConnectionInternal(); // return the delegating connection that created this
+    }
+
+    protected DelegatingConnection<?> getConnectionInternal() {
+        return _conn;
     }
 
     @Override
diff --git a/src/main/java/org/apache/commons/dbcp2/PoolableCallableStatement.java b/src/main/java/org/apache/commons/dbcp2/PoolableCallableStatement.java
index 540213cc..3f356711 100644
--- a/src/main/java/org/apache/commons/dbcp2/PoolableCallableStatement.java
+++ b/src/main/java/org/apache/commons/dbcp2/PoolableCallableStatement.java
@@ -64,8 +64,8 @@ public class PoolableCallableStatement extends DelegatingCallableStatement {
 
         // Remove from trace now because this statement will be
         // added by the activate method.
-        if(_conn != null) {
-            _conn.removeTrace(this);
+        if(getConnectionInternal() != null) {
+            getConnectionInternal().removeTrace(this);
         }
     }
 
@@ -94,9 +94,9 @@ public class PoolableCallableStatement extends DelegatingCallableStatement {
      */
     @Override
     protected void activate() throws SQLException {
-        _closed = false;
-        if( _conn != null ) {
-            _conn.addTrace( this );
+        setClosedInternal(false);
+        if( getConnectionInternal() != null ) {
+            getConnectionInternal().addTrace( this );
         }
         super.activate();
     }
@@ -107,9 +107,9 @@ public class PoolableCallableStatement extends DelegatingCallableStatement {
      */
     @Override
     protected void passivate() throws SQLException {
-        _closed = true;
-        if( _conn != null ) {
-            _conn.removeTrace(this);
+        setClosedInternal(true);
+        if( getConnectionInternal() != null ) {
+            getConnectionInternal().removeTrace(this);
         }
 
         // The JDBC spec requires that a statment close any open
diff --git a/src/main/java/org/apache/commons/dbcp2/PoolablePreparedStatement.java b/src/main/java/org/apache/commons/dbcp2/PoolablePreparedStatement.java
index fba134de..70422b61 100644
--- a/src/main/java/org/apache/commons/dbcp2/PoolablePreparedStatement.java
+++ b/src/main/java/org/apache/commons/dbcp2/PoolablePreparedStatement.java
@@ -68,8 +68,8 @@ public class PoolablePreparedStatement<K, S extends PoolablePreparedStatement<K,
 
         // Remove from trace now because this statement will be
         // added by the activate method.
-        if(_conn != null) {
-            _conn.removeTrace(this);
+        if(getConnectionInternal() != null) {
+            getConnectionInternal().removeTrace(this);
         }
     }
 
@@ -112,18 +112,18 @@ public class PoolablePreparedStatement<K, S extends PoolablePreparedStatement<K,
 
     @Override
     public void activate() throws SQLException{
-        _closed = false;
-        if(_conn != null) {
-            _conn.addTrace(this);
+        setClosedInternal(false);
+        if(getConnectionInternal() != null) {
+            getConnectionInternal().addTrace(this);
         }
         super.activate();
     }
 
     @Override
     public void passivate() throws SQLException {
-        _closed = true;
-        if(_conn != null) {
-            _conn.removeTrace(this);
+        setClosedInternal(true);
+        if(getConnectionInternal() != null) {
+            getConnectionInternal().removeTrace(this);
         }
 
         // The JDBC spec requires that a statement closes any open
