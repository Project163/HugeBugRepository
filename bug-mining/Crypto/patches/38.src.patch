diff --git a/src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java b/src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java
index 655f3b58..334d391a 100644
--- a/src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java
@@ -356,7 +356,7 @@ public void reset() throws IOException {
     /**
      * Overrides the {@link InputStream#markSupported()}.
      *
-     * @return false,the {@link CTRCryptoInputStream} don't support the mark
+     * @return false,the {@link CtrCryptoInputStream} don't support the mark
      *         method.
      */
     @Override
diff --git a/src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java b/src/main/java/org/apache/commons/crypto/stream/CtrCryptoInputStream.java
similarity index 93%
rename from src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java
rename to src/main/java/org/apache/commons/crypto/stream/CtrCryptoInputStream.java
index 6c6dacc4..56ad048a 100644
--- a/src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/CtrCryptoInputStream.java
@@ -39,7 +39,7 @@
 
 /**
  * <p>
- * CTRCryptoInputStream decrypts data. AES CTR mode is required in order to
+ * CtrCryptoInputStream decrypts data. AES CTR mode is required in order to
  * ensure that the plain text and cipher text have a 1:1 mapping. CTR crypto
  * stream has stream characteristic which is useful for implement features like
  * random seek. The decryption is buffer based. The key points of the decryption
@@ -51,7 +51,7 @@
  * </p>
  * The underlying stream offset is maintained as state. It is not thread-safe.
  */
-public class CTRCryptoInputStream extends CryptoInputStream {
+public class CtrCryptoInputStream extends CryptoInputStream {
     /**
      * Underlying stream offset
      */
@@ -88,7 +88,7 @@ public class CTRCryptoInputStream extends CryptoInputStream {
     private static final int AES_BLOCK_SIZE = 16;
 
     /**
-     * Constructs a {@link CTRCryptoInputStream}.
+     * Constructs a {@link CtrCryptoInputStream}.
      *
      * @param props The <code>Properties</code> class represents a set of
      *        properties.
@@ -97,13 +97,13 @@ public class CTRCryptoInputStream extends CryptoInputStream {
      * @param iv Initialization vector for the cipher.
      * @throws IOException if an I/O error occurs.
      */
-    public CTRCryptoInputStream(Properties props, InputStream in, byte[] key,
+    public CtrCryptoInputStream(Properties props, InputStream in, byte[] key,
             byte[] iv) throws IOException {
         this(props, in, key, iv, 0);
     }
 
     /**
-     * Constructs a {@link CTRCryptoInputStream}.
+     * Constructs a {@link CtrCryptoInputStream}.
      *
      * @param props The <code>Properties</code> class represents a set of
      *        properties.
@@ -112,13 +112,13 @@ public CTRCryptoInputStream(Properties props, InputStream in, byte[] key,
      * @param iv Initialization vector for the cipher.
      * @throws IOException if an I/O error occurs.
      */
-    public CTRCryptoInputStream(Properties props, ReadableByteChannel in,
+    public CtrCryptoInputStream(Properties props, ReadableByteChannel in,
             byte[] key, byte[] iv) throws IOException {
         this(props, in, key, iv, 0);
     }
 
     /**
-     * Constructs a {@link CTRCryptoInputStream}.
+     * Constructs a {@link CtrCryptoInputStream}.
      *
      * @param in the input stream.
      * @param cipher the CryptoCipher instance.
@@ -127,13 +127,13 @@ public CTRCryptoInputStream(Properties props, ReadableByteChannel in,
      * @param iv Initialization vector for the cipher.
      * @throws IOException if an I/O error occurs.
      */
-    protected CTRCryptoInputStream(InputStream in, CryptoCipher cipher,
+    protected CtrCryptoInputStream(InputStream in, CryptoCipher cipher,
             int bufferSize, byte[] key, byte[] iv) throws IOException {
         this(in, cipher, bufferSize, key, iv, 0);
     }
 
     /**
-     * Constructs a {@link CTRCryptoInputStream}.
+     * Constructs a {@link CtrCryptoInputStream}.
      *
      * @param in the ReadableByteChannel instance.
      * @param cipher the cipher instance.
@@ -142,13 +142,13 @@ protected CTRCryptoInputStream(InputStream in, CryptoCipher cipher,
      * @param iv Initialization vector for the cipher.
      * @throws IOException if an I/O error occurs.
      */
-    protected CTRCryptoInputStream(ReadableByteChannel in, CryptoCipher cipher,
+    protected CtrCryptoInputStream(ReadableByteChannel in, CryptoCipher cipher,
             int bufferSize, byte[] key, byte[] iv) throws IOException {
         this(in, cipher, bufferSize, key, iv, 0);
     }
 
     /**
-     * Constructs a {@link CTRCryptoInputStream}.
+     * Constructs a {@link CtrCryptoInputStream}.
      *
      * @param input the input data.
      * @param cipher the CryptoCipher instance.
@@ -157,13 +157,13 @@ protected CTRCryptoInputStream(ReadableByteChannel in, CryptoCipher cipher,
      * @param iv Initialization vector for the cipher.
      * @throws IOException if an I/O error occurs.
      */
-    protected CTRCryptoInputStream(Input input, CryptoCipher cipher,
+    protected CtrCryptoInputStream(Input input, CryptoCipher cipher,
             int bufferSize, byte[] key, byte[] iv) throws IOException {
         this(input, cipher, bufferSize, key, iv, 0);
     }
 
     /**
-     * Constructs a {@link CTRCryptoInputStream}.
+     * Constructs a {@link CtrCryptoInputStream}.
      *
      * @param props The <code>Properties</code> class represents a set of
      *        properties.
@@ -173,7 +173,7 @@ protected CTRCryptoInputStream(Input input, CryptoCipher cipher,
      * @param streamOffset the start offset in the stream.
      * @throws IOException if an I/O error occurs.
      */
-    public CTRCryptoInputStream(Properties props, InputStream in, byte[] key,
+    public CtrCryptoInputStream(Properties props, InputStream in, byte[] key,
             byte[] iv, long streamOffset) throws IOException {
         this(in, Utils.getCipherInstance(
                 "AES/CTR/NoPadding", props),
@@ -181,7 +181,7 @@ public CTRCryptoInputStream(Properties props, InputStream in, byte[] key,
     }
 
     /**
-     * Constructs a {@link CTRCryptoInputStream}.
+     * Constructs a {@link CtrCryptoInputStream}.
      *
      * @param props The <code>Properties</code> class represents a set of
      *        properties.
@@ -191,7 +191,7 @@ public CTRCryptoInputStream(Properties props, InputStream in, byte[] key,
      * @param streamOffset the start offset in the stream.
      * @throws IOException if an I/O error occurs.
      */
-    public CTRCryptoInputStream(Properties props, ReadableByteChannel in,
+    public CtrCryptoInputStream(Properties props, ReadableByteChannel in,
             byte[] key, byte[] iv, long streamOffset) throws IOException {
         this(in, Utils.getCipherInstance(
                 "AES/CTR/NoPadding", props),
@@ -199,7 +199,7 @@ public CTRCryptoInputStream(Properties props, ReadableByteChannel in,
     }
 
     /**
-     * Constructs a {@link CTRCryptoInputStream}.
+     * Constructs a {@link CtrCryptoInputStream}.
      *
      * @param in the InputStream instance.
      * @param cipher the CryptoCipher instance.
@@ -209,7 +209,7 @@ public CTRCryptoInputStream(Properties props, ReadableByteChannel in,
      * @param streamOffset the start offset in the stream.
      * @throws IOException if an I/O error occurs.
      */
-    protected CTRCryptoInputStream(InputStream in, CryptoCipher cipher,
+    protected CtrCryptoInputStream(InputStream in, CryptoCipher cipher,
             int bufferSize, byte[] key, byte[] iv, long streamOffset)
             throws IOException {
         this(new StreamInput(in, bufferSize), cipher, bufferSize, key, iv,
@@ -217,7 +217,7 @@ protected CTRCryptoInputStream(InputStream in, CryptoCipher cipher,
     }
 
     /**
-     * Constructs a {@link CTRCryptoInputStream}.
+     * Constructs a {@link CtrCryptoInputStream}.
      *
      * @param in the ReadableByteChannel instance.
      * @param cipher the CryptoCipher instance.
@@ -227,14 +227,14 @@ protected CTRCryptoInputStream(InputStream in, CryptoCipher cipher,
      * @param streamOffset the start offset in the stream.
      * @throws IOException if an I/O error occurs.
      */
-    protected CTRCryptoInputStream(ReadableByteChannel in, CryptoCipher cipher,
+    protected CtrCryptoInputStream(ReadableByteChannel in, CryptoCipher cipher,
             int bufferSize, byte[] key, byte[] iv, long streamOffset)
             throws IOException {
         this(new ChannelInput(in), cipher, bufferSize, key, iv, streamOffset);
     }
 
     /**
-     * Constructs a {@link CTRCryptoInputStream}.
+     * Constructs a {@link CtrCryptoInputStream}.
      *
      * @param input the input data.
      * @param cipher the CryptoCipher instance.
@@ -244,7 +244,7 @@ protected CTRCryptoInputStream(ReadableByteChannel in, CryptoCipher cipher,
      * @param streamOffset the start offset in the stream.
      * @throws IOException if an I/O error occurs.
      */
-    protected CTRCryptoInputStream(Input input, CryptoCipher cipher,
+    protected CtrCryptoInputStream(Input input, CryptoCipher cipher,
             int bufferSize, byte[] key, byte[] iv, long streamOffset)
             throws IOException {
         super(input, cipher, bufferSize, new SecretKeySpec(key, "AES"),
@@ -297,7 +297,7 @@ public long skip(long n) throws IOException {
     }
 
     /**
-     * Overrides the {@link CTRCryptoInputStream#read(ByteBuffer)}. Reads a
+     * Overrides the {@link CtrCryptoInputStream#read(ByteBuffer)}. Reads a
      * sequence of bytes from this channel into the given buffer.
      *
      * @param buf The buffer into which bytes are to be transferred.
@@ -556,7 +556,7 @@ protected byte getPadding(long position) {
     }
 
     /**
-     * Overrides the {@link CTRCryptoInputStream#initCipher()}. Initializes the
+     * Overrides the {@link CtrCryptoInputStream#initCipher()}. Initializes the
      * cipher.
      */
     @Override
@@ -573,7 +573,7 @@ protected void initCipher() {
      */
     protected void resetCipher(long position) throws IOException {
         final long counter = getCounter(position);
-        CTRCryptoInputStream.calculateIV(initIV, counter, iv);
+        CtrCryptoInputStream.calculateIV(initIV, counter, iv);
         try {
             cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));
         } catch (InvalidKeyException e) {
@@ -653,8 +653,8 @@ protected void decryptBuffer(ByteBuffer out) throws IOException {
      * @param IV the IV for input stream position
      */
     static void calculateIV(byte[] initIV, long counter, byte[] IV) {
-        Utils.checkArgument(initIV.length == CTRCryptoInputStream.AES_BLOCK_SIZE);
-        Utils.checkArgument(IV.length == CTRCryptoInputStream.AES_BLOCK_SIZE);
+        Utils.checkArgument(initIV.length == CtrCryptoInputStream.AES_BLOCK_SIZE);
+        Utils.checkArgument(IV.length == CtrCryptoInputStream.AES_BLOCK_SIZE);
     
         int i = IV.length; // IV length
         int j = 0; // counter bytes index
diff --git a/src/main/java/org/apache/commons/crypto/stream/CTRCryptoOutputStream.java b/src/main/java/org/apache/commons/crypto/stream/CtrCryptoOutputStream.java
similarity index 90%
rename from src/main/java/org/apache/commons/crypto/stream/CTRCryptoOutputStream.java
rename to src/main/java/org/apache/commons/crypto/stream/CtrCryptoOutputStream.java
index 6f9ea6b1..c05b0c09 100644
--- a/src/main/java/org/apache/commons/crypto/stream/CTRCryptoOutputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/CtrCryptoOutputStream.java
@@ -39,7 +39,7 @@
 
 /**
  * <p>
- * CTRCryptoOutputStream encrypts data. It is not thread-safe. AES CTR mode is
+ * CtrCryptoOutputStream encrypts data. It is not thread-safe. AES CTR mode is
  * required in order to ensure that the plain text and cipher text have a 1:1
  * mapping. The encryption is buffer based. The key points of the encryption are
  * (1) calculating counter and (2) padding through stream position.
@@ -50,7 +50,7 @@
  * </p>
  * The underlying stream offset is maintained as state.
  */
-public class CTRCryptoOutputStream extends CryptoOutputStream {
+public class CtrCryptoOutputStream extends CryptoOutputStream {
     /**
      * Underlying stream offset.
      */
@@ -79,7 +79,7 @@ public class CTRCryptoOutputStream extends CryptoOutputStream {
     private boolean cipherReset = false;
 
     /**
-     * Constructs a {@link CTRCryptoOutputStream}.
+     * Constructs a {@link CtrCryptoOutputStream}.
      *
      * @param props The <code>Properties</code> class represents a set of
      *        properties.
@@ -88,13 +88,13 @@ public class CTRCryptoOutputStream extends CryptoOutputStream {
      * @param iv Initialization vector for the cipher.
      * @throws IOException if an I/O error occurs.
      */
-    public CTRCryptoOutputStream(Properties props, OutputStream out,
+    public CtrCryptoOutputStream(Properties props, OutputStream out,
             byte[] key, byte[] iv) throws IOException {
         this(props, out, key, iv, 0);
     }
 
     /**
-     * Constructs a {@link CTRCryptoOutputStream}.
+     * Constructs a {@link CtrCryptoOutputStream}.
      *
      * @param props The <code>Properties</code> class represents a set of
      *        properties.
@@ -103,13 +103,13 @@ public CTRCryptoOutputStream(Properties props, OutputStream out,
      * @param iv Initialization vector for the cipher.
      * @throws IOException if an I/O error occurs.
      */
-    public CTRCryptoOutputStream(Properties props, WritableByteChannel out,
+    public CtrCryptoOutputStream(Properties props, WritableByteChannel out,
             byte[] key, byte[] iv) throws IOException {
         this(props, out, key, iv, 0);
     }
 
     /**
-     * Constructs a {@link CTRCryptoOutputStream}.
+     * Constructs a {@link CtrCryptoOutputStream}.
      *
      * @param out the output stream.
      * @param cipher the CryptoCipher instance.
@@ -118,13 +118,13 @@ public CTRCryptoOutputStream(Properties props, WritableByteChannel out,
      * @param iv Initialization vector for the cipher.
      * @throws IOException if an I/O error occurs.
      */
-    protected CTRCryptoOutputStream(OutputStream out, CryptoCipher cipher,
+    protected CtrCryptoOutputStream(OutputStream out, CryptoCipher cipher,
             int bufferSize, byte[] key, byte[] iv) throws IOException {
         this(out, cipher, bufferSize, key, iv, 0);
     }
 
     /**
-     * Constructs a {@link CTRCryptoOutputStream}.
+     * Constructs a {@link CtrCryptoOutputStream}.
      *
      * @param channel the WritableByteChannel instance.
      * @param cipher the CryptoCipher instance.
@@ -133,14 +133,14 @@ protected CTRCryptoOutputStream(OutputStream out, CryptoCipher cipher,
      * @param iv Initialization vector for the cipher.
      * @throws IOException if an I/O error occurs.
      */
-    protected CTRCryptoOutputStream(WritableByteChannel channel,
+    protected CtrCryptoOutputStream(WritableByteChannel channel,
             CryptoCipher cipher, int bufferSize, byte[] key, byte[] iv)
             throws IOException {
         this(channel, cipher, bufferSize, key, iv, 0);
     }
 
     /**
-     * Constructs a {@link CTRCryptoOutputStream}.
+     * Constructs a {@link CtrCryptoOutputStream}.
      *
      * @param output the Output instance.
      * @param cipher the CryptoCipher instance.
@@ -149,13 +149,13 @@ protected CTRCryptoOutputStream(WritableByteChannel channel,
      * @param iv Initialization vector for the cipher.
      * @throws IOException if an I/O error occurs.
      */
-    protected CTRCryptoOutputStream(Output output, CryptoCipher cipher,
+    protected CtrCryptoOutputStream(Output output, CryptoCipher cipher,
             int bufferSize, byte[] key, byte[] iv) throws IOException {
         this(output, cipher, bufferSize, key, iv, 0);
     }
 
     /**
-     * Constructs a {@link CTRCryptoOutputStream}.
+     * Constructs a {@link CtrCryptoOutputStream}.
      *
      * @param props The <code>Properties</code> class represents a set of
      *        properties.
@@ -165,7 +165,7 @@ protected CTRCryptoOutputStream(Output output, CryptoCipher cipher,
      * @param streamOffset the start offset in the data.
      * @throws IOException if an I/O error occurs.
      */
-    public CTRCryptoOutputStream(Properties props, OutputStream out,
+    public CtrCryptoOutputStream(Properties props, OutputStream out,
             byte[] key, byte[] iv, long streamOffset) throws IOException {
         this(out, Utils.getCipherInstance(
                 "AES/CTR/NoPadding", props),
@@ -173,7 +173,7 @@ public CTRCryptoOutputStream(Properties props, OutputStream out,
     }
 
     /**
-     * Constructs a {@link CTRCryptoOutputStream}.
+     * Constructs a {@link CtrCryptoOutputStream}.
      *
      * @param props The <code>Properties</code> class represents a set of
      *        properties.
@@ -183,7 +183,7 @@ public CTRCryptoOutputStream(Properties props, OutputStream out,
      * @param streamOffset the start offset in the data.
      * @throws IOException if an I/O error occurs.
      */
-    public CTRCryptoOutputStream(Properties props, WritableByteChannel out,
+    public CtrCryptoOutputStream(Properties props, WritableByteChannel out,
             byte[] key, byte[] iv, long streamOffset) throws IOException {
         this(out, Utils.getCipherInstance(
                 "AES/CTR/NoPadding", props),
@@ -191,7 +191,7 @@ public CTRCryptoOutputStream(Properties props, WritableByteChannel out,
     }
 
     /**
-     * Constructs a {@link CTRCryptoOutputStream}.
+     * Constructs a {@link CtrCryptoOutputStream}.
      *
      * @param out the output stream.
      * @param cipher the CryptoCipher instance.
@@ -201,7 +201,7 @@ public CTRCryptoOutputStream(Properties props, WritableByteChannel out,
      * @param streamOffset the start offset in the data.
      * @throws IOException if an I/O error occurs.
      */
-    protected CTRCryptoOutputStream(OutputStream out, CryptoCipher cipher,
+    protected CtrCryptoOutputStream(OutputStream out, CryptoCipher cipher,
             int bufferSize, byte[] key, byte[] iv, long streamOffset)
             throws IOException {
         this(new StreamOutput(out, bufferSize), cipher, bufferSize, key, iv,
@@ -209,7 +209,7 @@ protected CTRCryptoOutputStream(OutputStream out, CryptoCipher cipher,
     }
 
     /**
-     * Constructs a {@link CTRCryptoOutputStream}.
+     * Constructs a {@link CtrCryptoOutputStream}.
      *
      * @param channel the WritableByteChannel instance.
      * @param cipher the CryptoCipher instance.
@@ -219,7 +219,7 @@ protected CTRCryptoOutputStream(OutputStream out, CryptoCipher cipher,
      * @param streamOffset the start offset in the data.
      * @throws IOException if an I/O error occurs.
      */
-    protected CTRCryptoOutputStream(WritableByteChannel channel,
+    protected CtrCryptoOutputStream(WritableByteChannel channel,
             CryptoCipher cipher, int bufferSize, byte[] key, byte[] iv,
             long streamOffset) throws IOException {
         this(new ChannelOutput(channel), cipher, bufferSize, key, iv,
@@ -227,7 +227,7 @@ protected CTRCryptoOutputStream(WritableByteChannel channel,
     }
 
     /**
-     * Constructs a {@link CTRCryptoOutputStream}.
+     * Constructs a {@link CtrCryptoOutputStream}.
      *
      * @param output the output stream.
      * @param cipher the CryptoCipher instance.
@@ -237,7 +237,7 @@ protected CTRCryptoOutputStream(WritableByteChannel channel,
      * @param streamOffset the start offset in the data.
      * @throws IOException if an I/O error occurs.
      */
-    protected CTRCryptoOutputStream(Output output, CryptoCipher cipher,
+    protected CtrCryptoOutputStream(Output output, CryptoCipher cipher,
             int bufferSize, byte[] key, byte[] iv, long streamOffset)
             throws IOException {
         super(output, cipher, bufferSize, new SecretKeySpec(key, "AES"),
@@ -325,7 +325,7 @@ private void resetCipher() throws IOException {
         padding = (byte) (streamOffset % cipher.getBlockSize());
         inBuffer.position(padding); // Set proper position for input data.
 
-        CTRCryptoInputStream.calculateIV(initIV, counter, iv);
+        CtrCryptoInputStream.calculateIV(initIV, counter, iv);
         try {
             cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));
         } catch (InvalidKeyException e) {
diff --git a/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java b/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java
index bd6c39d7..b3d05094 100644
--- a/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java
@@ -42,7 +42,7 @@
  * starting at random position as well as provides the foundation for positioned
  * read for decrypting. This needs a stream cipher mode such as AES CTR mode.
  */
-public class PositionedCryptoInputStream extends CTRCryptoInputStream {
+public class PositionedCryptoInputStream extends CtrCryptoInputStream {
 
     /**
      * DirectBuffer pool
@@ -296,7 +296,7 @@ private byte postDecryption(CipherState state, ByteBuffer inBuffer,
     private void resetCipher(CipherState state, long position, byte[] iv)
             throws IOException {
         final long counter = getCounter(position);
-        CTRCryptoInputStream.calculateIV(getInitIV(), counter, iv);
+        CtrCryptoInputStream.calculateIV(getInitIV(), counter, iv);
         try {
             state.getCipher().init(Cipher.DECRYPT_MODE, key,
                     new IvParameterSpec(iv));
diff --git a/src/test/java/org/apache/commons/crypto/stream/CTRCryptoStreamTest.java b/src/test/java/org/apache/commons/crypto/stream/CtrCryptoStreamTest.java
similarity index 79%
rename from src/test/java/org/apache/commons/crypto/stream/CTRCryptoStreamTest.java
rename to src/test/java/org/apache/commons/crypto/stream/CtrCryptoStreamTest.java
index 3ba55ec8..7b9c12b1 100644
--- a/src/test/java/org/apache/commons/crypto/stream/CTRCryptoStreamTest.java
+++ b/src/test/java/org/apache/commons/crypto/stream/CtrCryptoStreamTest.java
@@ -24,7 +24,7 @@
 
 import org.apache.commons.crypto.cipher.CryptoCipher;
 
-public class CTRCryptoStreamTest extends AbstractCipherStreamTest {
+public class CtrCryptoStreamTest extends AbstractCipherStreamTest {
 
     @Override
     public void setUp() throws IOException {
@@ -32,24 +32,24 @@ public void setUp() throws IOException {
     }
 
     @Override
-    protected CTRCryptoInputStream getCryptoInputStream(
+    protected CtrCryptoInputStream getCryptoInputStream(
             ByteArrayInputStream bais, CryptoCipher cipher, int bufferSize,
             byte[] iv, boolean withChannel) throws IOException {
         if (withChannel) {
-            return new CTRCryptoInputStream(Channels.newChannel(bais), cipher,
+            return new CtrCryptoInputStream(Channels.newChannel(bais), cipher,
                     bufferSize, key, iv);
         }
-        return new CTRCryptoInputStream(bais, cipher, bufferSize, key, iv);
+        return new CtrCryptoInputStream(bais, cipher, bufferSize, key, iv);
     }
 
     @Override
-    protected CTRCryptoOutputStream getCryptoOutputStream(
+    protected CtrCryptoOutputStream getCryptoOutputStream(
             ByteArrayOutputStream baos, CryptoCipher cipher, int bufferSize,
             byte[] iv, boolean withChannel) throws IOException {
         if (withChannel) {
-            return new CTRCryptoOutputStream(Channels.newChannel(baos), cipher,
+            return new CtrCryptoOutputStream(Channels.newChannel(baos), cipher,
                     bufferSize, key, iv);
         }
-        return new CTRCryptoOutputStream(baos, cipher, bufferSize, key, iv);
+        return new CtrCryptoOutputStream(baos, cipher, bufferSize, key, iv);
     }
 }
diff --git a/src/test/java/org/apache/commons/crypto/stream/CTRNoPaddingCipherStreamTest.java b/src/test/java/org/apache/commons/crypto/stream/CtrNoPaddingCipherStreamTest.java
similarity index 94%
rename from src/test/java/org/apache/commons/crypto/stream/CTRNoPaddingCipherStreamTest.java
rename to src/test/java/org/apache/commons/crypto/stream/CtrNoPaddingCipherStreamTest.java
index 76b8a7e2..376a56b6 100644
--- a/src/test/java/org/apache/commons/crypto/stream/CTRNoPaddingCipherStreamTest.java
+++ b/src/test/java/org/apache/commons/crypto/stream/CtrNoPaddingCipherStreamTest.java
@@ -19,7 +19,7 @@
 
 import java.io.IOException;
 
-public class CTRNoPaddingCipherStreamTest extends AbstractCipherStreamTest {
+public class CtrNoPaddingCipherStreamTest extends AbstractCipherStreamTest {
 
     @Override
     public void setUp() throws IOException {
