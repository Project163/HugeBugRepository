diff --git a/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodExecutor.java b/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodExecutor.java
index 61a45e7a..17a66e16 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodExecutor.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodExecutor.java
@@ -70,13 +70,11 @@ public final class MethodExecutor extends AbstractExecutor.Method {
         super(c, m, k);
         int vastart = -1;
         Class<?> vaclass = null;
-        if (method != null) {
-            Class<?>[] formal = method.getParameterTypes();
+        if (MethodKey.isVarArgs(method)) {
             // if the last parameter is an array, the method is considered as vararg
-            if (formal != null && MethodKey.isVarArgs(method)) {
-                vastart = formal.length - 1;
-                vaclass = formal[vastart].getComponentType();
-            }
+            Class<?>[] formal = method.getParameterTypes();
+            vastart = formal.length - 1;
+            vaclass = formal[vastart].getComponentType();
         }
         vaStart = vastart;
         vaClass = vaclass;
diff --git a/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodKey.java b/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodKey.java
index 229534d7..1977d14c 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodKey.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodKey.java
@@ -201,7 +201,7 @@ public final class MethodKey {
         }
         // before climbing up the hierarchy, verify that the last parameter is an array
         final Class<?>[] ptypes = method.getParameterTypes();
-        if (ptypes.length > 0 && ptypes[ptypes.length - 1].getComponentType() == null) {
+        if (ptypes.length == 0 || ptypes[ptypes.length - 1].getComponentType() == null) {
             return false;
         }
         final String mname = method.getName();
