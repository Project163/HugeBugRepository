diff --git a/src/main/java/org/apache/commons/jexl/Interpreter.java b/src/main/java/org/apache/commons/jexl/Interpreter.java
index e8a171be..648f943b 100644
--- a/src/main/java/org/apache/commons/jexl/Interpreter.java
+++ b/src/main/java/org/apache/commons/jexl/Interpreter.java
@@ -1061,7 +1061,7 @@ public class Interpreter implements ParserVisitor {
     public Object visit(ASTTernaryNode node, Object data) {
         Object condition = node.jjtGetChild(0).jjtAccept(this, data);
         if (node.jjtGetNumChildren() == 3) {
-            if (arithmetic.toBoolean(condition)) {
+            if (condition != null && arithmetic.toBoolean(condition)) {
                 return node.jjtGetChild(1).jjtAccept(this, data);
             } else {
                 return node.jjtGetChild(2).jjtAccept(this, data);
diff --git a/src/test/java/org/apache/commons/jexl/AssignTest.java b/src/test/java/org/apache/commons/jexl/AssignTest.java
index 56f638d2..d92dd463 100644
--- a/src/test/java/org/apache/commons/jexl/AssignTest.java
+++ b/src/test/java/org/apache/commons/jexl/AssignTest.java
@@ -148,32 +148,6 @@ public class AssignTest extends JexlTestCase {
         o = ENGINE.getProperty(quux, "['froboz']['value']");
         assertEquals("Result is not 1000", new Integer(1000), o);
     }
-    
-    
-    public void testTernary() throws Exception {
-        JexlContext jc = JexlHelper.createContext();
-        Expression e = ENGINE.createExpression("x.y.z = foo ?'bar':'quux'");
-        String canonical = e.dump();
-        System.out.print(canonical);
-        Object o = e.evaluate(jc);
-        assertEquals("Should be quux", "quux", o);
-        jc.getVars().put("foo",Boolean.TRUE);
-        o = e.evaluate(jc);
-        assertEquals("Should be bar", "bar", o);
-        o = jc.getVars().get("x.y.z");
-        assertEquals("Should be bar", "bar", o);
-    }
-    
-    public void testNotNull() throws Exception {
-        JexlContext jc = JexlHelper.createContext();
-        Expression e = ENGINE.createExpression("x.y.z = foo?:'quux'");
-        Object o = e.evaluate(jc);
-        assertEquals("Should be quux", "quux", o);
-        jc.getVars().put("foo","bar");
-        o = e.evaluate(jc);
-        assertEquals("Should be bar", "bar", o);
-        o = jc.getVars().get("x.y.z");
-        assertEquals("Should be bar", "bar", o);
-    }
+
 
 }
\ No newline at end of file
diff --git a/src/test/java/org/apache/commons/jexl/IfTest.java b/src/test/java/org/apache/commons/jexl/IfTest.java
index eb2f90d6..496b19ec 100644
--- a/src/test/java/org/apache/commons/jexl/IfTest.java
+++ b/src/test/java/org/apache/commons/jexl/IfTest.java
@@ -158,4 +158,116 @@ public class IfTest extends JexlTestCase {
         Object result = jc.getVars().get("y");
         assertEquals("y has the wrong value", new Integer(1), result);
     }
+
+    /**
+     * Ternary operator condition undefined or null evaluates to false
+     * independantly of engine flags.
+     * @throws Exception
+     */
+    public void testTernary() throws Exception {
+        JexlEngine jexl = new JexlEngine();
+        JexlContext jc = JexlHelper.createContext();
+        Expression e = jexl.createExpression("x.y.z = foo ?'bar':'quux'");
+        Object o;
+
+        // undefined foo
+
+        for(int l = 0; l < 4; ++l) {
+            jexl.setLenient((l & 1) != 0);
+            jexl.setSilent((l & 2) != 0);
+            o = e.evaluate(jc);
+            assertEquals("Should be quux", "quux", o);
+            o = jc.getVars().get("x.y.z");
+            assertEquals("Should be quux", "quux", o);
+        }
+
+        jc.getVars().put("foo", null);
+
+        for(int l = 0; l < 4; ++l) {
+            jexl.setLenient((l & 1) != 0);
+            jexl.setSilent((l & 2) != 0);
+            o = e.evaluate(jc);
+            assertEquals("Should be quux", "quux", o);
+            o = jc.getVars().get("x.y.z");
+            assertEquals("Should be quux", "quux", o);
+        }
+
+        jc.getVars().put("foo",Boolean.FALSE);
+
+        for(int l = 0; l < 4; ++l) {
+            jexl.setLenient((l & 1) != 0);
+            jexl.setSilent((l & 2) != 0);
+            o = e.evaluate(jc);
+            assertEquals("Should be quux", "quux", o);
+            o = jc.getVars().get("x.y.z");
+            assertEquals("Should be quux", "quux", o);
+        }
+
+        jc.getVars().put("foo",Boolean.TRUE);
+
+        for(int l = 0; l < 4; ++l) {
+            jexl.setLenient((l & 1) != 0);
+            jexl.setSilent((l & 2) != 0);
+            o = e.evaluate(jc);
+            assertEquals("Should be bar", "bar", o);
+            o = jc.getVars().get("x.y.z");
+            assertEquals("Should be bar", "bar", o);
+        }
+    }
+
+    /**
+     * Ternary operator condition undefined or null evaluates to false
+     * independantly of engine flags.
+     * @throws Exception
+     */
+    public void testTernaryShorthand() throws Exception {
+        JexlEngine jexl = new JexlEngine();
+        JexlContext jc = JexlHelper.createContext();
+        Expression e = JEXL.createExpression("x.y.z = foo?:'quux'");
+        Object o;
+
+        // undefined foo
+
+        for(int l = 0; l < 4; ++l) {
+            jexl.setLenient((l & 1) != 0);
+            jexl.setSilent((l & 2) != 0);
+            o = e.evaluate(jc);
+            assertEquals("Should be quux", "quux", o);
+            o = jc.getVars().get("x.y.z");
+            assertEquals("Should be quux", "quux", o);
+        }
+
+        jc.getVars().put("foo", null);
+
+        for(int l = 0; l < 4; ++l) {
+            jexl.setLenient((l & 1) != 0);
+            jexl.setSilent((l & 2) != 0);
+            o = e.evaluate(jc);
+            assertEquals("Should be quux", "quux", o);
+            o = jc.getVars().get("x.y.z");
+            assertEquals("Should be quux", "quux", o);
+        }
+
+        jc.getVars().put("foo", Boolean.FALSE);
+
+        for(int l = 0; l < 4; ++l) {
+            jexl.setLenient((l & 1) != 0);
+            jexl.setSilent((l & 2) != 0);
+            o = e.evaluate(jc);
+            assertEquals("Should be quux", "quux", o);
+            o = jc.getVars().get("x.y.z");
+            assertEquals("Should be quux", "quux", o);
+        }
+
+        jc.getVars().put("foo","bar");
+        
+        for(int l = 0; l < 4; ++l) {
+            jexl.setLenient((l & 1) != 0);
+            jexl.setSilent((l & 2) != 0);
+            o = e.evaluate(jc);
+            assertEquals("Should be bar", "bar", o);
+            o = jc.getVars().get("x.y.z");
+            assertEquals("Should be bar", "bar", o);
+        }
+    }
 }
diff --git a/xdocs/reference/syntax.xml b/xdocs/reference/syntax.xml
index bf5e4e2f..b5065609 100644
--- a/xdocs/reference/syntax.xml
+++ b/xdocs/reference/syntax.xml
@@ -294,11 +294,17 @@
         <tr>
           <td>Ternary conditional <code>?:</code> </td>
           <td>
-            The usual ternary conditional operator <code>condition? if_true : if_null_or_false;</code> operator can be used as well as
-            the abbreviation <code>value ?: if_null_or_false</code> which returns the <code>value</code> if
-            it is non-null and non-false, e.g.
+            The usual ternary conditional operator <code>condition ? if_true : if_false</code> operator can be
+            used as well as the abbreviation <code>value ?: if_false</code> which returns the <code>value</code> if
+            its evaluation is defined, non-null and non-false, e.g.
             <source>val1 ? val1 : val2</source> and
             <source>val1 ?: val2 </source> are equivalent.
+            <p>
+              <strong>NOTE:</strong> The condition will evaluate to <code>false</code> when it
+              refers to an undefined variable or <code>null</code> for all <code>JexlEngine</code>
+              flag combinations. This allows explicit syntactic leniency and treats the condition
+              'if undefined or null or false' the same way in all cases.
+            </p>
           </td>
         </tr>
         <tr>
