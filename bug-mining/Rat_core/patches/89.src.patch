diff --git a/apache-rat-core/src/it/java/org/apache/rat/ReportTest.java b/apache-rat-core/src/it/java/org/apache/rat/ReportTest.java
index 12e9c477..b58c6732 100644
--- a/apache-rat-core/src/it/java/org/apache/rat/ReportTest.java
+++ b/apache-rat-core/src/it/java/org/apache/rat/ReportTest.java
@@ -88,6 +88,7 @@ public class ReportTest {
     @ParameterizedTest(name = "{index} {0}")
     @MethodSource("args")
     public void integrationTest(String testName, Document commandLineDoc) throws Exception {
+        DefaultLog.getInstance().log(Log.Level.INFO, "Running test for " + testName);
         File baseDir = new File(commandLineDoc.getName().getName()).getParentFile();
 
         // get the arguments
diff --git a/apache-rat-core/src/it/resources/ReportTest/RAT_335/verify.groovy b/apache-rat-core/src/it/resources/ReportTest/RAT_335/verify.groovy
index bf0f8fc3..8a3e0765 100644
--- a/apache-rat-core/src/it/resources/ReportTest/RAT_335/verify.groovy
+++ b/apache-rat-core/src/it/resources/ReportTest/RAT_335/verify.groovy
@@ -1,7 +1,5 @@
-package ReportTest.RAT_33
-5
+package ReportTest.RAT_335
 
-import org.apache.rat.report.claim.ClaimStatistic
 import org.apache.rat.testhelpers.XmlUtils
 import org.w3c.dom.Document
 import org.w3c.dom.NamedNodeMap
@@ -13,11 +11,11 @@ import javax.xml.xpath.XPathFactory
 import static org.assertj.core.api.Assertions.assertThat
 
 private static Map<String, String> mapOf(String... parts) {
-    Map<String, String> map = new HashMap<>();
-    for (int i=0; i<parts.length; i+=2) {
-        map.put(parts[i], parts[i+1]);
+    Map<String, String> map = new HashMap<>()
+    for (int i = 0; i < parts.length; i += 2) {
+        map.put(parts[i], parts[i+1])
     }
-    return map;
+    return map
 }
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
@@ -38,45 +36,44 @@ private static Map<String, String> mapOf(String... parts) {
 output = new File(args[0])
 content = output.text
 
-//Map<ClaimStatistic.Counter, String> data = new HashMap<>();
-//data.put(ClaimStatistic.Counter.APPROVED, "2");
-//data.put(ClaimStatistic.Counter.ARCHIVES, "0");
-//data.put(ClaimStatistic.Counter.BINARIES, "0");
-//data.put(ClaimStatistic.Counter.DOCUMENT_TYPES, "3");
-//data.put(ClaimStatistic.Counter.IGNORED, "6");
-//data.put(ClaimStatistic.Counter.LICENSE_CATEGORIES, "2");
-//data.put(ClaimStatistic.Counter.LICENSE_NAMES, "2");
-//data.put(ClaimStatistic.Counter.NOTICES, "1");
-//data.put(ClaimStatistic.Counter.STANDARDS, "6");
-//data.put(ClaimStatistic.Counter.UNAPPROVED, "4");
-//data.put(ClaimStatistic.Counter.UNKNOWN, "4");
-
-
-Document document = XmlUtils.toDom(new FileInputStream(args[0]));
-XPath xPath = XPathFactory.newInstance().newXPath();
+//Map<ClaimStatistic.Counter, String> data = new HashMap<>()
+//data.put(ClaimStatistic.Counter.APPROVED, "2")
+//data.put(ClaimStatistic.Counter.ARCHIVES, "0")
+//data.put(ClaimStatistic.Counter.BINARIES, "0")
+//data.put(ClaimStatistic.Counter.DOCUMENT_TYPES, "3")
+//data.put(ClaimStatistic.Counter.IGNORED, "6")
+//data.put(ClaimStatistic.Counter.LICENSE_CATEGORIES, "2")
+//data.put(ClaimStatistic.Counter.LICENSE_NAMES, "2")
+//data.put(ClaimStatistic.Counter.NOTICES, "1")
+//data.put(ClaimStatistic.Counter.STANDARDS, "6")
+//data.put(ClaimStatistic.Counter.UNAPPROVED, "4")
+//data.put(ClaimStatistic.Counter.UNKNOWN, "4")
+
+Document document = XmlUtils.toDom(new FileInputStream(args[0]))
+XPath xPath = XPathFactory.newInstance().newXPath()
 
 //for (ClaimStatistic.Counter counter : ClaimStatistic.Counter.values()) {
-//    String xpath = String.format("/rat-report/statistics/statistic[@name='%s']", counter.displayName());
+//    String xpath = String.format("/rat-report/statistics/statistic[@name='%s']", counter.displayName())
 //    Map<String, String> map = mapOf("approval",
 //            counter == ClaimStatistic.Counter.UNAPPROVED ? "false" : "true",
 //            "count", data.get(counter),
-//            "description", counter.getDescription());
-//    XmlUtils.assertAttributes(document, xPath, xpath, map);
+//            "description", counter.getDescription())
+//    XmlUtils.assertAttributes(document, xPath, xpath, map)
 //}
 
 //// license categories
 //XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/licenseCategory[@name='?????']",
-//        mapOf("count", "4" ));
+//        mapOf("count", "4" ))
 //
 //XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/licenseCategory[@name='AL   ']",
-//        mapOf("count", "2" ));
+//        mapOf("count", "2" ))
 //
 //// license names
 //XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/licenseName[@name='Apache License Version 2.0']",
-//        mapOf("count", "2" ));
+//        mapOf("count", "2" ))
 //
 //XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/licenseName[@name='Unknown license']",
-//        mapOf("count", "4" ));
+//        mapOf("count", "4" ))
 
 List<String> ignoredFiles = new ArrayList<>(Arrays.asList(
         "/dir1/dir1.txt",
@@ -85,31 +82,29 @@ List<String> ignoredFiles = new ArrayList<>(Arrays.asList(
         "/dir2/dir2.md",
         "/dir3/dir3.log",
         "/.gitignore",
-        "/root.md"));
-
-NodeList nodeList = XmlUtils.getNodeList(document, xPath, "/rat-report/resource[@type='IGNORED']");
-for (int i=0;i< nodeList.getLength(); i++) {
-    NamedNodeMap attr = nodeList.item(i).getAttributes();
-    String s = attr.getNamedItem("name").getNodeValue();
-    assertThat(ignoredFiles).contains(s);
-    ignoredFiles.remove(s);
+        "/root.md"))
+
+NodeList nodeList = XmlUtils.getNodeList(document, xPath, "/rat-report/resource[@type='IGNORED']")
+for (int i = 0 ; i < nodeList.getLength(); i++) {
+    NamedNodeMap attr = nodeList.item(i).getAttributes()
+    String s = attr.getNamedItem("name").getNodeValue()
+    assertThat(ignoredFiles).contains(s)
+    ignoredFiles.remove(s)
 }
-assertThat(ignoredFiles).isEmpty();
 
+assertThat(ignoredFiles).isEmpty()
 
 // Document types
 XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/documentType[@name='IGNORED']",
-        mapOf("count", "6" ));
+        mapOf("count", "6" ))
 
 XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/documentType[@name='NOTICE']",
-        mapOf("count", "1" ));
+        mapOf("count", "1" ))
 
 XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/documentType[@name='STANDARD']",
-        mapOf("count", "6" ));
-
+        mapOf("count", "6" ))
 
 /*
-
 TextUtils.assertPatternInTarget("^  Approved:\\s+8 ", content)
 TextUtils.assertPatternInTarget("^  Archives:\\s+1 ", content)
 TextUtils.assertPatternInTarget("^  Binaries:\\s+2 ", content)
diff --git a/apache-rat-core/src/main/java/org/apache/rat/analysis/DefaultAnalyserFactory.java b/apache-rat-core/src/main/java/org/apache/rat/analysis/DefaultAnalyserFactory.java
index 5bde6ad7..da2cc016 100644
--- a/apache-rat-core/src/main/java/org/apache/rat/analysis/DefaultAnalyserFactory.java
+++ b/apache-rat-core/src/main/java/org/apache/rat/analysis/DefaultAnalyserFactory.java
@@ -61,7 +61,7 @@ public final class DefaultAnalyserFactory {
     }
 
     /**
-     * A DocumentAnalyser a collection of licenses
+     * A DocumentAnalyser a collection of licenses.
      */
     private static final class DefaultAnalyser implements IDocumentAnalyser {
 
@@ -69,7 +69,7 @@ public final class DefaultAnalyserFactory {
         private final Collection<ILicense> licenses;
         /** the Report Configuration */
         private final ReportConfiguration configuration;
-        /** The matcher for generated filed */
+        /** The matcher for generated files */
         private final IHeaderMatcher generatedMatcher;
 
         /**
@@ -81,7 +81,6 @@ public final class DefaultAnalyserFactory {
             this.licenses = licenses;
             this.configuration = config;
             this.generatedMatcher = configuration.getGeneratedMatcher();
-
         }
 
         /**
diff --git a/apache-rat-core/src/main/java/org/apache/rat/analysis/HeaderCheckWorker.java b/apache-rat-core/src/main/java/org/apache/rat/analysis/HeaderCheckWorker.java
index 786f3b3c..9a994115 100644
--- a/apache-rat-core/src/main/java/org/apache/rat/analysis/HeaderCheckWorker.java
+++ b/apache-rat-core/src/main/java/org/apache/rat/analysis/HeaderCheckWorker.java
@@ -103,7 +103,7 @@ public class HeaderCheckWorker {
      * Convenience constructor wraps given <code>Reader</code> in a
      * <code>BufferedReader</code>.
      *
-     * @param generatedMatcher The matcher for generated headers
+     * @param generatedMatcher The matcher for generated headers.
      * @param reader The reader on the document. Not null.
      * @param licenses The licenses to check against. Not null.
      * @param name The document that is being checked. Possibly null.
@@ -115,7 +115,7 @@ public class HeaderCheckWorker {
     /**
      * Constructs a check worker for the license against the specified document.
      *
-     * @param generatedMatcher The matcher for generated headers
+     * @param generatedMatcher The matcher for generated headers.
      * @param reader The reader on the document. Not null.
      * @param numberOfRetainedHeaderLine the maximum number of lines to read to find
      * the license information.
@@ -140,7 +140,7 @@ public class HeaderCheckWorker {
     /**
      * Read the input and perform the header check.
      *
-     * @throws RatHeaderAnalysisException on IO Exception.
+     * @throws RatHeaderAnalysisException on IO exception.
      */
     public void read() throws RatHeaderAnalysisException {
         try {
diff --git a/apache-rat-core/src/main/java/org/apache/rat/analysis/TikaProcessor.java b/apache-rat-core/src/main/java/org/apache/rat/analysis/TikaProcessor.java
index 06705a8f..5f128668 100644
--- a/apache-rat-core/src/main/java/org/apache/rat/analysis/TikaProcessor.java
+++ b/apache-rat-core/src/main/java/org/apache/rat/analysis/TikaProcessor.java
@@ -47,7 +47,8 @@ public final class TikaProcessor {
     private static final Tika TIKA = new Tika();
     /** A map of mime type string to non-BINARY types.
      * "text" types are already handled somewhere else
-     * BINARY unless listed here*/
+     * BINARY unless listed here
+     */
     private static final Map<String, Document.Type> DOCUMENT_TYPE_MAP;
 
     static {
diff --git a/apache-rat-core/src/main/java/org/apache/rat/api/Document.java b/apache-rat-core/src/main/java/org/apache/rat/api/Document.java
index 17aca2c7..0dbfa10c 100644
--- a/apache-rat-core/src/main/java/org/apache/rat/api/Document.java
+++ b/apache-rat-core/src/main/java/org/apache/rat/api/Document.java
@@ -41,7 +41,7 @@ public abstract class Document implements Comparable<Document> {
         ARCHIVE,
         /** A binary file. */
         BINARY,
-        /** A generated document. */
+        /** A generated document that is ignored. */
         IGNORED,
         /** A notice document (e.g. LICENSE file). */
         NOTICE,
@@ -127,6 +127,10 @@ public abstract class Document implements Comparable<Document> {
         return metaData;
     }
 
+    /**
+     * Checks if document is ignored or not.
+     * @return {@code true} if the document is of type {@code IGNORED}.
+     */
     public final boolean isIgnored() {
         return Type.IGNORED == metaData.getDocumentType();
     }
@@ -142,13 +146,13 @@ public abstract class Document implements Comparable<Document> {
     }
 
     /**
-     * Determines if this Document is a directory type.
+     * Determines if this document is a directory type.
      * @return {@code true} if this is a directory.
      */
     public abstract boolean isDirectory();
 
     /**
-     * Gets a sorted set of Documents that are children of this document.
+     * Gets a sorted set of documents that are children of this document.
      * @return A sorted set of child Documents. May be empty.
      */
     public abstract SortedSet<Document> listChildren();
diff --git a/apache-rat-core/src/main/java/org/apache/rat/api/MetaData.java b/apache-rat-core/src/main/java/org/apache/rat/api/MetaData.java
index 3df3d76d..098906e9 100644
--- a/apache-rat-core/src/main/java/org/apache/rat/api/MetaData.java
+++ b/apache-rat-core/src/main/java/org/apache/rat/api/MetaData.java
@@ -45,10 +45,9 @@ public class MetaData {
     private MediaType mediaType;
     /** The document type for this document */
     private Document.Type documentType;
-    /** the flag for directory types */
+    /** The flag for directory types */
     private boolean isDirectory;
 
-
     /**
      * Create metadata without a content type.
      */
@@ -156,7 +155,7 @@ public class MetaData {
     }
 
     /**
-     * Set the directory flag
+     * Set the directory flag.
      * @param state the state to set the directory flag in.
      */
     public void setIsDirectory(final boolean state) {
@@ -164,7 +163,7 @@ public class MetaData {
     }
 
     /**
-     * Return true if the directory flag was set.
+     * Return {@code true} if the directory flag was set.
      * @return the directory flag.
      */
     public boolean isDirectory() {
diff --git a/apache-rat-core/src/main/java/org/apache/rat/commandline/Arg.java b/apache-rat-core/src/main/java/org/apache/rat/commandline/Arg.java
index 6e053c47..3ba85b95 100644
--- a/apache-rat-core/src/main/java/org/apache/rat/commandline/Arg.java
+++ b/apache-rat-core/src/main/java/org/apache/rat/commandline/Arg.java
@@ -945,7 +945,7 @@ public enum Arg {
             }
             return result;
         } catch (Throwable t) {
-            throw new ConfigurationException(format("'%s' converter for %s '%s' does not produce a class of tye %s", this,
+            throw new ConfigurationException(format("'%s' converter for %s '%s' does not produce a class of type %s", this,
                     option.getKey(), option.getConverter().getClass().getName(), option.getType()));
         }
     }
