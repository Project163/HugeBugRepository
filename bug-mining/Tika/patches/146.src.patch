diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ExcelExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ExcelExtractor.java
index 03cf9c138..7187813b4 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ExcelExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/ExcelExtractor.java
@@ -48,6 +48,7 @@ import org.apache.poi.hssf.record.NumberRecord;
 import org.apache.poi.hssf.record.RKRecord;
 import org.apache.poi.hssf.record.Record;
 import org.apache.poi.hssf.record.SSTRecord;
+import org.apache.poi.hssf.record.chart.SeriesTextRecord;
 import org.apache.poi.hssf.record.common.UnicodeString;
 import org.apache.poi.poifs.filesystem.DocumentInputStream;
 import org.apache.poi.poifs.filesystem.POIFSFileSystem;
@@ -142,6 +143,8 @@ public class ExcelExtractor {
         private SAXException exception = null;
 
         private SSTRecord sstRecord;
+        
+        private short previousSid;
 
         /**
          * Internal <code>FormatTrackingHSSFListener</code> to handle cell
@@ -165,6 +168,12 @@ public class ExcelExtractor {
          * worksheet is currently active.
          */
         private SortedMap<Point, Cell> currentSheet = null;
+        
+        /**
+         * Extra text or cells that crops up, typically as part of a
+         *  worksheet but not always.
+         */
+        private List<Cell> extraTextCells = new ArrayList<Cell>();
 
         /**
          * Format for rendering numbers in the worksheet. Currently we just
@@ -216,6 +225,7 @@ public class ExcelExtractor {
                 hssfRequest.addListener(formatListener, RKRecord.sid);
                 hssfRequest.addListener(formatListener, HyperlinkRecord.sid);
                 hssfRequest.addListener(formatListener, TextObjectRecord.sid);
+                hssfRequest.addListener(formatListener, SeriesTextRecord.sid);
                 hssfRequest.addListener(formatListener, FormatRecord.sid);
                 hssfRequest.addListener(formatListener, ExtendedFormatRecord.sid);
             }
@@ -224,6 +234,9 @@ public class ExcelExtractor {
             DocumentInputStream documentInputStream = filesystem.createDocumentInputStream("Workbook");
             HSSFEventFactory eventFactory = new HSSFEventFactory();
             eventFactory.processEvents(hssfRequest, documentInputStream);
+            
+            // Output any extra text that came after all the sheets
+            processExtraText(); 
     	}
 
         /**
@@ -253,10 +266,21 @@ public class ExcelExtractor {
                 BOFRecord bof = (BOFRecord) record;
                 if (bof.getType() == BOFRecord.TYPE_WORKBOOK) {
                     currentSheetIndex = -1;
+                } else if (bof.getType() == BOFRecord.TYPE_CHART) {
+                    if(previousSid == EOFRecord.sid) {
+                        // This is a sheet which contains only a chart
+                        newSheet();
+                    } else {
+                        // This is a chart within a normal sheet
+                        // Handling of this is a bit hacky...
+                        if (currentSheet != null) {
+                            processSheet();
+                            currentSheetIndex--;
+                            newSheet();
+                        }
+                    }
                 } else if (bof.getType() == BOFRecord.TYPE_WORKSHEET) {
-                    currentSheetIndex++;
-                    currentSheet =
-                        new TreeMap<Point, Cell>(new PointComparator());
+                    newSheet();
                 }
                 break;
 
@@ -313,13 +337,34 @@ public class ExcelExtractor {
                     }
                 }
                 break;
+                
             case TextObjectRecord.sid:
                 TextObjectRecord tor = (TextObjectRecord) record;
                 addTextCell(record, tor.getStr().getString());
                 break;
+                
+            case SeriesTextRecord.sid: // Chart label or title
+                SeriesTextRecord str = (SeriesTextRecord) record;
+                addTextCell(record, str.getText());
+                break;
             }
+            
+            previousSid = record.getSid();
         }
-
+        
+        private void processExtraText() throws SAXException {
+            if(extraTextCells.size() > 0) {
+                for(Cell cell : extraTextCells) {
+                    handler.startElement("div", "class", "outside");
+                    cell.render(handler);
+                    handler.endElement("div");
+                }
+                
+                // Reset
+                extraTextCells.clear();
+            }
+        }
+        
         /**
          * Adds the given cell (unless <code>null</code>) to the current
          * worksheet (if any) at the position (if any) of the given record.
@@ -339,9 +384,7 @@ public class ExcelExtractor {
                 currentSheet.put(point, cell);
             } else {
                 // Cell outside the worksheets
-                handler.startElement("div", "class", "outside");
-                cell.render(handler);
-                handler.endElement("div");
+                extraTextCells.add(cell);
             }
         }
 
@@ -362,6 +405,11 @@ public class ExcelExtractor {
             }
         }
 
+        private void newSheet() {
+            currentSheetIndex++;
+            currentSheet = new TreeMap<Point, Cell>(new PointComparator());
+        }
+
         /**
          * Process an excel sheet.
          *
@@ -405,6 +453,9 @@ public class ExcelExtractor {
             // Sheet End
             handler.endElement("tbody");
             handler.endElement("table");
+            
+            // Finish up
+            processExtraText();
             handler.endElement("div");
         }
 
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/NumberCell.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/NumberCell.java
index 19a34b188..68774d4bb 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/NumberCell.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/NumberCell.java
@@ -39,4 +39,7 @@ public class NumberCell implements Cell {
         handler.characters(format.format(number));
     }
 
+    public String toString() {
+        return "Numeric Cell: " + format.format(number);
+    }
 }
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/TextCell.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/TextCell.java
index 489afcb78..fe75ac929 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/TextCell.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/TextCell.java
@@ -34,4 +34,7 @@ public class TextCell implements Cell {
         handler.characters(text);
     }
 
+    public String toString() {
+        return "Text Cell: \"" + text + "\"";
+    }
 }
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java
index d89ca92d9..cce365a10 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java
@@ -125,4 +125,43 @@ public class ExcelParserTest extends TestCase {
         }
     }
 
+    /**
+     * TIKA-214 - Ensure we extract labels etc from Charts
+     */
+    public void testExcelParserCharts() throws Exception {
+        InputStream input = ExcelParserTest.class.getResourceAsStream(
+                  "/test-documents/testEXCEL-charts.xls");
+        try {
+            Metadata metadata = new Metadata();
+            ParseContext context = new ParseContext();
+            context.set(Locale.class, Locale.US);
+            ContentHandler handler = new BodyContentHandler();
+            new OfficeParser().parse(input, handler, metadata, context);
+        
+            assertEquals(
+                    "application/vnd.ms-excel",
+                    metadata.get(Metadata.CONTENT_TYPE));
+        
+            String content = handler.toString();
+            
+            // The first sheet has a pie chart
+            assertTrue(content.contains("charttabyodawg"));
+            assertTrue(content.contains("WhamPuff"));
+            
+            // The second sheet has a bar chart and some text
+            assertTrue(content.contains("Sheet1"));
+            assertTrue(content.contains("Test Excel Spreasheet"));
+            assertTrue(content.contains("foo"));
+            assertTrue(content.contains("bar"));
+            assertTrue(content.contains("fizzlepuff"));
+            assertTrue(content.contains("whyaxis"));
+            assertTrue(content.contains("eksaxis"));
+            
+            // The third sheet has some text
+            assertTrue(content.contains("Sheet2"));
+            assertTrue(content.contains("dingdong"));
+        } finally {
+            input.close();
+        }
+    }
 }
diff --git a/tika-parsers/src/test/resources/test-documents/testEXCEL-charts.xls b/tika-parsers/src/test/resources/test-documents/testEXCEL-charts.xls
new file mode 100644
index 000000000..52762a4c3
Binary files /dev/null and b/tika-parsers/src/test/resources/test-documents/testEXCEL-charts.xls differ
