diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 0e202051..9024859a 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -43,6 +43,11 @@ The <action> type attribute can be add,update,fix,remove.
   <body>
 
   <release version="1.5.0" date="tba" description="tba">
+    <action issue="VALIDATOR-376" type="fix" dev="rgoers">
+      Revert EmailValidator to handle top level domains to the behavior prior to VALIDATOR-273. Allow an optional
+      behavior to allow the behavior VALIDATOR-273 implemented. Note that this is a behavioral change for users
+      of version 1.4.1, but not for anyone upgrading from a release prior to that.
+    </action>
     <action issue="VALIDATOR-371" type="remove">Drop the Javascript code entirely</action>
     <action issue="VALIDATOR-362" dev="britter" type="fix" due-to="Teo Bran">
       Local part of the email address should not be longer than 64 bytes
diff --git a/src/main/java/org/apache/commons/validator/routines/EmailValidator.java b/src/main/java/org/apache/commons/validator/routines/EmailValidator.java
index ec864d53..26f689ec 100644
--- a/src/main/java/org/apache/commons/validator/routines/EmailValidator.java
+++ b/src/main/java/org/apache/commons/validator/routines/EmailValidator.java
@@ -51,18 +51,32 @@ public class EmailValidator implements Serializable {
     private static final Pattern USER_PATTERN = Pattern.compile(USER_REGEX);
 
     private final boolean allowLocal;
+    private final boolean allowTld;
 
     /**
      * Singleton instance of this class, which
      *  doesn't consider local addresses as valid.
      */
-    private static final EmailValidator EMAIL_VALIDATOR = new EmailValidator(false);
+    private static final EmailValidator EMAIL_VALIDATOR = new EmailValidator(false, false);
+
+    /**
+     * Singleton instance of this class, which
+     *  doesn't consider local addresses as valid.
+     */
+    private static final EmailValidator EMAIL_VALIDATOR_WITH_TLD = new EmailValidator(false, true);
 
     /**
      * Singleton instance of this class, which does
      *  consider local addresses valid.
      */
-    private static final EmailValidator EMAIL_VALIDATOR_WITH_LOCAL = new EmailValidator(true);
+    private static final EmailValidator EMAIL_VALIDATOR_WITH_LOCAL = new EmailValidator(true, false);
+
+
+    /**
+     * Singleton instance of this class, which does
+     *  consider local addresses valid.
+     */
+    private static final EmailValidator EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD = new EmailValidator(true, true);
 
     /**
      * Returns the Singleton instance of this validator.
@@ -80,11 +94,42 @@ public class EmailValidator implements Serializable {
      * @param allowLocal Should local addresses be considered valid?
      * @return singleton instance of this validator
      */
-    public static EmailValidator getInstance(boolean allowLocal) {
+    public static EmailValidator getInstance(boolean allowLocal, boolean allowTld) {
         if(allowLocal) {
-           return EMAIL_VALIDATOR_WITH_LOCAL;
+            if (allowTld) {
+                return EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD;
+            } else {
+                return EMAIL_VALIDATOR_WITH_LOCAL;
+            }
+        } else {
+            if (allowTld) {
+                return EMAIL_VALIDATOR_WITH_TLD;
+            } else {
+                return EMAIL_VALIDATOR;
+            }
         }
-        return EMAIL_VALIDATOR;
+    }
+
+    /**
+     * Returns the Singleton instance of this validator,
+     *  with local validation as required.
+     *
+     * @param allowLocal Should local addresses be considered valid?
+     * @return singleton instance of this validator
+     */
+    public static EmailValidator getInstance(boolean allowLocal) {
+        return getInstance(allowLocal, false);
+    }
+
+    /**
+     * Protected constructor for subclasses to use.
+     *
+     * @param allowLocal Should local addresses be considered valid?
+     */
+    protected EmailValidator(boolean allowLocal, boolean allowTld) {
+        super();
+        this.allowLocal = allowLocal;
+        this.allowTld = allowTld;
     }
 
     /**
@@ -95,6 +140,7 @@ public class EmailValidator implements Serializable {
     protected EmailValidator(boolean allowLocal) {
         super();
         this.allowLocal = allowLocal;
+        this.allowTld = false;
     }
 
     /**
@@ -148,8 +194,11 @@ public class EmailValidator implements Serializable {
         // Domain is symbolic name
         DomainValidator domainValidator =
                 DomainValidator.getInstance(allowLocal);
-        return domainValidator.isValid(domain) ||
-                domainValidator.isValidTld(domain);
+        if (allowTld) {
+            return domainValidator.isValid(domain) || domainValidator.isValidTld(domain);
+        } else {
+            return domainValidator.isValid(domain);
+        }
     }
 
     /**
diff --git a/src/test/java/org/apache/commons/validator/EmailTest.java b/src/test/java/org/apache/commons/validator/EmailTest.java
index 1192b9e9..d944c9bc 100644
--- a/src/test/java/org/apache/commons/validator/EmailTest.java
+++ b/src/test/java/org/apache/commons/validator/EmailTest.java
@@ -218,7 +218,12 @@ public class EmailTest extends AbstractCommonTest {
       ValueBean info = new ValueBean();
 
       info.setValue("m@de");
-      valueTest(info, true);
+      valueTest(info, false);
+
+       org.apache.commons.validator.routines.EmailValidator validator =
+               org.apache.commons.validator.routines.EmailValidator.getInstance(true, true);
+      boolean result = validator.isValid("m@de");
+      assertTrue("Result should have been true", result);
 
    }
 
