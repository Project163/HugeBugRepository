diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/DefaultJsonPointerFactory.java b/johnzon-core/src/main/java/org/apache/johnzon/core/DefaultJsonPointerFactory.java
new file mode 100644
index 00000000..152f029d
--- /dev/null
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/DefaultJsonPointerFactory.java
@@ -0,0 +1,31 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.johnzon.core;
+
+import org.apache.johnzon.core.spi.JsonPointerFactory;
+
+import javax.json.JsonPointer;
+import javax.json.spi.JsonProvider;
+
+public class DefaultJsonPointerFactory implements JsonPointerFactory {
+    @Override
+    public JsonPointer createPointer(final JsonProvider provider, final String path) {
+        return new JsonPointerImpl(provider, path);
+    }
+}
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPatchImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPatchImpl.java
index 390c4386..41ceedfd 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPatchImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPatchImpl.java
@@ -29,6 +29,7 @@ import javax.json.JsonException;
 import javax.json.JsonObject;
 import javax.json.JsonObjectBuilder;
 import javax.json.JsonPatch;
+import javax.json.JsonPointer;
 import javax.json.JsonStructure;
 import javax.json.JsonValue;
 import javax.json.spi.JsonProvider;
@@ -147,9 +148,11 @@ class JsonPatchImpl implements JsonPatch {
     static class PatchValue {
         private final JsonProvider provider;
         private final JsonPatch.Operation operation;
-        private final JsonPointerImpl path;
-        private final JsonPointerImpl from;
+        private final JsonPointer path;
+        private final JsonPointer from;
         private final JsonValue value;
+        private final String pathPtr;
+        private final String fromPtr;
 
         private volatile String str;
         private volatile JsonObject json;
@@ -162,11 +165,13 @@ class JsonPatchImpl implements JsonPatch {
                    final JsonValue value) {
             this.provider = provider;
             this.operation = operation;
-            this.path = new JsonPatchPointerImpl(provider, path);
+            this.path = provider.createPointer(path);
+            this.pathPtr = path;
+            this.fromPtr = from;
 
             // ignore from if we do not need it
             if (operation == JsonPatch.Operation.MOVE || operation == JsonPatch.Operation.COPY) {
-                this.from = new JsonPatchPointerImpl(provider, from);
+                this.from = provider.createPointer(from);
             } else {
                 this.from = null;
             }
@@ -233,10 +238,10 @@ class JsonPatchImpl implements JsonPatch {
                     if (json == null) {
                         JsonObjectBuilder builder = provider.createObjectBuilder()
                                 .add("op", operation.name().toLowerCase())
-                                .add("path", path.getJsonPointer());
+                                .add("path", pathPtr);
 
-                        if (from != null) {
-                            builder.add("from", from.getJsonPointer());
+                        if (fromPtr != null) {
+                            builder.add("from", fromPtr);
                         }
 
                         if (value != null) {
@@ -250,24 +255,4 @@ class JsonPatchImpl implements JsonPatch {
             return json;
         }
     }
-
-    public static class JsonPatchPointerImpl extends JsonPointerImpl {
-
-        /**
-         * Constructs and initializes a JsonPointer.
-         *
-         * @param provider the JsonProvider
-         * @param jsonPointer the JSON Pointer string
-         * @throws NullPointerException if {@code jsonPointer} is {@code null}
-         * @throws JsonException        if {@code jsonPointer} is not a valid JSON Pointer
-         */
-        public JsonPatchPointerImpl(final JsonProvider provider, final String jsonPointer) {
-            super(provider, jsonPointer);
-        }
-
-        @Override
-        protected int minusShift() {
-            return 1;
-        }
-    }
 }
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPointerImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPointerImpl.java
index 2f1a76d0..036986e6 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPointerImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPointerImpl.java
@@ -499,7 +499,7 @@ public class JsonPointerImpl implements JsonPointer {
      * @return the shift to apply on minus. For pointer, it's 0 because we need the element right after the last.
      */
     protected int minusShift() {
-        return 0;
+        return 1;
     }
 
     private void validateJsonPointer(JsonValue target, int size) throws NullPointerException, JsonException {
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonProviderImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonProviderImpl.java
index 282f286e..c3147d99 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonProviderImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonProviderImpl.java
@@ -18,6 +18,8 @@
  */
 package org.apache.johnzon.core;
 
+import org.apache.johnzon.core.spi.JsonPointerFactory;
+
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.Reader;
@@ -27,7 +29,9 @@ import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.Collection;
 import java.util.Map;
+import java.util.ServiceLoader;
 import java.util.function.Supplier;
+import java.util.stream.StreamSupport;
 
 import javax.json.JsonArray;
 import javax.json.JsonArrayBuilder;
@@ -52,6 +56,8 @@ import javax.json.stream.JsonGeneratorFactory;
 import javax.json.stream.JsonParser;
 import javax.json.stream.JsonParserFactory;
 
+import static java.util.Comparator.comparing;
+
 public class JsonProviderImpl extends JsonProvider implements Serializable {
     private final Supplier<BufferStrategy.BufferProvider<char[]>> bufferProvider = new Cached<>(() ->
         BufferStrategyFactory.valueOf(System.getProperty(AbstractJsonFactory.BUFFER_STRATEGY, "QUEUE"))
@@ -63,6 +69,13 @@ public class JsonProviderImpl extends JsonProvider implements Serializable {
     private final JsonWriterFactory writerFactory = new JsonWriterFactoryImpl(null);
     private final Supplier<JsonBuilderFactory> builderFactory = new Cached<>(() ->
             new JsonBuilderFactoryImpl(null, bufferProvider.get()));
+    private final JsonPointerFactory jsonPointerFactory;
+
+    public JsonProviderImpl() {
+        jsonPointerFactory = StreamSupport.stream(ServiceLoader.load(JsonPointerFactory.class).spliterator(), false)
+                .min(comparing(JsonPointerFactory::ordinal))
+                .orElseGet(DefaultJsonPointerFactory::new);
+    }
 
     @Override
     public JsonParser createParser(final InputStream in) {
@@ -203,7 +216,7 @@ public class JsonProviderImpl extends JsonProvider implements Serializable {
 
     @Override
     public JsonPointer createPointer(String path) {
-        return new JsonPointerImpl(this, path);
+        return jsonPointerFactory.createPointer(this, path);
     }
 
     @Override
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/spi/JsonPointerFactory.java b/johnzon-core/src/main/java/org/apache/johnzon/core/spi/JsonPointerFactory.java
new file mode 100644
index 00000000..1b0a51a4
--- /dev/null
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/spi/JsonPointerFactory.java
@@ -0,0 +1,30 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.johnzon.core.spi;
+
+import javax.json.JsonPointer;
+import javax.json.spi.JsonProvider;
+
+public interface JsonPointerFactory {
+    JsonPointer createPointer(JsonProvider provider, String path);
+
+    default int ordinal() {
+        return 0;
+    }
+}
diff --git a/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPointerTest.java b/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPointerTest.java
index f9e782c4..8389f41d 100644
--- a/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPointerTest.java
+++ b/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPointerTest.java
@@ -455,21 +455,8 @@ public class JsonPointerTest {
         assertEquals("[[\"bar\",\"baz\"]]", result.toString()); // [["bar","baz"]]
     }
 
-    @Test(expected = JsonException.class)
-    public void testRemoveLastArrayElement() {
-        JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/0/-");
-        JsonStructure target = Json.createArrayBuilder()
-                                   .add(Json.createArrayBuilder()
-                                            .add("bar")
-                                            .add("qux")
-                                            .add("baz")).build(); // [["bar","qux","baz"]]
-
-        JsonStructure result = jsonPointer.remove(target);
-        assertEquals("[[\"bar\",\"qux\"]]", result.toString()); // [["bar","qux"]]
-    }
-
     public void testRemoveLastArrayElementWithPatch() {
-        JsonPointerImpl jsonPointer = new JsonPatchImpl.JsonPatchPointerImpl(JsonProvider.provider(), "/0/-");
+        JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/0/-");
         JsonStructure target = Json.createArrayBuilder()
                                    .add(Json.createArrayBuilder()
                                             .add("bar")
@@ -480,78 +467,6 @@ public class JsonPointerTest {
         assertEquals("[[\"bar\",\"qux\"]]", result.toString()); // [["bar","qux"]]
     }
 
-    @Test(expected = JsonException.class)
-    public void testGetLastArrayElementSimple() {
-        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/-");
-        final JsonStructure target = Json.createArrayBuilder()
-                                         .add("bar")
-                                         .add("qux")
-                                         .add("baz")
-                                         .build();
-
-        jsonPointer.getValue(target);
-    }
-
-    @Test(expected = JsonException.class)
-    public void testGetLastArrayElement() {
-        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/-");
-        final JsonStructure target = Json.createArrayBuilder()
-                                         .add(Json.createArrayBuilder()
-                                                  .add("bar")
-                                                  .add("qux")
-                                                  .add("baz")).build(); // [["bar","qux","baz"]]
-
-        jsonPointer.getValue(target);
-    }
-
-    @Test(expected = JsonException.class)
-    public void testGetLastArrayElement2() {
-        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/0/-");
-        final JsonStructure target = Json.createArrayBuilder()
-                                         .add(Json.createArrayBuilder()
-                                                  .add("bar")
-                                                  .add("qux")
-                                                  .add("baz")).build(); // [["bar","qux","baz"]]
-
-        jsonPointer.getValue(target);
-    }
-
-    @Test(expected = JsonException.class)
-    public void testReplaceLastArrayElementSimple() {
-        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/-");
-        final JsonStructure target = Json.createArrayBuilder()
-                                         .add("bar")
-                                         .add("qux")
-                                         .add("baz")
-                                         .build();
-
-        jsonPointer.replace(target, new JsonStringImpl("won't work"));
-    }
-
-    @Test(expected = JsonException.class)
-    public void testReplaceLastArrayElement() {
-        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/-");
-        final JsonStructure target = Json.createArrayBuilder()
-                                         .add(Json.createArrayBuilder()
-                                                  .add("bar")
-                                                  .add("qux")
-                                                  .add("baz")).build(); // [["bar","qux","baz"]]
-
-        jsonPointer.replace(target, new JsonStringImpl("won't work"));
-    }
-
-    @Test(expected = JsonException.class)
-    public void testReplaceLastArrayElement2() {
-        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/0/-");
-        final JsonStructure target = Json.createArrayBuilder()
-                                         .add(Json.createArrayBuilder()
-                                                  .add("bar")
-                                                  .add("qux")
-                                                  .add("baz")).build(); // [["bar","qux","baz"]]
-
-        jsonPointer.replace(target, new JsonStringImpl("won't work"));
-    }
-
     @Test
     public void testAddLastArrayElementSimple() {
         final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/-");
@@ -591,22 +506,9 @@ public class JsonPointerTest {
         assertEquals("[[\"bar\",\"qux\",\"baz\",\"xyz\"]]", result.toString());
     }
 
-    @Test(expected = JsonException.class)
-    public void testRemoveLastArrayElementSimple() {
-        JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/-");
-        JsonStructure target = Json.createArrayBuilder()
-                .add("bar")
-                .add("qux")
-                .add("baz")
-                .build();
-
-        JsonStructure result = jsonPointer.remove(target);
-        assertEquals("[\"bar\",\"qux\"]", result.toString());
-    }
-
     @Test
     public void testRemoveLastArrayElementSimpleWithPatch() {
-        JsonPointerImpl jsonPointer = new JsonPatchImpl.JsonPatchPointerImpl(JsonProvider.provider(), "/-");
+        JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/-");
         JsonStructure target = Json.createArrayBuilder()
                                    .add("bar")
                                    .add("qux")
@@ -624,17 +526,6 @@ public class JsonPointerTest {
         jsonPointer.remove(target);
     }
 
-    @Test(expected = JsonException.class)
-    public void testRemoveLastArrayElementFromEmpty() {
-        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/0/-");
-        final JsonStructure target = Json.createArrayBuilder()
-                                   .add(Json.createArrayBuilder()
-                                            .add("bar")
-                                            .add("qux")
-                                            .add("baz")).build(); // [["bar","qux","baz"]]
-        jsonPointer.remove(target);
-    }
-
     @Test
     public void testRemoveObjectMember() {
         JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/baz");
