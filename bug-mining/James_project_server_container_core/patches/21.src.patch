diff --git a/server/container/core/pom.xml b/server/container/core/pom.xml
index d37c834236..22991c21cc 100644
--- a/server/container/core/pom.xml
+++ b/server/container/core/pom.xml
@@ -141,7 +141,7 @@
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-surefire-plugin</artifactId>
                 <configuration>
-                    <reuseForks>true</reuseForks>
+                    <reuseForks>false</reuseForks>
                     <forkCount>1C</forkCount>
                 </configuration>
             </plugin>
diff --git a/server/container/core/src/main/java/org/apache/james/server/core/ContentTypeCleaner.java b/server/container/core/src/main/java/org/apache/james/server/core/ContentTypeCleaner.java
new file mode 100644
index 0000000000..5d433149f8
--- /dev/null
+++ b/server/container/core/src/main/java/org/apache/james/server/core/ContentTypeCleaner.java
@@ -0,0 +1,51 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+package org.apache.james.server.core;
+
+import java.util.regex.Pattern;
+
+import javax.mail.internet.MimePart;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.common.base.Strings;
+
+public class ContentTypeCleaner {
+    private static final Logger LOGGER = LoggerFactory.getLogger(ContentTypeCleaner.class);
+    private static final Pattern REGEX = Pattern.compile("^[\\w\\-]+/[\\w\\-]+");
+    private static final String HANDLER_CLASS_PROPERTY = "mail.mime.contenttypehandler";
+
+    public static void initialize() {
+        System.setProperty(HANDLER_CLASS_PROPERTY, ContentTypeCleaner.class.getName());
+    }
+
+    public static String cleanContentType(MimePart mimePart, String contentType) {
+        if (Strings.isNullOrEmpty(contentType)) {
+            return null;
+        }
+
+        if (REGEX.matcher(contentType).find()) {
+            return contentType;
+        }
+
+        LOGGER.warn("Can not parse Content-Type: " + contentType);
+        return null;
+    }
+}
diff --git a/server/container/core/src/test/java/org/apache/james/server/core/ContentTypeCleanerTest.java b/server/container/core/src/test/java/org/apache/james/server/core/ContentTypeCleanerTest.java
new file mode 100644
index 0000000000..c1d1bf14a8
--- /dev/null
+++ b/server/container/core/src/test/java/org/apache/james/server/core/ContentTypeCleanerTest.java
@@ -0,0 +1,55 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+
+package org.apache.james.server.core;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import org.junit.jupiter.api.Test;
+
+public class ContentTypeCleanerTest {
+    @Test
+    void nullContentTypeShouldReturnNull() {
+        assertThat(ContentTypeCleaner
+                .cleanContentType(null, null))
+                .isNull();
+    }
+
+    @Test
+    void emptyContentTypeShouldReturnNull() {
+        assertThat(ContentTypeCleaner
+                .cleanContentType(null, ""))
+                .isNull();
+    }
+
+    @Test
+    void invalidContentTypeShouldReturnNull() {
+        assertThat(ContentTypeCleaner
+                .cleanContentType(null, "I'mNotValid"))
+                .isNull();
+    }
+
+    @Test
+    void validContentTypeShouldReturnTheRawInput() {
+        String contentType = "application/pdf";
+        assertThat(ContentTypeCleaner
+                .cleanContentType(null, contentType))
+                .isEqualTo(contentType);
+    }
+}
diff --git a/server/container/core/src/test/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxyTest.java b/server/container/core/src/test/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxyTest.java
index dfa46e5b87..0d0291c694 100644
--- a/server/container/core/src/test/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxyTest.java
+++ b/server/container/core/src/test/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxyTest.java
@@ -31,14 +31,22 @@ import org.apache.james.core.MailAddress;
 import org.apache.james.core.builder.MimeMessageBuilder;
 import org.apache.james.lifecycle.api.LifecycleUtil;
 import org.apache.mailet.Mail;
+import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
+import com.google.common.collect.ImmutableList;
+
 public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
 
     final String content = "Subject: foo\r\nContent-Transfer-Encoding2: plain";
     final String sep = "\r\n\r\n";
     final String body = "bar\r\n.\r\n";
 
+    @BeforeAll
+    static void setUp() {
+        ContentTypeCleaner.initialize();
+    }
+
     @Override
     protected MimeMessage getMessageFromSources(String sources) throws Exception {
         MimeMessageInputStreamSource mmis = new MimeMessageInputStreamSource("test", new SharedByteArrayInputStream(sources.getBytes()));
@@ -46,7 +54,7 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
     }
 
     @Test
-    public void testMessageCloning1() throws Exception {
+    void testMessageCloning1() throws Exception {
         ArrayList<MailAddress> r = new ArrayList<>();
         r.add(new MailAddress("recipient@test.com"));
         MimeMessageCopyOnWriteProxy messageFromSources = (MimeMessageCopyOnWriteProxy) getMessageFromSources(
@@ -72,7 +80,7 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
     }
 
     @Test
-    public void testMessageCloning2() throws Exception {
+    void testMessageCloning2() throws Exception {
         ArrayList<MailAddress> r = new ArrayList<>();
         r.add(new MailAddress("recipient@test.com"));
         MimeMessageCopyOnWriteProxy messageFromSources = (MimeMessageCopyOnWriteProxy) getMessageFromSources(
@@ -122,7 +130,7 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
      * change the second, then it should not clone
      */
     @Test
-    public void testMessageAvoidCloning() throws Exception {
+    void testMessageAvoidCloning() throws Exception {
         ArrayList<MailAddress> r = new ArrayList<>();
         r.add(new MailAddress("recipient@test.com"));
         MimeMessageCopyOnWriteProxy messageFromSources = (MimeMessageCopyOnWriteProxy) getMessageFromSources(
@@ -158,7 +166,7 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
      * should clone the message.
      */
     @Test
-    public void testMessageCloning3() throws Exception {
+    void testMessageCloning3() throws Exception {
         ArrayList<MailAddress> r = new ArrayList<>();
         r.add(new MailAddress("recipient@test.com"));
         MimeMessage mimeMessage = MimeMessageBuilder.mimeMessageBuilder()
@@ -181,7 +189,7 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
     }
 
     @Test
-    public void testMessageDisposing() throws Exception {
+    void testMessageDisposing() throws Exception {
         ArrayList<MailAddress> r = new ArrayList<>();
         r.add(new MailAddress("recipient@test.com"));
         MimeMessageCopyOnWriteProxy messageFromSources = (MimeMessageCopyOnWriteProxy) getMessageFromSources(
@@ -203,7 +211,7 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
     }
 
     @Test
-    public void testNPE1() throws MessagingException, InterruptedException {
+    void testNPE1() throws MessagingException, InterruptedException {
         ArrayList<MailAddress> recipients = new ArrayList<>();
         recipients.add(new MailAddress("recipient@test.com"));
         MimeMessageCopyOnWriteProxy mw = new MimeMessageCopyOnWriteProxy(new MimeMessageInputStreamSource("test",
@@ -225,7 +233,7 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
      * created by a MimeMessageInputStreamSource.
      */
     @Test
-    public void testMessageCloningViaCoW3() throws Exception {
+    void testMessageCloningViaCoW3() throws Exception {
         MimeMessage mmorig = getSimpleMessage();
 
         MimeMessage mm = new MimeMessageCopyOnWriteProxy(mmorig);
@@ -245,6 +253,18 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
         LifecycleUtil.dispose(mm);
     }
 
+    @Test
+    void testMessageWithWrongContentTypeShouldNotThrow() throws Exception {
+        ImmutableList<MailAddress> recipients = ImmutableList.of(new MailAddress("recipient@test.com"));
+        MimeMessageCopyOnWriteProxy messageFromSources = (MimeMessageCopyOnWriteProxy) getMessageFromSources(
+                content + sep + body);
+        MailImpl mail = new MailImpl("test", new MailAddress("test@test.com"), recipients, messageFromSources);
+        mail.getMessage().addHeader("Content-Type", "file;name=\"malformed.pdf\"");
+        mail.getMessage().saveChanges();
+        LifecycleUtil.dispose(mail);
+        LifecycleUtil.dispose(messageFromSources);
+    }
+
     private static String getReferences(MimeMessage m) {
         StringBuilder ref = new StringBuilder("/");
         while (m instanceof MimeMessageCopyOnWriteProxy) {
@@ -268,6 +288,5 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
 
     private static boolean isSameMimeMessage(MimeMessage first, MimeMessage second) {
         return getWrappedMessage(first) == getWrappedMessage(second);
-
     }
 }
