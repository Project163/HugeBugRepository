diff --git a/README.md b/README.md
index 5ab073a2..c1bf802c 100644
--- a/README.md
+++ b/README.md
@@ -60,7 +60,7 @@ Features
 1. Cipher API for low level cryptographic operations.
 2. Java stream API (CryptoInputStream/CryptoOutputStream) for high level stream encyrption/decryption.
 3. Both optimized with high performance AES encryption/decryption. (1400 MB/s - 1700 MB/s throughput in modern Xeon processors).
-4. JNI-based implementation to achieve comparable performance to the native C++ version based on Openssl.
+4. JNI-based implementation to achieve comparable performance to the native C++ version based on OpenSsl.
 5. Portable across various operating systems (currently only Linux);
    Apache Commons Crypto loads the library according to your machine environment (it checks system properties, `os.name` and `os.arch`).
 6. Simple usage. Add the commons-crypto-(version).jar file to your classpath.
diff --git a/pom.xml b/pom.xml
index 0d3892d3..e5dbcdfd 100644
--- a/pom.xml
+++ b/pom.xml
@@ -38,7 +38,7 @@ Features
 1. Cipher API for low level cryptographic operations.
 2. Java stream API (CryptoInputStream/CryptoOutputStream) for high level stream encyrption/decryption.
 3. Both optimized with high performance AES encryption/decryption. (1400 MB/s - 1700 MB/s throughput in modern Xeon processors).
-4. JNI-based implementation to achieve comparable performance to the native C++ version based on Openssl.
+4. JNI-based implementation to achieve comparable performance to the native C++ version based on OpenSsl.
 5. Portable across various operating systems (currently only Linux);
    Apache Commons Crypto loads the library according to your machine environment (it checks system properties, `os.name` and `os.arch`).
 6. Simple usage. Add the commons-crypto-(version).jar file to your classpath.
diff --git a/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java b/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java
index c05be6d6..12aa7977 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java
@@ -47,7 +47,7 @@ public enum CipherProvider {
          * <p>
          * This implementation does not use any properties
          */
-        OPENSSL(OpensslCipher.class),
+        OPENSSL(OpenSslCipher.class),
         
         /**
          * The JCE cipher implementation from the JVM
@@ -91,7 +91,7 @@ public Class<? extends CryptoCipher> getImplClass() {
     }
 
     /**
-     * The default value (OpensslCipher,JceCipher) for crypto cipher.
+     * The default value (OpenSslCipher,JceCipher) for crypto cipher.
      */
     private static final String CIPHER_CLASSES_DEFAULT = 
             CipherProvider.OPENSSL.getClassName()
@@ -109,7 +109,7 @@ private CryptoCipherFactory() {
      *
      * @param props  the configuration properties (uses ConfigurationKeys.CIPHER_CLASSES_KEY)
      * @param transformation  algorithm/mode/padding
-     * @return CryptoCipher  the cipher  (defaults to OpensslCipher)
+     * @return CryptoCipher  the cipher  (defaults to OpenSslCipher)
      * @throws GeneralSecurityException if cipher initialize failed
      * @throws IllegalArgumentException if no classname(s)
      */
@@ -151,7 +151,7 @@ public static CryptoCipher getCryptoCipher(String transformation,
      * <i>AES/CBC/PKCS5Padding</i>.
      * See the Java Cryptography Architecture Standard Algorithm Name Documentation
      * for information about standard transformation names.
-     * @return CryptoCipher the cipher object (defaults to OpensslCipher if available, else JceCipher)
+     * @return CryptoCipher the cipher object (defaults to OpenSslCipher if available, else JceCipher)
      * @throws GeneralSecurityException if JCE cipher initialize failed
      */
     public static CryptoCipher getCryptoCipher(String transformation)
diff --git a/src/main/java/org/apache/commons/crypto/cipher/Openssl.java b/src/main/java/org/apache/commons/crypto/cipher/OpenSsl.java
similarity index 95%
rename from src/main/java/org/apache/commons/crypto/cipher/Openssl.java
rename to src/main/java/org/apache/commons/crypto/cipher/OpenSsl.java
index 3a9b1466..6c72ea52 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/Openssl.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/OpenSsl.java
@@ -32,9 +32,9 @@
  * OpenSSL cryptographic wrapper using JNI. Currently only AES-CTR is supported.
  * It's flexible to add other crypto algorithms/modes.
  */
-final class Openssl {
+final class OpenSsl {
 
-    // Mode constant defined by Openssl JNI
+    // Mode constant defined by OpenSsl JNI
     public static final int ENCRYPT_MODE = 1;
     public static final int DECRYPT_MODE = 0;
 
@@ -102,7 +102,7 @@ static int get(String padding) throws NoSuchPaddingException {
     }
 
     /**
-     * Gets the failure reason when loading Openssl native.
+     * Gets the failure reason when loading OpenSsl native.
      *
      * @return the failure reason.
      */
@@ -111,39 +111,39 @@ public static String getLoadingFailureReason() {
     }
 
     /**
-     * Constructs a {@link Openssl} instance based on context, algorithm and padding.
+     * Constructs a {@link OpenSsl} instance based on context, algorithm and padding.
      *
      * @param context the context.
      * @param algorithm the algorithm.
      * @param padding the padding.
      */
-    private Openssl(long context, int algorithm, int padding) {
+    private OpenSsl(long context, int algorithm, int padding) {
         this.context = context;
         this.algorithm = algorithm;
         this.padding = padding;
     }
 
     /**
-     * Return an <code>OpensslCipher</code> object that implements the specified
+     * Return an <code>OpenSslCipher</code> object that implements the specified
      * transformation.
      *
      * @param transformation the name of the transformation, e.g.,
      *        AES/CTR/NoPadding.
-     * @return OpensslCipher an <code>OpensslCipher</code> object
+     * @return OpenSslCipher an <code>OpenSslCipher</code> object
      * @throws NoSuchAlgorithmException if <code>transformation</code> is null,
-     *         empty, in an invalid format, or if Openssl doesn't implement the
+     *         empty, in an invalid format, or if OpenSsl doesn't implement the
      *         specified algorithm.
      * @throws NoSuchPaddingException if <code>transformation</code> contains a
      *         padding scheme that is not available.
      */
-    public static Openssl getInstance(String transformation)
+    public static OpenSsl getInstance(String transformation)
             throws NoSuchAlgorithmException, NoSuchPaddingException {
         Transform transform = tokenizeTransformation(transformation);
         int algorithmMode = AlgorithmMode.get(transform.algorithm,
                 transform.mode);
         int padding = Padding.get(transform.padding);
         long context = OpensslNative.initContext(algorithmMode, padding);
-        return new Openssl(context, algorithmMode, padding);
+        return new OpenSsl(context, algorithmMode, padding);
     }
 
     /** Nested class for algorithm, mode and padding. */
diff --git a/src/main/java/org/apache/commons/crypto/cipher/OpensslCipher.java b/src/main/java/org/apache/commons/crypto/cipher/OpenSslCipher.java
similarity index 95%
rename from src/main/java/org/apache/commons/crypto/cipher/OpensslCipher.java
rename to src/main/java/org/apache/commons/crypto/cipher/OpenSslCipher.java
index 06e3798b..af25df38 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/OpensslCipher.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/OpenSslCipher.java
@@ -35,9 +35,9 @@
 /**
  * Implements the CryptoCipher using JNI into OpenSSL.
  */
-class OpensslCipher implements CryptoCipher {
+class OpenSslCipher implements CryptoCipher {
 
-    private final Openssl cipher;
+    private final OpenSsl cipher;
 
     private final String transformation;
 
@@ -52,16 +52,16 @@ class OpensslCipher implements CryptoCipher {
      */
     // N.B. this class is not public/protected so does not appear in the main Javadoc
     // Please ensure that property use is documented in the enum CryptoRandomFactory.RandomProvider
-    public OpensslCipher(Properties props, String transformation) // NOPMD
+    public OpenSslCipher(Properties props, String transformation) // NOPMD
             throws GeneralSecurityException {
         this.transformation = transformation;
 
-        String loadingFailureReason = Openssl.getLoadingFailureReason();
+        String loadingFailureReason = OpenSsl.getLoadingFailureReason();
         if (loadingFailureReason != null) {
             throw new RuntimeException(loadingFailureReason);
         }
 
-        cipher = Openssl.getInstance(transformation);
+        cipher = OpenSsl.getInstance(transformation);
     }
 
     /**
@@ -104,9 +104,9 @@ public void init(int mode, Key key, AlgorithmParameterSpec params)
         Utils.checkNotNull(key);
         Utils.checkNotNull(params);
 
-        int cipherMode = Openssl.DECRYPT_MODE;
+        int cipherMode = OpenSsl.DECRYPT_MODE;
         if (mode == Cipher.ENCRYPT_MODE) {
-            cipherMode = Openssl.ENCRYPT_MODE;
+            cipherMode = OpenSsl.ENCRYPT_MODE;
         }
         byte[] iv;
         if (params instanceof IvParameterSpec) {
@@ -213,7 +213,7 @@ public int doFinal(byte[] input, int inputOffset, int inputLen,
     }
 
     /**
-     * Closes the OpenSSL cipher. Clean the Openssl native context.
+     * Closes the OpenSSL cipher. Clean the OpenSsl native context.
      */
     @Override
     public void close() {
diff --git a/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java b/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java
index 2db91e5d..9bac6ddd 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java
@@ -20,7 +20,7 @@
 import java.nio.ByteBuffer;
 
 /**
- * JNI interface of {@link Openssl} implementation. The native method in this
+ * JNI interface of {@link OpenSsl} implementation. The native method in this
  * class is defined in OpensslNative.h (generated by javah).
  */
 class OpensslNative {
@@ -50,8 +50,8 @@ private OpensslNative() {
      *
      * @param context The cipher context address
      * @param mode ENCRYPT_MODE or DECRYPT_MODE
-     * @param alg Algorithm Mode of Openssl
-     * @param padding the padding mode of Openssl cipher
+     * @param alg Algorithm Mode of OpenSsl
+     * @param padding the padding mode of OpenSsl cipher
      * @param key crypto key
      * @param iv crypto iv
      * @return the context address of cipher
diff --git a/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java b/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
index 875d1132..d5c19a40 100644
--- a/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
+++ b/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
@@ -37,10 +37,10 @@ public class ConfigurationKeys {
      * The configuration key of implementation class for crypto cipher. The
      * values of CIPHER_CLASSES_KEY can be
      * "org.apache.commons.crypto.cipher.JceCipher" or
-     * "org.apache.commons.crypto.cipher.OpensslCipher". Or it can be a comma
+     * "org.apache.commons.crypto.cipher.OpenSslCipher". Or it can be a comma
      * separated list. The "org.apache.commons.crypto.cipher.JceCipher" use jce
      * provider to implement CryptoCipher and the
-     * "org.apache.commons.crypto.cipher.OpensslCipher" use jni into openssl to
+     * "org.apache.commons.crypto.cipher.OpenSslCipher" use jni into openssl to
      * implement. Note that for each value,the first value which can be created
      * without exception will be used (priority by order).
      */
@@ -80,11 +80,11 @@ public class ConfigurationKeys {
      * The configuration key of the implementation class for secure random. The
      * values of SECURE_RANDOM_CLASSES_KEY can be
      * "org.apache.commons.crypto.random.JavaCryptoRandom" or
-     * "org.apache.commons.crypto.random.OpensslCryptoRandom". Or it takes a
+     * "org.apache.commons.crypto.random.OpenSslCryptoRandom". Or it takes a
      * comma separated list. The
      * "org.apache.commons.crypto.random.JavaCryptoRandom" use java to implement
      * {@link org.apache.commons.crypto.random.CryptoRandom} and the
-     * "org.apache.commons.crypto.random.OpensslCryptoRandom" use jni into
+     * "org.apache.commons.crypto.random.OpenSslCryptoRandom" use jni into
      * openssl to implement. Note that for each value,the first value which can
      * be created without exception will be used (priority by order).
      */
diff --git a/src/main/java/org/apache/commons/crypto/jna/OpensslJnaCipher.java b/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCipher.java
similarity index 98%
rename from src/main/java/org/apache/commons/crypto/jna/OpensslJnaCipher.java
rename to src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCipher.java
index 05ee3679..adef3cf8 100644
--- a/src/main/java/org/apache/commons/crypto/jna/OpensslJnaCipher.java
+++ b/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCipher.java
@@ -43,7 +43,7 @@
 /**
  * Implements the CryptoCipher using JNA into OpenSSL.
  */
-class OpensslJnaCipher implements CryptoCipher {
+class OpenSslJnaCipher implements CryptoCipher {
 
     private final static int AES_BLOCK_SIZE = 16;
     
@@ -60,7 +60,7 @@ class OpensslJnaCipher implements CryptoCipher {
      * @param transformation transformation for OpenSSL cipher
      * @throws GeneralSecurityException if OpenSSL cipher initialize failed
      */
-    public OpensslJnaCipher(Properties props, String transformation)
+    public OpenSslJnaCipher(Properties props, String transformation)
             throws GeneralSecurityException {
         this.transformation = transformation;
         Transform transform = tokenizeTransformation(transformation);
@@ -229,7 +229,7 @@ public int doFinal(byte[] input, int inputOffset, int inputLen,
     }
 
     /**
-     * Closes the OpenSSL cipher. Clean the Openssl native context.
+     * Closes the OpenSSL cipher. Clean the OpenSsl native context.
      */
     @Override
     public void close() {
diff --git a/src/main/java/org/apache/commons/crypto/jna/OpensslJnaCryptoRandom.java b/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCryptoRandom.java
similarity index 95%
rename from src/main/java/org/apache/commons/crypto/jna/OpensslJnaCryptoRandom.java
rename to src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCryptoRandom.java
index 7915d86e..1f4e9718 100644
--- a/src/main/java/org/apache/commons/crypto/jna/OpensslJnaCryptoRandom.java
+++ b/src/main/java/org/apache/commons/crypto/jna/OpenSslJnaCryptoRandom.java
@@ -45,19 +45,19 @@
  * @see <a href="http://en.wikipedia.org/wiki/RdRand">
  *      http://en.wikipedia.org/wiki/RdRand</a>
  */
-class OpensslJnaCryptoRandom extends Random implements CryptoRandom {
+class OpenSslJnaCryptoRandom extends Random implements CryptoRandom {
     private static final long serialVersionUID = -7128193502768749585L;
     private final boolean rdrandEnabled;
     private PointerByReference rdrandEngine;
 
     /**
-     * Constructs a {@link OpensslJnaCryptoRandom}.
+     * Constructs a {@link OpenSslJnaCryptoRandom}.
      *
      * @param props the configuration properties (not used)
      * @throws NoSuchAlgorithmException if no Provider supports a
      *         SecureRandomSpi implementation for the specified algorithm.
      */
-    public OpensslJnaCryptoRandom(Properties props)
+    public OpenSslJnaCryptoRandom(Properties props)
             throws NoSuchAlgorithmException {
 
         boolean rdrandLoaded = false;
@@ -95,7 +95,7 @@ public OpensslJnaCryptoRandom(Properties props)
     @Override
     public void nextBytes(byte[] bytes) {
         
-        synchronized (OpensslJnaCryptoRandom.class) {
+        synchronized (OpenSslJnaCryptoRandom.class) {
             //this method is synchronized for now
             //to support multithreading https://wiki.openssl.org/index.php/Manual:Threads(3) needs to be done
             
@@ -113,7 +113,7 @@ public void nextBytes(byte[] bytes) {
     }
 
     /**
-     * Overrides {@link OpensslJnaCryptoRandom}. For {@link OpensslJnaCryptoRandom},
+     * Overrides {@link OpenSslJnaCryptoRandom}. For {@link OpenSslJnaCryptoRandom},
      * we don't need to set seed.
      *
      * @param seed the initial seed.
diff --git a/src/main/java/org/apache/commons/crypto/jna/OpensslJna.java b/src/main/java/org/apache/commons/crypto/jna/OpensslJna.java
index e27f96cd..2d255ab1 100644
--- a/src/main/java/org/apache/commons/crypto/jna/OpensslJna.java
+++ b/src/main/java/org/apache/commons/crypto/jna/OpensslJna.java
@@ -26,10 +26,10 @@
 public final class OpensslJna {
 
     public static Class<? extends CryptoCipher> getCipherClass() {
-        return OpensslJnaCipher.class;
+        return OpenSslJnaCipher.class;
     }
 
     public static Class<? extends CryptoRandom> getRandomClass() {
-        return OpensslJnaCryptoRandom.class;
+        return OpenSslJnaCryptoRandom.class;
     }
 }
diff --git a/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java b/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
index b27b1efc..5490830b 100644
--- a/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
+++ b/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
@@ -48,7 +48,7 @@ public enum RandomProvider {
          * No properties are used for configuration, but they
          * are passed to the JCE backup implementation (q.v.)
          */
-        OPENSSL(OpensslCryptoRandom.class),
+        OPENSSL(OpenSslCryptoRandom.class),
 
         /**
          * The SecureRandom implementation from the JVM
@@ -103,7 +103,7 @@ public Class<? extends CryptoRandom> getImplClass() {
     }
 
     /**
-     * The default value (OpensslCryptoRandom,JavaCryptoRandom) for crypto cipher.
+     * The default value (OpenSslCryptoRandom,JavaCryptoRandom) for crypto cipher.
      */
     private static final String SECURE_RANDOM_CLASSES_DEFAULT = RandomProvider
         .OPENSSL.getClassName().concat(",").concat(RandomProvider.JAVA
@@ -120,7 +120,7 @@ private CryptoRandomFactory() {
      * Uses the SECURE_RANDOM_CLASSES_KEY from the provided
      * properties.
      * If it is not set, then it checks the System properties.
-     * Failing that, it defaults to OpensslCryptoRandom,JavaCryptoRandom
+     * Failing that, it defaults to OpenSslCryptoRandom,JavaCryptoRandom
      * The properties are passed to the generated class.
      *
      * @param props the configuration properties.
diff --git a/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandom.java b/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandom.java
similarity index 95%
rename from src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandom.java
rename to src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandom.java
index 6bae4c0e..15a85ab3 100644
--- a/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandom.java
+++ b/src/main/java/org/apache/commons/crypto/random/OpenSslCryptoRandom.java
@@ -41,7 +41,7 @@
  * @see <a href="http://en.wikipedia.org/wiki/RdRand">
  *      http://en.wikipedia.org/wiki/RdRand</a>
  */
-class OpensslCryptoRandom extends Random implements CryptoRandom {
+class OpenSslCryptoRandom extends Random implements CryptoRandom {
     private static final long serialVersionUID = -7828193502768789584L;
 
     /** If native SecureRandom unavailable, use java SecureRandom */
@@ -70,7 +70,7 @@ public static boolean isNativeCodeLoaded() {
     }
 
     /**
-     * Constructs a {@link OpensslCryptoRandom}.
+     * Constructs a {@link OpenSslCryptoRandom}.
      *
      * @param props the configuration properties
      * Only used to construct the fallback {@link JavaCryptoRandom} instance
@@ -79,7 +79,7 @@ public static boolean isNativeCodeLoaded() {
      */
     // N.B. this class is not public/protected so does not appear in the main Javadoc
     // Please ensure that property use is documented in the enum CryptoRandomFactory.RandomProvider
-    public OpensslCryptoRandom(Properties props)
+    public OpenSslCryptoRandom(Properties props)
             throws NoSuchAlgorithmException {
         //fallback needs to be initialized here in any case cause even if
         //nativeEnabled is true OpensslCryptoRandomNative.nextRandBytes may fail
@@ -99,7 +99,7 @@ public void nextBytes(byte[] bytes) {
     }
 
     /**
-     * Overrides {@link OpensslCryptoRandom}. For {@link OpensslCryptoRandom},
+     * Overrides {@link OpenSslCryptoRandom}. For {@link OpenSslCryptoRandom},
      * we don't need to set seed.
      *
      * @param seed the initial seed.
diff --git a/src/test/java/org/apache/commons/crypto/CryptoBenchmark.java b/src/test/java/org/apache/commons/crypto/CryptoBenchmark.java
index ff43c590..80d6422e 100644
--- a/src/test/java/org/apache/commons/crypto/CryptoBenchmark.java
+++ b/src/test/java/org/apache/commons/crypto/CryptoBenchmark.java
@@ -53,13 +53,13 @@
 public class CryptoBenchmark {
 
     // TODO replace these with the appropriate public fields/methods when these have been set up
-    private static final String RANDOM_OPENSSL_JNA = "org.apache.commons.crypto.jna.OpensslJnaCryptoRandom";
+    private static final String RANDOM_OPENSSL_JNA = "org.apache.commons.crypto.jna.OpenSslJnaCryptoRandom";
     private static final String RANDOM_JAVA        = "org.apache.commons.crypto.random.JavaCryptoRandom";
     private static final String RANDOM_OS          = "org.apache.commons.crypto.random.OsCryptoRandom";
-    private static final String RANDOM_OPENSSL     = "org.apache.commons.crypto.random.OpensslCryptoRandom";
+    private static final String RANDOM_OPENSSL     = "org.apache.commons.crypto.random.OpenSslCryptoRandom";
 
-    private static final String CIPHER_OPENSSL_JNA = "org.apache.commons.crypto.jna.OpensslJnaCipher";
-    private static final String CIPHER_OPENSSL     = "org.apache.commons.crypto.cipher.OpensslCipher";
+    private static final String CIPHER_OPENSSL_JNA = "org.apache.commons.crypto.jna.OpenSslJnaCipher";
+    private static final String CIPHER_OPENSSL     = "org.apache.commons.crypto.cipher.OpenSslCipher";
     private static final String CIPHER_JCE         = "org.apache.commons.crypto.cipher.JceCipher";
 
     private static final byte[] KEY = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
diff --git a/src/test/java/org/apache/commons/crypto/cipher/AbstractCipherTest.java b/src/test/java/org/apache/commons/crypto/cipher/AbstractCipherTest.java
index 8c84ef70..9f5f3f3e 100644
--- a/src/test/java/org/apache/commons/crypto/cipher/AbstractCipherTest.java
+++ b/src/test/java/org/apache/commons/crypto/cipher/AbstractCipherTest.java
@@ -40,7 +40,7 @@
 
 public abstract class AbstractCipherTest {
 
-    public static final String OPENSSL_CIPHER_CLASSNAME = OpensslCipher.class.getName();
+    public static final String OPENSSL_CIPHER_CLASSNAME = OpenSslCipher.class.getName();
 
     public static final String JCE_CIPHER_CLASSNAME = JceCipher.class.getName();
 
diff --git a/src/test/java/org/apache/commons/crypto/cipher/CryptoCipherFactoryTest.java b/src/test/java/org/apache/commons/crypto/cipher/CryptoCipherFactoryTest.java
index 65029e9a..4547aabf 100644
--- a/src/test/java/org/apache/commons/crypto/cipher/CryptoCipherFactoryTest.java
+++ b/src/test/java/org/apache/commons/crypto/cipher/CryptoCipherFactoryTest.java
@@ -30,7 +30,7 @@ public class CryptoCipherFactoryTest {
     public void testDefaultCipher() throws GeneralSecurityException {
         CryptoCipher defaultCipher = CryptoCipherFactory
                 .getCryptoCipher("AES/CBC/NoPadding");
-        Assert.assertEquals(OpensslCipher.class.getName(), defaultCipher
+        Assert.assertEquals(OpenSslCipher.class.getName(), defaultCipher
                 .getClass().getName());
     }
 
@@ -41,7 +41,7 @@ public void testEmptyCipher() throws GeneralSecurityException {
                 ConfigurationKeys.CIPHER_CLASSES_KEY, "");
         CryptoCipher defaultCipher = CryptoCipherFactory.getCryptoCipher(
                 "AES/CBC/NoPadding", properties);
-        Assert.assertEquals(OpensslCipher.class.getName(), defaultCipher
+        Assert.assertEquals(OpenSslCipher.class.getName(), defaultCipher
                 .getClass().getName());
     }
 
diff --git a/src/test/java/org/apache/commons/crypto/cipher/OpensslCipherTest.java b/src/test/java/org/apache/commons/crypto/cipher/OpensslCipherTest.java
index 9df67f76..c5f04978 100644
--- a/src/test/java/org/apache/commons/crypto/cipher/OpensslCipherTest.java
+++ b/src/test/java/org/apache/commons/crypto/cipher/OpensslCipherTest.java
@@ -42,10 +42,10 @@ public void init() {
 
     @Test(expected = NoSuchAlgorithmException.class, timeout = 120000)
     public void testInvalidAlgorithm() throws Exception {
-        Assume.assumeTrue(Openssl.getLoadingFailureReason() == null);
+        Assume.assumeTrue(OpenSsl.getLoadingFailureReason() == null);
 
         try {
-            Openssl.getInstance("AES2/CTR/NoPadding");
+            OpenSsl.getInstance("AES2/CTR/NoPadding");
             Assert.fail("Should specify correct algorithm.");
         } catch (NoSuchAlgorithmException e) {
             Assert.assertTrue(e.getMessage().contains(
@@ -56,10 +56,10 @@ public void testInvalidAlgorithm() throws Exception {
 
     @Test(expected = NoSuchPaddingException.class, timeout = 120000)
     public void testInvalidPadding() throws Exception {
-        Assume.assumeTrue(Openssl.getLoadingFailureReason() == null);
+        Assume.assumeTrue(OpenSsl.getLoadingFailureReason() == null);
 
         try {
-            Openssl.getInstance("AES/CTR/NoPadding2");
+            OpenSsl.getInstance("AES/CTR/NoPadding2");
             Assert.fail("Should specify correct padding.");
         } catch (NoSuchPaddingException e) {
             Assert.assertTrue(e.getMessage().contains(
@@ -71,8 +71,8 @@ public void testInvalidPadding() throws Exception {
     @Test(expected = NoSuchAlgorithmException.class, timeout = 120000)
     public void testInvalidMode() throws Exception {
         try {
-            Assume.assumeTrue(Openssl.getLoadingFailureReason() == null);
-            Openssl.getInstance("AES/CTR2/NoPadding");
+            Assume.assumeTrue(OpenSsl.getLoadingFailureReason() == null);
+            OpenSsl.getInstance("AES/CTR2/NoPadding");
             Assert.fail("java.security.NoSuchAlgorithmException should be thrown.");
         } catch (NoSuchAlgorithmException e) {
             Assert.assertTrue(e.getMessage().contains(
@@ -83,12 +83,12 @@ public void testInvalidMode() throws Exception {
 
     @Test(timeout = 120000)
     public void testUpdateArguments() throws Exception {
-        Assume.assumeTrue(Openssl.getLoadingFailureReason() == null);
-        Openssl cipher = Openssl
+        Assume.assumeTrue(OpenSsl.getLoadingFailureReason() == null);
+        OpenSsl cipher = OpenSsl
                 .getInstance("AES/CTR/NoPadding");
         Assert.assertNotNull(cipher);
 
-        cipher.init(Openssl.ENCRYPT_MODE, KEY, IV);
+        cipher.init(OpenSsl.ENCRYPT_MODE, KEY, IV);
 
         // Require direct buffers
         ByteBuffer input = ByteBuffer.allocate(1024);
@@ -117,12 +117,12 @@ public void testUpdateArguments() throws Exception {
 
     @Test(timeout = 120000)
     public void testDoFinalArguments() throws Exception {
-        Assume.assumeTrue(Openssl.getLoadingFailureReason() == null);
-        Openssl cipher = Openssl
+        Assume.assumeTrue(OpenSsl.getLoadingFailureReason() == null);
+        OpenSsl cipher = OpenSsl
                 .getInstance("AES/CTR/NoPadding");
         Assert.assertNotNull(cipher);
 
-        cipher.init(Openssl.ENCRYPT_MODE, KEY, IV);
+        cipher.init(OpenSsl.ENCRYPT_MODE, KEY, IV);
 
         // Require direct buffer
         ByteBuffer output = ByteBuffer.allocate(1024);
@@ -138,15 +138,15 @@ public void testDoFinalArguments() throws Exception {
 
     @Test(expected = InvalidKeyException.class, timeout = 120000)
     public void testInvalidKey() throws Exception {
-        Assume.assumeTrue(Openssl.getLoadingFailureReason() == null);
-        Openssl cipher = Openssl
+        Assume.assumeTrue(OpenSsl.getLoadingFailureReason() == null);
+        OpenSsl cipher = OpenSsl
                 .getInstance("AES/CTR/NoPadding");
         Assert.assertNotNull(cipher);
 
         final byte[] invalidKey = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
                 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x11 };
         try {
-            cipher.init(Openssl.ENCRYPT_MODE, invalidKey, IV);
+            cipher.init(OpenSsl.ENCRYPT_MODE, invalidKey, IV);
             Assert.fail("java.security.InvalidKeyException should be thrown.");
         } catch (Exception e) {
             Assert.assertTrue(e.getMessage().contains("Invalid AES key length: " + invalidKey.length + " bytes"));
@@ -156,15 +156,15 @@ public void testInvalidKey() throws Exception {
 
     @Test(expected = InvalidAlgorithmParameterException.class, timeout = 120000)
     public void testInvalidIV() throws Exception {
-        Assume.assumeTrue(Openssl.getLoadingFailureReason() == null);
-        Openssl cipher = Openssl
+        Assume.assumeTrue(OpenSsl.getLoadingFailureReason() == null);
+        OpenSsl cipher = OpenSsl
                 .getInstance("AES/CTR/NoPadding");
         Assert.assertNotNull(cipher);
 
         final byte[] invalidIV = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
                 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x11 };
         try {
-            cipher.init(Openssl.ENCRYPT_MODE, KEY, invalidIV);
+            cipher.init(OpenSsl.ENCRYPT_MODE, KEY, invalidIV);
             Assert.fail("java.security.InvalidAlgorithmParameterException should be thrown.");
         } catch (Exception e) {
             Assert.assertTrue(e.getMessage().contains("Wrong IV length: must be 16 bytes long"));
diff --git a/src/test/java/org/apache/commons/crypto/jna/OpensslJnaCipherTest.java b/src/test/java/org/apache/commons/crypto/jna/OpensslJnaCipherTest.java
index 2d01ffa5..30b7fde8 100644
--- a/src/test/java/org/apache/commons/crypto/jna/OpensslJnaCipherTest.java
+++ b/src/test/java/org/apache/commons/crypto/jna/OpensslJnaCipherTest.java
@@ -19,7 +19,7 @@
 package org.apache.commons.crypto.jna;
 
 import org.apache.commons.crypto.cipher.AbstractCipherTest;
-import org.apache.commons.crypto.jna.OpensslJnaCipher;
+import org.apache.commons.crypto.jna.OpenSslJnaCipher;
 
 public class OpensslJnaCipherTest extends AbstractCipherTest {
 
@@ -30,7 +30,7 @@ public void init() {
                 "AES/CBC/PKCS5Padding",
                 "AES/CTR/NoPadding"
                 };
-        cipherClass = OpensslJnaCipher.class.getName();
+        cipherClass = OpenSslJnaCipher.class.getName();
     }
 
     @Override
diff --git a/src/test/java/org/apache/commons/crypto/jna/OpensslJnaCryptoRandomTest.java b/src/test/java/org/apache/commons/crypto/jna/OpensslJnaCryptoRandomTest.java
index 159fada6..550b4a6b 100644
--- a/src/test/java/org/apache/commons/crypto/jna/OpensslJnaCryptoRandomTest.java
+++ b/src/test/java/org/apache/commons/crypto/jna/OpensslJnaCryptoRandomTest.java
@@ -21,7 +21,7 @@
 import java.util.Properties;
 
 import org.apache.commons.crypto.conf.ConfigurationKeys;
-import org.apache.commons.crypto.jna.OpensslJnaCryptoRandom;
+import org.apache.commons.crypto.jna.OpenSslJnaCryptoRandom;
 import org.apache.commons.crypto.random.AbstractRandomTest;
 import org.apache.commons.crypto.random.CryptoRandom;
 import org.apache.commons.crypto.random.CryptoRandomFactory;
@@ -35,11 +35,11 @@ public CryptoRandom getCryptoRandom() throws GeneralSecurityException {
         Properties props = new Properties();
         props.setProperty(
                 ConfigurationKeys.SECURE_RANDOM_CLASSES_KEY,
-                OpensslJnaCryptoRandom.class.getName());
+                OpenSslJnaCryptoRandom.class.getName());
         CryptoRandom random = CryptoRandomFactory.getCryptoRandom(props);
-        if (!(random instanceof OpensslJnaCryptoRandom)) {
+        if (!(random instanceof OpenSslJnaCryptoRandom)) {
             fail("The CryptoRandom should be: "
-                    + OpensslJnaCryptoRandom.class.getName());
+                    + OpenSslJnaCryptoRandom.class.getName());
         }
         return random;
     }
diff --git a/src/test/java/org/apache/commons/crypto/random/CryptoRandomFactoryTest.java b/src/test/java/org/apache/commons/crypto/random/CryptoRandomFactoryTest.java
index b24586f1..a8d29467 100644
--- a/src/test/java/org/apache/commons/crypto/random/CryptoRandomFactoryTest.java
+++ b/src/test/java/org/apache/commons/crypto/random/CryptoRandomFactoryTest.java
@@ -43,7 +43,7 @@ public void testEmpty() throws Exception {
     public void testDefaultRandom() throws GeneralSecurityException {
         Properties props = new Properties();
         CryptoRandom random = CryptoRandomFactory.getCryptoRandom(props);
-        Assert.assertEquals(OpensslCryptoRandom.class.getName(),
+        Assert.assertEquals(OpenSslCryptoRandom.class.getName(),
             random.getClass().getName());
     }
 
diff --git a/src/test/java/org/apache/commons/crypto/random/OpensslCryptoRandomTest.java b/src/test/java/org/apache/commons/crypto/random/OpensslCryptoRandomTest.java
index 973da726..4cca0f0d 100644
--- a/src/test/java/org/apache/commons/crypto/random/OpensslCryptoRandomTest.java
+++ b/src/test/java/org/apache/commons/crypto/random/OpensslCryptoRandomTest.java
@@ -30,11 +30,11 @@ public CryptoRandom getCryptoRandom() throws GeneralSecurityException {
         Properties props = new Properties();
         props.setProperty(
                 ConfigurationKeys.SECURE_RANDOM_CLASSES_KEY,
-                OpensslCryptoRandom.class.getName());
+                OpenSslCryptoRandom.class.getName());
         CryptoRandom random = CryptoRandomFactory.getCryptoRandom(props);
-        if (!(random instanceof OpensslCryptoRandom)) {
+        if (!(random instanceof OpenSslCryptoRandom)) {
             fail("The CryptoRandom should be: "
-                    + OpensslCryptoRandom.class.getName());
+                    + OpenSslCryptoRandom.class.getName());
         }
         return random;
     }
