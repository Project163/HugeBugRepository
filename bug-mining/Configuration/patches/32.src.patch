diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 4245cfe7..3650c732 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -94,6 +94,11 @@ BUG FIXES IN 1.4
   DatabaseConfiguration now handles list delimiters in property values
   correctly.
 
+* [CONFIGURATION-256]
+  MapConfiguration and the web-based configurations now treat strings that
+  contain an escaped list delimiter correctly: The escape character will be
+  removed, so that for instance "foo\,bar" becomes "foo,bar".
+
 IMPROVEMENTS IN 1.4
 ===================
 * [CONFIGURATION-155]
diff --git a/src/java/org/apache/commons/configuration/MapConfiguration.java b/src/java/org/apache/commons/configuration/MapConfiguration.java
index 888ede1f..056e8b8d 100644
--- a/src/java/org/apache/commons/configuration/MapConfiguration.java
+++ b/src/java/org/apache/commons/configuration/MapConfiguration.java
@@ -62,7 +62,7 @@ public class MapConfiguration extends AbstractConfiguration implements Cloneable
         if ((value instanceof String) && (!isDelimiterParsingDisabled()))
         {
             List list = PropertyConverter.split((String) value, getListDelimiter());
-            return list.size() > 1 ? list : value;
+            return list.size() > 1 ? list : list.get(0);
         }
         else
         {
diff --git a/src/java/org/apache/commons/configuration/web/AppletConfiguration.java b/src/java/org/apache/commons/configuration/web/AppletConfiguration.java
index e6857be8..0b2b4021 100644
--- a/src/java/org/apache/commons/configuration/web/AppletConfiguration.java
+++ b/src/java/org/apache/commons/configuration/web/AppletConfiguration.java
@@ -19,10 +19,8 @@ package org.apache.commons.configuration.web;
 
 import java.applet.Applet;
 import java.util.Iterator;
-import java.util.List;
 
 import org.apache.commons.collections.iterators.ArrayIterator;
-import org.apache.commons.configuration.PropertyConverter;
 
 /**
  * A configuration wrapper to read applet parameters. This configuration is
@@ -51,14 +49,7 @@ public class AppletConfiguration extends BaseWebConfiguration
 
     public Object getProperty(String key)
     {
-        Object value = applet.getParameter(key);
-        if (!isDelimiterParsingDisabled())
-        {
-            List list = PropertyConverter.split((String) value, getListDelimiter());
-            value = list.size() > 1 ? list : value;
-        }
-
-        return value;
+        return handleDelimiters(applet.getParameter(key));
     }
 
     public Iterator getKeys()
diff --git a/src/java/org/apache/commons/configuration/web/BaseWebConfiguration.java b/src/java/org/apache/commons/configuration/web/BaseWebConfiguration.java
index f0c6db8d..6d7c2791 100644
--- a/src/java/org/apache/commons/configuration/web/BaseWebConfiguration.java
+++ b/src/java/org/apache/commons/configuration/web/BaseWebConfiguration.java
@@ -16,7 +16,10 @@
  */
 package org.apache.commons.configuration.web;
 
+import java.util.List;
+
 import org.apache.commons.configuration.AbstractConfiguration;
+import org.apache.commons.configuration.PropertyConverter;
 
 /**
  * <p>
@@ -83,4 +86,24 @@ abstract class BaseWebConfiguration extends AbstractConfiguration
     {
         throw new UnsupportedOperationException("Read only configuration");
     }
+
+    /**
+     * Takes care of list delimiters in property values. This method checks if
+     * delimiter parsing is enabled and the passed in value contains a delimiter
+     * character. If this is the case, a split operation is performed.
+     *
+     * @param value the property value to be examined
+     * @return the processed value
+     */
+    protected Object handleDelimiters(Object value)
+    {
+        if (!isDelimiterParsingDisabled() && value instanceof String)
+        {
+            List list = PropertyConverter.split((String) value,
+                    getListDelimiter());
+            value = list.size() > 1 ? list : list.get(0);
+        }
+
+        return value;
+    }
 }
diff --git a/src/java/org/apache/commons/configuration/web/ServletConfiguration.java b/src/java/org/apache/commons/configuration/web/ServletConfiguration.java
index 2e7d8757..7318a0b3 100644
--- a/src/java/org/apache/commons/configuration/web/ServletConfiguration.java
+++ b/src/java/org/apache/commons/configuration/web/ServletConfiguration.java
@@ -18,12 +18,10 @@
 package org.apache.commons.configuration.web;
 
 import java.util.Iterator;
-import java.util.List;
 import javax.servlet.Servlet;
 import javax.servlet.ServletConfig;
 
 import org.apache.commons.collections.iterators.EnumerationIterator;
-import org.apache.commons.configuration.PropertyConverter;
 
 /**
  * A configuration wrapper around a {@link ServletConfig}. This configuration
@@ -62,14 +60,7 @@ public class ServletConfiguration extends BaseWebConfiguration
 
     public Object getProperty(String key)
     {
-        Object value = config.getInitParameter(key);
-        if (!isDelimiterParsingDisabled())
-        {
-            List list = PropertyConverter.split((String) value, getListDelimiter());
-            value = list.size() > 1 ? list : value;
-        }
-
-        return value;
+        return handleDelimiters(config.getInitParameter(key));
     }
 
     public Iterator getKeys()
diff --git a/src/java/org/apache/commons/configuration/web/ServletContextConfiguration.java b/src/java/org/apache/commons/configuration/web/ServletContextConfiguration.java
index 4cf25864..44224564 100644
--- a/src/java/org/apache/commons/configuration/web/ServletContextConfiguration.java
+++ b/src/java/org/apache/commons/configuration/web/ServletContextConfiguration.java
@@ -18,12 +18,10 @@
 package org.apache.commons.configuration.web;
 
 import java.util.Iterator;
-import java.util.List;
 import javax.servlet.Servlet;
 import javax.servlet.ServletContext;
 
 import org.apache.commons.collections.iterators.EnumerationIterator;
-import org.apache.commons.configuration.PropertyConverter;
 
 /**
  * A configuration wrapper to read the initialization parameters of a servlet
@@ -63,14 +61,7 @@ public class ServletContextConfiguration extends BaseWebConfiguration
 
     public Object getProperty(String key)
     {
-        Object value = context.getInitParameter(key);
-        if (!isDelimiterParsingDisabled())
-        {
-            List list = PropertyConverter.split((String) value, getListDelimiter());
-            value = list.size() > 1 ? list : value;
-        }
-
-        return value;
+        return handleDelimiters(context.getInitParameter(key));
     }
 
     public Iterator getKeys()
diff --git a/src/java/org/apache/commons/configuration/web/ServletFilterConfiguration.java b/src/java/org/apache/commons/configuration/web/ServletFilterConfiguration.java
index 95ea8660..0acbffcb 100644
--- a/src/java/org/apache/commons/configuration/web/ServletFilterConfiguration.java
+++ b/src/java/org/apache/commons/configuration/web/ServletFilterConfiguration.java
@@ -18,11 +18,9 @@
 package org.apache.commons.configuration.web;
 
 import java.util.Iterator;
-import java.util.List;
 import javax.servlet.FilterConfig;
 
 import org.apache.commons.collections.iterators.EnumerationIterator;
-import org.apache.commons.configuration.PropertyConverter;
 
 /**
  * A configuration wrapper around a {@link FilterConfig}. This configuration is
@@ -50,14 +48,7 @@ public class ServletFilterConfiguration extends BaseWebConfiguration
 
     public Object getProperty(String key)
     {
-        Object value = config.getInitParameter(key);
-        if (!isDelimiterParsingDisabled())
-        {
-            List list = PropertyConverter.split((String) value, getListDelimiter());
-            value = list.size() > 1 ? list : value;
-        }
-
-        return value;
+        return handleDelimiters(config.getInitParameter(key));
     }
 
     public Iterator getKeys()
diff --git a/src/java/org/apache/commons/configuration/web/ServletRequestConfiguration.java b/src/java/org/apache/commons/configuration/web/ServletRequestConfiguration.java
index 251b3f58..49d581e8 100644
--- a/src/java/org/apache/commons/configuration/web/ServletRequestConfiguration.java
+++ b/src/java/org/apache/commons/configuration/web/ServletRequestConfiguration.java
@@ -17,8 +17,11 @@
 
 package org.apache.commons.configuration.web;
 
+import java.util.ArrayList;
+import java.util.Collection;
 import java.util.Iterator;
-import java.util.Arrays;
+import java.util.List;
+
 import javax.servlet.ServletRequest;
 
 import org.apache.commons.collections.iterators.EnumerationIterator;
@@ -57,11 +60,25 @@ public class ServletRequestConfiguration extends BaseWebConfiguration
         }
         else if (values.length == 1)
         {
-            return values[0];
+            return handleDelimiters(values[0]);
         }
         else
         {
-            return Arrays.asList(values);
+            // ensure that escape characters in all list elements are removed
+            List result = new ArrayList(values.length);
+            for (int i = 0; i < values.length; i++)
+            {
+                Object val = handleDelimiters(values[i]);
+                if (val instanceof Collection)
+                {
+                    result.addAll((Collection) val);
+                }
+                else
+                {
+                    result.add(val);
+                }
+            }
+            return result;
         }
     }
 
diff --git a/src/test/org/apache/commons/configuration/TestAbstractConfiguration.java b/src/test/org/apache/commons/configuration/TestAbstractConfiguration.java
index e11f9f99..de78cec7 100644
--- a/src/test/org/apache/commons/configuration/TestAbstractConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestAbstractConfiguration.java
@@ -36,11 +36,12 @@ import junitx.framework.ListAssert;
 public abstract class TestAbstractConfiguration extends TestCase
 {
     /**
-     * Return an abstract configuration with 2 key/value pairs:<br>
+     * Return an abstract configuration with the following data:<br>
      * <pre>
      * key1 = value1
      * key2 = value2
      * list = value1, value2
+     * listesc = value1\\,value2
      * </pre>
      */
     protected abstract AbstractConfiguration getConfiguration();
@@ -69,6 +70,16 @@ public abstract class TestAbstractConfiguration extends TestCase
         assertTrue("'value2' is not in the list", list.contains("value2"));
     }
 
+    /**
+     * Tests whether the escape character for list delimiters is recocknized and
+     * removed.
+     */
+    public void testListEscaped()
+    {
+        assertEquals("Wrong value for escaped list", "value1,value2",
+                getConfiguration().getString("listesc"));
+    }
+
     public void testAddPropertyDirect()
     {
         AbstractConfiguration config = getConfiguration();
@@ -118,6 +129,7 @@ public abstract class TestAbstractConfiguration extends TestCase
         expectedKeys.add("key1");
         expectedKeys.add("key2");
         expectedKeys.add("list");
+        expectedKeys.add("listesc");
 
         assertNotNull("null iterator", keys);
         assertTrue("empty iterator", keys.hasNext());
diff --git a/src/test/org/apache/commons/configuration/TestMapConfiguration.java b/src/test/org/apache/commons/configuration/TestMapConfiguration.java
index a66ddab4..946a1a6b 100644
--- a/src/test/org/apache/commons/configuration/TestMapConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestMapConfiguration.java
@@ -37,6 +37,7 @@ public class TestMapConfiguration extends TestAbstractConfiguration
         map.put("key1", "value1");
         map.put("key2", "value2");
         map.put("list", "value1, value2");
+        map.put("listesc", "value1\\,value2");
 
         return new MapConfiguration(map);
     }
diff --git a/src/test/org/apache/commons/configuration/web/TestAppletConfiguration.java b/src/test/org/apache/commons/configuration/web/TestAppletConfiguration.java
index f2a2cf21..439528d4 100644
--- a/src/test/org/apache/commons/configuration/web/TestAppletConfiguration.java
+++ b/src/test/org/apache/commons/configuration/web/TestAppletConfiguration.java
@@ -64,6 +64,7 @@ public class TestAppletConfiguration extends TestAbstractConfiguration
         parameters.setProperty("key1", "value1");
         parameters.setProperty("key2", "value2");
         parameters.setProperty("list", "value1, value2");
+        parameters.setProperty("listesc", "value1\\,value2");
 
         if (supportsApplet)
         {
@@ -80,7 +81,8 @@ public class TestAppletConfiguration extends TestAbstractConfiguration
                     {
                     { "key1", "String", "" },
                     { "key2", "String", "" },
-                    { "list", "String[]", "" } };
+                    { "list", "String[]", "" },
+                    { "listesc", "String", "" } };
                 }
             };
 
diff --git a/src/test/org/apache/commons/configuration/web/TestServletConfiguration.java b/src/test/org/apache/commons/configuration/web/TestServletConfiguration.java
index af8c2156..9ebc4200 100644
--- a/src/test/org/apache/commons/configuration/web/TestServletConfiguration.java
+++ b/src/test/org/apache/commons/configuration/web/TestServletConfiguration.java
@@ -39,6 +39,7 @@ public class TestServletConfiguration extends TestAbstractConfiguration
         config.setInitParameter("key1", "value1");
         config.setInitParameter("key2", "value2");
         config.setInitParameter("list", "value1, value2");
+        config.setInitParameter("listesc", "value1\\,value2");
 
         Servlet servlet = new HttpServlet() {
             public ServletConfig getServletConfig()
diff --git a/src/test/org/apache/commons/configuration/web/TestServletContextConfiguration.java b/src/test/org/apache/commons/configuration/web/TestServletContextConfiguration.java
index b3ac2d27..f87b16ea 100644
--- a/src/test/org/apache/commons/configuration/web/TestServletContextConfiguration.java
+++ b/src/test/org/apache/commons/configuration/web/TestServletContextConfiguration.java
@@ -43,6 +43,7 @@ public class TestServletContextConfiguration extends TestAbstractConfiguration
         parameters.setProperty("key1", "value1");
         parameters.setProperty("key2", "value2");
         parameters.setProperty("list", "value1, value2");
+        parameters.setProperty("listesc", "value1\\,value2");
 
         // create a servlet context
         ServletContext context = new MockServletContext()
diff --git a/src/test/org/apache/commons/configuration/web/TestServletFilterConfiguration.java b/src/test/org/apache/commons/configuration/web/TestServletFilterConfiguration.java
index 5bd0c8fe..f66ef2e2 100644
--- a/src/test/org/apache/commons/configuration/web/TestServletFilterConfiguration.java
+++ b/src/test/org/apache/commons/configuration/web/TestServletFilterConfiguration.java
@@ -39,6 +39,7 @@ public class TestServletFilterConfiguration extends TestAbstractConfiguration
         config.setInitParameter("key1", "value1");
         config.setInitParameter("key2", "value2");
         config.setInitParameter("list", "value1, value2");
+        config.setInitParameter("listesc", "value1\\,value2");
 
         return new ServletFilterConfiguration(config);
     }
diff --git a/src/test/org/apache/commons/configuration/web/TestServletRequestConfiguration.java b/src/test/org/apache/commons/configuration/web/TestServletRequestConfiguration.java
index 3b09fc0c..f3f8c3f2 100644
--- a/src/test/org/apache/commons/configuration/web/TestServletRequestConfiguration.java
+++ b/src/test/org/apache/commons/configuration/web/TestServletRequestConfiguration.java
@@ -18,6 +18,8 @@
 package org.apache.commons.configuration.web;
 
 import java.util.Enumeration;
+import java.util.List;
+
 import javax.servlet.ServletRequest;
 
 import com.mockobjects.servlet.MockHttpServletRequest;
@@ -26,6 +28,7 @@ import org.apache.commons.configuration.AbstractConfiguration;
 import org.apache.commons.configuration.BaseConfiguration;
 import org.apache.commons.configuration.Configuration;
 import org.apache.commons.configuration.TestAbstractConfiguration;
+import org.apache.commons.lang.StringUtils;
 
 /**
  * Test case for the {@link ServletRequestConfiguration} class.
@@ -38,16 +41,25 @@ public class TestServletRequestConfiguration extends TestAbstractConfiguration
     protected AbstractConfiguration getConfiguration()
     {
         final Configuration configuration = new BaseConfiguration();
+        ((BaseConfiguration) configuration).setListDelimiter('\0');
         configuration.setProperty("key1", "value1");
         configuration.setProperty("key2", "value2");
         configuration.addProperty("list", "value1");
         configuration.addProperty("list", "value2");
+        configuration.addProperty("listesc", "value1\\,value2");
+
+        return createConfiguration(configuration);
+    }
+
+    protected AbstractConfiguration getEmptyConfiguration()
+    {
+        final Configuration configuration = new BaseConfiguration();
 
         ServletRequest request = new MockHttpServletRequest()
         {
-            public String[] getParameterValues(String key)
+            public String getParameter(String key)
             {
-                return configuration.getStringArray(key);
+                return null;
             }
 
             public Enumeration getParameterNames()
@@ -59,20 +71,26 @@ public class TestServletRequestConfiguration extends TestAbstractConfiguration
         return new ServletRequestConfiguration(request);
     }
 
-    protected AbstractConfiguration getEmptyConfiguration()
+    /**
+     * Returns a new servlet request configuration that is backed by the passed
+     * in configuration.
+     *
+     * @param base the configuration with the underlying values
+     * @return the servlet request configuration
+     */
+    private ServletRequestConfiguration createConfiguration(
+            final Configuration base)
     {
-        final Configuration configuration = new BaseConfiguration();
-
         ServletRequest request = new MockHttpServletRequest()
         {
-            public String getParameter(String key)
+            public String[] getParameterValues(String key)
             {
-                return null;
+                return base.getStringArray(key);
             }
 
             public Enumeration getParameterNames()
             {
-                return new IteratorEnumeration(configuration.getKeys());
+                return new IteratorEnumeration(base.getKeys());
             }
         };
 
@@ -105,4 +123,27 @@ public class TestServletRequestConfiguration extends TestAbstractConfiguration
         }
     }
 
+    /**
+     * Tests a list with elements that contain an escaped list delimiter.
+     */
+    public void testListWithEscapedElements()
+    {
+        String[] values =
+        { "test1", "test2\\,test3", "test4\\,test5" };
+        final String listKey = "test.list";
+        BaseConfiguration config = new BaseConfiguration();
+        config.setListDelimiter('\0');
+        config.addProperty(listKey, values);
+        assertEquals("Wrong number of list elements", values.length, config
+                .getList(listKey).size());
+        Configuration c = createConfiguration(config);
+        List v = c.getList(listKey);
+        assertEquals("Wrong number of elements in list", values.length, v
+                .size());
+        for (int i = 0; i < values.length; i++)
+        {
+            assertEquals("Wrong value at index " + i, StringUtils.replace(
+                    values[i], "\\", StringUtils.EMPTY), v.get(i));
+        }
+    }
 }
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 5368042e..c561e39c 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,11 @@
 
   <body>
     <release version="1.4-SNAPSHOT" date="in SVN">
+      <action dev="oheger" type="update" issue="CONFIGURATION-256">
+        MapConfiguration and the web-based configurations now treat strings
+        that contain an escaped list delimiter correctly: The escape character
+        will be removed, so that for instance "foo\,bar" becomes "foo,bar".
+      </action>
       <action dev="oheger" type="update" issue="CONFIGURATION-255">
         DatabaseConfiguration now handles list delimiters in property values
         correctly.
