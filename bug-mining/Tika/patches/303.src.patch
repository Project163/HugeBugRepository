diff --git a/CHANGES.txt b/CHANGES.txt
index e1474002c..3220eb044 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -1,5 +1,10 @@
 Apache Tika Change Log
 ======================
+Release 0.11 - Current Development
+
+ * TIKA-632: Hyperlinks in RTF documents are now extracted as an <a
+   href=...>...</a> element.
+
 Release 0.10 - 09/25/2011
 
 The most notable changes in Tika 0.10 over previous releases are:
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OutlookExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OutlookExtractor.java
index 3247a5d37..1193b8ca9 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OutlookExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OutlookExtractor.java
@@ -198,13 +198,12 @@ public class OutlookExtractor extends AbstractPOIFSExtractor {
               MAPIRtfAttribute rtf = new MAPIRtfAttribute(
                     MAPIProperty.RTF_COMPRESSED, Types.BINARY, chunk.getValue()
               );
-              // Disabled pending a fix to TIKA-632
-//              RTFParser rtfParser = new RTFParser();
-//              rtfParser.parse(
-//                    new ByteArrayInputStream(rtf.getData()),
-//                    xhtml, new Metadata(), new ParseContext()
-//              );
-//              doneBody = true;
+              RTFParser rtfParser = new RTFParser();
+              rtfParser.parse(
+                              new ByteArrayInputStream(rtf.getData()),
+                              xhtml, new Metadata(), new ParseContext()
+                              );
+              doneBody = true;
            }
            if(textChunk != null && !doneBody) {
               xhtml.element("p", ((StringChunk)textChunk).getValue());
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/rtf/TextExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/rtf/TextExtractor.java
index a21eda88e..51779906c 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/rtf/TextExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/rtf/TextExtractor.java
@@ -94,7 +94,14 @@ final class TextExtractor {
     private String nextMetaData;
     private boolean inParagraph;
 
-    private final StringBuilder headerBuffer = new StringBuilder();
+    // Non-zero if we are processing inside a field destination:
+    private int fieldState;
+    
+    // Non-null if we've seen the url for a HYPERLINK but not yet
+    // its text:
+    private String pendingURL;
+
+    private final StringBuilder pendingBuffer = new StringBuilder();
 
     // Used to process the sub-groups inside the upr
     // group:
@@ -298,8 +305,8 @@ final class TextExtractor {
             pushBytes();
         }
 
-        if (inHeader) {
-            headerBuffer.append(ch);
+        if (inHeader || fieldState == 1) {
+            pendingBuffer.append(ch);
         } else {
             if (pendingCharCount == pendingChars.length) {
                 // Gradual but exponential growth:
@@ -534,7 +541,7 @@ final class TextExtractor {
     // Decodes the buffered bytes in pendingBytes
     // into UTF16 code units, and sends the characters
     // to the out ContentHandler, if we are in the body,
-    // else appends the characters to the headerBuffer
+    // else appends the characters to the pendingBuffer
     private void pushBytes() throws IOException, SAXException, TikaException {
         if (pendingByteCount > 0 && (!groupState.ignore || nextMetaData != null)) {
 
@@ -552,8 +559,8 @@ final class TextExtractor {
 
                 final int pos = outputBuffer.position();
                 if (pos > 0) {
-                    if (inHeader) {
-                        headerBuffer.append(outputArray, 0, pos);
+                    if (inHeader || fieldState == 1) {
+                        pendingBuffer.append(outputArray, 0, pos);
                     } else {
                         lazyStartParagraph();
                         out.characters(outputArray, 0, pos);
@@ -571,8 +578,8 @@ final class TextExtractor {
 
                 final int pos = outputBuffer.position();
                 if (pos > 0) {
-                    if (inHeader) {
-                        headerBuffer.append(outputArray, 0, pos);
+                    if (inHeader || fieldState == 1) {
+                        pendingBuffer.append(outputArray, 0, pos);
                     } else {
                         lazyStartParagraph();
                         out.characters(outputArray, 0, pos);
@@ -973,6 +980,16 @@ final class TextExtractor {
         } else if (equals("rdblquote")) {
             // unicode RIGHT DOUBLE QUOTATION MARK
             addOutputChar('\u201D');
+        } else if (equals("fldinst")) {
+            fieldState = 1;
+            groupState.ignore = false;
+        } else if (equals("fldrslt") && fieldState == 2) {
+            assert pendingURL != null;
+            lazyStartParagraph();
+            out.startElement("a", "href", pendingURL);
+            pendingURL = null;
+            fieldState = 3;
+            groupState.ignore = false;
         }
     }
 
@@ -997,10 +1014,10 @@ final class TextExtractor {
 
         if (inHeader) {
             if (nextMetaData != null) {
-                metadata.add(nextMetaData, headerBuffer.toString());
+                metadata.add(nextMetaData, pendingBuffer.toString());
                 nextMetaData = null;
             }
-            headerBuffer.setLength(0);
+            pendingBuffer.setLength(0);
         }
 
         assert groupState.depth > 0;
@@ -1035,5 +1052,35 @@ final class TextExtractor {
         }
         groupState = outerGroupState;
         assert groupStates.size() == groupState.depth;
+
+        if (fieldState == 1) {
+            String s = pendingBuffer.toString().trim();
+            pendingBuffer.setLength(0);
+            if (s.startsWith("HYPERLINK")) {
+                s = s.substring(9).trim();
+                // TODO: what other instructions can be in a
+                // HYPERLINK destination?
+                final boolean isLocalLink = s.indexOf("\\l ") != -1;
+                int idx = s.indexOf('"');
+                if (idx != -1) {
+                    int idx2 = s.indexOf('"', 1+idx);
+                    if (idx2 != -1) {
+                        s = s.substring(1+idx, idx2);
+                    }
+                }
+                pendingURL = (isLocalLink ? "#" : "") + s;
+                fieldState = 2;
+            } else {
+                fieldState = 0;
+            }
+
+            // TODO: we could process the other known field
+            // types.  Right now, we will extract their text
+            // inlined, but fail to record them in metadata
+            // as a field value.
+        } else if (fieldState == 3) {
+            out.endElement("a");
+            fieldState = 0;
+        }
     }
 }
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/OutlookParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/OutlookParserTest.java
index 65f54e2ae..7a3edba6c 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/OutlookParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/OutlookParserTest.java
@@ -173,10 +173,7 @@ public class OutlookParserTest extends TestCase {
         //assertEquals(2, content.split("<\\/body>").length); // TODO Fix
     }
     
-    /**
-     * Disabled pending a fix for TIKA-632
-     */
-    public void DISABLEDtestOutlookHTMLfromRTF() throws Exception {
+    public void testOutlookHTMLfromRTF() throws Exception {
         Parser parser = new AutoDetectParser();
         Metadata metadata = new Metadata();
        
@@ -200,10 +197,9 @@ public class OutlookParserTest extends TestCase {
         // As the HTML version should have been processed, ensure
         //  we got some of the links
         String content = sw.toString().replaceAll("<p>\\s+","<p>");
-//System.err.println(content);
         assertTrue(content.contains("<dd>New Outlook User</dd>"));
         assertTrue(content.contains("designed <i>to help you"));
-        assertTrue(content.contains("<p>Cached Exchange Mode"));
+        assertTrue(content.contains("<p><a href=\"http://r.office.microsoft.com/r/rlidOutlookWelcomeMail10?clid=1033\">Cached Exchange Mode</a>"));
         
         // Link - check text around it, and the link itself
         assertTrue(content.contains("sign up for a free subscription"));
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java
index 16fd7a17c..7255fc7fc 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java
@@ -288,6 +288,11 @@ public class RTFParserTest extends TikaTest {
         assertContains("<i>italic then </i><b><i>bold then</i></b><b> not italic</b>", content);
     }
 
+    public void testHyperlink() throws Exception {
+        String content = getXML("testRTFHyperlink.rtf").xml;
+        assertContains("our most <a href=\"http://r.office.microsoft.com/r/rlidwelcomeFAQ?clid=1033\">frequently asked questions</a>", content);
+    }
+
     private Result getResult(String filename) throws Exception {
         File file = getResourceAsFile("/test-documents/" + filename);
        
