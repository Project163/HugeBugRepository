diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
index 9f037d50..561edbb2 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
@@ -511,7 +511,12 @@ public class Mapper {
         }
     }
 
-    private Object buildObject(final Type type, final JsonObject object) throws Exception {
+    private Object buildObject(final Type inType, final JsonObject object) throws Exception {
+        Type type = inType;
+        if (inType == Object.class) {
+            type = new JohnzonParameterizedType(Map.class, String.class, Object.class);
+        }
+
         final Mappings.ClassMapping classMapping = mappings.findOrCreateClassMapping(type);
 
         if (classMapping == null) {
diff --git a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java
index f17eec3b..1ff65f33 100644
--- a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java
+++ b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java
@@ -84,9 +84,18 @@ public class MapperTest {
     @Test
     public void readMapObject() {
         final Map<String, Object> data = new MapperBuilder().build()
-                .readObject(new ByteArrayInputStream("{\"a\":1,\"b\":true,\"c\":null,\"d\":[1, 2], \"e\":[\"i\", \"j\"]}".getBytes()),
+                .readObject(new ByteArrayInputStream(("{\"a\":1,\"b\":true,\"c\":null,\"d\":[1, 2], " +
+                                "\"e\":[\"i\", \"j\"],\"k\":{\"a\":1,\"b\":true,\"c\":null,\"d\":[1, 2], \"e\":[\"i\", \"j\"]}}").getBytes()),
                         new JohnzonParameterizedType(Map.class, String.class, Object.class));
-        assertEquals(5, data.size());
+        assertOneDimension(data, 6);
+
+        final Map<String, Object> k = (Map<String, Object>) data.get("k");
+        assertNotNull(k);
+        assertOneDimension(k, 5);
+    }
+
+    private void assertOneDimension(final Map<String, Object> data, final int size) {
+        assertEquals(size, data.size());
         assertEquals(1, data.get("a"));
         assertEquals(true, data.get("b"));
         assertNull(data.get("c"));
