diff --git a/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java b/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java
index dc429951..b33ee730 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java
@@ -1227,16 +1227,8 @@ public class Interpreter extends ParserVisitor {
             return opcall;
         }
         if (object instanceof Number) {
-            Number number = (Number) object;
-            if (number instanceof Double) {
-                double value = number.doubleValue();
-                return value == 0. || Double.isNaN(value) ? Boolean.TRUE : Boolean.FALSE;
-            }
-            if (number instanceof Float) {
-                float value = number.floatValue();
-                return value == 0. || Float.isNaN(value) ? Boolean.TRUE : Boolean.FALSE;
-            }
-            return number.intValue() == 0 ? Boolean.TRUE : Boolean.FALSE;
+            double d = ((Number) object).doubleValue();
+            return Double.isNaN(d) || d == 0.d ? Boolean.TRUE : Boolean.FALSE;
         }
         if (object instanceof String) {
             return "".equals(object) ? Boolean.TRUE : Boolean.FALSE;
diff --git a/src/main/java/org/apache/commons/jexl3/parser/Parser.jjt b/src/main/java/org/apache/commons/jexl3/parser/Parser.jjt
index ad2309ce..98828b88 100644
--- a/src/main/java/org/apache/commons/jexl3/parser/Parser.jjt
+++ b/src/main/java/org/apache/commons/jexl3/parser/Parser.jjt
@@ -202,7 +202,10 @@ PARSER_END(Parser)
   < FLOAT_LITERAL:
     "#NaN"
     |
-    (<DIGIT>)+ "." (<DIGIT>)+ ((["e","E"])(["+","-"])?(<DIGIT>)+)? (["d","D","f","F","b","B"])? >
+    (<DIGIT>)+ "." (<DIGIT>)+ ((["e","E"])(["+","-"])?(<DIGIT>)+)? (["d","D","f","F","b","B"])?
+    |
+    (<DIGIT>)+ (".")? ((["e","E"])(["+","-"])?(<DIGIT>)+)? ["d","D","f","F","b","B"]
+>
 }
 
 <*> TOKEN :
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index 9439bfba..292cf384 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -26,6 +26,9 @@
     </properties>
     <body>
         <release version="3.0" date="unreleased">
+            <action dev="henrib" type="fix" issue="JEXL-163" due-to="Dmitri Blinov">
+                empty(new ("java.lang.Long", 4294967296)) returns true
+            </action>
             <action dev="henrib" type="fix" issue="JEXL-162" due-to="Dmitri Blinov">
                 empty() function throws an exception : unsupported type
             </action>
diff --git a/src/test/java/org/apache/commons/jexl3/ArithmeticTest.java b/src/test/java/org/apache/commons/jexl3/ArithmeticTest.java
index 1b4e43b5..e1844586 100644
--- a/src/test/java/org/apache/commons/jexl3/ArithmeticTest.java
+++ b/src/test/java/org/apache/commons/jexl3/ArithmeticTest.java
@@ -22,6 +22,7 @@ import java.io.ByteArrayInputStream;
 import java.io.InputStream;
 import java.util.HashMap;
 import java.util.Map;
+
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import javax.xml.parsers.DocumentBuilder;
@@ -34,6 +35,8 @@ import org.w3c.dom.Node;
 
 @SuppressWarnings({"UnnecessaryBoxing", "AssertEqualsBetweenInconvertibleTypes"})
 public class ArithmeticTest extends JexlTestCase {
+    /** A small delta to compare doubles. */
+    private static final double EPSILON = 1.e-6;
     private final Asserter asserter;
 
     public ArithmeticTest() {
@@ -833,4 +836,66 @@ public class ArithmeticTest extends JexlTestCase {
         size = (Integer) s1.execute(null, x);
         Assert.assertEquals(0, size);
     }
+
+    @Test
+    public void testEmptyLong() throws Exception {
+       Object x;
+       x = JEXL.createScript("new('java.lang.Long', 4294967296)").execute(null);
+       Assert.assertEquals(4294967296L, ((Long) x).longValue());
+       x = JEXL.createScript("new('java.lang.Long', '4294967296')").execute(null);
+       Assert.assertEquals(4294967296L, ((Long) x).longValue());
+       x = JEXL.createScript("4294967296l").execute(null);
+       Assert.assertEquals(4294967296L, ((Long) x).longValue());
+       x = JEXL.createScript("4294967296L").execute(null);
+       Assert.assertEquals(4294967296L, ((Long) x).longValue());
+       checkEmpty(x, false);
+       x = JEXL.createScript("0L").execute(null);
+       Assert.assertEquals(0, ((Long) x).longValue());
+       checkEmpty(x, true);
+    }
+
+    @Test
+    public void testEmptyFloat() throws Exception {
+       Object x;
+       x = JEXL.createScript("4294967296.f").execute(null);
+       Assert.assertEquals(4294967296.0f, (Float) x, EPSILON);
+       checkEmpty(x, false);
+       x = JEXL.createScript("4294967296.0f").execute(null);
+       Assert.assertEquals(4294967296.0f, (Float) x, EPSILON);
+       checkEmpty(x, false);
+       x = JEXL.createScript("0.0f").execute(null);
+       Assert.assertEquals(0.0f, (Float) x, EPSILON);
+       checkEmpty(x, true);
+       x = Float.NaN;
+       checkEmpty(x, true);
+    }
+
+    @Test
+    public void testEmptyDouble() throws Exception {
+       Object x;
+       x = JEXL.createScript("4294967296.d").execute(null);
+       Assert.assertEquals(4294967296.0d, (Double) x, EPSILON);
+       checkEmpty(x, false);
+       x = JEXL.createScript("4294967296.0d").execute(null);
+       Assert.assertEquals(4294967296.0d, (Double) x, EPSILON);
+       checkEmpty(x, false);
+       x = JEXL.createScript("0.0d").execute(null);
+       Assert.assertEquals(0.0d, (Double) x, EPSILON);
+       checkEmpty(x, true);
+       x = Double.NaN;
+       checkEmpty(x, true);
+
+    }
+
+    void checkEmpty(Object x, boolean expect) {
+        JexlScript s0 = JEXL.createScript("empty(x)", "x");
+        boolean empty = (Boolean) s0.execute(null, x);
+        Assert.assertEquals(expect, empty);
+        JexlScript s1 = JEXL.createScript("empty x", "x");
+        empty = (Boolean) s1.execute(null, x);
+        Assert.assertEquals(expect, empty);
+        JexlScript s2 = JEXL.createScript("x.empty()", "x");
+        empty = (Boolean) s2.execute(null, x);
+        Assert.assertEquals(expect, empty);
+    }
 }
