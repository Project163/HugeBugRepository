diff --git a/src/test/java/org/apache/commons/exec/issues/Exec60Test.java b/src/test/java/org/apache/commons/exec/issues/Exec60Test.java
index 32ba246c..2c49fe79 100644
--- a/src/test/java/org/apache/commons/exec/issues/Exec60Test.java
+++ b/src/test/java/org/apache/commons/exec/issues/Exec60Test.java
@@ -17,33 +17,34 @@
 
 package org.apache.commons.exec.issues;
 
-import static org.junit.Assert.assertTrue;
-
-import java.io.File;
-
+import org.apache.commons.exec.AbstractExecTest;
 import org.apache.commons.exec.CommandLine;
 import org.apache.commons.exec.DefaultExecutor;
 import org.apache.commons.exec.ExecuteException;
 import org.apache.commons.exec.ExecuteWatchdog;
 import org.apache.commons.exec.Executor;
-import org.apache.commons.exec.TestUtil;
+import org.junit.Ignore;
 import org.junit.Test;
 
+import java.io.File;
+
+import static org.junit.Assert.assertTrue;
+
 /**
  * Test EXEC-60 (https://issues.apache.org/jira/browse/EXEC-60).
  *
  * @version $Id$
  */
-public class Exec60Test {
+public class Exec60Test extends AbstractExecTest {
 
     private final Executor exec = new DefaultExecutor();
-    private final File testDir = new File("src/test/scripts");
-    private final File pingScript = TestUtil.resolveScriptForOS(testDir + "/ping");
+    private final File pingScript = resolveTestScript("ping");
 
     /**
      * Possible deadlock when a process is terminating at the same time its timing out. Please
      * note that a successful test is no proof that the issues was indeed fixed.
      */
+    @Ignore("The test is fragile and might fail out of the blue")
     @Test
     public void testExec_60() throws Exception {
 
@@ -67,19 +68,19 @@ public class Exec60Test {
             try {
                 exec.execute(cmdLine);
                 processTerminatedCounter++;
-//                System.out.println(offset + ": process has terminated: " + watchdog.killedProcess());
+                //                System.out.println(offset + ": process has terminated: " + watchdog.killedProcess());
                 if (processTerminatedCounter > 5) {
                     break;
                 }
             } catch (final ExecuteException ex) {
-//                System.out.println(offset + ": process was killed: " + watchdog.killedProcess());
+                //                System.out.println(offset + ": process was killed: " + watchdog.killedProcess());
                 assertTrue("Watchdog killed the process", watchdog.killedProcess());
                 watchdogKilledProcessCounter++;
             }
         }
 
         final long avg = (System.currentTimeMillis() - startTime) /
-                (watchdogKilledProcessCounter+processTerminatedCounter);
+                (watchdogKilledProcessCounter + processTerminatedCounter);
         System.out.println("Processes terminated: " + processTerminatedCounter + " killed: " + watchdogKilledProcessCounter
                 + " Multiplier: " + offsetMultiplier + " MaxRetries: " + maxRetries + " Elapsed (avg ms): " + avg);
         assertTrue("Not a single process terminated on its own", processTerminatedCounter > 0);
