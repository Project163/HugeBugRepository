diff --git a/src/main/java/org/apache/commons/dbcp2/PoolableConnection.java b/src/main/java/org/apache/commons/dbcp2/PoolableConnection.java
index 4294e45a..ac8a0b4a 100644
--- a/src/main/java/org/apache/commons/dbcp2/PoolableConnection.java
+++ b/src/main/java/org/apache/commons/dbcp2/PoolableConnection.java
@@ -32,7 +32,7 @@ import org.apache.commons.pool2.ObjectPool;
  */
 public class PoolableConnection extends DelegatingConnection<Connection> {
     /** The pool to which I should return. */
-    protected ObjectPool<PoolableConnection> _pool = null;
+    private ObjectPool<PoolableConnection> _pool = null;
 
     /**
      *
diff --git a/src/main/java/org/apache/commons/dbcp2/PoolablePreparedStatement.java b/src/main/java/org/apache/commons/dbcp2/PoolablePreparedStatement.java
index 70422b61..9891face 100644
--- a/src/main/java/org/apache/commons/dbcp2/PoolablePreparedStatement.java
+++ b/src/main/java/org/apache/commons/dbcp2/PoolablePreparedStatement.java
@@ -43,12 +43,12 @@ public class PoolablePreparedStatement<K, S extends PoolablePreparedStatement<K,
     /**
      * The {@link KeyedObjectPool} from which I was obtained.
      */
-    protected KeyedObjectPool<K, PoolablePreparedStatement<K,S>> _pool = null;
+    private final KeyedObjectPool<K, PoolablePreparedStatement<K,S>> _pool;
 
     /**
      * My "key" as used by {@link KeyedObjectPool}.
      */
-    protected K _key = null;
+    private final K _key;
 
     private volatile boolean batchAdded = false;
 
diff --git a/src/main/java/org/apache/commons/dbcp2/PoolingConnection.java b/src/main/java/org/apache/commons/dbcp2/PoolingConnection.java
index 4d2e0906..b8ccfd79 100644
--- a/src/main/java/org/apache/commons/dbcp2/PoolingConnection.java
+++ b/src/main/java/org/apache/commons/dbcp2/PoolingConnection.java
@@ -49,7 +49,7 @@ public class PoolingConnection extends DelegatingConnection<Connection>
         implements KeyedPooledObjectFactory<PStmtKey,DelegatingPreparedStatement> {
 
     /** Pool of {@link PreparedStatement}s. and {@link CallableStatement}s */
-    protected KeyedObjectPool<PStmtKey,DelegatingPreparedStatement> _pstmtPool = null;
+    private KeyedObjectPool<PStmtKey,DelegatingPreparedStatement> _pstmtPool = null;
 
     /** Prepared Statement type */
     protected static final byte STATEMENT_PREPAREDSTMT = 0;
diff --git a/src/main/java/org/apache/commons/dbcp2/PoolingDataSource.java b/src/main/java/org/apache/commons/dbcp2/PoolingDataSource.java
index 8ad0d443..03c06409 100644
--- a/src/main/java/org/apache/commons/dbcp2/PoolingDataSource.java
+++ b/src/main/java/org/apache/commons/dbcp2/PoolingDataSource.java
@@ -43,23 +43,11 @@ public class PoolingDataSource<C extends Connection> implements DataSource {
     /** Controls access to the underlying connection */
     private boolean accessToUnderlyingConnectionAllowed = false;
 
-    public PoolingDataSource() {
-        this(null);
-    }
-
     public PoolingDataSource(ObjectPool<C> pool) {
-        _pool = pool;
-    }
-
-    public void setPool(ObjectPool<C> pool)
-            throws IllegalStateException, NullPointerException {
-        if(null != _pool) {
-            throw new IllegalStateException("Pool already set");
-        } else if(null == pool) {
+        if (null == pool) {
             throw new NullPointerException("Pool must not be null.");
-        } else {
-            _pool = pool;
         }
+        _pool = pool;
     }
 
     /**
@@ -173,9 +161,13 @@ public class PoolingDataSource<C extends Connection> implements DataSource {
     }
 
     /** My log writer. */
-    protected PrintWriter _logWriter = null;
+    private PrintWriter _logWriter = null;
 
-    protected ObjectPool<C> _pool = null;
+    private final ObjectPool<C> _pool;
+
+    protected ObjectPool<C> getPool() {
+        return _pool;
+    }
 
     /**
      * PoolGuardConnectionWrapper is a Connection wrapper that makes sure a
diff --git a/src/main/java/org/apache/commons/dbcp2/managed/ManagedDataSource.java b/src/main/java/org/apache/commons/dbcp2/managed/ManagedDataSource.java
index 0b38ad86..3d1e23be 100644
--- a/src/main/java/org/apache/commons/dbcp2/managed/ManagedDataSource.java
+++ b/src/main/java/org/apache/commons/dbcp2/managed/ManagedDataSource.java
@@ -32,13 +32,6 @@ import java.sql.SQLException;
 public class ManagedDataSource<C extends Connection> extends PoolingDataSource<C> {
     private TransactionRegistry transactionRegistry;
 
-    /**
-     * Creates an uninitialized datasource.  Before this data source can be used a pool and
-     * transaction registry must be set.
-     */
-    public ManagedDataSource() {
-    }
-
     /**
      * Creates a ManagedDataSource which obtains connections from the specified pool and
      * manages them using the specified transaction registry.  The TransactionRegistry must
@@ -73,10 +66,10 @@ public class ManagedDataSource<C extends Connection> extends PoolingDataSource<C
 
     @Override
     public Connection getConnection() throws SQLException {
-        if (_pool == null) throw new IllegalStateException("Pool has not been set");
+        if (getPool() == null) throw new IllegalStateException("Pool has not been set");
         if (transactionRegistry == null) throw new IllegalStateException("TransactionRegistry has not been set");
 
-        Connection connection = new ManagedConnection<>(_pool, transactionRegistry, isAccessToUnderlyingConnectionAllowed());
+        Connection connection = new ManagedConnection<>(getPool(), transactionRegistry, isAccessToUnderlyingConnectionAllowed());
         return connection;
     }
 }
