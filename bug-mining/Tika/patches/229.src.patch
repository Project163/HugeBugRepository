diff --git a/tika-parsers/src/main/java/org/apache/tika/detect/ZipContainerDetector.java b/tika-parsers/src/main/java/org/apache/tika/detect/ZipContainerDetector.java
index b3d1fdf6d..cfedcc211 100644
--- a/tika-parsers/src/main/java/org/apache/tika/detect/ZipContainerDetector.java
+++ b/tika-parsers/src/main/java/org/apache/tika/detect/ZipContainerDetector.java
@@ -20,8 +20,6 @@ import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 
-import javax.xml.namespace.QName;
-
 import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
 import org.apache.commons.compress.archivers.zip.ZipFile;
 import org.apache.poi.extractor.ExtractorFactory;
@@ -34,6 +32,8 @@ import org.apache.tika.io.IOUtils;
 import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.mime.MediaType;
+import org.apache.tika.parser.iwork.IWorkPackageParser;
+import org.apache.tika.parser.iwork.IWorkPackageParser.IWORKDocumentType;
 
 /**
  * A detector that works on a Zip document
@@ -151,58 +151,21 @@ public class ZipContainerDetector implements Detector {
     }
 
     private MediaType detectIWork(ZipFile zip) {
-        if (zip.getEntry("buildVersionHistory.plist") != null) {
+        if (zip.getEntry(IWorkPackageParser.IWORK_COMMON_ENTRY) != null) {
             // Locate the appropriate index file entry, and reads from that
             // the root element of the document. That is used to the identify
             // the correct type of the keynote container.
-            MediaType type = detectIWork(zip, "index.apxl");
-            if (type == null) {
-                type = detectIWork(zip, "index.xml");
-            }
-            if (type == null) {
-                type = detectIWork(zip, "presentation.apxl");
-            }
-            if (type == null) {
-                // Not sure, fallback to the container type
-                return MediaType.application("vnd.apple.iwork");
+            for (String entryName : IWorkPackageParser.IWORK_CONTENT_ENTRIES) {
+               IWORKDocumentType type = IWORKDocumentType.detectType(zip.getEntry(entryName), zip); 
+               if (type != null) {
+                  return type.getType();
+               }
             }
-            return type;
+            
+            // Not sure, fallback to the container type
+            return MediaType.application("vnd.apple.iwork");
         } else {
             return null;
         }
     }
-
-    private MediaType detectIWork(ZipFile zip, String name) {
-        try {
-            ZipArchiveEntry entry = zip.getEntry(name);
-            if (entry == null) {
-                return null;
-            }
-
-            InputStream stream = zip.getInputStream(entry);
-            try {
-                QName qname =
-                    new XmlRootExtractor().extractRootElement(stream);
-                String uri = qname.getNamespaceURI();
-                String local = qname.getLocalPart();
-                if ("http://developer.apple.com/namespaces/ls".equals(uri)
-                        && "document".equals(local)) {
-                    return MediaType.application("vnd.apple.numbers");
-                } else if ("http://developer.apple.com/namespaces/sl".equals(uri)
-                        && "document".equals(local)) {
-                    return MediaType.application("vnd.apple.pages");
-                } else if ("http://developer.apple.com/namespaces/keynote2".equals(uri)
-                        && "presentation".equals(local)) {
-                    return MediaType.application("vnd.apple.keynote");
-                } else {
-                    return null;
-                }
-            } finally {
-                stream.close();
-            }
-        } catch (IOException e) {
-            return null;
-        }
-    }
-
 }
\ No newline at end of file
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java
index 15de84602..a210f76ed 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkPackageParser.java
@@ -16,6 +16,7 @@
  */
 package org.apache.tika.parser.iwork;
 
+import java.io.BufferedInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Arrays;
@@ -23,32 +24,129 @@ import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
 
-import org.apache.commons.compress.archivers.ArchiveEntry;
-import org.apache.commons.compress.archivers.ArchiveInputStream;
+import javax.xml.namespace.QName;
+
+import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
 import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
+import org.apache.commons.compress.archivers.zip.ZipFile;
+import org.apache.tika.detect.XmlRootExtractor;
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.io.CloseShieldInputStream;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.mime.MediaType;
 import org.apache.tika.parser.AbstractParser;
-import org.apache.tika.parser.EmptyParser;
 import org.apache.tika.parser.ParseContext;
-import org.apache.tika.parser.Parser;
+import org.apache.tika.sax.OfflineContentHandler;
+import org.apache.tika.sax.XHTMLContentHandler;
 import org.xml.sax.ContentHandler;
 import org.xml.sax.SAXException;
 
 /**
  * A parser for the IWork container files. This includes *.key, *.pages and *.numbers files.
- * This parser delegates the relevant files to {@link IWorkParser} that parsers the content.
+ * This parser delegates the relevant entries to a {@link ContentHandler} that parsers the content.
+ * 
+ * Currently supported formats:
+ * <ol>
+ * <li>Keynote format version 2.x. Currently only tested with Keynote version 5.x
+ * <li>Pages format version 1.x. Currently only tested with Pages version 4.0.x
+ * <li>Numbers format version 1.x. Currently only tested with Numbers version 2.0.x
+ * </ol>
  */
 public class IWorkPackageParser extends AbstractParser {
+    /**
+     * Serial version UID
+     */
+    private static final long serialVersionUID = -2160322853809682372L;
 
-    private final static Set<MediaType> supportedTypes =
-            Collections.singleton(MediaType.application("vnd.apple.iwork"));
-
-    private final static Set<String> relevantFileNames = Collections.unmodifiableSet(
+    /**
+     * Which files within an iWork file contain the actual content?
+     */
+    public final static Set<String> IWORK_CONTENT_ENTRIES = Collections.unmodifiableSet(
             new HashSet<String>(Arrays.asList("index.apxl", "index.xml", "presentation.apxl"))
     );
+    /**
+     * All iWork files contain one of these, so we can detect based on it
+     */
+    public final static String IWORK_COMMON_ENTRY = "buildVersionHistory.plist";
+    
+    public enum IWORKDocumentType {
+       KEYNOTE("http://developer.apple.com/namespaces/keynote2", "presentation", MediaType.application("vnd.apple.keynote")),
+       NUMBERS("http://developer.apple.com/namespaces/ls", "document", MediaType.application("vnd.apple.numbers")),
+       PAGES("http://developer.apple.com/namespaces/sl", "document", MediaType.application("vnd.apple.pages"));
+       
+       private final String namespace;
+       private final String part;
+       private final MediaType type;
+       
+       IWORKDocumentType(String namespace, String part, MediaType type) {
+          this.namespace = namespace;
+          this.part = part;
+          this.type = type;
+       }
+       
+       public String getNamespace() {
+          return namespace;
+       }
+
+       public String getPart() {
+          return part;
+       }
+
+       public MediaType getType() {
+          return type;
+       }
+
+       public static IWORKDocumentType detectType(ZipArchiveEntry entry, ZipFile zip) {
+          try {
+             if (entry == null) {
+                 return null;
+             }
+
+             InputStream stream = zip.getInputStream(entry);
+             try {
+                return detectType(stream);
+             } finally {
+                 stream.close();
+             }
+          } catch (IOException e) {
+             return null;
+          }
+       }
+       
+       public static IWORKDocumentType detectType(ZipArchiveEntry entry, ZipArchiveInputStream zip) {
+          if (entry == null) {
+              return null;
+          }
+
+          return detectType(zip);
+       }
+       
+       private static IWORKDocumentType detectType(InputStream stream) {
+          QName qname =
+             new XmlRootExtractor().extractRootElement(stream);
+          String uri = qname.getNamespaceURI();
+          String local = qname.getLocalPart();
+         
+          for (IWORKDocumentType type : values()) {
+             if(type.getNamespace().equals(uri) && 
+                type.getPart().equals(local)) {
+                return type;
+             }
+          }
+          return null;
+       }
+    }
+
+    /**
+     * This parser handles all iWorks formats.
+     */
+    private final static Set<MediaType> supportedTypes =
+         Collections.unmodifiableSet(new HashSet<MediaType>(Arrays.asList(
+                MediaType.application("vnd.apple.iwork"),
+                IWORKDocumentType.KEYNOTE.getType(),
+                IWORKDocumentType.NUMBERS.getType(),
+                IWORKDocumentType.PAGES.getType()
+         )));
 
     public Set<MediaType> getSupportedTypes(ParseContext context) {
         return supportedTypes;
@@ -56,17 +154,49 @@ public class IWorkPackageParser extends AbstractParser {
 
     public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context)
             throws IOException, SAXException, TikaException {
-        ArchiveInputStream zip = new ZipArchiveInputStream(stream);
-        ArchiveEntry entry = zip.getNextEntry();
-        Parser parser = context.get(Parser.class, EmptyParser.INSTANCE);
+        ZipArchiveInputStream zip = new ZipArchiveInputStream(stream);
+        ZipArchiveEntry entry = zip.getNextZipEntry();
+
         while (entry != null) {
-            if (!relevantFileNames.contains(entry.getName())) {
-                entry = zip.getNextEntry();
+            if (!IWORK_CONTENT_ENTRIES.contains(entry.getName())) {
+                entry = zip.getNextZipEntry();
                 continue;
             }
 
-            parser.parse(new CloseShieldInputStream(zip), handler, metadata, context);
-            entry = zip.getNextEntry();
+            InputStream entryStream = new CloseShieldInputStream(
+                  new BufferedInputStream(zip, 4096));
+            entryStream.mark(4096);
+            IWORKDocumentType type = IWORKDocumentType.detectType(entryStream);
+            entryStream.reset();
+            
+            if(type != null) {
+               XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);
+               ContentHandler contentHandler;
+               
+               switch(type) {
+               case KEYNOTE:
+                  contentHandler = new KeynoteContentHandler(xhtml, metadata);
+                  break;
+               case NUMBERS:
+                  contentHandler = new NumbersContentHandler(xhtml, metadata);
+                  break;
+               case PAGES:
+                  contentHandler = new PagesContentHandler(xhtml, metadata);
+                  break;
+               default:
+                  throw new TikaException("Unhandled iWorks file " + type);
+               }
+
+               metadata.add(Metadata.CONTENT_TYPE, type.getType().toString());
+               xhtml.startDocument();
+               context.getSAXParser().parse(
+                       entryStream, 
+                       new OfflineContentHandler(contentHandler)
+               );
+               xhtml.endDocument();
+            }
+            
+            entry = zip.getNextZipEntry();
         }
         zip.close();
     }
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkParser.java
deleted file mode 100644
index e3af61307..000000000
--- a/tika-parsers/src/main/java/org/apache/tika/parser/iwork/IWorkParser.java
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.tika.parser.iwork;
-
-import org.apache.tika.exception.TikaException;
-import org.apache.tika.io.CloseShieldInputStream;
-import org.apache.tika.metadata.Metadata;
-import org.apache.tika.mime.MediaType;
-import org.apache.tika.parser.AbstractParser;
-import org.apache.tika.parser.ParseContext;
-import org.apache.tika.parser.Parser;
-import org.apache.tika.sax.OfflineContentHandler;
-import org.apache.tika.sax.XHTMLContentHandler;
-import org.xml.sax.ContentHandler;
-import org.xml.sax.SAXException;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
-
-/**
- * A parser for the IWork formats.
- *
- * Currently supported formats:
- * <ol>
- * <li>Keynote format version 2.x. Currently only tested with Keynote version 5.x
- * <li>Pages format version 1.x. Currently only tested with Pages version 4.0.x
- * <li>Numbers format version 1.x. Currently only tested with Numbers version 2.0.x
- * </ol>
- */
-public class IWorkParser extends AbstractParser {
-
-    private final static Set<MediaType> supportedTypes =
-        Collections.unmodifiableSet(new HashSet<MediaType>(Arrays.asList(
-                MediaType.application("vnd.apple.keynote"),
-                MediaType.application("vnd.apple.pages"),
-                MediaType.application("vnd.apple.numbers")
-        )));
-
-    public Set<MediaType> getSupportedTypes(ParseContext context) {
-        return supportedTypes;
-    }
-
-    public void parse(
-            InputStream stream, ContentHandler handler,
-            Metadata metadata, ParseContext context)
-            throws IOException, SAXException, TikaException {
-        ContentHandler contentHandler;
-        String contentType = metadata.get(Metadata.CONTENT_TYPE);
-        XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);
-        if ("application/vnd.apple.keynote".equals(contentType)) {
-          contentHandler = new KeynoteContentHandler(xhtml, metadata);
-        } else if ("application/vnd.apple.pages".equals(contentType)) {
-          contentHandler = new PagesContentHandler(xhtml, metadata);
-        } else if ("application/vnd.apple.numbers".equals(contentType)) {
-          contentHandler = new NumbersContentHandler(xhtml, metadata);
-        } else {
-          return;
-        }
-
-        xhtml.startDocument();
-        context.getSAXParser().parse(
-                new CloseShieldInputStream(stream),
-                new OfflineContentHandler(contentHandler)
-        );
-        xhtml.endDocument();
-    }
-
-}
diff --git a/tika-parsers/src/main/resources/META-INF/services/org.apache.tika.parser.Parser b/tika-parsers/src/main/resources/META-INF/services/org.apache.tika.parser.Parser
index 82d88e04c..41cb96bc9 100644
--- a/tika-parsers/src/main/resources/META-INF/services/org.apache.tika.parser.Parser
+++ b/tika-parsers/src/main/resources/META-INF/services/org.apache.tika.parser.Parser
@@ -23,7 +23,6 @@ org.apache.tika.parser.font.TrueTypeParser
 org.apache.tika.parser.html.HtmlParser
 org.apache.tika.parser.image.ImageParser
 org.apache.tika.parser.image.TiffParser
-org.apache.tika.parser.iwork.IWorkParser
 org.apache.tika.parser.iwork.IWorkPackageParser
 org.apache.tika.parser.jpeg.JpegParser
 org.apache.tika.parser.mail.RFC822Parser
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/iwork/IWorkParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/iwork/IWorkParserTest.java
index aee73c781..f076138ea 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/iwork/IWorkParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/iwork/IWorkParserTest.java
@@ -16,7 +16,10 @@
  */
 package org.apache.tika.parser.iwork;
 
+import java.io.InputStream;
+
 import junit.framework.TestCase;
+
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.parser.AutoDetectParser;
 import org.apache.tika.parser.ParseContext;
@@ -24,8 +27,6 @@ import org.apache.tika.parser.Parser;
 import org.apache.tika.sax.BodyContentHandler;
 import org.xml.sax.ContentHandler;
 
-import java.io.InputStream;
-
 /**
  * Tests if the IWork parser parses the content and metadata properly of the supported formats.
  */
