diff --git a/tika-core/src/main/java/org/apache/tika/mime/MediaType.java b/tika-core/src/main/java/org/apache/tika/mime/MediaType.java
index fdf0c68a1..c95731db3 100644
--- a/tika-core/src/main/java/org/apache/tika/mime/MediaType.java
+++ b/tika-core/src/main/java/org/apache/tika/mime/MediaType.java
@@ -16,6 +16,7 @@
  */
 package org.apache.tika.mime;
 
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
@@ -29,7 +30,7 @@ import java.util.regex.Pattern;
 public final class MediaType {
 
     private static final Map<String, String> NO_PARAMETERS =
-        Collections.emptyMap();
+        new TreeMap<String, String>();
 
     private static final Pattern SPECIAL =
         Pattern.compile("[\\(\\)<>@,;:\\\\\"/\\[\\]\\?=]");
@@ -47,22 +48,37 @@ public final class MediaType {
         new MediaType("application", "xml", NO_PARAMETERS);
 
     /**
-     * Parses the given string to a media type. The string is expected
-     * to be of the form "type/subtype(; parameter=...)*" as defined
-     * in RFC 2045.
-     * <p>
-     * Note that currently this method only parses the "type/subtype" part
-     * of the string. Any parameters are simply discarded. TODO: Change this.
-     *
-     * @param string media type string to be parsed
+     * Parses the given string to a media type. The string is expected to be of
+     * the form "type/subtype(; parameter=...)*" as defined in RFC 2045.
+     * 
+     * @param string
+     *            media type string to be parsed
      * @return parsed media type, or <code>null</code> if parsing fails
      */
     public static MediaType parse(String string) {
         int colon = string.indexOf(';');
-        if (colon != -1) {
-            string = string.substring(0, colon);
-        }
+        if (colon != -1 && colon != string.length()-1) {
+            String primarySubString = string.substring(0, colon);
+            String parameters = string
+                    .substring(colon + 1, string.length());
+
+            MediaType type = parseNoParams(primarySubString);
+            String[] paramBases = parameters.split(";");
+            for (int i = 0; i < paramBases.length; i++) {
+                String[] paramToks = paramBases[i].split("=");
+                String paramName = paramToks[0].trim();
+                String paramValue = paramToks[1].trim();
+                type.parameters.put(paramName, paramValue);
+            }
+
+            return type;
+
+        } else
+            return parseNoParams(string);
+
+    }
 
+    private static MediaType parseNoParams(String string) {
         int slash = string.indexOf('/');
         if (slash != -1) {
             String type = string.substring(0, slash).trim();
diff --git a/tika-core/src/test/java/org/apache/tika/detect/TypeDetectorTest.java b/tika-core/src/test/java/org/apache/tika/detect/TypeDetectorTest.java
index 7a914811f..4e1aa3863 100644
--- a/tika-core/src/test/java/org/apache/tika/detect/TypeDetectorTest.java
+++ b/tika-core/src/test/java/org/apache/tika/detect/TypeDetectorTest.java
@@ -17,6 +17,8 @@
 package org.apache.tika.detect;
 
 import java.io.IOException;
+import java.util.Map;
+import java.util.TreeMap;
 
 import junit.framework.TestCase;
 
@@ -29,13 +31,22 @@ import org.apache.tika.mime.MediaType;
 public class TypeDetectorTest extends TestCase {
 
     private Detector detector = new TypeDetector();
+    
+    private static final Map<String, String> params = new
+        TreeMap<String, String>();
+    static{
+        params.put("a", "b");
+    }
+    
+    private static final MediaType TEXT_PLAIN_A_EQ_B = 
+          new MediaType("text", "plain", params);
 
     public void testDetect() {
         assertDetect(MediaType.TEXT_PLAIN, "text/plain");
         assertDetect(MediaType.TEXT_PLAIN, "TEXT/PLAIN");
         assertDetect(MediaType.TEXT_PLAIN, " text/\tplain\n");
-        assertDetect(MediaType.TEXT_PLAIN, "text/plain; a=b");
-        assertDetect(MediaType.TEXT_PLAIN, "\ttext/plain; a=b\n");
+        assertDetect(TEXT_PLAIN_A_EQ_B, "text/plain; a=b");
+        assertDetect(TEXT_PLAIN_A_EQ_B, "\ttext/plain; a=b\n");
 
         assertDetect(MediaType.OCTET_STREAM, "text\\plain");
 
diff --git a/tika-parsers/src/test/java/org/apache/tika/mime/MediaTypeTest.java b/tika-parsers/src/test/java/org/apache/tika/mime/MediaTypeTest.java
index 657fdf1ca..f6194e0bf 100644
--- a/tika-parsers/src/test/java/org/apache/tika/mime/MediaTypeTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/mime/MediaTypeTest.java
@@ -106,6 +106,55 @@ public class MediaTypeTest extends TestCase {
                 + "; c=\"\\(\\)\\<\\>\\@\\,\\;\\:\\\\\\\"\\/\\[\\]\\?\\=\"",
                 new MediaType("text", "plain", parameters).toString());
     }
+    
+    /**
+     * @since TIKA-121
+     */
+    public void testParseWithParams() {
+        String mimeStringWithParams = "text/html;charset=UTF-8;foo=bar;foo2=bar2";
+
+        MediaType type = MediaType.parse(mimeStringWithParams);
+        assertNotNull(type);
+        assertNotNull(type.getParameters());
+        assertNotNull(type.getParameters().keySet());
+        assertEquals(3, type.getParameters().keySet().size());
+        boolean gotCharset = false, gotFoo = false, gotFoo2 = false;
+        for (String param : type.getParameters().keySet()) {
+            if (param.equals("charset")) {
+                gotCharset = true;
+            } else if (param.equals("foo")) {
+                gotFoo = true;
+            } else if (param.equals("foo2")) {
+                gotFoo2 = true;
+            }
+        }
+        assertTrue(gotCharset && gotFoo && gotFoo2);
+    }
+
+    /**
+     * @since TIKA-121
+     */
+    public void testParseNoParams() {
+        String mimeStringNoParams = "text/html";
+
+        MediaType type = MediaType.parse(mimeStringNoParams);
+        assertNotNull(type);
+        assertNotNull(type.getParameters());
+        assertNotNull(type.getParameters().keySet());
+        assertEquals(0, type.getParameters().keySet().size());
+    }
+
+    /**
+     * @since TIKA-121
+     */
+    public void testParseNoParamsWithSemi() {
+        String mimeStringNoParamsWithSemi = "text/html;";
+        MediaType type = MediaType.parse(mimeStringNoParamsWithSemi);
+        assertNotNull(type);
+        assertNotNull(type.getParameters());
+        assertNotNull(type.getParameters().keySet());
+        assertEquals(0, type.getParameters().keySet().size());
+    }
 
     
 }
