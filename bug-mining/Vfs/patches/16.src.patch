diff --git a/core/src/main/java/org/apache/commons/vfs/Resources.properties b/core/src/main/java/org/apache/commons/vfs/Resources.properties
index f846aff0..0918594a 100644
--- a/core/src/main/java/org/apache/commons/vfs/Resources.properties
+++ b/core/src/main/java/org/apache/commons/vfs/Resources.properties
@@ -62,6 +62,7 @@ vfs.provider/read.error=Could not read file "{0}".
 vfs.provider/random-access.error=Could not read/write file "{0}".
 vfs.provider/read-not-readable.error=File "{0}" is not readable.
 vfs.provider/read-not-file.error=Could not read from "{0}" because it is a not a file.
+vfs.provider/closed.error=File closed.
 
 # DefaultFileContent
 vfs.provider/get-size-not-file.error=Could not determine the size of "{0}" because it is not a file.
diff --git a/core/src/main/java/org/apache/commons/vfs/util/MonitorOutputStream.java b/core/src/main/java/org/apache/commons/vfs/util/MonitorOutputStream.java
index 659b019a..7e7b2930 100644
--- a/core/src/main/java/org/apache/commons/vfs/util/MonitorOutputStream.java
+++ b/core/src/main/java/org/apache/commons/vfs/util/MonitorOutputStream.java
@@ -16,6 +16,8 @@
  */
 package org.apache.commons.vfs.util;
 
+import org.apache.commons.vfs.FileSystemException;
+
 import java.io.BufferedOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
@@ -75,7 +77,45 @@ public class MonitorOutputStream
         }
     }
 
-    /**
+
+	public synchronized void write(int b) throws IOException
+	{
+		assertOpen();
+		super.write(b);
+	}
+
+	public synchronized void write(byte b[], int off, int len) throws IOException
+	{
+		assertOpen();
+		super.write(b, off, len);
+	}
+
+	public synchronized void flush() throws IOException
+	{
+		assertOpen();
+		super.flush();
+	}
+
+	public void write(byte b[]) throws IOException
+	{
+		assertOpen();
+		super.write(b);
+	}
+
+	/**
+	 * check if file is still open. <br />
+	 * This is a workaround for an oddidy with javas BufferedOutputStream where you can write to
+	 * even if the stream has been closed
+	 */
+	protected void assertOpen() throws FileSystemException
+	{
+		if (finished)
+		{
+			throw new FileSystemException("vfs.provider/closed.error");
+		}
+	}
+
+	/**
      * Called after this stream is closed.  This implementation does nothing.
      */
     protected void onClose() throws IOException
