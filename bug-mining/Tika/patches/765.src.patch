diff --git a/tika-translate/pom.xml b/tika-translate/pom.xml
index 187b5c5f0..7d7d8790b 100644
--- a/tika-translate/pom.xml
+++ b/tika-translate/pom.xml
@@ -54,7 +54,7 @@
     <dependency>
       <groupId>com.fasterxml.jackson.jaxrs</groupId>
       <artifactId>jackson-jaxrs-json-provider</artifactId>
-      <version>2.4.0</version>
+      <version>2.7.1</version>
     </dependency>
 
     <!-- Test dependencies -->
diff --git a/tika-translate/src/main/java/org/apache/tika/language/translate/CachedTranslator.java b/tika-translate/src/main/java/org/apache/tika/language/translate/CachedTranslator.java
index 5a771a1fe..e561f0b28 100644
--- a/tika-translate/src/main/java/org/apache/tika/language/translate/CachedTranslator.java
+++ b/tika-translate/src/main/java/org/apache/tika/language/translate/CachedTranslator.java
@@ -17,14 +17,14 @@
 
 package org.apache.tika.language.translate;
 
-import com.fasterxml.jackson.databind.util.LRUMap;
+import java.io.IOException;
+import java.util.HashMap;
 
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.language.LanguageIdentifier;
 import org.apache.tika.language.LanguageProfile;
 
-import java.io.IOException;
-import java.util.HashMap;
+import com.fasterxml.jackson.databind.util.LRUMap;
 
 /**
  * CachedTranslator. Saves a map of previous translations in order to prevent repetitive translation requests.
@@ -72,8 +72,10 @@ public class CachedTranslator implements Translator {
 
 	@Override
     public String translate(String text, String sourceLanguage, String targetLanguage) throws TikaException, IOException {
-        if (translator == null) return text;
-		HashMap<String, String> translationCache = getTranslationCache(sourceLanguage, targetLanguage);
+        if (translator == null) {
+            return text;
+        }
+        LRUMap<String, String> translationCache = getTranslationCache(sourceLanguage, targetLanguage);
         String translatedText = translationCache.get(text);
         if (translatedText == null) {
             translatedText = translator.translate(text, sourceLanguage, targetLanguage);
@@ -116,9 +118,12 @@ public class CachedTranslator implements Translator {
      * @since Tika 1.6
      */
     public int getNumTranslationsFor(String sourceLanguage, String targetLanguage) {
-        HashMap<String, String> translationCache = cache.get(buildCacheKeyString(sourceLanguage, targetLanguage));
-        if (translationCache == null) return 0;
-        else return translationCache.size();
+        LRUMap<String, String> translationCache = cache.get(buildCacheKeyString(sourceLanguage, targetLanguage));
+        if (translationCache == null) {
+            return 0;
+        } else {
+            return translationCache.size();
+        }
     }
 
     /**
@@ -131,8 +136,8 @@ public class CachedTranslator implements Translator {
      * @return true if the cache contains a translation of the text, false otherwise.
      */
     public boolean contains(String text, String sourceLanguage, String targetLanguage) {
-        HashMap<String, String> translationCache = getTranslationCache(sourceLanguage, targetLanguage);
-        return translationCache.containsKey(text);
+        LRUMap<String, String> translationCache = getTranslationCache(sourceLanguage, targetLanguage);
+        return translationCache.get(text) != null;
     }
 
     /**
