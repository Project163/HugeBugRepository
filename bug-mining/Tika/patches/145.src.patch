diff --git a/tika-core/src/main/java/org/apache/tika/detect/MagicDetector.java b/tika-core/src/main/java/org/apache/tika/detect/MagicDetector.java
index 281041ec8..6c4fddbc0 100644
--- a/tika-core/src/main/java/org/apache/tika/detect/MagicDetector.java
+++ b/tika-core/src/main/java/org/apache/tika/detect/MagicDetector.java
@@ -69,6 +69,8 @@ public class MagicDetector implements Detector {
      * starts at this offset.
      */
     private final int offsetRangeEnd;
+    
+    private final String asString;
 
     /**
      * Creates a detector for input documents that have the exact given byte
@@ -134,6 +136,13 @@ public class MagicDetector implements Detector {
 
         this.offsetRangeBegin = offsetRangeBegin;
         this.offsetRangeEnd = offsetRangeEnd;
+        
+        // Build the string representation. Needs to be unique, as
+        //  these get compared. Compute now as may get compared a lot!
+        this.asString = "Magic Detection for " + type.toString() +
+          " looking for " + pattern.length + 
+          " bytes = " + this.pattern + 
+          " mask = " + this.mask;
     }
 
     /**
@@ -196,4 +205,12 @@ public class MagicDetector implements Detector {
         }
     }
 
+    /**
+     * Returns a string representation of the Detection Rule.
+     * Should sort nicely by type and details, as we sometimes
+     *  compare these.
+     */
+    public String toString() {
+       return asString;
+    }
 }
diff --git a/tika-core/src/main/java/org/apache/tika/mime/Magic.java b/tika-core/src/main/java/org/apache/tika/mime/Magic.java
index ae793965a..96586b1ef 100644
--- a/tika-core/src/main/java/org/apache/tika/mime/Magic.java
+++ b/tika-core/src/main/java/org/apache/tika/mime/Magic.java
@@ -69,6 +69,9 @@ class Magic implements Clause, Comparable<Magic> {
         if (diff == 0) {
             diff = o.size() - size();
         }
+        if (diff == 0) {
+            diff = o.type.compareTo(type);
+        }
         if (diff == 0) {
             diff = o.toString().compareTo(toString());
         }
diff --git a/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java b/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java
index 38afa86ef..fdd33c036 100644
--- a/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java
+++ b/tika-core/src/main/java/org/apache/tika/mime/MimeTypesReader.java
@@ -183,7 +183,7 @@ final class MimeTypesReader implements MimeTypesReaderMetKeys {
             priority = Integer.parseInt(value);
         }
 
-        for (Clause clause : readMatches(element)) {
+        for (Clause clause : readMatches(element, mimeType.getType())) {
             Magic magic = new Magic(mimeType);
             magic.setPriority(priority);
             magic.setClause(clause);
@@ -191,7 +191,7 @@ final class MimeTypesReader implements MimeTypesReaderMetKeys {
         }
     }
 
-    private List<Clause> readMatches(Element element) throws MimeTypeException {
+    private List<Clause> readMatches(Element element, MediaType mediaType) throws MimeTypeException {
         List<Clause> clauses = new ArrayList<Clause>();
         NodeList nodes = element.getChildNodes();
         for (int i = 0; i < nodes.getLength(); i++) {
@@ -199,7 +199,7 @@ final class MimeTypesReader implements MimeTypesReaderMetKeys {
             if (node.getNodeType() == Node.ELEMENT_NODE) {
                 Element nodeElement = (Element) node;
                 if (nodeElement.getTagName().equals(MATCH_TAG)) {
-                    clauses.add(readMatch(nodeElement));
+                    clauses.add(readMatch(nodeElement, mediaType));
                 }
             }
         }
@@ -207,7 +207,7 @@ final class MimeTypesReader implements MimeTypesReaderMetKeys {
     }
 
     /** Read Element named match. */
-    private Clause readMatch(Element element) throws MimeTypeException {
+    private Clause readMatch(Element element, MediaType mediaType) throws MimeTypeException {
         String type = "string";
         int start = 0;
         int end = 0;
@@ -252,10 +252,10 @@ final class MimeTypesReader implements MimeTypesReaderMetKeys {
         }
 
         MagicDetector detector = new MagicDetector(
-                MediaType.TEXT_PLAIN, patternBytes, maskBytes, start, end);
+                mediaType, patternBytes, maskBytes, start, end);
         Clause clause = new MagicMatch(detector, length);
 
-        List<Clause> subClauses = readMatches(element);
+        List<Clause> subClauses = readMatches(element, mediaType);
         if (subClauses.size() == 0) {
             return clause;
         } else if (subClauses.size() == 1) {
diff --git a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java
index 26ae03a90..dd5093ce2 100644
--- a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java
+++ b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java
@@ -138,5 +138,16 @@ public class MimeDetectionTest extends TestCase {
             in.close();
         }        
     }
+    
+    /**
+     * Tests that when we repeatedly test the detection of a document
+     *  that can be detected with Mime Magic, that we consistently
+     *  detect it correctly. See TIKA-391 for more details.
+     */
+    public void testMimeMagicStability() throws IOException {
+       for(int i=0; i<100; i++) {
+          testFile("application/vnd.ms-excel", "test.xls");
+       }
+    }
 
 }
diff --git a/tika-core/src/test/java/org/apache/tika/mime/MimeTypesReaderTest.java b/tika-core/src/test/java/org/apache/tika/mime/MimeTypesReaderTest.java
new file mode 100644
index 000000000..4c497cd20
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/mime/MimeTypesReaderTest.java
@@ -0,0 +1,118 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tika.mime;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.SortedSet;
+
+import junit.framework.TestCase;
+
+import org.apache.tika.config.TikaConfig;
+import org.apache.tika.metadata.Metadata;
+
+/**
+ * These tests try to ensure that the MimeTypesReader
+ *  has correctly processed the mime-types.xml file.
+ * To do this, it tests that various aspects of the
+ *  mime-types.xml file have ended up correctly as
+ *  globs, matches, magics etc.
+ *  
+ * If you make updates to mime-types.xml, then the
+ *  checks in this test may no longer hold true.
+ * As such, if tests here start failing after your
+ *  changes, please review the test details, and
+ *  update it to match the new state of the file! 
+ */
+public class MimeTypesReaderTest extends TestCase {
+
+    private MimeTypes mimeTypes;
+    private SortedSet<Magic> magics;
+    private SortedSet<MimeType> xmls;
+
+    @Override
+    @SuppressWarnings("unchecked")
+    protected void setUp() throws Exception {
+        super.setUp();
+        this.mimeTypes = TikaConfig.getDefaultConfig().getMimeRepository();
+        
+        Field magicsField = mimeTypes.getClass().getDeclaredField("magics");
+        magicsField.setAccessible(true);
+        magics = (SortedSet<Magic>)magicsField.get(mimeTypes);
+        
+        Field xmlsField = mimeTypes.getClass().getDeclaredField("xmls");
+        xmlsField.setAccessible(true);
+        xmls = (SortedSet<MimeType>)xmlsField.get(mimeTypes);
+    }
+    
+    public void testHtmlMatches() throws Exception {
+       int minMatches = 10;
+       
+       // Check on the type
+       MimeType html = mimeTypes.forName("text/html");
+       assertTrue(html.hasMagic());
+       assertTrue(
+             "There should be at least "+minMatches+" HTML matches, found " + html.getMagics().length,
+             html.getMagics().length >= minMatches
+       );
+       
+       
+       // Check on the overall magics
+       List<Magic> htmlMagics = new ArrayList<Magic>();
+       for(Magic magic : magics) {
+          if(magic.getType().toString().equals("text/html")) {
+             htmlMagics.add(magic);
+          }
+       }
+       
+       assertTrue(
+             "There should be at least "+minMatches+" HTML matches, found " + htmlMagics.size(),
+             htmlMagics.size() >= minMatches
+       );
+    }
+    
+    public void testExcelMatches() throws Exception {
+       int minMatches = 4;
+       
+       // Check on the type
+       MimeType excel = mimeTypes.forName("application/vnd.ms-excel");
+       assertTrue(excel.hasMagic());
+       assertTrue(
+             "There should be at least "+minMatches+" Excel matches, found " + excel.getMagics().length,
+             excel.getMagics().length >= minMatches
+       );
+       
+       
+       // Check on the overall magics
+       List<Magic> excelMagics = new ArrayList<Magic>();
+       for(Magic magic : magics) {
+          if(magic.getType().toString().equals("application/vnd.ms-excel")) {
+             excelMagics.add(magic);
+             System.out.println(magic);
+          }
+       }
+       
+       assertTrue(
+             "There should be at least "+minMatches+" Excel matches, found " + excelMagics.size(),
+             excelMagics.size() >= minMatches
+       );
+    }
+}
diff --git a/tika-core/src/test/resources/org/apache/tika/mime/test.xls b/tika-core/src/test/resources/org/apache/tika/mime/test.xls
new file mode 100644
index 000000000..347d8a662
Binary files /dev/null and b/tika-core/src/test/resources/org/apache/tika/mime/test.xls differ
