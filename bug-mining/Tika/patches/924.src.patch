diff --git a/CHANGES.txt b/CHANGES.txt
index d6e44acde..c7ba3ff93 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -1,5 +1,7 @@
 Release 1.16 - ??/??/????
 
+  * Extract macros from PPT (TIKA-2089).
+
   * Extract absolute path for last saved location when available
     in .xlsx and .xlsb (TIKA-2335).
 
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/AbstractPOIFSExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/AbstractPOIFSExtractor.java
index 3e658fdd2..35e9ff636 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/AbstractPOIFSExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/AbstractPOIFSExtractor.java
@@ -50,6 +50,7 @@ abstract class AbstractPOIFSExtractor {
     private PasswordProvider passwordProvider;
     protected final Metadata parentMetadata;//metadata of the parent/container document
     protected final OfficeParserConfig officeParserConfig;
+    protected final ParseContext context;
 
     protected AbstractPOIFSExtractor(ParseContext context) {
         this(context, null);
@@ -61,6 +62,7 @@ abstract class AbstractPOIFSExtractor {
         this.passwordProvider = context.get(PasswordProvider.class);
         this.officeParserConfig = context.get(OfficeParserConfig.class, new OfficeParserConfig());
         this.parentMetadata = parentMetadata;
+        this.context = context;
     }
 
     // Note - these cache, but avoid creating the default TikaConfig if not needed
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java
index c05fda01d..8e3798535 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java
@@ -25,6 +25,10 @@ import org.apache.poi.common.usermodel.Hyperlink;
 import org.apache.poi.hslf.model.Comment;
 import org.apache.poi.hslf.model.HeadersFooters;
 import org.apache.poi.hslf.model.OLEShape;
+import org.apache.poi.hslf.record.DocInfoListContainer;
+import org.apache.poi.hslf.record.RecordTypes;
+import org.apache.poi.hslf.record.VBAInfoAtom;
+import org.apache.poi.hslf.record.VBAInfoContainer;
 import org.apache.poi.hslf.usermodel.HSLFMasterSheet;
 import org.apache.poi.hslf.usermodel.HSLFNotes;
 import org.apache.poi.hslf.usermodel.HSLFObjectData;
@@ -198,10 +202,38 @@ public class HSLFExtractor extends AbstractPOIFSExtractor {
         }
 
         handleSlideEmbeddedPictures(ss, xhtml);
-
+        if (officeParserConfig.getExtractMacros()) {
+            extractMacros(ss, xhtml);
+        }
         xhtml.endElement("div");
     }
 
+    private void extractMacros(HSLFSlideShow ppt, XHTMLContentHandler xhtml) {
+
+        //get macro persist id
+        DocInfoListContainer list = (DocInfoListContainer)ppt.getDocumentRecord().findFirstOfType(RecordTypes.List.typeID);
+        VBAInfoContainer vbaInfo = (VBAInfoContainer)list.findFirstOfType(RecordTypes.VBAInfo.typeID);
+        VBAInfoAtom vbaAtom = (VBAInfoAtom)vbaInfo.findFirstOfType(RecordTypes.VBAInfoAtom.typeID);
+        long persistId = vbaAtom.getPersistIdRef();
+        for (HSLFObjectData objData : ppt.getEmbeddedObjects()) {
+            if (objData.getExOleObjStg().getPersistId() == persistId) {
+                NPOIFSFileSystem npoifsFileSystem = null;
+                try {
+                    npoifsFileSystem = new NPOIFSFileSystem(objData.getData());
+                } catch (IOException e) {
+                    //swallow
+                }
+                try {
+                    OfficeParser.extractMacros(npoifsFileSystem, xhtml,
+                            EmbeddedDocumentUtil.getEmbeddedDocumentExtractor(context));
+                } catch (IOException|SAXException e) {
+                    //swallow
+                }
+            }
+        }
+
+    }
+
     private void extractMaster(XHTMLContentHandler xhtml, HSLFMasterSheet master) throws SAXException {
         if (master == null) {
             return;
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OfficeParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OfficeParser.java
index 4bd380488..1dc9cc5a0 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OfficeParser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OfficeParser.java
@@ -40,7 +40,6 @@ import org.apache.poi.poifs.filesystem.NPOIFSFileSystem;
 import org.apache.poi.poifs.filesystem.POIFSFileSystem;
 import org.apache.poi.poifs.macros.VBAMacroReader;
 import org.apache.poi.util.IOUtils;
-import org.apache.tika.config.Initializable;
 import org.apache.tika.exception.EncryptedDocumentException;
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.extractor.EmbeddedDocumentExtractor;
@@ -133,9 +132,14 @@ public class OfficeParser extends AbstractOfficeParser {
             OfficeParserConfig officeParserConfig = context.get(OfficeParserConfig.class);
 
             if (officeParserConfig.getExtractMacros()) {
-                //now try to get macros
+                //now try to get macros.
+                //Note that macros are handled separately for ppt in HSLFExtractor.
+
+                //We might consider not bothering to check for macros in root,
+                //if we know we're processing ppt based on content-type identified in metadata
                 extractMacros(root.getNFileSystem(), xhtml,
-                        EmbeddedDocumentUtil.getEmbeddedDocumentExtractor(context));
+                            EmbeddedDocumentUtil.getEmbeddedDocumentExtractor(context));
+
             }
         } finally {
             IOUtils.closeQuietly(mustCloseFs);
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java
index 57335b69e..ddc17c88b 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java
@@ -30,7 +30,6 @@ import org.apache.tika.metadata.TikaCoreProperties;
 import org.apache.tika.parser.ParseContext;
 import org.apache.tika.parser.RecursiveParserWrapper;
 import org.apache.tika.sax.BodyContentHandler;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.xml.sax.ContentHandler;
 
@@ -252,7 +251,6 @@ public class PowerPointParserTest extends TikaTest {
     }
 
     @Test
-    @Ignore("POI 3.15-final not finding any macros in this ppt")
     public void testMacros() throws  Exception {
         Metadata minExpected = new Metadata();
         minExpected.add(RecursiveParserWrapper.TIKA_CONTENT.getName(), "Sub Embolden()");
