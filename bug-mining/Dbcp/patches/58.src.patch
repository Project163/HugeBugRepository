diff --git a/src/java/org/apache/commons/dbcp/datasources/PerUserPoolDataSource.java b/src/java/org/apache/commons/dbcp/datasources/PerUserPoolDataSource.java
index 58336fc9..a4fdad32 100644
--- a/src/java/org/apache/commons/dbcp/datasources/PerUserPoolDataSource.java
+++ b/src/java/org/apache/commons/dbcp/datasources/PerUserPoolDataSource.java
@@ -333,7 +333,7 @@ public class PerUserPoolDataSource
      * Get the number of active connections in the pool for a given user.
      */
     public int getNumActive(String username, String password) {
-        ObjectPool pool = (ObjectPool)pools.get(getPoolKey(username));
+        ObjectPool pool = (ObjectPool)pools.get(getPoolKey(username,password));
         return (pool == null) ? 0 : pool.getNumActive();
     }
 
@@ -348,7 +348,7 @@ public class PerUserPoolDataSource
      * Get the number of idle connections in the pool for a given user.
      */
     public int getNumIdle(String username, String password) {
-        ObjectPool pool = (ObjectPool)pools.get(getPoolKey(username));
+        ObjectPool pool = (ObjectPool)pools.get(getPoolKey(username,password));
         return (pool == null) ? 0 : pool.getNumIdle();
     }
 
@@ -360,7 +360,7 @@ public class PerUserPoolDataSource
         getPooledConnectionAndInfo(String username, String password)
         throws SQLException {
 
-        PoolKey key = getPoolKey(username);
+        PoolKey key = getPoolKey(username,password);
         Object pool = pools.get(key);
         synchronized(this) {
             if (pool == null) {
@@ -436,21 +436,22 @@ public class PerUserPoolDataSource
         return ref;
     }
 
-    private PoolKey getPoolKey(String username) {
+    private PoolKey getPoolKey(String username, String password) {
         PoolKey key = null;
+        String name = username + password;
         String dsName = getDataSourceName();
         Map dsMap = (Map) poolKeys.get(dsName);
         if (dsMap != null) {
-            key = (PoolKey) dsMap.get(username);
+            key = (PoolKey) dsMap.get(name);
         }
         
         if (key == null) {
-            key = new PoolKey(dsName, username);
+            key = new PoolKey(dsName, name);
             if (dsMap == null) {
                 dsMap = new HashMap();
                 poolKeys.put(dsName, dsMap);
             }
-            dsMap.put(username, key);
+            dsMap.put(name, key);
         }
         return key;
     }
@@ -492,7 +493,7 @@ public class PerUserPoolDataSource
                                   isRollbackAfterValidation(), 
                                   username, password);
            
-        pools.put(getPoolKey(username), pool);
+        pools.put(getPoolKey(username,password), pool);
     }
 
     /**
diff --git a/src/java/org/apache/commons/dbcp/datasources/PoolKey.java b/src/java/org/apache/commons/dbcp/datasources/PoolKey.java
index bef4b6d3..748e072e 100644
--- a/src/java/org/apache/commons/dbcp/datasources/PoolKey.java
+++ b/src/java/org/apache/commons/dbcp/datasources/PoolKey.java
@@ -24,18 +24,18 @@ import java.io.Serializable;
  */
 class PoolKey implements Serializable {
     private String datasourceName;
-    private String username;
+    private String userPwd;
     
-    PoolKey(String datasourceName, String username) {
+    PoolKey(String datasourceName, String userPwd) {
         this.datasourceName = datasourceName;
-        this.username = username;
+        this.userPwd = userPwd;
     }
     
     public boolean equals(Object obj) {
         if (obj instanceof PoolKey) {
             PoolKey pk = (PoolKey)obj;
             return (null == datasourceName ? null == pk.datasourceName : datasourceName.equals(pk.datasourceName)) &&
-                (null == username ? null == pk.username : username.equals(pk.username));
+                (null == userPwd ? null == pk.userPwd : userPwd.equals(pk.userPwd));
         } else {
             return false;   
         }
@@ -46,8 +46,8 @@ class PoolKey implements Serializable {
         if (datasourceName != null) {
             h += datasourceName.hashCode();
         }
-        if (username != null) {
-            h = 29 * h + username.hashCode();
+        if (userPwd != null) {
+            h = 29 * h + userPwd.hashCode();
         }
         return h;
     }
@@ -55,7 +55,7 @@ class PoolKey implements Serializable {
     public String toString() {
         StringBuffer sb = new StringBuffer(50);
         sb.append("PoolKey(");
-        sb.append(username).append(", ").append(datasourceName);
+        sb.append(userPwd).append(", ").append(datasourceName);
         sb.append(')');
         return sb.toString();
     }
diff --git a/src/test/org/apache/commons/dbcp/datasources/TestPerUserPoolDataSource.java b/src/test/org/apache/commons/dbcp/datasources/TestPerUserPoolDataSource.java
index 8987cc5e..81552c4d 100644
--- a/src/test/org/apache/commons/dbcp/datasources/TestPerUserPoolDataSource.java
+++ b/src/test/org/apache/commons/dbcp/datasources/TestPerUserPoolDataSource.java
@@ -104,7 +104,7 @@ public class TestPerUserPoolDataSource extends TestConnectionPool {
         }
         catch (SQLException e)
         {
-            if (!e.getMessage().startsWith("Given password did not match")) 
+            if (!e.getMessage().startsWith("x is not the correct password")) 
             {
                 throw e;
             }
