diff --git a/src/main/java/org/apache/sling/commons/scheduler/impl/JobHandler.java b/src/main/java/org/apache/sling/commons/scheduler/impl/JobHandler.java
index ca4cdaf..494b1d3 100644
--- a/src/main/java/org/apache/sling/commons/scheduler/impl/JobHandler.java
+++ b/src/main/java/org/apache/sling/commons/scheduler/impl/JobHandler.java
@@ -16,6 +16,8 @@
  */
 package org.apache.sling.commons.scheduler.impl;
 
+import java.util.concurrent.atomic.AtomicBoolean;
+
 /**
  * The job handler controls the invocation of a job
  * like parallel invocation and the number of times
@@ -25,10 +27,10 @@ public class JobHandler {
 
     public final boolean runConcurrently;
 
-    public volatile boolean isRunning;
+    public final AtomicBoolean isRunning;
 
     public JobHandler(final boolean runConcurrently) {
         this.runConcurrently = runConcurrently;
-        this.isRunning = false;
+        this.isRunning = new AtomicBoolean(false);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/org/apache/sling/commons/scheduler/impl/QuartzJobExecutor.java b/src/main/java/org/apache/sling/commons/scheduler/impl/QuartzJobExecutor.java
index dfe0c9e..5021c08 100644
--- a/src/main/java/org/apache/sling/commons/scheduler/impl/QuartzJobExecutor.java
+++ b/src/main/java/org/apache/sling/commons/scheduler/impl/QuartzJobExecutor.java
@@ -44,10 +44,9 @@ public class QuartzJobExecutor implements Job {
         final boolean canRunConcurrently = (handler == null ? true : handler.runConcurrently);
 
         if (!canRunConcurrently) {
-            if ( handler.isRunning ) {
+            if ( !handler.isRunning.compareAndSet(false, true) ) {
                 return;
             }
-            handler.isRunning = true;
         }
 
         final Object job = data.get(QuartzScheduler.DATA_MAP_OBJECT);
@@ -76,7 +75,7 @@ public class QuartzJobExecutor implements Job {
             logger.error("Exception during job execution of " + job + " : " + t.getMessage(), t);
         } finally {
             if (!canRunConcurrently) {
-                handler.isRunning = false;
+                handler.isRunning.set(false);
             }
         }
     }
