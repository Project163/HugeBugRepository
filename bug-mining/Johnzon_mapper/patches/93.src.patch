diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
index a13655ed..d17468ec 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
@@ -144,6 +144,7 @@ public class MapperBuilder {
     private boolean useBigDecimalForFloats;
     private Boolean deduplicateObjects = null;
     private boolean useJsRange;
+    private boolean useBigDecimalForObjectNumbers;
 
     public Mapper build() {
         if (readerFactory == null || generatorFactory == null) {
@@ -255,7 +256,7 @@ public class MapperBuilder {
                         treatByteArrayAsBase64, treatByteArrayAsBase64URL, readAttributeBeforeWrite,
                         accessMode, encoding, attributeOrder, enforceQuoteString, failOnUnknownProperties,
                         serializeValueFilter, useBigDecimalForFloats, deduplicateObjects,
-                        interfaceImplementationMapping, useJsRange),
+                        interfaceImplementationMapping, useJsRange, useBigDecimalForObjectNumbers),
                 closeables);
     }
 
@@ -522,4 +523,9 @@ public class MapperBuilder {
         this.useJsRange = value;
         return this;
     }
+
+    public MapperBuilder setUseBigDecimalForObjectNumbers(final boolean value) {
+        this.useBigDecimalForObjectNumbers = value;
+        return this;
+    }
 }
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
index f13d83f1..18184d05 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
@@ -72,6 +72,7 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
     private final boolean useBigDecimalForFloats;
     private final Boolean deduplicateObjects;
     private final Map<Class<?>, Class<?>> interfaceImplementationMapping;
+    private final boolean useBigDecimalForObjectNumbers;
 
     private final Map<Class<?>, ObjectConverter.Writer<?>> objectConverterWriterCache;
     private final Map<Class<?>, ObjectConverter.Reader<?>> objectConverterReaderCache;
@@ -92,7 +93,8 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
                         final boolean useBigDecimalForFloats,
                         final Boolean deduplicateObjects,
                         final Map<Class<?>, Class<?>> interfaceImplementationMapping,
-                        final boolean useJsRange) {
+                        final boolean useJsRange,
+                        final boolean useBigDecimalForObjectNumbers) {
     //CHECKSTYLE:ON
         this.objectConverterWriters = objectConverterWriters;
         this.objectConverterReaders = objectConverterReaders;
@@ -106,6 +108,7 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
         this.accessMode = accessMode;
         this.encoding = encoding;
         this.useJsRange = useJsRange;
+        this.useBigDecimalForObjectNumbers = useBigDecimalForObjectNumbers;
 
         // handle Adapters
         this.adapters = adapters;
@@ -125,6 +128,10 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
         this.deduplicateObjects = deduplicateObjects;
     }
 
+    public boolean isUseBigDecimalForObjectNumbers() {
+        return useBigDecimalForObjectNumbers;
+    }
+
     public boolean isUseJsRange() {
         return useJsRange;
     }
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
index 83005b07..76b53294 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
@@ -273,7 +273,7 @@ public class MappingParserImpl implements MappingParser {
                     } else if (EnumMap.class.isAssignableFrom(raw)) {
                         map = new EnumMap(Class.class.cast(fieldArgTypes[0]));
                     } else if (Map.class.isAssignableFrom(raw)) {
-                        map = new HashMap(object.size());
+                        map = new LinkedHashMap(object.size()); // todo: configurable from config.getNewDefaultMap()?
                     } else {
                         map = null;
                     }
@@ -291,7 +291,8 @@ public class MappingParserImpl implements MappingParser {
                         for (final Map.Entry<String, JsonValue> value : object.entrySet()) {
                             final JsonValue jsonValue = value.getValue();
                             if (JsonNumber.class.isInstance(jsonValue) && any) {
-                                map.put(value.getKey(), toNumberValue(JsonNumber.class.cast(jsonValue)));
+                                map.put(value.getKey(), config.isUseBigDecimalForObjectNumbers() ?
+                                        JsonNumber.class.cast(jsonValue).bigDecimalValue() : toNumberValue(JsonNumber.class.cast(jsonValue)));
                             } else if (JsonString.class.isInstance(jsonValue) && any) {
                                 map.put(value.getKey(), JsonString.class.cast(jsonValue).getString());
                             } else {
diff --git a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java
index 5cb7e57a..e770b7d8 100644
--- a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java
+++ b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java
@@ -169,7 +169,7 @@ public class MapperConfigTest {
                                 new FieldAccessMode(true, true),
                                 Charset.forName("UTF-8"),
                                 null,
-                                false, false, null, false, false, emptyMap(), true);
+                                false, false, null, false, false, emptyMap(), true, false);
     }
 
 
diff --git a/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java b/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java
index 7ecf5a4a..bbfdc318 100644
--- a/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java
+++ b/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java
@@ -66,7 +66,7 @@ public class ExtendMappingTest {
                     -1, true, true, true, false, false, false,
                     new FieldAccessMode(false, false),
                     Charset.forName("UTF-8"), String::compareTo, false, false, null, false, false,
-                    emptyMap(), true));
+                    emptyMap(), true, false));
         }
 
         @Override
