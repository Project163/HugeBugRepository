diff --git a/tika-core/pom.xml b/tika-core/pom.xml
index f1029b101..e9eaae313 100644
--- a/tika-core/pom.xml
+++ b/tika-core/pom.xml
@@ -104,6 +104,12 @@
       <version>${junit5.version}</version>
       <scope>test</scope>
     </dependency>
+    <dependency>
+    <groupId>xerces</groupId>
+    <artifactId>xercesImpl</artifactId>
+    <version>2.12.2</version>
+    <scope>test</scope>
+</dependency>
   </dependencies>
 
   <build>
diff --git a/tika-core/src/test/java/org/apache/tika/sax/CustomErrorHandlerTest.java b/tika-core/src/test/java/org/apache/tika/sax/CustomErrorHandlerTest.java
new file mode 100644
index 000000000..0cee6d21b
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/sax/CustomErrorHandlerTest.java
@@ -0,0 +1,99 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tika.sax;
+
+import static org.junit.jupiter.api.Assertions.fail;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.nio.charset.StandardCharsets;
+import javax.xml.parsers.ParserConfigurationException;
+
+import org.apache.commons.io.output.ByteArrayOutputStream;
+import org.junit.jupiter.api.AfterAll;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
+import org.xml.sax.SAXException;
+
+import org.apache.tika.TikaTest;
+import org.apache.tika.exception.TikaException;
+import org.apache.tika.parser.ParseContext;
+import org.apache.tika.utils.XMLReaderUtils;
+
+/**
+ * Test that validates a custom {@link ContentHandlerDecorator} can handle errors during XML parsing
+ *
+ * @see <a href="https://issues.apache.org/jira/browse/TIKA-4062">TIKA-4062</a>
+ */
+public class CustomErrorHandlerTest extends TikaTest {
+
+    private static String DEFAULT_SAX_PARSER_FACTORY;
+    private static String SAX_PARSER_FACTORY_KEY = "javax.xml.parsers.SAXParserFactory";
+    @BeforeAll
+    public static void setUp() throws TikaException {
+        DEFAULT_SAX_PARSER_FACTORY = System.getProperty(SAX_PARSER_FACTORY_KEY);
+        System.setProperty(SAX_PARSER_FACTORY_KEY,
+                "org.apache.tika.sax.ErrorResistantSAXParserFactory");
+        //forces re-initialization
+        XMLReaderUtils.setPoolSize(10);
+    }
+
+    @AfterAll
+    public static void tearDown() throws TikaException {
+        if (DEFAULT_SAX_PARSER_FACTORY == null) {
+            System.clearProperty(SAX_PARSER_FACTORY_KEY);
+        } else {
+            System.setProperty(SAX_PARSER_FACTORY_KEY, DEFAULT_SAX_PARSER_FACTORY);
+        }
+        //forces re-initialization
+        XMLReaderUtils.setPoolSize(10);
+    }
+    private void extractXml(InputStream blobStream, OutputStream textStream)
+            throws IOException, SAXException, TikaException, ParserConfigurationException {
+
+        try {
+            ToXMLContentHandler contentHandler =
+                    new ToXMLContentHandler(textStream, StandardCharsets.UTF_8.toString());
+            NonValidatingContentHandler handler = new NonValidatingContentHandler(contentHandler);
+            XMLReaderUtils.parseSAX(blobStream, handler, new ParseContext());
+        } finally {
+            textStream.close();
+        }
+    }
+
+    private String extractTestData(String name)
+            throws IOException, SAXException, TikaException, ParserConfigurationException {
+        try (InputStream is = getResourceAsStream("/test-documents/" + name)) {
+            ByteArrayOutputStream out = new ByteArrayOutputStream();
+            extractXml(is, out);
+            return out.toString(StandardCharsets.UTF_8);
+        }
+    }
+
+    @Test
+    void testUndeclaredEntityXML() throws Exception {
+        try {
+            String content = extractTestData("undeclared_entity.xml");
+            assertContains("START", content);
+            //This assertion passes only if custom error handler is called to handle fatal exception
+            assertContains("END", content);
+        } catch (SAXException e) {
+            fail("Exception returned from parser and not handled in error handler " + e);
+        }
+    }
+}
diff --git a/tika-core/src/test/java/org/apache/tika/sax/ErrorResistantSAXParserFactory.java b/tika-core/src/test/java/org/apache/tika/sax/ErrorResistantSAXParserFactory.java
new file mode 100644
index 000000000..9916b9df5
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/sax/ErrorResistantSAXParserFactory.java
@@ -0,0 +1,39 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tika.sax;
+
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.parsers.SAXParserFactory;
+
+import org.apache.xerces.jaxp.SAXParserFactoryImpl;
+import org.xml.sax.SAXNotRecognizedException;
+import org.xml.sax.SAXNotSupportedException;
+
+/**
+ * 
+ * A custom {@link SAXParserFactory} to force the parser to continue even after fatal error
+ *
+ */
+public class ErrorResistantSAXParserFactory extends SAXParserFactoryImpl {
+    
+    public ErrorResistantSAXParserFactory() throws SAXNotRecognizedException, SAXNotSupportedException,
+            ParserConfigurationException {
+        super();
+        this.setFeature("http://apache.org/xml/features/continue-after-fatal-error", true);
+    }   
+
+}
diff --git a/tika-core/src/test/java/org/apache/tika/sax/NonValidatingContentHandler.java b/tika-core/src/test/java/org/apache/tika/sax/NonValidatingContentHandler.java
new file mode 100644
index 000000000..d903a4d63
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/sax/NonValidatingContentHandler.java
@@ -0,0 +1,68 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tika.sax;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+import org.xml.sax.ContentHandler;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+import org.xml.sax.SAXParseException;
+
+
+public class NonValidatingContentHandler extends ContentHandlerDecorator {
+    class ClosedInputStream extends InputStream {
+
+        /**
+         * Returns -1 to indicate that the stream is closed.
+         *
+         * @return always -1
+         */
+        @Override
+        public int read() {
+            return -1;
+        }
+
+    }
+
+    public NonValidatingContentHandler(ContentHandler handler) {
+        super(handler);
+    }
+
+    @Override
+    public void warning(SAXParseException e) throws SAXException {
+        //NO-OP
+    }
+
+    @Override
+    public void error(SAXParseException e) throws SAXException {
+        //NO-OP
+    }
+
+    @Override
+    public void fatalError(SAXParseException e) throws SAXException {
+        //NO-OP
+    }
+
+    @Override
+    public InputSource resolveEntity(String publicId, String systemId)
+            throws SAXException, IOException {
+        return new InputSource(new ClosedInputStream());
+    }
+
+}
diff --git a/tika-core/src/test/resources/test-documents/undeclared_entity.xml b/tika-core/src/test/resources/test-documents/undeclared_entity.xml
new file mode 100644
index 000000000..9996842c8
--- /dev/null
+++ b/tika-core/src/test/resources/test-documents/undeclared_entity.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<address>
+   <company>START</company>
+   <name>An entity here&undeclared_entity; is invalid!</name>
+   <phone>END</phone>
+</address>
\ No newline at end of file
