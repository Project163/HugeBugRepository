diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java
index 1b7721e4..f741aff6 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java
@@ -244,6 +244,9 @@ public class MappingGeneratorImpl implements MappingGenerator {
         if (type == String.class) {
             generator.write(key, value.toString());
             handled = true;
+        } else if (JsonValue.class.isAssignableFrom(type)) {
+            generator.write(key, JsonValue.class.cast(value));
+            handled = true;
         } else if (type == long.class || type == Long.class) {
             generator.write(key, Long.class.cast(value).longValue());
             handled = true;
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
index f8bed552..09a8a4d6 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
@@ -70,9 +70,11 @@ import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
 import static java.util.Arrays.asList;
+import static javax.json.JsonValue.ValueType.ARRAY;
 import static javax.json.JsonValue.ValueType.FALSE;
 import static javax.json.JsonValue.ValueType.NULL;
 import static javax.json.JsonValue.ValueType.NUMBER;
+import static javax.json.JsonValue.ValueType.STRING;
 import static javax.json.JsonValue.ValueType.TRUE;
 
 /**
@@ -402,7 +404,15 @@ public class MappingParserImpl implements MappingParser {
     }
 
     private Object convertTo(final Adapter converter, final JsonValue jsonValue, JsonPointerTracker jsonPointer) {
+        final AdapterKey key = getAdapterKey(converter);
+        if (JsonValue.class == key.getTo()) {
+            return converter.to(jsonValue);
+        }
+
         if (jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
+            if (JsonObject.class == key.getTo() || JsonStructure.class == key.getTo()) {
+                return converter.to(jsonValue.asJsonObject());
+            }
 
             //X TODO maybe we can put this into MapperConfig?
             //X      config.getAdapter(AdapterKey)
@@ -419,11 +429,16 @@ public class MappingParserImpl implements MappingParser {
             return converter.to(param);
         }
 
-        final AdapterKey key = getAdapterKey(converter);
         final JsonValue.ValueType valueType = jsonValue.getValueType();
         if (NULL.equals(valueType)) {
             return null;
         }
+        if (STRING.equals(valueType)) {
+            if (key.getTo() == JsonString.class) {
+                return converter.to(JsonString.class.cast(jsonValue));
+            }
+            return converter.to(JsonString.class.cast(jsonValue).getString());
+        }
         if (TRUE.equals(valueType) || FALSE.equals(valueType)) {
             if (key != null) {
                 if (boolean.class == key.getTo() || Boolean.class == key.getTo()) {
@@ -445,9 +460,17 @@ public class MappingParserImpl implements MappingParser {
                     return converter.to(JsonNumber.class.cast(jsonValue).bigIntegerValue());
                 } else if (BigDecimal.class == key.getTo()) {
                     return converter.to(JsonNumber.class.cast(jsonValue).bigDecimalValue());
+                } else if (JsonNumber.class == key.getTo()) {
+                    return converter.to(JsonNumber.class.cast(jsonValue));
                 }
             }
         }
+        if (ARRAY.equals(valueType)) {
+            if (JsonArray.class == key.getTo() || JsonStructure.class == key.getTo()) {
+                return converter.to(jsonValue.asJsonObject());
+            }
+            return buildArray(key.getTo(), jsonValue.asJsonArray(), null, null, jsonPointer, null);
+        }
         return converter.to(jsonValue.toString());
 
     }
@@ -733,9 +756,9 @@ public class MappingParserImpl implements MappingParser {
         }
 
         try {
-            return converter == null ? toObject(baseInstance, jsonValue, type, itemConverter, jsonPointer, rootType)
-                    : jsonValue.getValueType() == JsonValue.ValueType.STRING ? converter.to(JsonString.class.cast(jsonValue).getString())
-                    : convertTo(converter, jsonValue, jsonPointer);
+            return converter == null ?
+                    toObject(baseInstance, jsonValue, type, itemConverter, jsonPointer, rootType) :
+                    convertTo(converter, jsonValue, jsonPointer);
         } catch (Exception e) {
             if (e instanceof MapperException) {
                 throw e;
