diff --git a/tika-core/src/main/java/org/apache/tika/sax/SafeContentHandler.java b/tika-core/src/main/java/org/apache/tika/sax/SafeContentHandler.java
index 4a6110010..f8088bb6e 100644
--- a/tika-core/src/main/java/org/apache/tika/sax/SafeContentHandler.java
+++ b/tika-core/src/main/java/org/apache/tika/sax/SafeContentHandler.java
@@ -16,6 +16,11 @@
  */
 package org.apache.tika.sax;
 
+/*
+import java.util.ArrayList;
+import java.util.List;
+*/
+
 import org.xml.sax.Attributes;
 import org.xml.sax.ContentHandler;
 import org.xml.sax.SAXException;
@@ -200,12 +205,48 @@ public class SafeContentHandler extends ContentHandlerDecorator {
         output.write(REPLACEMENT, 0, REPLACEMENT.length);
     }
 
+
+    /*
+    private final List<String> elements = new ArrayList<String>();
+
+    // Called only from assert
+    private boolean verifyStartElement(String name) {
+        // TODO: we could strengthen this to do full
+        // XTHML validation, eg you shouldn't start p inside
+        // another p (but ODF parser, at least, seems to
+        // violate this):
+        //if (name.equals("p")) {
+        //assert elements.size() == 0 || !elements.get(elements.size()-1).equals("p");
+        //}
+        elements.add(name);
+        return true;
+    }
+
+    // Called only from assert
+    private boolean verifyEndElement(String name) {
+        assert elements.size() > 0: "end tag=" + name + " with no startElement";
+        final String currentElement = elements.get(elements.size()-1);
+        assert currentElement.equals(name): "mismatched elements open=" + currentElement + " close=" + name;
+        elements.remove(elements.size()-1);
+        return true;
+    }
+
+    // Called only from assert
+    private boolean verifyEndDocument() {
+        assert elements.size() == 0;
+        return true;
+    }
+    */
+
     //------------------------------------------------------< ContentHandler >
 
     @Override
     public void startElement(
             String uri, String localName, String name, Attributes atts)
             throws SAXException {
+        // TODO: enable this, but some parsers currently
+        // trip it
+        //assert verifyStartElement(name);
         // Look for any invalid characters in attribute values.
         for (int i = 0; i < atts.getLength(); i++) {
             if (isInvalid(atts.getValue(i))) {
@@ -230,6 +271,23 @@ public class SafeContentHandler extends ContentHandlerDecorator {
         super.startElement(uri, localName, name, atts);
     }
 
+    @Override
+    public void endElement(String uri, String localName, String name)
+            throws SAXException {
+        // TODO: enable this, but some parsers currently
+        // trip it
+        //assert verifyEndElement(name);
+        super.endElement(uri, localName, name);
+    }
+
+    @Override
+    public void endDocument() throws SAXException {
+        // TODO: enable this, but some parsers currently
+        // trip it
+        //assert verifyEndDocument();
+        super.endDocument();
+    }
+
     @Override
     public void characters(char[] ch, int start, int length)
             throws SAXException {
diff --git a/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java b/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java
index b9d12ff5c..e1a093672 100644
--- a/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java
+++ b/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java
@@ -16,6 +16,8 @@
  */
 package org.apache.tika.utils;
 
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.nio.charset.Charset;
 import java.nio.charset.IllegalCharsetNameException;
 import java.util.HashMap;
@@ -51,6 +53,9 @@ public class CharsetUtils {
      */
     public static boolean isSupported(String charsetName) {
         try {
+            if (isSupportedICU != null && ((Boolean) isSupportedICU.invoke(null, charsetName)).booleanValue()) {
+                return true;
+            }
             return Charset.isSupported(charsetName);
         } catch (IllegalCharsetNameException e) {
             return false;
@@ -103,11 +108,54 @@ public class CharsetUtils {
         }
         
         try {
-            Charset cs = Charset.forName(result);
+            Charset cs = forName(result);
             return cs.name();
         } catch (Exception e) {
             return null;
         }
     }
 
+    private static Method getCharsetICU;
+    private static Method isSupportedICU;
+
+    static {
+        // See if we can load the icu4j CharsetICU class
+        Class icuCharset = null;
+        try  {
+            icuCharset = CharsetUtils.class.getClassLoader().loadClass("com.ibm.icu.charset.CharsetICU");
+        } 
+        catch (ClassNotFoundException e)  {
+        }
+        if (icuCharset != null) {
+            try {
+                getCharsetICU = icuCharset.getMethod("forNameICU", String.class);
+            } catch (Throwable t) {
+                throw new RuntimeException(t);
+            }
+            try {
+                isSupportedICU = icuCharset.getMethod("isSupported", String.class);
+            } catch (Throwable t) {
+            }
+            // TODO: would be nice to somehow log that we
+            // successfully found ICU
+        }
+    }
+
+    /** Returns Charset impl, if one exists.  This method
+     *  optionally uses ICU4J's CharsetICU.forNameICU,
+     *  if it is found on the classpath, else only uses
+     *  JDK's builtin Charset.forName. */
+    public static Charset forName(String name) {
+        if (getCharsetICU != null) {
+            try {
+                Charset cs = (Charset) getCharsetICU.invoke(null, name);
+                if (cs != null) {
+                    return cs;
+                }
+            } catch (InvocationTargetException ite) {
+            } catch (IllegalAccessException iae) {
+            }
+        }
+        return Charset.forName(name);
+    }
 }
