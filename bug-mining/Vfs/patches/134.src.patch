diff --git a/core/src/main/java/org/apache/commons/vfs2/FileContent.java b/core/src/main/java/org/apache/commons/vfs2/FileContent.java
index 62322893..95ea8fc7 100644
--- a/core/src/main/java/org/apache/commons/vfs2/FileContent.java
+++ b/core/src/main/java/org/apache/commons/vfs2/FileContent.java
@@ -145,8 +145,8 @@ public interface FileContent extends Closeable
 
     /**
      * Returns an input stream for reading the file's content.
-     * <p/>
-     * <p>There may only be a single input or output stream open for the
+     * <p>
+     * There may only be a single input or output stream open for the
      * file at any time.
      *
      * @return An input stream to read the file's content from.  The input
@@ -159,12 +159,12 @@ public interface FileContent extends Closeable
 
     /**
      * Returns an output stream for writing the file's content.
-     * <p/>
+     * <p>
      * If the file does not exist, this method creates it, and the parent
      * folder, if necessary.  If the file does exist, it is replaced with
      * whatever is written to the output stream.
-     * <p/>
-     * <p>There may only be a single input or output stream open for the
+     * <p>
+     * There may only be a single input or output stream open for the
      * file at any time.
      *
      * @return An output stream to write the file's content to.  The stream is
@@ -177,13 +177,13 @@ public interface FileContent extends Closeable
 
     /**
      * Returns an stream for reading/writing the file's content.
-     * <p/>
+     * <p>
      * If the file does not exist, and you use one of the write* methods,
      * this method creates it, and the parent folder, if necessary.
      * If the file does exist, parts of the file are replaced with whatever is written
      * at a given position.
-     * <p/>
-     * <p>There may only be a single input or output stream open for the
+     * <p>
+     * There may only be a single input or output stream open for the
      * file at any time.
      *
      * @param mode The mode to use to access the file.
@@ -195,12 +195,12 @@ public interface FileContent extends Closeable
 
     /**
      * Returns an output stream for writing the file's content.
-     * <p/>
+     * <p>
      * If the file does not exist, this method creates it, and the parent
      * folder, if necessary.  If the file does exist, it is replaced with
      * whatever is written to the output stream.
-     * <p/>
-     * <p>There may only be a single input or output stream open for the
+     * <p>
+     * There may only be a single input or output stream open for the
      * file at any time.
      *
      * @param bAppend true if you would like to append to the file.
@@ -217,10 +217,11 @@ public interface FileContent extends Closeable
     /**
      * Closes all resources used by the content, including any open stream.
      * Commits pending changes to the file.
-     * <p/>
-     * <p>This method is a hint to the implementation that it can release
+     * <p>
+     * This method is a hint to the implementation that it can release
      * resources.  This object can continue to be used after calling this
      * method.
+     *
      * @throws FileSystemException if an error occurs closing the file.
      */
     @Override
diff --git a/core/src/main/java/org/apache/commons/vfs2/FileFilterSelector.java b/core/src/main/java/org/apache/commons/vfs2/FileFilterSelector.java
index 6d946212..3b65ddea 100644
--- a/core/src/main/java/org/apache/commons/vfs2/FileFilterSelector.java
+++ b/core/src/main/java/org/apache/commons/vfs2/FileFilterSelector.java
@@ -19,8 +19,9 @@ package org.apache.commons.vfs2;
 import org.apache.commons.vfs2.util.Messages;
 
 /**
- * A {@link org.apache.commons.vfs2.FileSelector} that selects all children of the given fileObject.<br />
- * This is to mimic the {@link java.io.FileFilter} interface
+ * A {@link org.apache.commons.vfs2.FileSelector} that selects all children of the given fileObject.
+ * <p>
+ * This is to mimic the {@link java.io.FileFilter} interface.
  */
 public class FileFilterSelector extends FileDepthSelector
 {
diff --git a/core/src/main/java/org/apache/commons/vfs2/FileListener.java b/core/src/main/java/org/apache/commons/vfs2/FileListener.java
index 4348d377..06c016e7 100644
--- a/core/src/main/java/org/apache/commons/vfs2/FileListener.java
+++ b/core/src/main/java/org/apache/commons/vfs2/FileListener.java
@@ -23,6 +23,7 @@ public interface FileListener
 {
     /**
      * Called when a file is created.
+     *
      * @param event The FileChangeEvent.
      * @throws Exception if an error occurs.
      */
@@ -30,14 +31,17 @@ public interface FileListener
 
     /**
      * Called when a file is deleted.
+     *
      * @param event The FileChangeEvent.
      * @throws Exception if an error occurs.
      */
     void fileDeleted(FileChangeEvent event) throws Exception;
 
     /**
-     * Called when a file is changed.<br />
+     * Called when a file is changed.
+     * <p>
      * This will only happen if you monitor the file using {@link FileMonitor}.
+     *
      * @param event The FileChangeEvent.
      * @throws Exception if an error occurs.
      */
diff --git a/core/src/main/java/org/apache/commons/vfs2/FileName.java b/core/src/main/java/org/apache/commons/vfs2/FileName.java
index 5b39bf7d..6dce63f3 100644
--- a/core/src/main/java/org/apache/commons/vfs2/FileName.java
+++ b/core/src/main/java/org/apache/commons/vfs2/FileName.java
@@ -204,15 +204,13 @@ public interface FileName extends Comparable<FileName>
     boolean isFile() throws FileSystemException;
 
     /**
-     * Returns the requested or current type of this name. <br />
+     * Returns the requested or current type of this name.
      * <p>
-     * The "requested" type is the one determined during resolving the name. <br/>
+     * The "requested" type is the one determined during resolving the name.
      * In this case the name is a {@link FileType#FOLDER} if it ends with an "/" else
-     * it will be a {@link FileType#FILE}<br/>
-     * </p>
+     * it will be a {@link FileType#FILE}.
      * <p>
      * Once attached it will be changed to reflect the real type of this resource.
-     * </p>
      *
      * @return {@link FileType#FOLDER} or {@link FileType#FILE}
      */
@@ -221,8 +219,7 @@ public interface FileName extends Comparable<FileName>
     /**
      * Returns a "friendly path", this is a path without a password.
      * <p>
-     * This path can not be used to resolve the path again
-     * </p>
+     * This path can not be used to resolve the path again.
      *
      * @return the friendly URI as a String.
      */
diff --git a/core/src/main/java/org/apache/commons/vfs2/FileObject.java b/core/src/main/java/org/apache/commons/vfs2/FileObject.java
index 13576baf..8c9a107b 100644
--- a/core/src/main/java/org/apache/commons/vfs2/FileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/FileObject.java
@@ -27,52 +27,54 @@ import org.apache.commons.vfs2.operations.FileOperations;
 /**
  * Represents a file, and is used to access the content and
  * structure of the file.
- * <p/>
- * <p>Files are arranged in a hierarchy.  Each hierarchy forms a
+ * <p>
+ * Files are arranged in a hierarchy.  Each hierarchy forms a
  * <i>file system</i>.  A file system represents things like a local OS
  * file system, a windows share, an HTTP server, or the contents of a Zip file.
- * <p/>
- * <p>There are two types of files: <i>Folders</i>, which contain other files,
+ * <p>
+ * There are two types of files: <i>Folders</i>, which contain other files,
  * and <i>normal files</i>, which contain data, or <i>content</i>.  A folder may
  * not have any content, and a normal file cannot contain other files.
- * <p/>
- * <h4>File Naming</h4>
- * <p/>
- * <p>TODO - write this.
- * <p/>
- * <h4>Reading and Writing a File</h4>
- * <p/>
- * <p>Reading and writing a file, and all other operations on the file's
+ *
+ * <h2>File Naming</h2>
+ *
+ * TODO - write this.
+ *
+ * <h2>Reading and Writing a File</h2>
+ *
+ * Reading and writing a file, and all other operations on the file's
  * <i>content</i>, is done using the {@link FileContent} object returned
  * by {@link #getContent}.
- * <p/>
- * <h4>Creating and Deleting a File</h4>
- * <p/>
- * <p>A file is created using either {@link #createFolder}, {@link #createFile},
+
+ * <h2>Creating and Deleting a File</h2>
+ *
+ * A file is created using either {@link #createFolder}, {@link #createFile},
  * or by writing to the file using one of the {@link FileContent} methods.
- * <p/>
- * <p>A file is deleted using {@link #delete}.  Recursive deletion can be
+ * <p>
+ * A file is deleted using {@link #delete}.  Recursive deletion can be
  * done using {@link #delete(FileSelector)}.
- * <p/>
- * <h4>Finding Files</h4>
- * <p/>
- * <p>Other files in the <i>same</i> file system as this file can be found
+ *
+ * <h2>Finding Files</h2>
+ *
+ * Other files in the <i>same</i> file system as this file can be found
  * using:
  * <ul>
- * <li>{@link #findFiles} to find a set of matching descendants in in the same file system.
- * <li>{@link #getChildren} and {@link #getChild} to find the children of this file.
- * <li>{@link #getParent} to find the folder containing this file.
- * <li>{@link #getFileSystem} to find another file in the same file system.
- * <li>{@link #resolveFile} to find another file relative to this file.
+ * <li>{@link #findFiles} to find a set of matching descendants in in the same file system.</li>
+ * <li>{@link #getChildren} and {@link #getChild} to find the children of this file.</li>
+ * <li>{@link #getParent} to find the folder containing this file.</li>
+ * <li>{@link #getFileSystem} to find another file in the same file system.</li>
+ * <li>{@link #resolveFile} to find another file relative to this file.</li>
  * </ul>
- * <p/>
- * <p>To find files in another file system, use a {@link FileSystemManager}.
- * <h4>Iterating Files</h4>
- *<p>You can iterate over a FileObject using the Java "foreach" statement, which provides all descendants of a File
- * Object.</p>
+ * To find files in another file system, use a {@link FileSystemManager}.
+ *
+ * <h2>Iterating Files</h2>
  *
- * <h4>Sorting Files</h4>
- *<p>Files may be sorted using {@link Arrays#sort(Object[])} and {@link Collections#sort(List)}.</p>
+ * You can iterate over a FileObject using the Java "foreach" statement, which provides all descendants of a File
+ * Object.
+ *
+ * <h2>Sorting Files</h2>
+ *
+ * Files may be sorted using {@link Arrays#sort(Object[])} and {@link Collections#sort(List)}.
  *
  * @see FileSystemManager
  * @see FileContent
@@ -276,7 +278,7 @@ public interface FileObject extends Comparable<FileObject>, Iterable<FileObject>
     /**
      * Returns the receiver as a URI String for public display, like, without a
      * password.
-     * 
+     *
      * @return A URI String without a password, never {@code null}.
      */
     String getPublicURIString();
diff --git a/core/src/main/java/org/apache/commons/vfs2/FileSelectInfo.java b/core/src/main/java/org/apache/commons/vfs2/FileSelectInfo.java
index 98d86681..dcb6f9c0 100644
--- a/core/src/main/java/org/apache/commons/vfs2/FileSelectInfo.java
+++ b/core/src/main/java/org/apache/commons/vfs2/FileSelectInfo.java
@@ -19,8 +19,8 @@ package org.apache.commons.vfs2;
 /**
  * Information about a file, that is used to select files during the
  * traversal of a hierarchy.
- *
- * @todo Rename this interface, as it is used by both FileSelector and FileVisitor.
+ * <p>
+ * TODO - Rename this interface, as it is used by both FileSelector and FileVisitor.
  */
 public interface FileSelectInfo
 {
diff --git a/core/src/main/java/org/apache/commons/vfs2/FileSelector.java b/core/src/main/java/org/apache/commons/vfs2/FileSelector.java
index b7cdbe44..e6bdffc3 100644
--- a/core/src/main/java/org/apache/commons/vfs2/FileSelector.java
+++ b/core/src/main/java/org/apache/commons/vfs2/FileSelector.java
@@ -39,8 +39,8 @@ public interface FileSelector
      * Determines whether a folder should be traversed.  If this method returns
      * true, {@link #includeFile} is called for each of the children of
      * the folder, and each of the child folders is recursively traversed.
-     * <p/>
-     * <p>This method is called on a folder before {@link #includeFile}
+     * <p>
+     * This method is called on a folder before {@link #includeFile}
      * is called.
      *
      * @param fileInfo the file or folder to select.
diff --git a/core/src/main/java/org/apache/commons/vfs2/FileSystem.java b/core/src/main/java/org/apache/commons/vfs2/FileSystem.java
index c3695e86..a9cd603f 100644
--- a/core/src/main/java/org/apache/commons/vfs2/FileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/FileSystem.java
@@ -45,12 +45,13 @@ public interface FileSystem
 
     /**
      * Determines if this file system has a particular capability.
+     * <p>
+     * TODO - Move this to another interface, so that set of capabilities can be queried.
      *
      * @param capability The capability to check for.
      * @return true if this filesystem has the requested capability.
      *         Note that not all files in the file system may have the
      *         capability.
-     * @todo Move this to another interface, so that set of capabilities can be queried.
      */
     boolean hasCapability(Capability capability);
 
@@ -64,10 +65,9 @@ public interface FileSystem
 
     /**
      * Gets the value of an attribute of the file system.
-     * <p/>
-     * <p>TODO - change to {@code Map getAttributes()} instead?
-     * <p/>
-     * <p>TODO - define the standard attribute names, and define which attrs
+     * <p>
+     * TODO - change to {@code Map getAttributes()} instead?<br>
+     * TODO - define the standard attribute names, and define which attrs
      * are guaranteed to be present.
      *
      * @param attrName The name of the attribute.
@@ -151,18 +151,19 @@ public interface FileSystem
     /**
      * Creates a temporary local copy of a file and its descendants.  If
      * this file is already a local file, a copy is not made.
-     * <p/>
-     * <p>Note that the local copy may include additonal files, that were
+     * <p>
+     * Note that the local copy may include additonal files, that were
      * not selected by the given selector.
+     * <P>
+     * TODO - Add options to indicate whether the caller is happy to deal with
+     * extra files being present locally (eg if the file has been
+     * replicated previously), or whether the caller expects only
+     * the selected files to be present.
      *
      * @param file     The file to replicate.
      * @param selector The selector to use to select the files to replicate.
      * @return The local copy of this file.
      * @throws FileSystemException If this file does not exist, or on error replicating the file.
-     * @todo Add options to indicate whether the caller is happy to deal with
-     * extra files being present locally (eg if the file has been
-     * replicated previously), or whether the caller expects only
-     * the selected files to be present.
      */
     File replicateFile(FileObject file, FileSelector selector)
         throws FileSystemException;
@@ -182,7 +183,7 @@ public interface FileSystem
     /**
      * Returns the accuracy of the last modification time.
      *
-     * @return ms 0 perfectly accurate, >0 might be off by this value e.g. sftp 1000ms.
+     * @return ms 0 perfectly accurate, {@literal >0} might be off by this value e.g. sftp 1000ms.
      */
     double getLastModTimeAccuracy();
 }
diff --git a/core/src/main/java/org/apache/commons/vfs2/FileSystemManager.java b/core/src/main/java/org/apache/commons/vfs2/FileSystemManager.java
index 5eadcc12..93c4676c 100644
--- a/core/src/main/java/org/apache/commons/vfs2/FileSystemManager.java
+++ b/core/src/main/java/org/apache/commons/vfs2/FileSystemManager.java
@@ -29,48 +29,38 @@ import org.apache.commons.vfs2.operations.FileOperationProvider;
 /**
  * A FileSystemManager manages a set of file systems.  This interface is
  * used to locate a {@link FileObject} by name from one of those file systems.
- * <p/>
- * <p>To locate a {@link FileObject}, use one of the {@code resolveFile()}
- * methods.</p>
- * <p/>
- * <h4><a name="naming">File Naming</a></h4>
- * <p/>
- * <p>A file system manager can recognise several types of file names:
- * <p/>
+ * <p>
+ * To locate a {@link FileObject}, use one of the {@code resolveFile()}
+ * methods.
+ *
+ * <h2><a name="naming">File Naming</a></h2>
+ *
+ * A file system manager can recognise several types of file names:
  * <ul>
- * <p/>
- * <li><p>Absolute URI.  These must start with a scheme, such as
+ * <li>Absolute URI.  These must start with a scheme, such as
  * {@code file:} or {@code ftp:}, followed by a scheme dependent
- * file name.  Some examples:</p>
- * <pre>
- * file:/c:/somefile
- * ftp://somewhere.org/somefile
- * </pre>
- * <p/>
- * <li><p>Absolute local file name.  For example,
+ * file name.  Some examples: {@code file:/c:/somefile} or
+ * {@code ftp://somewhere.org/somefile}.</li>
+ * <li>Absolute local file name.  For example,
  * {@code /home/someuser/a-file} or {@code c:\dir\somefile.html}.
  * Elements in the name can be separated using any of the following
  * characters: {@code /}, {@code \}, or the native file separator
- * character. For example, the following file names are the same:</p>
- * <pre>
- * c:\somedir\somefile.xml
- * c:/somedir/somefile.xml
- * </pre>
- * <p/>
- * <li><p>Relative path.  For example: {@code ../somefile} or
- * {@code somedir/file.txt}.   The file system manager resolves relative
+ * character. For example, the following file names are the same:
+ * {@code c:\somedir\somefile.xml} and {@code c:/somedir/somefile.xml}.</li>
+ * <li>Relative path.  For example: {@code ../somefile} or
+ * {@code somedir/file.txt}. The file system manager resolves relative
  * paths against its <i>base file</i>.  Elements in the relative path can be
  * separated using {@code /}, {@code \}, or file system specific
- * separator characters.  Relative paths may also contain {@code ..} and
- * {@code .} elements.  See {@link FileObject#resolveFile} for more
- * details.</p>
- * <p/>
+ * separator characters. Relative paths may also contain {@code ..} and
+ * {@code .} elements. See {@link FileObject#resolveFile} for more
+ * details.</li>
  * </ul>
  */
 public interface FileSystemManager
 {
     /**
      * Returns the base file used to resolve relative paths.
+     *
      * @return The base FileObject.
      * @throws FileSystemException if an error occurs.
      */
@@ -103,8 +93,8 @@ public interface FileSystemManager
      * <a href="#naming">above</a>.  That is, the name can be either
      * an absolute URI, an absolute file name, or a relative path to
      * be resolved against {@code baseFile}.
-     * <p/>
-     * <p>Note that the file does not have to exist when this method is called.
+     * <p>
+     * Note that the file does not have to exist when this method is called.
      *
      * @param name     The name of the file.
      * @param baseFile The base file to use to resolve relative paths.
@@ -174,8 +164,10 @@ public interface FileSystemManager
         throws FileSystemException;
 
     /**
-     * Closes the given filesystem.<br />
+     * Closes the given filesystem.
+     * <P>
      * If you use VFS as singleton it is VERY dangerous to call this method.
+     *
      * @param filesystem The FileSystem to close.
      */
     void closeFileSystem(FileSystem filesystem);
@@ -213,6 +205,7 @@ public interface FileSystemManager
     /**
      * Returns a streamhandler factory to enable URL lookup using this
      * FileSystemManager.
+     *
      * @return the URLStreamHandlerFactory.
      */
     URLStreamHandlerFactory getURLStreamHandlerFactory();
@@ -228,18 +221,21 @@ public interface FileSystemManager
 
     /**
      * Get the cache used to cache fileobjects.
+     *
      * @return The FilesCache.
      */
     FilesCache getFilesCache();
 
     /**
      * Get the cache strategy used.
+     *
      * @return the CacheStrategy.
      */
     CacheStrategy getCacheStrategy();
 
     /**
      * Get the file object decorator used.
+     *
      * @return the file object decorator Class.
      */
     Class<?> getFileObjectDecorator();
@@ -247,18 +243,21 @@ public interface FileSystemManager
     /**
      * The constructor associated to the fileObjectDecorator.
      * We cache it here for performance reasons.
+     *
      * @return the Constructor associated with the FileObjectDecorator.
      */
     Constructor<?> getFileObjectDecoratorConst();
 
     /**
      * The class to use to determine the content-type (mime-type).
+     *
      * @return the FileContentInfoFactory.
      */
     FileContentInfoFactory getFileContentInfoFactory();
 
     /**
      * Returns true if this manager has a provider for a particular scheme.
+     *
      * @param scheme The scheme for which a provider should be checked.
      * @return true if a provider for the scheme is available.
      */
@@ -266,6 +265,7 @@ public interface FileSystemManager
 
     /**
      * Get the schemes currently available.
+     *
      * @return An array of available scheme names that are supported.
      */
     String[] getSchemes();
@@ -281,6 +281,7 @@ public interface FileSystemManager
 
     /**
      * Sets the logger to use.
+     *
      * @param log The logger to use.
      */
     void setLogger(final Log log);
@@ -306,9 +307,10 @@ public interface FileSystemManager
     // -- OPERATIONS --
     /**
      * Adds the specified FileOperationProvider for the specified scheme.
+     * <p>
      * Several FileOperationProvider's might be registered for the same scheme.
-     * For example, for "file" scheme we can register SvnWsOperationProvider and
-     * CvsOperationProvider.
+     * For example, for {@code "file"} scheme we can register {@code SvnWsOperationProvider} and
+     * {@code CvsOperationProvider.}
      *
      * @param scheme The scheme assoicated with this provider.
      * @param operationProvider The FileOperationProvider to add.
@@ -329,6 +331,8 @@ public interface FileSystemManager
 
 
     /**
+     * Get Providers for file operations.
+     *
      * @param scheme the scheme for wich we want to get the list af registered providers.
      *
      * @return the registered FileOperationProviders for the specified scheme.
@@ -337,7 +341,7 @@ public interface FileSystemManager
      * @throws FileSystemException if an error occurs.
      */
     FileOperationProvider[] getOperationProviders(final String scheme) throws FileSystemException;
-    
+
     /**
      * Resolves a URI into a {@link FileObject}.
      *
diff --git a/core/src/main/java/org/apache/commons/vfs2/NameScope.java b/core/src/main/java/org/apache/commons/vfs2/NameScope.java
index 7c579744..8b43e53a 100644
--- a/core/src/main/java/org/apache/commons/vfs2/NameScope.java
+++ b/core/src/main/java/org/apache/commons/vfs2/NameScope.java
@@ -46,17 +46,17 @@ public enum NameScope
 
     /**
      * Resolve against files in the same file system as the base file.
-     * <p/>
-     * <p>If the supplied name is an absolute path, then it is resolved
+     * <p>
+     * If the supplied name is an absolute path, then it is resolved
      * relative to the root of the file system that the base file belongs to.
      * If a relative name is supplied, then it is resolved relative to the base
      * file.
-     * <p/>
-     * <p>The path may use any mix of {@code /}, {@code \}, or file
+     * <p>
+     * The path may use any mix of {@code /}, {@code \}, or file
      * system specific separators to separate elements in the path.  It may
      * also contain {@code .} and {@code ..} elements.
-     * <p/>
-     * <p>A path is considered absolute if it starts with a separator character,
+     * <p>
+     * A path is considered absolute if it starts with a separator character,
      * and relative if it does not.
      */
     FILE_SYSTEM("filesystem");
diff --git a/core/src/main/java/org/apache/commons/vfs2/impl/DefaultFileMonitor.java b/core/src/main/java/org/apache/commons/vfs2/impl/DefaultFileMonitor.java
index 8777279c..74d17dee 100644
--- a/core/src/main/java/org/apache/commons/vfs2/impl/DefaultFileMonitor.java
+++ b/core/src/main/java/org/apache/commons/vfs2/impl/DefaultFileMonitor.java
@@ -30,18 +30,16 @@ import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.provider.AbstractFileSystem;
 
 /**
- * A polling {@link FileMonitor} implementation.<br />
- * <br />
- * The DefaultFileMonitor is a Thread based polling file system monitor with a 1
- * second delay.<br />
- * <br />
- * <b>Design:</b>
+ * A polling {@link FileMonitor} implementation.
  * <p>
+ * The DefaultFileMonitor is a Thread based polling file system monitor with a 1
+ * second delay.
+ *
+ * <h2>Design:</h2>
+ *
  * There is a Map of monitors known as FileMonitorAgents. With the thread running,
  * each FileMonitorAgent object is asked to "check" on the file it is
- * responsible for.
- * To do this check, the cache is cleared.
- * </p>
+ * responsible for. To do this check, the cache is cleared.
  * <ul>
  * <li>If the file existed before the refresh and it no longer exists, a delete
  * event is fired.</li>
@@ -49,31 +47,28 @@ import org.apache.commons.vfs2.provider.AbstractFileSystem;
  * last modified timestamp to see if that has changed.</li>
  * <li>If it has, fire a change event.</li>
  * </ul>
- * <p>
  * With each file delete, the FileMonitorAgent of the parent is asked to
  * re-build its
  * list of children, so that they can be accurately checked when there are new
- * children.<br/>
+ * children.
+ * <p>
  * New files are detected during each "check" as each file does a check for new
  * children.
  * If new children are found, create events are fired recursively if recursive
- * descent is
- * enabled.
- * </p>
+ * descent is enabled.
  * <p>
  * For performance reasons, added a delay that increases as the number of files
  * monitored
  * increases. The default is a delay of 1 second for every 1000 files processed.
- * </p>
- * <br /><b>Example usage:</b><br /><pre>
+ *
+ * <h2>Example usage:</h2><pre>
  * FileSystemManager fsManager = VFS.getManager();
  * FileObject listendir = fsManager.resolveFile("/home/username/monitored/");
- * <p/>
+ *
  * DefaultFileMonitor fm = new DefaultFileMonitor(new CustomFileListener());
  * fm.setRecursive(true);
  * fm.addFile(listendir);
- * fm.start();
- * </pre>
+ * fm.start();</pre>
  * <i>(where CustomFileListener is a class that implements the FileListener
  * interface.)</i>
  */
diff --git a/core/src/main/java/org/apache/commons/vfs2/impl/DefaultFileReplicator.java b/core/src/main/java/org/apache/commons/vfs2/impl/DefaultFileReplicator.java
index e069187e..819981b7 100644
--- a/core/src/main/java/org/apache/commons/vfs2/impl/DefaultFileReplicator.java
+++ b/core/src/main/java/org/apache/commons/vfs2/impl/DefaultFileReplicator.java
@@ -41,7 +41,7 @@ public class DefaultFileReplicator
 {
     private static final Log log = LogFactory.getLog(DefaultFileReplicator.class);
     private static final int MASK = 0xffff;
-    
+
     private static final Random random = new Random();
 
     private static final char[] TMP_RESERVED_CHARS = new char[]
@@ -59,7 +59,7 @@ public class DefaultFileReplicator
     }
 
     /**
-     * constructor to set the location of the temporary directory.
+     * Constructor to set the location of the temporary directory.
      *
      * @param tempDir The temporary directory.
      */
@@ -78,6 +78,7 @@ public class DefaultFileReplicator
 
     /**
      * Allocates a new temporary file.
+     *
      * @param baseName the base file name.
      * @return The created File.
      * @throws FileSystemException if an error occurs.
@@ -130,7 +131,8 @@ public class DefaultFileReplicator
     }
 
     /**
-     * create the temporary file
+     * Create the temporary file.
+     *
      * @param parent The file to use as the parent of the file being created.
      * @param name The name of the file to create.
      * @return The File that was created.
@@ -142,7 +144,8 @@ public class DefaultFileReplicator
     }
 
     /**
-     * create the temporary file name
+     * Create the temporary file name.
+     *
      * @param baseName The base to prepend to the file name being created.
      * @return the name of the File.
      */
@@ -158,7 +161,8 @@ public class DefaultFileReplicator
     }
 
     /**
-     * physically deletes the file from the filesystem
+     * Physically deletes the file from the filesystem.
+     *
      * @param file The File to delete.
      */
     protected void deleteFile(final File file)
@@ -182,6 +186,7 @@ public class DefaultFileReplicator
 
     /**
      * Initializes this component.
+     *
      * @throws FileSystemException if an error occurs.
      */
     @Override
@@ -206,8 +211,10 @@ public class DefaultFileReplicator
     }
 
     /**
-     * removes a file from the copies list. Will be used for cleanup. <br/>
-     * Notice: The system awaits that the returning object can be cast to a java.io.File
+     * Removes a file from the copies list. Will be used for cleanup.
+     * <p>
+     * Notice: The system awaits that the returning object can be cast to a {@link java.io.File}.
+     *
      * @return the File that was removed.
      */
     protected Object removeFile()
@@ -219,7 +226,8 @@ public class DefaultFileReplicator
     }
 
     /**
-     * removes a instance from the list of copies
+     * Removes a instance from the list of copies.
+     *
      * @param file The File to remove.
      */
     protected void removeFile(final Object file)
@@ -232,6 +240,7 @@ public class DefaultFileReplicator
 
     /**
      * Creates a local copy of the file, and all its descendants.
+     *
      * @param srcFile The file to copy.
      * @param selector The FileSelector.
      * @return the created File.
diff --git a/core/src/main/java/org/apache/commons/vfs2/impl/DefaultFileSystemManager.java b/core/src/main/java/org/apache/commons/vfs2/impl/DefaultFileSystemManager.java
index 44a20fa5..77372b61 100644
--- a/core/src/main/java/org/apache/commons/vfs2/impl/DefaultFileSystemManager.java
+++ b/core/src/main/java/org/apache/commons/vfs2/impl/DefaultFileSystemManager.java
@@ -59,8 +59,6 @@ import org.apache.commons.vfs2.provider.VfsComponent;
 
 /**
  * The default file system manager implementation.
- *
- * @version $Id$
  */
 public class DefaultFileSystemManager implements FileSystemManager
 {
@@ -270,13 +268,10 @@ public class DefaultFileSystemManager implements FileSystemManager
     }
 
     /**
-     * <p>
      * Set the cache strategy to use when dealing with file object data. You can
      * set it only once before the FileSystemManager is initialized.
-     * <p />
      * <p>
      * The default is {@link CacheStrategy#ON_RESOLVE}
-     * </p>
      *
      * @param fileCacheStrategy The CacheStrategy to use.
      * @throws FileSystemException
@@ -1009,8 +1004,10 @@ public class DefaultFileSystemManager implements FileSystemManager
     }
 
     /**
-     * Closes the given filesystem.<br />
-     * If you use VFS as singleton it is VERY dangerous to call this method
+     * Closes the given filesystem.
+     * <p>
+     * If you use VFS as singleton it is VERY dangerous to call this method.
+     *
      * @param filesystem The FileSystem to close.
      */
     @Override
diff --git a/core/src/main/java/org/apache/commons/vfs2/impl/StandardFileSystemManager.java b/core/src/main/java/org/apache/commons/vfs2/impl/StandardFileSystemManager.java
index de7eb2db..5e9f4938 100644
--- a/core/src/main/java/org/apache/commons/vfs2/impl/StandardFileSystemManager.java
+++ b/core/src/main/java/org/apache/commons/vfs2/impl/StandardFileSystemManager.java
@@ -128,8 +128,10 @@ public class StandardFileSystemManager
     }
 
     /**
-     * Scans the classpath to find any droped plugin.<br />
-     * The plugin-description has to be in /META-INF/vfs-providers.xml
+     * Scans the classpath to find any droped plugin.
+     * <p>
+     * The plugin-description has to be in {@code /META-INF/vfs-providers.xml}.
+     *
      * @throws FileSystemException if an error occurs.
      */
     protected void configurePlugins() throws FileSystemException
diff --git a/core/src/main/java/org/apache/commons/vfs2/impl/VirtualFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/impl/VirtualFileSystem.java
index cd0e801c..06844640 100644
--- a/core/src/main/java/org/apache/commons/vfs2/impl/VirtualFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/impl/VirtualFileSystem.java
@@ -34,8 +34,8 @@ import org.apache.commons.vfs2.provider.DelegateFileObject;
 /**
  * A logical file system, made up of set of junctions, or links, to files from
  * other file systems.
- *
- * @todo Handle nested junctions.
+ * <p>
+ * TODO - Handle nested junctions.
  */
 public class VirtualFileSystem extends AbstractFileSystem
 {
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileName.java b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileName.java
index 034de18e..13ed821d 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileName.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileName.java
@@ -270,7 +270,7 @@ public abstract class AbstractFileName implements FileName
 
     /**
      * Returns the URI without a password.
-     * 
+     *
      * @return Returns the URI without a password.
      */
     @Override
@@ -477,15 +477,13 @@ public abstract class AbstractFileName implements FileName
     }
 
     /**
-     * Returns the requested or current type of this name. <br />
+     * Returns the requested or current type of this name.
      * <p>
-     * The "requested" type is the one determined during resolving the name. <br/>
-     * In this case the name is a {@link FileType#FOLDER} if it ends with an "/" else
-     * it will be a {@link FileType#FILE}<br/>
-     * </p>
+     * The "requested" type is the one determined during resolving the name.
+     *  n this case the name is a {@link FileType#FOLDER} if it ends with an "/" else
+     * it will be a {@link FileType#FILE}.
      * <p>
      * Once attached it will be changed to reflect the real type of this resource.
-     * </p>
      *
      * @return {@link FileType#FOLDER} or {@link FileType#FILE}
      */
@@ -496,7 +494,7 @@ public abstract class AbstractFileName implements FileName
     }
 
     /**
-     * sets the type of this file e.g. when it will be attached.
+     * Sets the type of this file e.g. when it will be attached.
      *
      * @param type {@link FileType#FOLDER} or {@link FileType#FILE}
      * @throws FileSystemException if an error occurs.
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileObject.java
index 941c1aa1..b6e1070c 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileObject.java
@@ -55,15 +55,19 @@ import org.apache.commons.vfs2.util.RandomAccessMode;
 
 /**
  * A partial file object implementation.
- * @param <AFS> An AbstractFileSystem subclass
  *
- * @todo Chop this class up - move all the protected methods to several
- * interfaces, so that structure and content can be separately overridden.
- * @todo Check caps in methods like getChildren(), etc, and give better error messages
- * (eg 'this file type does not support listing children', vs 'this is not a folder')
+ * @param <AFS> An AbstractFileSystem subclass
  */
 public abstract class AbstractFileObject<AFS extends AbstractFileSystem> implements FileObject
 {
+    /*
+     * TODO - Chop this class up - move all the protected methods to several
+     * interfaces, so that structure and content can be separately overridden.
+     *
+     * TODO - Check caps in methods like getChildren(), etc, and give better error messages
+     * (eg 'this file type does not support listing children', vs 'this is not a folder')
+     */
+
     // private static final FileObject[] EMPTY_FILE_ARRAY = {};
     private static final FileName[] EMPTY_FILE_ARRAY = {};
 
@@ -278,7 +282,7 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
 
     /**
      * Compares two FileObjects (ignores case).
-     * 
+     *
      * @param file
      *            the object to compare.
      * @return a negative integer, zero, or a positive integer when this object is less than, equal to, or greater than
@@ -447,9 +451,10 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
 
     /**
      * Deletes this file.
+     * <p>
+     * TODO - This will not fail if this is a non-empty folder.
      *
      * @return true if this object has been deleted
-     * @todo This will not fail if this is a non-empty folder.
      * @throws FileSystemException if an error occurs.
      */
     @Override
@@ -599,11 +604,13 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     }
 
     /**
-     * Attaches this file object to its file resource.  This method is called
-     * before any of the doBlah() or onBlah() methods.  Sub-classes can use
-     * this method to perform lazy initialisation.
-     * <p/>
+     * Attaches this file object to its file resource.
+     * <p>
+     * This method is called before any of the doBlah() or onBlah() methods.
+     * Sub-classes can use this method to perform lazy initialisation.
+     * <p>
      * This implementation does nothing.
+     *
      * @throws Exception if an error occurs.
      */
     protected void doAttach() throws Exception
@@ -624,12 +631,12 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     /**
      * Creates this file as a folder.  Is only called when:
      * <ul>
-     * <li>{@link #doGetType} returns {@link FileType#IMAGINARY}.
+     * <li>{@link #doGetType} returns {@link FileType#IMAGINARY}.</li>
      * <li>The parent folder exists and is writeable, or this file is the
-     * root of the file system.
+     * root of the file system.</li>
      * </ul>
-     * <p/>
      * This implementation throws an exception.
+     *
      * @throws Exception if an error occurs.
      */
     protected void doCreateFolder() throws Exception
@@ -640,12 +647,12 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     /**
      * Deletes the file.  Is only called when:
      * <ul>
-     * <li>{@link #doGetType} does not return {@link FileType#IMAGINARY}.
-     * <li>{@link #doIsWriteable} returns true.
-     * <li>This file has no children, if a folder.
+     * <li>{@link #doGetType} does not return {@link FileType#IMAGINARY}.</li>
+     * <li>{@link #doIsWriteable} returns true.</li>
+     * <li>This file has no children, if a folder.</li>
      * </ul>
-     * <p/>
      * This implementation throws an exception.
+
      * @throws Exception if an error occurs.
      */
     protected void doDelete() throws Exception
@@ -655,11 +662,12 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
 
     /**
      * Detaches this file object from its file resource.
-     * <p/>
-     * <p>Called when this file is closed.  Note that the file object may be
+     * <p>
+     * Called when this file is closed.  Note that the file object may be
      * reused later, so should be able to be reattached.
-     * <p/>
+     * <p>
      * This implementation does nothing.
+     *
      * @throws Exception if an error occurs.
      */
     protected void doDetach() throws Exception
@@ -669,8 +677,9 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     /**
      * Returns the attributes of this file.  Is only called if {@link #doGetType}
      * does not return {@link FileType#IMAGINARY}.
-     * <p/>
+     * <p>
      * This implementation always returns an empty map.
+     *
      * @return The attributes of the file.
      * @throws Exception if an error occurs.
      */
@@ -682,8 +691,9 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     /**
      * Returns the certificates used to sign this file.  Is only called if
      * {@link #doGetType} does not return {@link FileType#IMAGINARY}.
-     * <p/>
+     * <p>
      * This implementation always returns null.
+     *
      * @return The certificates used to sign the file.
      * @throws Exception if an error occurs.
      */
@@ -703,11 +713,12 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     /**
      * Creates an input stream to read the file content from.  Is only called
      * if {@link #doGetType} returns {@link FileType#FILE}.
-     * <p/>
-     * <p>It is guaranteed that there are no open output streams for this file
+     * <p>
+     * It is guaranteed that there are no open output streams for this file
      * when this method is called.
-     * <p/>
-     * <p>The returned stream does not have to be buffered.
+     * <p>
+     * The returned stream does not have to be buffered.
+     *
      * @return An InputStream to read the file content.
      * @throws Exception if an error occurs.
      */
@@ -716,8 +727,9 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     /**
      * Returns the last modified time of this file.  Is only called if
      * {@link #doGetType} does not return {@link FileType#IMAGINARY}.
-     * <p/>
+     * <p>
      * This implementation throws an exception.
+     *
      * @return The last modification time.
      * @throws Exception if an error occurs.
      */
@@ -735,13 +747,13 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
      * {@link #doGetType} returns {@link FileType#IMAGINARY}, and the file's
      * parent exists and is a folder.
      * </ul>
-     * <p/>
-     * <p>It is guaranteed that there are no open stream (input or output) for
+     * It is guaranteed that there are no open stream (input or output) for
      * this file when this method is called.
-     * <p/>
-     * <p>The returned stream does not have to be buffered.
-     * <p/>
+     * <p>
+     * The returned stream does not have to be buffered.
+     * <p>
      * This implementation throws an exception.
+     *
      * @param bAppend true if the file should be appended to, false if it should be overwritten.
      * @return An OutputStream to write to the file.
      * @throws Exception if an error occurs.
@@ -754,10 +766,10 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     /**
      * Creates access to the file for random i/o.  Is only called
      * if {@link #doGetType} returns {@link FileType#FILE}.
-     * <p/>
-     * <p>It is guaranteed that there are no open output streams for this file
+     * <p>
+     * It is guaranteed that there are no open output streams for this file
      * when this method is called.
-     * <p/>
+     *
      * @param mode The mode to access the file.
      * @return The RandomAccessContext.
      * @throws Exception if an error occurs.
@@ -778,8 +790,9 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     /**
      * Determines if this file is executable.  Is only called if {@link #doGetType}
      * does not return {@link FileType#IMAGINARY}.
-     * <p/>
+     * <p>
      * This implementation always returns false.
+     *
      * @return true if the file is executable, false otherwise.
      * @throws Exception if an error occurs.
      */
@@ -787,12 +800,13 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     {
         return false;
     }
-    
+
     /**
      * Determines if this file is hidden.  Is only called if {@link #doGetType}
      * does not return {@link FileType#IMAGINARY}.
-     * <p/>
+     * <p>
      * This implementation always returns false.
+     *
      * @return true if the file is hidden, false otherwise.
      * @throws Exception if an error occurs.
      */
@@ -804,8 +818,9 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     /**
      * Determines if this file can be read.  Is only called if {@link #doGetType}
      * does not return {@link FileType#IMAGINARY}.
-     * <p/>
+     * <p>
      * This implementation always returns true.
+     *
      * @return true if the file is readable, false otherwise.
      * @throws Exception if an error occurs.
      */
@@ -816,8 +831,8 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
 
     /**
      * Checks if this fileObject is the same file as {@code destFile} just with a different
-     * name.<br />
-     * E.g. for case insensitive filesystems like windows.
+     * name. E.g. for case insensitive filesystems like windows.
+     *
      * @param destFile The file to compare to.
      * @return true if the FileObjects are the same.
      * @throws FileSystemException if an error occurs.
@@ -830,8 +845,9 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     /**
      * Determines if this file can be written to.  Is only called if
      * {@link #doGetType} does not return {@link FileType#IMAGINARY}.
-     * <p/>
+     * <p>
      * This implementation always returns true.
+     *
      * @return true if the file is writable.
      * @throws Exception if an error occurs.
      */
@@ -841,9 +857,10 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     }
 
     /**
-     * Lists the children of this file.  Is only called if {@link #doGetType}
-     * returns {@link FileType#FOLDER}.  The return value of this method
-     * is cached, so the implementation can be expensive.<br />
+     * Lists the children of this file. Is only called if {@link #doGetType}
+     * returns {@link FileType#FOLDER}. The return value of this method
+     * is cached, so the implementation can be expensive.
+     *
      * @return a possible empty String array if the file is a directory or null or an exception if the
      * file is not a directory or can't be read.
      * @throws Exception if an error occurs.
@@ -868,8 +885,9 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     /**
      * Removes an attribute of this file.  Is only called if {@link #doGetType}
      * does not return {@link FileType#IMAGINARY}.
-     * <p/>
+     * <p>
      * This implementation throws an exception.
+     *
      * @param attrName The name of the attribute to remove.
      * @throws Exception if an error occurs.
      * @since 2.0
@@ -882,10 +900,11 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     /**
      * Renames the file.  Is only called when:
      * <ul>
-     * <li>{@link #doIsWriteable} returns true.
+     * <li>{@link #doIsWriteable} returns true.</li>
      * </ul>
-     * <p/>
+     * <p>
      * This implementation throws an exception.
+     *
      * @param newFile A FileObject with the new file name.
      * @throws Exception if an error occurs.
      */
@@ -897,8 +916,9 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     /**
      * Sets an attribute of this file.  Is only called if {@link #doGetType}
      * does not return {@link FileType#IMAGINARY}.
-     * <p/>
+     * <p>
      * This implementation throws an exception.
+     *
      * @param attrName The attribute name.
      * @param value The value to be associated with the attribute name.
      * @throws Exception if an error occurs.
@@ -927,8 +947,9 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     /**
      * Sets the last modified time of this file.  Is only called if
      * {@link #doGetType} does not return {@link FileType#IMAGINARY}.
-     * <p/>
+     * <p>
      * This implementation throws an exception.
+     *
      * @param modtime The last modification time.
      * @return true if the time was set.
      * @throws Exception if an error occurs.
@@ -1302,7 +1323,7 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
 
     /**
      * Returns the name of the file.
-     * 
+     *
      * @return The FileName, never {@code null}.
      */
     @Override
@@ -1314,7 +1335,7 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     /**
      * Returns the receiver as a URI String for public display, like, without a
      * password.
-     * 
+     *
      * @return A URI String without a password, never {@code null}.
      */
     @Override
@@ -1536,8 +1557,10 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     }
 
     /**
-     * Called when this file is changed.<br />
+     * Called when this file is changed.
+     * <p>
      * This will only happen if you monitor the file using {@link org.apache.commons.vfs2.FileMonitor}.
+     *
      * @throws Exception if an error occurs.
      */
     protected void handleChanged() throws Exception
@@ -1547,8 +1570,9 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     }
 
     /**
-     * Called when this file is created.  Updates cached info and notifies
+     * Called when this file is created. Updates cached info and notifies
      * the parent and file system.
+     *
      * @param newType The type of the file.
      * @throws Exception if an error occurs.
      */
@@ -1740,8 +1764,8 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
 
     /**
      * Checks if this fileObject is the same file as {@code destFile} just with a different
-     * name.<br />
-     * E.g. for case insensitive filesystems like windows.
+     * name. E.g. for case insensitive filesystems like windows.
+     *
      * @param destFile The file to compare to.
      * @return true if the FileObjects are the same.
      * @throws FileSystemException if an error occurs.
@@ -1930,8 +1954,9 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
 
     /**
      * Called when the type or content of this file changes.
-     * <p/>
+     * <p>
      * This implementation does nothing.
+     *
      * @throws Exception if an error occurs.
      */
     protected void onChange() throws Exception
@@ -1941,8 +1966,9 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
     /**
      * Called when the children of this file change.  Allows subclasses to
      * refresh any cached information about the children of this file.
-     * <p/>
+     * <p>
      * This implementation does nothing.
+     *
      * @param child The name of the child that changed.
      * @param newType The type of the file.
      * @throws Exception if an error occurs.
@@ -2097,7 +2123,7 @@ public abstract class AbstractFileObject<AFS extends AbstractFileSystem> impleme
 
     /**
      * Returns the URI as a String.
-     * 
+     *
      * @return Returns the URI as a String.
      */
     @Override
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileSystem.java b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileSystem.java
index cceaf508..5a0574e9 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileSystem.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/AbstractFileSystem.java
@@ -459,7 +459,7 @@ public abstract class AbstractFileSystem
     /**
      * Returns the accuracy of the last modification time.
      *
-     * @return ms 0 perfectly accurate, >0 might be off by this value e.g. sftp 1000ms
+     * @return ms 0 perfectly accurate, {@literal >0} might be off by this value e.g. sftp 1000ms
      */
     @Override
     public double getLastModTimeAccuracy()
@@ -565,8 +565,10 @@ public abstract class AbstractFileSystem
     }
 
     /**
-     * Fires a file changed event. <br />
+     * Fires a file changed event.
+     * <p>
      * This will only happen if you monitor the file using {@link org.apache.commons.vfs2.FileMonitor}.
+     *
      * @param file The FileObject that changed.
      */
     public void fireFileChanged(final FileObject file)
@@ -575,8 +577,9 @@ public abstract class AbstractFileSystem
     }
 
     /**
-     * returns true if no file is using this filesystem.
-     * @return true of no file is using this FileSystem.
+     * Returns true if no file is using this filesystem.
+     *
+     * @return true if no file is using this FileSystem.
      */
     public boolean isReleaseable()
     {
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/DefaultFileContent.java b/core/src/main/java/org/apache/commons/vfs2/provider/DefaultFileContent.java
index eb0bfe62..fb406712 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/DefaultFileContent.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/DefaultFileContent.java
@@ -575,7 +575,8 @@ public final class DefaultFileContent implements FileContent
     */
 
     /**
-     * check if a input and/or output stream is open.<br />
+     * Check if a input and/or output stream is open.
+     * <p>
      * This checks only the scope of the current thread.
      *
      * @return true if this is the case
@@ -588,7 +589,7 @@ public final class DefaultFileContent implements FileContent
     }
 
     /**
-     * check if a input and/or output stream is open.<br />
+     * Check if a input and/or output stream is open.
      * This checks all threads.
      *
      * @return true if this is the case
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/DelegateFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/DelegateFileObject.java
index a2c0464a..1cf262b5 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/DelegateFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/DelegateFileObject.java
@@ -37,10 +37,10 @@ import org.apache.commons.vfs2.util.WeakRefFileListener;
 
 /**
  * A file backed by another file.
+ * <p>
+ * TODO - Extract subclass that overlays the children.
  *
  * @param <AFS>  A subclass of AbstractFileSystem.
- *
- * @todo Extract subclass that overlays the children
  */
 public class DelegateFileObject<AFS extends AbstractFileSystem> extends AbstractFileObject<AFS> implements FileListener
 {
@@ -391,8 +391,9 @@ public class DelegateFileObject<AFS extends AbstractFileSystem> extends Abstract
 
     /**
      * Called when a file is changed.
-     * <p/>
+     * <p>
      * This will only happen if you monitor the file using {@link org.apache.commons.vfs2.FileMonitor}.
+     *
      * @param event The FileChangeEvent.
      * @throws Exception if an error occurs.
      */
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/FileProvider.java b/core/src/main/java/org/apache/commons/vfs2/provider/FileProvider.java
index be2f850a..7f0ee30f 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/FileProvider.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/FileProvider.java
@@ -29,8 +29,8 @@ import org.apache.commons.vfs2.FileSystemOptions;
 /**
  * A file provider.  Each file provider is responsible for handling files for
  * a particular URI scheme.
- * <p/>
- * <p>A file provider may also implement {@link VfsComponent}.
+ * <p>
+ * A file provider may also implement {@link VfsComponent}.
  */
 public interface FileProvider
 {
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/FileReplicator.java b/core/src/main/java/org/apache/commons/vfs2/provider/FileReplicator.java
index a8dcaa54..7a14ee6f 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/FileReplicator.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/FileReplicator.java
@@ -24,8 +24,8 @@ import org.apache.commons.vfs2.FileSystemException;
 
 /**
  * Responsible for making local replicas of files.
- * <p/>
- * <p>A file replicator may also implement {@link VfsComponent}.
+ * <p>
+ * A file replicator may also implement {@link VfsComponent}.
  */
 public interface FileReplicator
 {
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/HostFileNameParser.java b/core/src/main/java/org/apache/commons/vfs2/provider/HostFileNameParser.java
index 522d09b7..11dcfb97 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/HostFileNameParser.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/HostFileNameParser.java
@@ -23,8 +23,9 @@ import org.apache.commons.vfs2.util.Cryptor;
 import org.apache.commons.vfs2.util.CryptorFactory;
 
 /**
- * Implementation for any url based filesystem.<br />
- * Parses the url into user/password/host/port/path<br />
+ * Implementation for any url based filesystem.
+ * <p>
+ * Parses the url into user/password/host/port/path.
  * Does not handle a query string (after ?)
  *
  * @see URLFileNameParser URLFileNameParser for the implementation which also handles the query string too
@@ -209,7 +210,7 @@ public class HostFileNameParser extends AbstractFileNameParser
     }
 
     /**
-     * Extracts the port from a URI.  The scheme://userinfo@hostname
+     * Extracts the port from a URI. The {@code scheme://userinfo@hostname}
      * part has been removed.
      *
      * @return The port, or -1 if the URI does not contain a port.
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/LayeredFileNameParser.java b/core/src/main/java/org/apache/commons/vfs2/provider/LayeredFileNameParser.java
index 8c22bb78..16823cc3 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/LayeredFileNameParser.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/LayeredFileNameParser.java
@@ -22,7 +22,7 @@ import org.apache.commons.vfs2.FileType;
 
 /**
  * Implementation for layered filesystems.
- * <p/>
+ * <p>
  * Additionally encodes the '!' character.
  */
 public class LayeredFileNameParser extends AbstractFileNameParser
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/LocalFileProvider.java b/core/src/main/java/org/apache/commons/vfs2/provider/LocalFileProvider.java
index 0a66f90f..5387ebe5 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/LocalFileProvider.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/LocalFileProvider.java
@@ -29,9 +29,10 @@ public interface LocalFileProvider
 {
     /**
      * Determines if a name is an absolute file name.
+     * <p>
+     * TODO - Move this to a general file name parser interface.
      *
      * @param name The name to test.
-     * @todo Move this to a general file name parser interface.
      * @return true if the name is absolute.
      */
     boolean isAbsoluteLocalName(final String name);
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/URLFileNameParser.java b/core/src/main/java/org/apache/commons/vfs2/provider/URLFileNameParser.java
index 8ca78ae6..c6d2803d 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/URLFileNameParser.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/URLFileNameParser.java
@@ -21,8 +21,9 @@ import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileType;
 
 /**
- * Implementation for any url based filesystem.<br />
- * Parses the url into user/password/host/port/path/queryString<br />
+ * Implementation for any url based filesystem.
+ * <p>
+ * Parses the url into user/password/host/port/path/queryString.
  */
 public class URLFileNameParser extends HostFileNameParser
 {
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FTPClientWrapper.java b/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FTPClientWrapper.java
index fdd47d61..c118ae7a 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FTPClientWrapper.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FTPClientWrapper.java
@@ -30,7 +30,8 @@ import org.apache.commons.vfs2.provider.GenericFileName;
 import org.apache.commons.vfs2.util.UserAuthenticatorUtils;
 
 /**
- * A wrapper to the FTPClient to allow automatic reconnect on connection loss.<br />
+ * A wrapper to the FTPClient to allow automatic reconnect on connection loss.
+ * <p>
  * I decided to not to use eg. noop() to determine the state of the connection to avoid
  * unnecessary server round-trips.
  */
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileSystemConfigBuilder.java b/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileSystemConfigBuilder.java
index 2731cc6c..6122ffc3 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileSystemConfigBuilder.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileSystemConfigBuilder.java
@@ -104,8 +104,9 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * get the default date format used by the server. see {@link org.apache.commons.net.ftp.FTPClientConfig}
+     * Get the default date format used by the server. See {@link org.apache.commons.net.ftp.FTPClientConfig}
      * for details and examples.
+     *
      * @param opts The FileSystemOptions
      * @return The default date format.
      */
@@ -157,7 +158,8 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * see {@link org.apache.commons.net.ftp.FTPClientConfig} for details and examples.
+     * See {@link org.apache.commons.net.ftp.FTPClientConfig} for details and examples.
+     *
      * @param opts The FileSystemOptions.
      * @return The recent date format.
      */
@@ -167,8 +169,9 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * get the language code used by the server. see {@link org.apache.commons.net.ftp.FTPClientConfig}
+     * Get the language code used by the server. See {@link org.apache.commons.net.ftp.FTPClientConfig}
      * for details and examples.
+     *
      * @param opts The FilesystemOptions.
      * @return The language code of the server.
      */
@@ -178,7 +181,8 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * see {@link org.apache.commons.net.ftp.FTPClientConfig} for details and examples.
+     * See {@link org.apache.commons.net.ftp.FTPClientConfig} for details and examples.
+     *
      * @param opts The FileSystemOptions.
      * @return The server timezone id.
      */
@@ -188,7 +192,8 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * see {@link org.apache.commons.net.ftp.FTPClientConfig} for details and examples.
+     * See {@link org.apache.commons.net.ftp.FTPClientConfig} for details and examples.
+     *
      * @param opts The FileSystemOptions.
      * @return An array of short month names.
      */
@@ -212,7 +217,7 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
      * Returns {@link Boolean#TRUE} if VFS should treat the user directory as the root directory. Defaults to
      * <code>Boolean.TRUE</code> if the method {@link #setUserDirIsRoot(FileSystemOptions, boolean)} has not been
      * invoked.
-     * 
+     *
      * @param opts
      *            The FileSystemOptions.
      * @return <code>Boolean.TRUE</code> if VFS treats the user directory as the root directory.
@@ -227,7 +232,6 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
      * Sets the timeout for the initial control connection.
      * <p>
      * If you set the connectTimeout to {@code null} no connectTimeout will be set.
-     * </p>
      *
      * @param opts The FileSystemOptions.
      * @param connectTimeout the timeout value in milliseconds
@@ -239,7 +243,8 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * see {@link org.apache.commons.net.ftp.FTP#setControlEncoding} for details and examples.
+     * See {@link org.apache.commons.net.ftp.FTP#setControlEncoding} for details and examples.
+     *
      * @param opts The FileSystemOptions.
      * @param encoding the encoding to use
      * @since 2.0
@@ -250,8 +255,9 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * set the data timeout for the ftp client.<br />
-     * If you set the dataTimeout to {@code null} no dataTimeout will be set on the
+     * Set the data timeout for the ftp client.
+     * <p>
+     * If you set the {@code dataTimeout} to null no dataTimeout will be set on the
      * ftp client.
      *
      * @param opts The FileSystemOptions.
@@ -263,8 +269,9 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * set the default date format used by the server. see {@link org.apache.commons.net.ftp.FTPClientConfig}
+     * Set the default date format used by the server. See {@link org.apache.commons.net.ftp.FTPClientConfig}
      * for details and examples.
+     *
      * @param opts The FileSystemOptions.
      * @param defaultDateFormat The default date format.
      */
@@ -274,11 +281,11 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * set the FQCN of your FileEntryParser used to parse the directory listing from your server.<br />
-     * <br />
-     * <i>If you do not use the default commons-net FTPFileEntryParserFactory e.g. by using
-     * {@link #setEntryParserFactory}
-     * this is the "key" parameter passed as argument into your custom factory</i>
+     * Set the FQCN of your FileEntryParser used to parse the directory listing from your server.
+     * <p>
+     * If you do not use the default commons-net FTPFileEntryParserFactory e.g. by using
+     * {@link #setEntryParserFactory} this is the "key" parameter passed as argument into your
+     * custom factory.
      *
      * @param opts The FileSystemOptions.
      * @param key The key.
@@ -312,7 +319,7 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * enter into passive mode.
+     * Enter into passive mode.
      *
      * @param opts The FileSystemOptions.
      * @param passiveMode true if passive mode should be used.
@@ -323,7 +330,8 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * see {@link org.apache.commons.net.ftp.FTPClientConfig} for details and examples.
+     * See {@link org.apache.commons.net.ftp.FTPClientConfig} for details and examples.
+     *
      * @param opts The FileSystemOptions.
      * @param recentDateFormat The recent date format.
      */
@@ -333,8 +341,9 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * set the language code used by the server. see {@link org.apache.commons.net.ftp.FTPClientConfig}
+     * Set the language code used by the server. See {@link org.apache.commons.net.ftp.FTPClientConfig}
      * for details and examples.
+     *
      * @param opts The FileSystemOptions.
      * @param serverLanguageCode The servers language code.
      */
@@ -344,7 +353,8 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * see {@link org.apache.commons.net.ftp.FTPClientConfig} for details and examples.
+     * See {@link org.apache.commons.net.ftp.FTPClientConfig} for details and examples.
+     *
      * @param opts The FileSystemOptions.
      * @param serverTimeZoneId The server timezone id.
      */
@@ -354,7 +364,8 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * see {@link org.apache.commons.net.ftp.FTPClientConfig} for details and examples.
+     * See {@link org.apache.commons.net.ftp.FTPClientConfig} for details and examples.
+     *
      * @param opts The FileSystemOptions.
      * @param shortMonthNames an array of short month name Strings.
      */
@@ -371,8 +382,9 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * Sets the socket timeout for the FTP client.<br />
-     * If you set the socketTimeout to {@code null} no socketTimeout will be set on the
+     * Sets the socket timeout for the FTP client.
+     * <p>
+     * If you set the {@code soTimeout} to null no socket timeout will be set on the
      * ftp client.
      *
      * @param opts The FileSystem options.
@@ -385,7 +397,7 @@ public class FtpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * use user directory as root (do not change to fs root).
+     * Use user directory as root (do not change to fs root).
      *
      * @param opts The FileSystemOptions.
      * @param userDirIsRoot true if the user directory should be treated as the root.
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/ftps/FtpsClientWrapper.java b/core/src/main/java/org/apache/commons/vfs2/provider/ftps/FtpsClientWrapper.java
index 9b2aba5d..daa3d087 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/ftps/FtpsClientWrapper.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/ftps/FtpsClientWrapper.java
@@ -27,8 +27,11 @@ import org.apache.commons.vfs2.util.UserAuthenticatorUtils;
 
 
 /**
- * A wrapper to the FTPSClient to allow automatic reconnect on connection loss.<br />
- * The only difference to the FTPClientWrapper is the creation of a FTPSClient instead of a FTPClient.
+ * A wrapper to the FTPSClient to allow automatic reconnect on connection loss.
+ * <p>
+ * The only difference to the {@link FTPClientWrapper} is the creation of a {@link FTPSClient}
+ *  instead of a {@link FTPClient}.
+ *
  * @since 2.0
  */
 class FtpsClientWrapper extends FTPClientWrapper
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileObject.java
index 709f54c4..036b54c0 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/http/HttpFileObject.java
@@ -42,10 +42,10 @@ import org.apache.commons.vfs2.util.RandomAccessMode;
 
 /**
  * A file object backed by Apache Commons HttpClient.
+ * <p>
+ * TODO - status codes.
  *
  * @param <FS> An {@link HttpFileSystem} subclass
- *
- * @todo status codes
  */
 public class HttpFileObject<FS extends HttpFileSystem> extends AbstractFileObject<FS>
 {
@@ -117,11 +117,11 @@ public class HttpFileObject<FS extends HttpFileSystem> extends AbstractFileObjec
     /**
      * Creates an input stream to read the file content from.  Is only called
      * if {@link #doGetType} returns {@link FileType#FILE}.
-     * <p/>
-     * <p>It is guaranteed that there are no open output streams for this file
+     * <p>
+     * It is guaranteed that there are no open output streams for this file
      * when this method is called.
-     * <p/>
-     * <p>The returned stream does not have to be buffered.
+     * <p>
+     * The returned stream does not have to be buffered.
      */
     @Override
     protected InputStream doGetInputStream() throws Exception
@@ -143,7 +143,7 @@ public class HttpFileObject<FS extends HttpFileSystem> extends AbstractFileObjec
 
     /**
      * Returns the last modified time of this file.
-     * <p/>
+     * <p>
      * This implementation throws an exception.
      */
     @Override
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpClientFactory.java b/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpClientFactory.java
index b5b3cb9c..88fd980c 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpClientFactory.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpClientFactory.java
@@ -264,7 +264,8 @@ public final class SftpClientFactory
 
     /**
      * Finds the .ssh directory.
-     * <p>The lookup order is:</p>
+     * <p>
+     * The lookup order is:
      * <ol>
      * <li>The system property {@code vfs.sftp.sshdir} (the override
      * mechanism)</li>
@@ -272,12 +273,10 @@ public final class SftpClientFactory
      * <li>On Windows only: C:\cygwin\home\{user.name}\.ssh</li>
      * <li>The current directory, as a last resort.</li>
      * <ol>
-     * <p/>
-     * Windows Notes:
+     * Windows Notes:<br>
      * The default installation directory for Cygwin is {@code C:\cygwin}.
      * On my set up (Gary here), I have Cygwin in C:\bin\cygwin, not the default.
      * Also, my .ssh directory was created in the {user.home} directory.
-     * </p>
      *
      * @return The .ssh directory
      */
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileObject.java
index 94066e91..0ddef1c1 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileObject.java
@@ -46,8 +46,6 @@ import com.jcraft.jsch.SftpException;
 
 /**
  * An SFTP file.
- *
- * @version $Id$
  */
 public class SftpFileObject extends AbstractFileObject<SftpFileSystem>
 {
@@ -231,7 +229,7 @@ public class SftpFileObject extends AbstractFileObject<SftpFileSystem>
 
     /**
      * Sets the last modified time of this file. Is only called if
-     * {@link #doGetType} does not return {@link FileType#IMAGINARY}. <p/>
+     * {@link #doGetType} does not return {@link FileType#IMAGINARY}.
      *
      * @param modtime
      *            is modification time in milliseconds. SFTP protocol can send
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileSystemConfigBuilder.java b/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileSystemConfigBuilder.java
index a56b78f3..14e36a96 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileSystemConfigBuilder.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpFileSystemConfigBuilder.java
@@ -27,12 +27,10 @@ import org.apache.commons.vfs2.FileSystemOptions;
 import com.jcraft.jsch.UserInfo;
 
 /**
- * The config BUILDER for various SFTP configuration options.
+ * The config builder for various SFTP configuration options.
  */
 public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder
 {
-
-
     /**
      * Proxy type.
      */
@@ -110,17 +108,17 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder
 
     /**
      * Connects to the SFTP server through a remote host reached by SSH.
+     * <p>
      * On this proxy host, a command
      * (e.g. {@linkplain SftpStreamProxy#NETCAT_COMMAND}
      * or {@linkplain SftpStreamProxy#NETCAT_COMMAND}) is run to forward
-     * input/output streams between the target host and the VFS host.</p>
+     * input/output streams between the target host and the VFS host.
      * <p>
      * When used, the proxy username ({@linkplain #setProxyUser}) and
      * hostname ({@linkplain #setProxyHost}) <b>must</b> be set.
      * Optionnaly, the command ({@linkplain #setProxyCommand}),
      * password ({@linkplain #setProxyPassword}) and connection options
      * ({@linkplain #setProxyOptions}) can be set.
-     * </p>
      */
     public static final ProxyType PROXY_STREAM = new ProxyType("stream");
 
@@ -136,7 +134,7 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder
     private static final String TIMEOUT = _PREFIX + ".TIMEOUT";
     private static final String USER_DIR_IS_ROOT = _PREFIX + ".USER_DIR_IS_ROOT";
     private static final String ENCODING = _PREFIX + ".ENCODING";
-    
+
     /**
      * Gets the singleton builder.
      *
@@ -171,12 +169,12 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder
 
     /**
      * Gets the file name encoding.
-     * 
+     *
      * @param opts
      *            The FileSystem options.
      * @return the file name encoding
      */
-    public String getFileNameEncoding(final FileSystemOptions opts) 
+    public String getFileNameEncoding(final FileSystemOptions opts)
     {
         return this.getString(opts, ENCODING);
     }
@@ -185,8 +183,7 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder
      * Gets the identity files (your private key files).
      * <p>
      * We use java.io.File because JSch cannot deal with VFS FileObjects.
-     * </p>
-     * 
+     *
      * @param opts The FileSystem options.
      * @return the array of identity Files.
      * @see #setIdentities
@@ -276,13 +273,13 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * Gets the proxy to use for the SFTP connection. You have to set the ProxyPort too if you would like to have the
-     * proxy really used.
-     * 
+     * Gets the proxy to use for the SFTP connection.
+     *
      * @param opts
      *            The FileSystem options.
      * @return proxyHost
-     * @see #setProxyPort
+     * @see #getProxyPort
+     * @see #setProxyHost
      */
     public String getProxyHost(final FileSystemOptions opts)
     {
@@ -322,13 +319,13 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * Gets the proxy-port to use for the SFTP the connection You have to set the ProxyHost too if you would like to
-     * have the proxy really used.
-     * 
+     * Gets the proxy-port to use for the SFTP the connection.
+     *
      * @param opts
      *            The FileSystem options.
      * @return proxyPort: the port number or 0 if it is not set
-     * @see #setProxyHost
+     * @see #setProxyPort
+     * @see #getProxyHost
      */
     public int getProxyPort(final FileSystemOptions opts)
     {
@@ -387,7 +384,7 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder
      * Returns {@link Boolean#TRUE} if VFS should treat the user directory as the root directory. Defaults to
      * <code>Boolean.TRUE</code> if the method {@link #setUserDirIsRoot(FileSystemOptions, boolean)} has not been
      * invoked.
-     * 
+     *
      * @param opts
      *            The FileSystemOptions.
      * @return <code>Boolean.TRUE</code> if VFS treats the user directory as the root directory.
@@ -413,10 +410,8 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder
      * Configures the compression to use.
      * <p>
      * For example, use {@code "zlib,none"} to enable compression.
-     * </p>
      * <p>
      * See the Jsch documentation for details.
-     * </p>
      *
      * @param opts
      *            The FileSystem options.
@@ -432,12 +427,12 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder
 
     /**
      * Sets the file name encoding.
-     * 
+     *
      * @param opts
      *            The FileSystem options.
      * @param fileNameEncoding
      */
-    public void setFileNameEncoding(final FileSystemOptions opts, final String fileNameEncoding) 
+    public void setFileNameEncoding(final FileSystemOptions opts, final String fileNameEncoding)
     {
         this.setParam(opts, ENCODING, fileNameEncoding);
     }
@@ -445,9 +440,8 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder
     /**
      * Sets the identity files (your private key files).
      * <p>
-     * We use java.io.File because JSch cannot deal with VFS FileObjects.
-     * </p>
-     * 
+     * We use {@link java.io.File} because JSch cannot deal with VFS FileObjects.
+     *
      * @param opts The FileSystem options.
      * @param identityFiles An array of identity Files.
      * @throws FileSystemException if an error occurs.
@@ -477,7 +471,7 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder
      *            An array of identity info.
      * @throws FileSystemException
      *             if an error occurs.
-     * @since 2.1             
+     * @since 2.1
      */
     public void setIdentityInfo(final FileSystemOptions opts, final IdentityInfo... identites) throws FileSystemException
     {
@@ -485,7 +479,9 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * Set the identity repository. This is useful when you want to use e.g. an SSH agent as provided See for example
+     * Set the identity repository.
+     * <p>
+     * This is useful when you want to use e.g. an SSH agent as provided.
      *
      * @param opts
      *            The FileSystem options.
@@ -502,10 +498,9 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder
     }
 
     /**
-     * Sets the known_hosts file. e.g. /home/user/.ssh/known_hosts2.
+     * Sets the known_hosts file. e.g. {@code /home/user/.ssh/known_hosts2}.
      * <p>
-     * We use java.io.File because JSch cannot deal with VFS FileObjects.
-     * </p>
+     * We use {@link java.io.File} because JSch cannot deal with VFS FileObjects.
      *
      * @param opts
      *            The FileSystem options.
@@ -551,7 +546,7 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder
     /**
      * Sets the proxy to use for the SFTP connection.
      *
-     * You MUST also set the ProxyPort to use the proxy.
+     * You MUST also set the proxy port to use the proxy.
      *
      * @param opts
      *            The FileSystem options.
@@ -599,8 +594,8 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder
 
     /**
      * Sets the proxy port to use for the SFTP connection.
-     *
-     * You MUST also set the ProxyHost to use the proxy.
+     * <p>
+     * You MUST also set the proxy host to use the proxy.
      *
      * @param opts
      *            The FileSystem options.
@@ -689,8 +684,8 @@ public final class SftpFileSystemConfigBuilder extends FileSystemConfigBuilder
     {
         this.setParam(opts, TIMEOUT, timeout);
     }
-    
-    
+
+
     /**
      * Sets the whether to use the user directory as root (do not change to file system root).
      *
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpStreamProxy.java b/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpStreamProxy.java
index b2cbd2e7..ad88067c 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpStreamProxy.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpStreamProxy.java
@@ -54,17 +54,12 @@ public class SftpStreamProxy implements Proxy
 
     /**
      * Command pattern to execute on the proxy host.
-     *
      * <p>
      * When run, the command output should be forwarded to the target host and port, and its input should be forwarded
      * from the target host and port.
-     * </p>
-     *
      * <p>
      * The command will be created for each host/port pair by using {@linkplain String#format(String, Object...)} with
      * two objects: the target host name ({@linkplain String}) and the target port ({@linkplain Integer}).
-     * </p>
-     * <p/>
      * <p>
      * Here are two examples (that can be easily used by using the static members of this class):
      * <ul>
@@ -72,7 +67,6 @@ public class SftpStreamProxy implements Proxy
      * <li><code>/bin/bash -c 'exec 3<>/dev/tcp/%s/%d; cat <&3 & cat >&3; kill $!</code> will use bash built-in TCP
      * stream, which can be useful when there is no netcat available. ({@linkplain #BASH_TCP_COMMAND})</li>
      * </ul>
-     * </p>
      */
     private final String commandFormat;
 
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/url/UrlFileNameParser.java b/core/src/main/java/org/apache/commons/vfs2/provider/url/UrlFileNameParser.java
index e50070f7..1ce43ca5 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/url/UrlFileNameParser.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/url/UrlFileNameParser.java
@@ -25,7 +25,8 @@ import org.apache.commons.vfs2.provider.VfsComponentContext;
 import org.apache.commons.vfs2.provider.local.GenericFileNameParser;
 
 /**
- * Implementation for any java.net.url based filesystem.<br />
+ * Implementation for any java.net.url based filesystem.
+ * <p>
  * Composite of URLFilenameParser and GenericFilenameParser
  */
 public class UrlFileNameParser extends AbstractFileNameParser
@@ -65,10 +66,11 @@ public class UrlFileNameParser extends AbstractFileNameParser
     }
 
     /**
-     * Guess is the given filename is a url with host or not. VFS treats such urls differently.<br />
+     * Guess is the given filename is a url with host or not. VFS treats such urls differently.
+     * <p>
      * A filename is url-based if the base is a {@code URLFileName} or there are only 2 slashes
-     * after the scheme.<br/>
-     * e.g: http://host/path, file:/path/to/file, file:///path/to/file
+     * after the scheme.
+     * e.g: {@code http://host/path}, {@code file:/path/to/file}, {@code file:///path/to/file}.
      */
     protected boolean isUrlBased(final FileName base, final String filename)
     {
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/url/UrlFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/url/UrlFileObject.java
index 3f0c415a..e73f624b 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/url/UrlFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/url/UrlFileObject.java
@@ -34,9 +34,10 @@ import org.apache.commons.vfs2.provider.URLFileName;
 
 /**
  * A {@link FileObject} implementation backed by a {@link URL}.
- *
- * @todo Implement set lastModified and get/set attribute
- * @todo Implement getOutputStream()
+ * <p>
+ * TODO - Implement set lastModified and get/set attribute
+ * <p>
+ * TODO - Implement getOutputStream().
  */
 public class UrlFileObject extends AbstractFileObject<UrlFileSystem>
 {
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileObject.java
index 20c41bc1..1e30859a 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavFileObject.java
@@ -81,8 +81,8 @@ public class WebdavFileObject extends HttpFileObject<WebdavFileSystem>
 {
     /**
      * An OutputStream that writes to a Webdav resource.
-     *
-     * @todo Use piped stream to avoid temporary file
+     * <p>
+     * TODO - Use piped stream to avoid temporary file.
      */
     private class WebdavOutputStream extends MonitorOutputStream
     {
@@ -418,8 +418,9 @@ public class WebdavFileObject extends HttpFileObject<WebdavFileSystem>
     /**
      * Determines if this file can be written to.  Is only called if
      * {@link #doGetType} does not return {@link FileType#IMAGINARY}.
-     * <p/>
+     * <p>
      * This implementation always returns true.
+     *
      * @return true if the file is writable.
      * @throws Exception if an error occurs.
      */
@@ -523,8 +524,6 @@ public class WebdavFileObject extends HttpFileObject<WebdavFileSystem>
     /**
      * Sets an attribute of this file.  Is only called if {@link #doGetType}
      * does not return {@link FileType#IMAGINARY}.
-     * <p/>
-     * This implementation throws an exception.
      */
     @Override
     protected void doSetAttribute(final String attrName, final Object value)
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavMethodRetryHandler.java b/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavMethodRetryHandler.java
index c0bbfb86..72a3d5c8 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavMethodRetryHandler.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/webdav/WebdavMethodRetryHandler.java
@@ -23,7 +23,8 @@ import org.apache.commons.httpclient.HttpMethodRetryHandler;
 
 
 /**
- * A retry handler which will retry a failed webdav method one time.<br />
+ * A retry handler which will retry a failed webdav method one time.
+ * <p>
  * Now that webdavlib didnt support adding a MethodRetryHandler only a few operations are restartable yet.
  *
  * @since 2.0
diff --git a/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileObject.java b/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileObject.java
index 8e2d6110..badf74e1 100644
--- a/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileObject.java
+++ b/core/src/main/java/org/apache/commons/vfs2/provider/zip/ZipFileObject.java
@@ -75,10 +75,10 @@ public class ZipFileObject extends AbstractFileObject<ZipFileSystem>
 
     /**
      * Attaches a child.
-     * <p/>
-     * TODO: Shouldn't this method have package-only visibility? 
-     * Cannot change this without breaking binary compatibility.  
-     * 
+     * <p>
+     * TODO: Shouldn't this method have package-only visibility?
+     * Cannot change this without breaking binary compatibility.
+     *
      * @param childName The name of the child.
      */
     public void attachChild(final FileName childName)
diff --git a/core/src/main/java/org/apache/commons/vfs2/tasks/AbstractSyncTask.java b/core/src/main/java/org/apache/commons/vfs2/tasks/AbstractSyncTask.java
index 84d7155b..04cc4407 100644
--- a/core/src/main/java/org/apache/commons/vfs2/tasks/AbstractSyncTask.java
+++ b/core/src/main/java/org/apache/commons/vfs2/tasks/AbstractSyncTask.java
@@ -40,13 +40,13 @@ import org.apache.tools.ant.Project;
  * <li>Up-to-date destination file.
  * </ul>
  *
- * @todo Deal with case where dest file maps to a child of one of the source files
- * @todo Deal with case where dest file already exists and is incorrect type (not file, not a folder)
- * @todo Use visitors
- * @todo Add default excludes
- * @todo Allow selector, mapper, filters, etc to be specified.
- * @todo Handle source/dest directories as well
- * @todo Allow selector to be specified for choosing which dest files to sync
+ * TODO - Deal with case where dest file maps to a child of one of the source files.<br>
+ * TODO - Deal with case where dest file already exists and is incorrect type (not file, not a folder).<br>
+ * TODO - Use visitors.<br>
+ * TODO - Add default excludes.<br>
+ * TOOD - Allow selector, mapper, filters, etc to be specified.<br>
+ * TODO - Handle source/dest directories as well.<br>
+ * TODO - Allow selector to be specified for choosing which dest files to sync.
  */
 public abstract class AbstractSyncTask
     extends VfsTask
diff --git a/core/src/main/java/org/apache/commons/vfs2/tasks/CopyTask.java b/core/src/main/java/org/apache/commons/vfs2/tasks/CopyTask.java
index 7fc5902e..82051957 100644
--- a/core/src/main/java/org/apache/commons/vfs2/tasks/CopyTask.java
+++ b/core/src/main/java/org/apache/commons/vfs2/tasks/CopyTask.java
@@ -23,8 +23,8 @@ import org.apache.commons.vfs2.Selectors;
 
 /**
  * An Ant task that copies matching files.
- *
- * @todo Copy folders that do not contain files
+ * <p>
+ * TODO - Copy folders that do not contain files.
  */
 public class CopyTask
     extends AbstractSyncTask
diff --git a/core/src/main/java/org/apache/commons/vfs2/tasks/DeleteTask.java b/core/src/main/java/org/apache/commons/vfs2/tasks/DeleteTask.java
index cb98599f..1483f43f 100644
--- a/core/src/main/java/org/apache/commons/vfs2/tasks/DeleteTask.java
+++ b/core/src/main/java/org/apache/commons/vfs2/tasks/DeleteTask.java
@@ -24,8 +24,8 @@ import org.apache.tools.ant.BuildException;
 
 /**
  * An Ant task that deletes matching files.
- *
- * @todo Allow selector to be specified.
+ * <p>
+ * TOOD - Allow selector to be specified.
  */
 public class DeleteTask
     extends VfsTask
diff --git a/core/src/main/java/org/apache/commons/vfs2/tasks/MoveTask.java b/core/src/main/java/org/apache/commons/vfs2/tasks/MoveTask.java
index e8fd9434..36338e35 100644
--- a/core/src/main/java/org/apache/commons/vfs2/tasks/MoveTask.java
+++ b/core/src/main/java/org/apache/commons/vfs2/tasks/MoveTask.java
@@ -23,8 +23,8 @@ import org.apache.commons.vfs2.Selectors;
 
 /**
  * An Ant task that moves matching files.
- *
- * @todo Delete matching folders
+ * <p>
+ * TODO - Delete matching folders.
  */
 public class MoveTask
     extends CopyTask
diff --git a/core/src/main/java/org/apache/commons/vfs2/util/MonitorOutputStream.java b/core/src/main/java/org/apache/commons/vfs2/util/MonitorOutputStream.java
index a8581184..acb6e552 100644
--- a/core/src/main/java/org/apache/commons/vfs2/util/MonitorOutputStream.java
+++ b/core/src/main/java/org/apache/commons/vfs2/util/MonitorOutputStream.java
@@ -127,9 +127,11 @@ public class MonitorOutputStream
     }
 
     /**
-     * check if file is still open. <br />
+     * Check if file is still open.
+     * <p>
      * This is a workaround for an oddity with Java's BufferedOutputStream where you can write to
-     * even if the stream has been closed
+     * even if the stream has been closed.
+     *
      * @throws FileSystemException if an error occurs.
      * @since 2.0
      */
@@ -142,7 +144,10 @@ public class MonitorOutputStream
     }
 
     /**
-     * Called after this stream is closed.  This implementation does nothing.
+     * Called after this stream is closed.
+     * <p>
+     * This implementation does nothing.
+     *
      * @throws IOException if an error occurs.
      */
     // IOException is needed because subclasses may need to throw it
diff --git a/core/src/main/java/org/apache/commons/vfs2/util/WeakRefFileListener.java b/core/src/main/java/org/apache/commons/vfs2/util/WeakRefFileListener.java
index cb676aa2..73aa6b55 100644
--- a/core/src/main/java/org/apache/commons/vfs2/util/WeakRefFileListener.java
+++ b/core/src/main/java/org/apache/commons/vfs2/util/WeakRefFileListener.java
@@ -105,8 +105,9 @@ public class WeakRefFileListener implements FileListener
 
     /**
      * Called when a file is changed.
-     * <p/>
+     * <p>
      * This will only happen if you monitor the file using {@link org.apache.commons.vfs2.FileMonitor}.
+     *
      * @param event The FileChangeEvent.
      * @throws Exception if an error occurs.
      */
diff --git a/core/src/test/java/org/apache/commons/vfs2/provider/local/test/ConversionTestCase.java b/core/src/test/java/org/apache/commons/vfs2/provider/local/test/ConversionTestCase.java
index 3decaaf5..780e7860 100644
--- a/core/src/test/java/org/apache/commons/vfs2/provider/local/test/ConversionTestCase.java
+++ b/core/src/test/java/org/apache/commons/vfs2/provider/local/test/ConversionTestCase.java
@@ -33,10 +33,8 @@ import org.junit.Test;
 
 /**
  * Tests conversion from VFS to File.
- * <p/>
+ * <p>
  * VFS-443 Need an easy way to convert from a FileObject to a File.
- *
- * @version $Id$
  */
 public class ConversionTestCase
 {
diff --git a/core/src/test/java/org/apache/commons/vfs2/test/AbstractProviderTestCase.java b/core/src/test/java/org/apache/commons/vfs2/test/AbstractProviderTestCase.java
index 568a1f6d..7a38010f 100644
--- a/core/src/test/java/org/apache/commons/vfs2/test/AbstractProviderTestCase.java
+++ b/core/src/test/java/org/apache/commons/vfs2/test/AbstractProviderTestCase.java
@@ -41,7 +41,7 @@ import org.apache.commons.vfs2.provider.local.DefaultLocalFileProvider;
 /**
  * File system test cases, which verifies the structure and naming
  * functionality.
- * <p/>
+ * <p>
  * Works from a base folder, and assumes a particular structure under
  * that base folder.
  */
@@ -171,8 +171,8 @@ public abstract class AbstractProviderTestCase
      * tests are not run if the provider being tested does not support all
      * the required capabilities.  Return null or an empty array to always
      * run the tests.
-     * <p/>
-     * <p>This implementation returns null.
+     * <p>
+     * This implementation returns null.
      */
     protected Capability[] getRequiredCaps()
     {
@@ -183,9 +183,9 @@ public abstract class AbstractProviderTestCase
      * Runs the test.  This implementation short-circuits the test if the
      * provider being tested does not have the capabilities required by this
      * test.
-     *
-     * @todo Handle negative caps as well - ie, only run a test if the provider does not have certain caps.
-     * @todo Figure out how to remove the test from the TestResult if the test is skipped.
+     * <p>
+     * TODO - Handle negative caps as well - ie, only run a test if the provider does not have certain caps.<br>
+     * TODO - Figure out how to remove the test from the TestResult if the test is skipped.
      */
     @Override
     protected void runTest() throws Throwable
diff --git a/core/src/test/java/org/apache/commons/vfs2/test/NamingTests.java b/core/src/test/java/org/apache/commons/vfs2/test/NamingTests.java
index 102446d2..9d90d45e 100644
--- a/core/src/test/java/org/apache/commons/vfs2/test/NamingTests.java
+++ b/core/src/test/java/org/apache/commons/vfs2/test/NamingTests.java
@@ -23,8 +23,8 @@ import org.apache.commons.vfs2.NameScope;
 
 /**
  * Test cases for file naming.
- *
- * @todo Add tests for all FileName methods
+ * <p>
+ * TODO - Add tests for all FileName methods.
  */
 public class NamingTests
     extends AbstractProviderTestCase
diff --git a/core/src/test/java/org/apache/commons/vfs2/test/ProviderReadTests.java b/core/src/test/java/org/apache/commons/vfs2/test/ProviderReadTests.java
index 46110d52..d16579b5 100644
--- a/core/src/test/java/org/apache/commons/vfs2/test/ProviderReadTests.java
+++ b/core/src/test/java/org/apache/commons/vfs2/test/ProviderReadTests.java
@@ -33,8 +33,8 @@ import org.junit.Assert;
 
 /**
  * Read-only test cases for file providers.
- *
- * @todo Test getLastModified(), getAttribute()
+ * <p>
+ * TODO - Test getLastModified(), getAttribute().
  */
 public class ProviderReadTests extends AbstractProviderTestCase
 {
diff --git a/core/src/test/java/org/apache/commons/vfs2/test/UrlTests.java b/core/src/test/java/org/apache/commons/vfs2/test/UrlTests.java
index bc33e9a6..85175b16 100644
--- a/core/src/test/java/org/apache/commons/vfs2/test/UrlTests.java
+++ b/core/src/test/java/org/apache/commons/vfs2/test/UrlTests.java
@@ -35,8 +35,6 @@ public class UrlTests
      * tests are not run if the provider being tested does not support all
      * the required capabilities.  Return null or an empty array to always
      * run the tests.
-     * <p/>
-     * <p>This implementation returns null.
      */
     @Override
     protected Capability[] getRequiredCaps()
diff --git a/sandbox/src/main/java/org/apache/commons/vfs2/provider/mime/MimeFileObject.java b/sandbox/src/main/java/org/apache/commons/vfs2/provider/mime/MimeFileObject.java
index 2f831ee7..51af46ed 100644
--- a/sandbox/src/main/java/org/apache/commons/vfs2/provider/mime/MimeFileObject.java
+++ b/sandbox/src/main/java/org/apache/commons/vfs2/provider/mime/MimeFileObject.java
@@ -275,12 +275,12 @@ public class MimeFileObject
     }
 
     /**
-     * Returns all headers of this part.<br />
-     * The map key is a java.lang.String and the value is a:<br />
+     * Returns all headers of this part.
+     * <p>
+     * The map key is a java.lang.String and the value is a:
      * <ul>
-     * <li>java.lang.Strings for single entries</li>
-     * or a
-     * <li>java.utils.List of java.lang.Strings for entries with multiple values</li>
+     * <li>{@code java.lang.Strings} for single entries or a</li>
+     * <li>{@code java.utils.List<java.lang.Strings>} for entries with multiple values</li>
      * </ul>
      */
     @Override
