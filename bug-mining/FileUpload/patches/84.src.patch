diff --git a/commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/DiskFileItem.java b/commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/DiskFileItem.java
index 565becae..db1aed2f 100644
--- a/commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/DiskFileItem.java
+++ b/commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/DiskFileItem.java
@@ -114,6 +114,50 @@ public final class DiskFileItem implements FileItem<DiskFileItem> {
             }
             return diskFileItem;
         }
+
+        /** The threshold. We do maintain this separate from the {@link #getBufferSize()},
+         * because the parent class might change the value in {@link #setBufferSize(int)}.
+         */
+        private int threshold;
+
+        /** Sets the threshold. The uploaded data is typically kept in memory, until
+         * a certain number of bytes (the threshold) is reached. At this point, the
+         * incoming data is transferred to a temporary file, and the in-memory data
+         * is removed.
+         * @param threshold The threshold, which is being used.
+         * @return This builder.
+         */
+        public Builder setThreshold(final int threshold) {
+            this.threshold = threshold;
+            return this;
+        }
+
+        /** Returns the threshold.
+         * @return The threshold.
+         */
+        public int getThreshold() {
+            return threshold;
+        }
+
+        /** Eqivalent to {@link #setThreshold(int)}.
+         * @param bufferSize The threshold, which is being used.
+         * @see #setThreshold(int)
+         * @return This builder.
+         * @deprecated Since 2.0.0, use {@link #setThreshold(int)} instead.
+         */
+        @Override
+        public Builder setBufferSize(final int bufferSize) {
+            return setThreshold(bufferSize);
+        }
+
+        /** Equivalent to {@link #getThreshold()}.
+         * @return The threshold, which is being used.
+         * @see #getThreshold()
+         * @deprecated Since 2.0.0, use {@link #getThreshold()} instead.
+         */
+        public int getBufferSize() {
+            return getThreshold();
+        }
     }
 
     /**
@@ -653,4 +697,11 @@ public final class DiskFileItem implements FileItem<DiskFileItem> {
         }
         return this;
     }
+
+    /** Returns the file items threshold.
+     * @return The threshold.
+     */
+    public int getThreshold() {
+        return threshold;
+    }
 }
diff --git a/commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/DiskFileItemFactory.java b/commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/DiskFileItemFactory.java
index 2df172e7..e2dea3aa 100644
--- a/commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/DiskFileItemFactory.java
+++ b/commons-fileupload2-core/src/main/java/org/apache/commons/fileupload2/core/DiskFileItemFactory.java
@@ -118,6 +118,49 @@ public final class DiskFileItemFactory implements FileItemFactory<DiskFileItem>
             return this;
         }
 
+        /** The threshold. We do maintain this separate from the {@link #getBufferSize()},
+         * because the parent class might change the value in {@link #setBufferSize(int)}.
+         */
+        private int threshold;
+
+        /** Sets the threshold. The uploaded data is typically kept in memory, until
+         * a certain number of bytes (the threshold) is reached. At this point, the
+         * incoming data is transferred to a temporary file, and the in-memory data
+         * is removed.
+         * @param threshold The threshold, which is being used.
+         * @return This builder.
+         */
+        public Builder setThreshold(final int threshold) {
+            this.threshold = threshold;
+            return this;
+        }
+
+        /** Returns the threshold.
+         * @return The threshold.
+         */
+        public int getThreshold() {
+            return threshold;
+        }
+
+        /** Eqivalent to {@link #setThreshold(int)}.
+         * @param bufferSize The threshold, which is being used.
+         * @see #setThreshold(int)
+         * @return This builder.
+         * @deprecated Since 2.0.0, use {@link #setThreshold(int)} instead.
+         */
+        @Override
+        public Builder setBufferSize(final int bufferSize) {
+            return setThreshold(bufferSize);
+        }
+
+        /** Equivalent to {@link #getThreshold()}.
+         * @return The threshold, which is being used.
+         * @see #getThreshold()
+         * @deprecated Since 2.0.0, use {@link #getThreshold()} instead.
+         */
+        public int getBufferSize() {
+            return getThreshold();
+        }
     }
 
     /**
@@ -177,7 +220,7 @@ public final class DiskFileItemFactory implements FileItemFactory<DiskFileItem>
     public DiskFileItem.Builder fileItemBuilder() {
         // @formatter:off
         return DiskFileItem.builder()
-                .setBufferSize(threshold)
+                .setThreshold(threshold)
                 .setCharset(charsetDefault)
                 .setFileCleaningTracker(fileCleaningTracker)
                 .setPath(repository);
diff --git a/commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/DiskFileItemTest.java b/commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/DiskFileItemTest.java
index ba99db57..064146a3 100644
--- a/commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/DiskFileItemTest.java
+++ b/commons-fileupload2-core/src/test/java/org/apache/commons/fileupload2/core/DiskFileItemTest.java
@@ -16,10 +16,25 @@
  */
 package org.apache.commons.fileupload2.core;
 
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertSame;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.UncheckedIOException;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.function.Consumer;
+import java.util.function.IntConsumer;
+
+import org.apache.commons.fileupload2.core.DeferrableOutputStream.State;
 import org.apache.commons.fileupload2.core.FileItemFactory.AbstractFileItemBuilder;
 import org.junit.jupiter.api.Test;
 
@@ -27,7 +42,6 @@ import org.junit.jupiter.api.Test;
  * Tests for {@link DiskFileItem}.
  */
 class DiskFileItemTest {
-
     @Test
     void testBuilderHeaders() {
         final var builder = DiskFileItem.builder();
@@ -42,11 +56,152 @@ class DiskFileItemTest {
         assertSame(fileItemHeaders, fileItem.getHeaders());
     }
 
-    /**
-     * Tests FILEUPLOAD-352 NullPointerException in DiskFileItem#toString
+    /** Test for <a href="https://issues.apache.org/jira/browse/FILEUPLOAD-295">FILEUPLOAD-29</a>:
+     * A {@link #DiskFileItem} with threshold -1 must always create a (possibly empty) file.
+     */
+    @Test
+    void testStateModelWithThresholdMinusOne() {
+        final Consumer<String> tester = (ts) -> {
+            try {
+                final Path testDir = Paths.get("target/unit-tests/" + DiskFileItemTest.class.getSimpleName());
+                Files.createDirectories(testDir);
+                final Path tempTestDir = Files.createTempDirectory(testDir, "testDir");
+                final DiskFileItemFactory dfif = DiskFileItemFactory.builder()
+                        .setBufferSize(-1)
+                        .setPath(tempTestDir)
+                        .setCharset(StandardCharsets.UTF_8)
+                        .get();
+                // Make sure, that the threshold has not been tampered with.
+                assertEquals(-1, dfif.getThreshold());
+                final DiskFileItem dfi = dfif.fileItemBuilder()
+                        .get();
+                // Make sure, that the threshold has not been tampered with.
+                assertEquals(-1, dfi.getThreshold());
+                // We haven't written any data. Yet, the output file already exists (threshold=-1)
+                assertState(dfi, State.persisted, false, tempTestDir, null);
+                try (OutputStream out = dfi.getOutputStream()) {
+                    out.write(ts.getBytes());
+                }
+                // After writing some data, the output file does still exist, except that the size has changed.
+                assertState(dfi, State.closed, false, tempTestDir, ts);
+            } catch (IOException ioe) {
+                throw new UncheckedIOException(ioe);
+            }
+        };
+        tester.accept("abcdef");
+        tester.accept("aAbBcCdDeEfF012345");
+    }
+
+    /** Test for <a href="https://issues.apache.org/jira/browse/FILEUPLOAD-295">FILEUPLOAD-29</a>:
+     * A {@link #DiskFileItem} with threshold 0 must always create a file, as soon as data comes in.
      */
     @Test
-    void testToStringDefault() {
-        new DiskFileItem.Builder().get().toString();
+    void testStateModelWithThresholdZero() {
+        final IntConsumer tester = (numBytes) -> {
+            try {
+                final Path testDir = Paths.get("target/unit-tests/" + DiskFileItemTest.class.getSimpleName());
+                Files.createDirectories(testDir);
+                final Path tempTestDir = Files.createTempDirectory(testDir, "testDir");
+                final DiskFileItemFactory dfif = DiskFileItemFactory.builder()
+                        .setBufferSize(0)
+                        .setPath(tempTestDir)
+                        .setCharset(StandardCharsets.UTF_8)
+                        .get();
+                assertEquals(0, dfif.getThreshold());
+                final DiskFileItem dfi = dfif.fileItemBuilder()
+                        .get();
+                // Make sure, that the threshold has not been tampered with.
+                assertEquals(0, dfi.getThreshold());
+                // We haven't written any data. So, the output file is null.
+                assertState(dfi, State.initialized, true, null, null);
+                // Write some data.
+                final StringBuilder sb = new StringBuilder();
+                try (OutputStream os = dfi.getOutputStream()) {
+                	for (int i = 0;  i < numBytes;  i++) {
+                		os.write('.');
+                		sb.append('.');
+                		assertState(dfi, State.persisted, false, tempTestDir, null);
+                	}
+            		os.write(',');
+            		sb.append(',');
+                }
+                // The output stream is closed now, so the state has changed again.
+                assertState(dfi, State.closed, false, tempTestDir, sb.toString());
+            } catch (IOException ioe) {
+                throw new UncheckedIOException(ioe);
+            }
+        };
+        tester.accept(5);
+        tester.accept(8193); // Typical buffer size +1
+    }
+
+    /** Test for <a href="https://issues.apache.org/jira/browse/FILEUPLOAD-295">FILEUPLOAD-29</a>:
+     * A {@link #DiskFileItem} with threshold 0 must always create a file, as soon as data comes in.
+     */
+    @Test
+    void testStateModelWithPositiveThreshold() {
+        final IntConsumer tester = (numBytes) -> {
+            try {
+                final Path testDir = Paths.get("target/unit-tests/" + DiskFileItemTest.class.getSimpleName());
+                Files.createDirectories(testDir);
+                final Path tempTestDir = Files.createTempDirectory(testDir, "testDir");
+                final DiskFileItemFactory dfif = DiskFileItemFactory.builder()
+                        .setThreshold(numBytes)
+                        .setPath(tempTestDir)
+                        .setCharset(StandardCharsets.UTF_8)
+                        .get();
+                assertEquals(numBytes, dfif.getThreshold());
+                final DiskFileItem dfi = dfif.fileItemBuilder()
+                        .get();
+                // Make sure, that the threshold has not been tampered with.
+                assertEquals(numBytes, dfi.getThreshold());
+                // We haven't written any data. So, the output file is null.
+                assertState(dfi, State.initialized, true, null, null);
+                // Write some data.
+                final StringBuilder sb = new StringBuilder();
+                try (OutputStream os = dfi.getOutputStream()) {
+                	for (int i = 0;  i < numBytes-1;  i++) {
+                		os.write('.');
+                		sb.append('.');
+                		assertState(dfi, State.opened, true, null, null);
+                	}
+                	/** Write another byte. This should hit the threshold,
+                	 * thus trigger persisting the in memory data.
+                	 */
+            		os.write(',');
+            		sb.append(',');
+                    assertState(dfi, State.persisted, false, tempTestDir, null);
+                }
+                // The output stream is closed now, so the state has changed again.
+                assertState(dfi, State.closed, false, tempTestDir, sb.toString());
+            } catch (IOException ioe) {
+                throw new UncheckedIOException(ioe);
+            }
+        };
+        tester.accept(5);
+        tester.accept(8193); // Typical buffer size +1
+    }
+
+    @SuppressWarnings("deprecation")
+    protected void assertState(final DiskFileItem dfi, final State state, final boolean inMemory, final Path parentDir, String testString) throws IOException {
+        final DeferrableOutputStream dos = (DeferrableOutputStream) dfi.getOutputStream();
+        assertEquals(state, dos.getState());
+        assertEquals(inMemory, dfi.isInMemory());
+        assertEquals(inMemory, dos.isInMemory());
+        if (parentDir == null) {
+            assertNull(dos.getPath());
+        } else {
+            assertNotNull(dos.getPath());
+            assertEquals(parentDir, dos.getPath().getParent());
+        }
+        if (testString != null) {
+            assertEquals(testString.length(), dfi.getSize());
+            assertEquals(testString.length(), dos.getSize());
+            assertEquals(testString, dfi.getString());
+            assertArrayEquals(testString.getBytes(), dfi.get());
+        } else {
+            assertNull(dfi.get());
+            assertNull(dfi.getString());
+        }
     }
-}
+}
\ No newline at end of file
