diff --git a/tika-server/src/main/java/org/apache/tika/server/resource/LanguageResource.java b/tika-server/src/main/java/org/apache/tika/server/resource/LanguageResource.java
new file mode 100644
index 000000000..d9d5741a9
--- /dev/null
+++ b/tika-server/src/main/java/org/apache/tika/server/resource/LanguageResource.java
@@ -0,0 +1,83 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.tika.server.resource;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.POST;
+import javax.ws.rs.PUT;
+import javax.ws.rs.Path;
+import javax.ws.rs.Produces;
+
+import org.apache.commons.io.IOUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.tika.config.TikaConfig;
+import org.apache.tika.language.LanguageIdentifier;
+import org.apache.tika.language.LanguageProfile;
+
+import com.google.common.base.Charsets;
+
+@Path("/language")
+public class LanguageResource {
+
+	private static final Log logger = LogFactory.getLog(LanguageResource.class
+			.getName());
+
+	private TikaConfig config;
+
+	public LanguageResource(TikaConfig config) {
+		this.config = config;
+	}
+
+	@PUT
+	@POST
+	@Path("/stream")
+	@Consumes("*/*")
+	@Produces("text/plain")
+	public String detect(final InputStream is) throws IOException {
+		// comme çi comme ça
+		// this is English!
+		String fileTxt = IOUtils.toString(is, Charsets.UTF_8);
+		logger.debug("File: " + fileTxt);
+		LanguageIdentifier lang = new LanguageIdentifier(new LanguageProfile(
+				fileTxt));
+		String detectedLang = lang.getLanguage();
+		logger.info("Detecting language for incoming resource: ["
+				+ detectedLang + "]");
+		return detectedLang;
+	}
+
+	@PUT
+	@POST
+	@Path("/string")
+	@Consumes("*/*")
+	@Produces("text/plain")
+	public String detect(final String string) throws IOException {
+		logger.debug("String: " + string);
+		LanguageIdentifier lang = new LanguageIdentifier(new LanguageProfile(
+				string));
+		String detectedLang = lang.getLanguage();
+		logger.info("Detecting language for incoming resource: ["
+				+ detectedLang + "]");
+		return detectedLang;
+	}
+
+}
diff --git a/tika-server/src/test/java/org/apache/tika/server/LanguageResourceTest.java b/tika-server/src/test/java/org/apache/tika/server/LanguageResourceTest.java
new file mode 100644
index 000000000..81f69253d
--- /dev/null
+++ b/tika-server/src/test/java/org/apache/tika/server/LanguageResourceTest.java
@@ -0,0 +1,109 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.tika.server;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
+import javax.ws.rs.core.Response;
+
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
+import org.apache.cxf.jaxrs.client.WebClient;
+import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;
+import org.apache.tika.server.resource.LanguageResource;
+import org.apache.tika.server.writer.TarWriter;
+import org.apache.tika.server.writer.ZipWriter;
+import org.junit.Test;
+
+public class LanguageResourceTest extends CXFTestBase {
+
+	private static final String LANG_PATH = "/language";
+	private static final String LANG_STREAM_PATH = LANG_PATH + "/stream";
+	private static final String LANG_STRING_PATH = LANG_PATH + "/string";
+	private static final String ENGLISH_STRING = "This is English!";
+	private static final String FRENCH_STRING = "comme çi comme ça";
+
+	@Override
+	protected void setUpResources(JAXRSServerFactoryBean sf) {
+		sf.setResourceClasses(LanguageResource.class);
+		sf.setResourceProvider(LanguageResource.class,
+				new SingletonResourceProvider(new LanguageResource(tika)));
+
+	}
+
+	@Override
+	protected void setUpProviders(JAXRSServerFactoryBean sf) {
+		List<Object> providers = new ArrayList<Object>();
+		providers.add(new TarWriter());
+		providers.add(new ZipWriter());
+		providers.add(new TikaServerParseExceptionMapper(false));
+		sf.setProviders(providers);
+
+	}
+
+	@Test
+	public void testDetectEnglishString() throws Exception {
+		String url = endPoint + LANG_STRING_PATH;
+		Response response = WebClient.create(url).type("text/plain")
+				.accept("text/plain").put(ENGLISH_STRING);
+		assertNotNull(response);
+		String readLang = getStringFromInputStream((InputStream) response
+				.getEntity());
+		assertEquals("en", readLang);
+	}
+
+	@Test
+	public void testDetectFrenchString() throws Exception {
+		String url = endPoint + LANG_STRING_PATH;
+		Response response = WebClient.create(url).type("text/plain")
+				.accept("text/plain").put(FRENCH_STRING);
+		assertNotNull(response);
+		String readLang = getStringFromInputStream((InputStream) response
+				.getEntity());
+		assertEquals("fr", readLang);
+	}
+
+	@Test
+	public void testDetectEnglishFile() throws Exception {
+		String url = endPoint + LANG_STREAM_PATH;
+		Response response = WebClient.create(url).type("text/plain")
+				.accept("text/plain")
+				.put(ClassLoader.getSystemResourceAsStream("english.txt"));
+		assertNotNull(response);
+		String readLang = getStringFromInputStream((InputStream) response
+				.getEntity());
+		assertEquals("en", readLang);
+	}
+
+	@Test
+	public void testDetectFrenchFile() throws Exception {
+		String url = endPoint + LANG_STREAM_PATH;
+		Response response = WebClient.create(url).type("text/plain")
+				.accept("text/plain")
+				.put(ClassLoader.getSystemResourceAsStream("french.txt"));
+		assertNotNull(response);
+		String readLang = getStringFromInputStream((InputStream) response
+				.getEntity());
+		assertEquals("fr", readLang);
+	}
+
+}
diff --git a/tika-server/src/test/resources/english.txt b/tika-server/src/test/resources/english.txt
new file mode 100644
index 000000000..5e3d20e3f
--- /dev/null
+++ b/tika-server/src/test/resources/english.txt
@@ -0,0 +1 @@
+This is English!
diff --git a/tika-server/src/test/resources/french.txt b/tika-server/src/test/resources/french.txt
new file mode 100644
index 000000000..b1312d011
--- /dev/null
+++ b/tika-server/src/test/resources/french.txt
@@ -0,0 +1 @@
+comme çi comme ça
