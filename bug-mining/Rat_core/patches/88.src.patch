diff --git a/apache-rat-core/src/it/resources/ReportTest/RAT_335/expected-message.txt b/apache-rat-core/src/it/resources/ReportTest/RAT_335/expected-message.txt
new file mode 100644
index 00000000..bea4ba54
--- /dev/null
+++ b/apache-rat-core/src/it/resources/ReportTest/RAT_335/expected-message.txt
@@ -0,0 +1 @@
+Issues with UNAPPROVED
diff --git a/apache-rat-core/src/it/resources/ReportTest/RAT_335/ignore.txt b/apache-rat-core/src/it/resources/ReportTest/RAT_335/ignore.txt
new file mode 100644
index 00000000..df056a6f
--- /dev/null
+++ b/apache-rat-core/src/it/resources/ReportTest/RAT_335/ignore.txt
@@ -0,0 +1,7 @@
+--output-style
+xml
+--input-exclude
+**/.gitignore
+--input-exclude-parsed-scm
+GIT
+--
diff --git a/apache-rat-core/src/it/resources/ReportTest/RAT_335/pom.xml b/apache-rat-core/src/it/resources/ReportTest/RAT_335/pom.xml
new file mode 100644
index 00000000..971cc544
--- /dev/null
+++ b/apache-rat-core/src/it/resources/ReportTest/RAT_335/pom.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>org.apache.rat.test</groupId>
+  <artifactId>RAT-335</artifactId>
+  <version>1.0</version>
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.rat</groupId>
+        <artifactId>apache-rat-plugin</artifactId>
+        <version>@pom.version@</version>
+        <configuration>
+          <outputStyle>xml</outputStyle>
+          <!-- Minimize the number of active rules to keep the test minimal -->
+          <excludes>
+            <exclude>**/.gitignore</exclude>
+          </excludes>
+          <useDefaultExcludes>false</useDefaultExcludes>
+          <useMavenDefaultExcludes>false</useMavenDefaultExcludes>
+          <useEclipseDefaultExcludes>false</useEclipseDefaultExcludes>
+          <useIdeaDefaultExcludes>false</useIdeaDefaultExcludes>
+          <parseSCMIgnoresAsExcludes>true</parseSCMIgnoresAsExcludes>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+</project>
diff --git a/apache-rat-core/src/it/resources/ReportTest/RAT_335/src/README.txt b/apache-rat-core/src/it/resources/ReportTest/RAT_335/src/README.txt
new file mode 100644
index 00000000..8681fb58
--- /dev/null
+++ b/apache-rat-core/src/it/resources/ReportTest/RAT_335/src/README.txt
@@ -0,0 +1,12 @@
+Note the output when running in the real commandline version of git
+
+# Files that must be ignored (dropping the gitignore matches outside of this test tree)
+$ git check-ignore --no-index --verbose $(find . -type f|sort) | fgrep 'apache-rat-plugin/src/test/resources/unit/RAT-335-GitIgnore/'
+
+apache-rat-plugin/src/test/resources/unit/RAT-335-GitIgnore/dir1/.gitignore:2:!dir1.md  ./dir1/dir1.md
+apache-rat-plugin/src/test/resources/unit/RAT-335-GitIgnore/dir1/.gitignore:1:*.txt     ./dir1/dir1.txt
+apache-rat-plugin/src/test/resources/unit/RAT-335-GitIgnore/dir1/.gitignore:3:file1.log ./dir1/file1.log
+apache-rat-plugin/src/test/resources/unit/RAT-335-GitIgnore/.gitignore:1:*.md   ./dir2/dir2.md
+apache-rat-plugin/src/test/resources/unit/RAT-335-GitIgnore/.gitignore:4:*.log  ./dir3/dir3.log
+apache-rat-plugin/src/test/resources/unit/RAT-335-GitIgnore/.gitignore:7:!file*.log     ./dir3/file3.log
+apache-rat-plugin/src/test/resources/unit/RAT-335-GitIgnore/.gitignore:1:*.md   ./root.md
diff --git a/apache-rat-core/src/it/resources/ReportTest/RAT_335/src/dir1/dir1.md b/apache-rat-core/src/it/resources/ReportTest/RAT_335/src/dir1/dir1.md
new file mode 100644
index 00000000..a31cbc89
--- /dev/null
+++ b/apache-rat-core/src/it/resources/ReportTest/RAT_335/src/dir1/dir1.md
@@ -0,0 +1 @@
+File without a valid license
diff --git a/apache-rat-core/src/it/resources/ReportTest/RAT_335/src/dir2/dir2.txt b/apache-rat-core/src/it/resources/ReportTest/RAT_335/src/dir2/dir2.txt
new file mode 100644
index 00000000..a31cbc89
--- /dev/null
+++ b/apache-rat-core/src/it/resources/ReportTest/RAT_335/src/dir2/dir2.txt
@@ -0,0 +1 @@
+File without a valid license
diff --git a/apache-rat-core/src/it/resources/ReportTest/RAT_335/src/dir3/file3.log b/apache-rat-core/src/it/resources/ReportTest/RAT_335/src/dir3/file3.log
new file mode 100644
index 00000000..a31cbc89
--- /dev/null
+++ b/apache-rat-core/src/it/resources/ReportTest/RAT_335/src/dir3/file3.log
@@ -0,0 +1 @@
+File without a valid license
diff --git a/apache-rat-core/src/it/resources/ReportTest/RAT_335/src/invoker.properties b/apache-rat-core/src/it/resources/ReportTest/RAT_335/src/invoker.properties
new file mode 100644
index 00000000..6e8c3479
--- /dev/null
+++ b/apache-rat-core/src/it/resources/ReportTest/RAT_335/src/invoker.properties
@@ -0,0 +1,16 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+invoker.goals = clean apache-rat:check
diff --git a/apache-rat-core/src/it/resources/ReportTest/RAT_335/verify.groovy b/apache-rat-core/src/it/resources/ReportTest/RAT_335/verify.groovy
new file mode 100644
index 00000000..bf0f8fc3
--- /dev/null
+++ b/apache-rat-core/src/it/resources/ReportTest/RAT_335/verify.groovy
@@ -0,0 +1,130 @@
+package ReportTest.RAT_33
+5
+
+import org.apache.rat.report.claim.ClaimStatistic
+import org.apache.rat.testhelpers.XmlUtils
+import org.w3c.dom.Document
+import org.w3c.dom.NamedNodeMap
+import org.w3c.dom.NodeList
+
+import javax.xml.xpath.XPath
+import javax.xml.xpath.XPathFactory
+
+import static org.assertj.core.api.Assertions.assertThat
+
+private static Map<String, String> mapOf(String... parts) {
+    Map<String, String> map = new HashMap<>();
+    for (int i=0; i<parts.length; i+=2) {
+        map.put(parts[i], parts[i+1]);
+    }
+    return map;
+}
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+output = new File(args[0])
+content = output.text
+
+//Map<ClaimStatistic.Counter, String> data = new HashMap<>();
+//data.put(ClaimStatistic.Counter.APPROVED, "2");
+//data.put(ClaimStatistic.Counter.ARCHIVES, "0");
+//data.put(ClaimStatistic.Counter.BINARIES, "0");
+//data.put(ClaimStatistic.Counter.DOCUMENT_TYPES, "3");
+//data.put(ClaimStatistic.Counter.IGNORED, "6");
+//data.put(ClaimStatistic.Counter.LICENSE_CATEGORIES, "2");
+//data.put(ClaimStatistic.Counter.LICENSE_NAMES, "2");
+//data.put(ClaimStatistic.Counter.NOTICES, "1");
+//data.put(ClaimStatistic.Counter.STANDARDS, "6");
+//data.put(ClaimStatistic.Counter.UNAPPROVED, "4");
+//data.put(ClaimStatistic.Counter.UNKNOWN, "4");
+
+
+Document document = XmlUtils.toDom(new FileInputStream(args[0]));
+XPath xPath = XPathFactory.newInstance().newXPath();
+
+//for (ClaimStatistic.Counter counter : ClaimStatistic.Counter.values()) {
+//    String xpath = String.format("/rat-report/statistics/statistic[@name='%s']", counter.displayName());
+//    Map<String, String> map = mapOf("approval",
+//            counter == ClaimStatistic.Counter.UNAPPROVED ? "false" : "true",
+//            "count", data.get(counter),
+//            "description", counter.getDescription());
+//    XmlUtils.assertAttributes(document, xPath, xpath, map);
+//}
+
+//// license categories
+//XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/licenseCategory[@name='?????']",
+//        mapOf("count", "4" ));
+//
+//XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/licenseCategory[@name='AL   ']",
+//        mapOf("count", "2" ));
+//
+//// license names
+//XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/licenseName[@name='Apache License Version 2.0']",
+//        mapOf("count", "2" ));
+//
+//XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/licenseName[@name='Unknown license']",
+//        mapOf("count", "4" ));
+
+List<String> ignoredFiles = new ArrayList<>(Arrays.asList(
+        "/dir1/dir1.txt",
+        "/dir1/file1.log",
+        "/dir1/.gitignore",
+        "/dir2/dir2.md",
+        "/dir3/dir3.log",
+        "/.gitignore",
+        "/root.md"));
+
+NodeList nodeList = XmlUtils.getNodeList(document, xPath, "/rat-report/resource[@type='IGNORED']");
+for (int i=0;i< nodeList.getLength(); i++) {
+    NamedNodeMap attr = nodeList.item(i).getAttributes();
+    String s = attr.getNamedItem("name").getNodeValue();
+    assertThat(ignoredFiles).contains(s);
+    ignoredFiles.remove(s);
+}
+assertThat(ignoredFiles).isEmpty();
+
+
+// Document types
+XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/documentType[@name='IGNORED']",
+        mapOf("count", "6" ));
+
+XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/documentType[@name='NOTICE']",
+        mapOf("count", "1" ));
+
+XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/documentType[@name='STANDARD']",
+        mapOf("count", "6" ));
+
+
+/*
+
+TextUtils.assertPatternInTarget("^  Approved:\\s+8 ", content)
+TextUtils.assertPatternInTarget("^  Archives:\\s+1 ", content)
+TextUtils.assertPatternInTarget("^  Binaries:\\s+2 ", content)
+TextUtils.assertPatternInTarget("^  Document types:\\s+5 ", content)
+TextUtils.assertPatternInTarget("^  Ignored:\\s+1 ", content)
+TextUtils.assertPatternInTarget("^  License categories:\\s+4 ", content)
+TextUtils.assertPatternInTarget("^  License names:\\s+5", content)
+TextUtils.assertPatternInTarget("^  Notices:\\s+2 ", content)
+TextUtils.assertPatternInTarget("^  Standards:\\s+8 ", content)
+TextUtils.assertPatternInTarget("^  Unapproved:\\s+2 ", content)
+TextUtils.assertPatternInTarget("^  Unknown:\\s+2 ", content)
+
+logOutput = new File(args[1])
+log = logOutput.text
+
+TextUtils.assertPatternNotInTarget("^ERROR:", log)
+TextUtils.assertPatternNotInTarget("^WARN:", log)
+*/
diff --git a/apache-rat-core/src/main/java/org/apache/rat/commandline/Arg.java b/apache-rat-core/src/main/java/org/apache/rat/commandline/Arg.java
index fb103d40..6e053c47 100644
--- a/apache-rat-core/src/main/java/org/apache/rat/commandline/Arg.java
+++ b/apache-rat-core/src/main/java/org/apache/rat/commandline/Arg.java
@@ -945,7 +945,8 @@ public enum Arg {
             }
             return result;
         } catch (Throwable t) {
-            throw new ConfigurationException(format("'%s' converter for %s does not produce a class of tye %s", this, option, option.getType()));
+            throw new ConfigurationException(format("'%s' converter for %s '%s' does not produce a class of tye %s", this,
+                    option.getKey(), option.getConverter().getClass().getName(), option.getType()));
         }
     }
 
diff --git a/apache-rat-core/src/test/java/org/apache/rat/config/exclusion/fileProcessors/GitFileProcessorTest.java b/apache-rat-core/src/test/java/org/apache/rat/config/exclusion/fileProcessors/GitFileProcessorTest.java
index 383d14e1..bd791976 100644
--- a/apache-rat-core/src/test/java/org/apache/rat/config/exclusion/fileProcessors/GitFileProcessorTest.java
+++ b/apache-rat-core/src/test/java/org/apache/rat/config/exclusion/fileProcessors/GitFileProcessorTest.java
@@ -23,11 +23,14 @@ import java.util.Iterator;
 import java.util.stream.Stream;
 import org.apache.rat.document.DocumentName;
 import org.apache.rat.document.DocumentNameMatcher;
+import org.apache.rat.document.FileDocument;
 import org.apache.rat.utils.ExtendedIterator;
+import org.junit.Ignore;
 import org.junit.jupiter.api.Test;
 
 import java.io.File;
 import java.io.IOException;
+import java.net.URL;
 import java.util.Arrays;
 import java.util.List;
 import org.junit.jupiter.params.ParameterizedTest;
@@ -101,4 +104,16 @@ public class GitFileProcessorTest extends AbstractIgnoreProcessorTest {
 
         return lst.stream();
     }
+
+    @Test
+    @Ignore("RAT-335 ")
+    public void test_RAT_335() {
+        GitFileProcessor underTest = new GitFileProcessor();
+        URL url = GitFileProcessorTest.class.getClassLoader().getResource("RAT_355/src/");
+        File file = new File(url.getFile());
+
+        DocumentName documentName = DocumentName.builder(file).setBaseName(File.separator).build();
+        List<String> lst = underTest.apply(documentName);
+        System.out.println(lst);
+    }
 }
diff --git a/apache-rat-core/src/test/resources/RAT_355/commandLine.txt b/apache-rat-core/src/test/resources/RAT_355/commandLine.txt
new file mode 100644
index 00000000..df056a6f
--- /dev/null
+++ b/apache-rat-core/src/test/resources/RAT_355/commandLine.txt
@@ -0,0 +1,7 @@
+--output-style
+xml
+--input-exclude
+**/.gitignore
+--input-exclude-parsed-scm
+GIT
+--
diff --git a/apache-rat-core/src/test/resources/RAT_355/expected-message.txt b/apache-rat-core/src/test/resources/RAT_355/expected-message.txt
new file mode 100644
index 00000000..bea4ba54
--- /dev/null
+++ b/apache-rat-core/src/test/resources/RAT_355/expected-message.txt
@@ -0,0 +1 @@
+Issues with UNAPPROVED
diff --git a/apache-rat-core/src/test/resources/RAT_355/pom.xml b/apache-rat-core/src/test/resources/RAT_355/pom.xml
new file mode 100644
index 00000000..971cc544
--- /dev/null
+++ b/apache-rat-core/src/test/resources/RAT_355/pom.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>org.apache.rat.test</groupId>
+  <artifactId>RAT-335</artifactId>
+  <version>1.0</version>
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.rat</groupId>
+        <artifactId>apache-rat-plugin</artifactId>
+        <version>@pom.version@</version>
+        <configuration>
+          <outputStyle>xml</outputStyle>
+          <!-- Minimize the number of active rules to keep the test minimal -->
+          <excludes>
+            <exclude>**/.gitignore</exclude>
+          </excludes>
+          <useDefaultExcludes>false</useDefaultExcludes>
+          <useMavenDefaultExcludes>false</useMavenDefaultExcludes>
+          <useEclipseDefaultExcludes>false</useEclipseDefaultExcludes>
+          <useIdeaDefaultExcludes>false</useIdeaDefaultExcludes>
+          <parseSCMIgnoresAsExcludes>true</parseSCMIgnoresAsExcludes>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+</project>
diff --git a/apache-rat-core/src/test/resources/RAT_355/src/README.txt b/apache-rat-core/src/test/resources/RAT_355/src/README.txt
new file mode 100644
index 00000000..8681fb58
--- /dev/null
+++ b/apache-rat-core/src/test/resources/RAT_355/src/README.txt
@@ -0,0 +1,12 @@
+Note the output when running in the real commandline version of git
+
+# Files that must be ignored (dropping the gitignore matches outside of this test tree)
+$ git check-ignore --no-index --verbose $(find . -type f|sort) | fgrep 'apache-rat-plugin/src/test/resources/unit/RAT-335-GitIgnore/'
+
+apache-rat-plugin/src/test/resources/unit/RAT-335-GitIgnore/dir1/.gitignore:2:!dir1.md  ./dir1/dir1.md
+apache-rat-plugin/src/test/resources/unit/RAT-335-GitIgnore/dir1/.gitignore:1:*.txt     ./dir1/dir1.txt
+apache-rat-plugin/src/test/resources/unit/RAT-335-GitIgnore/dir1/.gitignore:3:file1.log ./dir1/file1.log
+apache-rat-plugin/src/test/resources/unit/RAT-335-GitIgnore/.gitignore:1:*.md   ./dir2/dir2.md
+apache-rat-plugin/src/test/resources/unit/RAT-335-GitIgnore/.gitignore:4:*.log  ./dir3/dir3.log
+apache-rat-plugin/src/test/resources/unit/RAT-335-GitIgnore/.gitignore:7:!file*.log     ./dir3/file3.log
+apache-rat-plugin/src/test/resources/unit/RAT-335-GitIgnore/.gitignore:1:*.md   ./root.md
diff --git a/apache-rat-core/src/test/resources/RAT_355/src/dir1/dir1.md b/apache-rat-core/src/test/resources/RAT_355/src/dir1/dir1.md
new file mode 100644
index 00000000..a31cbc89
--- /dev/null
+++ b/apache-rat-core/src/test/resources/RAT_355/src/dir1/dir1.md
@@ -0,0 +1 @@
+File without a valid license
diff --git a/apache-rat-core/src/test/resources/RAT_355/src/dir2/dir2.txt b/apache-rat-core/src/test/resources/RAT_355/src/dir2/dir2.txt
new file mode 100644
index 00000000..a31cbc89
--- /dev/null
+++ b/apache-rat-core/src/test/resources/RAT_355/src/dir2/dir2.txt
@@ -0,0 +1 @@
+File without a valid license
diff --git a/apache-rat-core/src/test/resources/RAT_355/src/dir3/file3.log b/apache-rat-core/src/test/resources/RAT_355/src/dir3/file3.log
new file mode 100644
index 00000000..a31cbc89
--- /dev/null
+++ b/apache-rat-core/src/test/resources/RAT_355/src/dir3/file3.log
@@ -0,0 +1 @@
+File without a valid license
diff --git a/apache-rat-core/src/test/resources/RAT_355/src/invoker.properties b/apache-rat-core/src/test/resources/RAT_355/src/invoker.properties
new file mode 100644
index 00000000..6e8c3479
--- /dev/null
+++ b/apache-rat-core/src/test/resources/RAT_355/src/invoker.properties
@@ -0,0 +1,16 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+invoker.goals = clean apache-rat:check
diff --git a/apache-rat-core/src/test/resources/RAT_355/verify.groovy b/apache-rat-core/src/test/resources/RAT_355/verify.groovy
new file mode 100644
index 00000000..76a5216c
--- /dev/null
+++ b/apache-rat-core/src/test/resources/RAT_355/verify.groovy
@@ -0,0 +1,129 @@
+package ReportTest.RAT_355
+
+import org.apache.rat.report.claim.ClaimStatistic
+import org.apache.rat.testhelpers.XmlUtils
+import org.w3c.dom.Document
+import org.w3c.dom.NamedNodeMap
+import org.w3c.dom.NodeList
+
+import javax.xml.xpath.XPath
+import javax.xml.xpath.XPathFactory
+
+import static org.assertj.core.api.Assertions.assertThat
+
+private static Map<String, String> mapOf(String... parts) {
+    Map<String, String> map = new HashMap<>();
+    for (int i=0; i<parts.length; i+=2) {
+        map.put(parts[i], parts[i+1]);
+    }
+    return map;
+}
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+output = new File(args[0])
+content = output.text
+
+//Map<ClaimStatistic.Counter, String> data = new HashMap<>();
+//data.put(ClaimStatistic.Counter.APPROVED, "2");
+//data.put(ClaimStatistic.Counter.ARCHIVES, "0");
+//data.put(ClaimStatistic.Counter.BINARIES, "0");
+//data.put(ClaimStatistic.Counter.DOCUMENT_TYPES, "3");
+//data.put(ClaimStatistic.Counter.IGNORED, "6");
+//data.put(ClaimStatistic.Counter.LICENSE_CATEGORIES, "2");
+//data.put(ClaimStatistic.Counter.LICENSE_NAMES, "2");
+//data.put(ClaimStatistic.Counter.NOTICES, "1");
+//data.put(ClaimStatistic.Counter.STANDARDS, "6");
+//data.put(ClaimStatistic.Counter.UNAPPROVED, "4");
+//data.put(ClaimStatistic.Counter.UNKNOWN, "4");
+
+
+Document document = XmlUtils.toDom(new FileInputStream(args[0]));
+XPath xPath = XPathFactory.newInstance().newXPath();
+
+//for (ClaimStatistic.Counter counter : ClaimStatistic.Counter.values()) {
+//    String xpath = String.format("/rat-report/statistics/statistic[@name='%s']", counter.displayName());
+//    Map<String, String> map = mapOf("approval",
+//            counter == ClaimStatistic.Counter.UNAPPROVED ? "false" : "true",
+//            "count", data.get(counter),
+//            "description", counter.getDescription());
+//    XmlUtils.assertAttributes(document, xPath, xpath, map);
+//}
+
+//// license categories
+//XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/licenseCategory[@name='?????']",
+//        mapOf("count", "4" ));
+//
+//XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/licenseCategory[@name='AL   ']",
+//        mapOf("count", "2" ));
+//
+//// license names
+//XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/licenseName[@name='Apache License Version 2.0']",
+//        mapOf("count", "2" ));
+//
+//XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/licenseName[@name='Unknown license']",
+//        mapOf("count", "4" ));
+
+List<String> ignoredFiles = new ArrayList<>(Arrays.asList(
+        "/dir1/dir1.txt",
+        "/dir1/file1.log",
+        "/dir1/.gitignore",
+        "/dir2/dir2.md",
+        "/dir3/dir3.log",
+        "/.gitignore",
+        "/root.md"));
+
+NodeList nodeList = XmlUtils.getNodeList(document, xPath, "/rat-report/resource[@type='IGNORED']");
+for (int i=0;i< nodeList.getLength(); i++) {
+    NamedNodeMap attr = nodeList.item(i).getAttributes();
+    String s = attr.getNamedItem("name").getNodeValue();
+    assertThat(ignoredFiles).contains(s);
+    ignoredFiles.remove(s);
+}
+assertThat(ignoredFiles).isEmpty();
+
+
+// Document types
+XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/documentType[@name='IGNORED']",
+        mapOf("count", "6" ));
+
+XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/documentType[@name='NOTICE']",
+        mapOf("count", "1" ));
+
+XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/documentType[@name='STANDARD']",
+        mapOf("count", "6" ));
+
+
+/*
+
+TextUtils.assertPatternInTarget("^  Approved:\\s+8 ", content)
+TextUtils.assertPatternInTarget("^  Archives:\\s+1 ", content)
+TextUtils.assertPatternInTarget("^  Binaries:\\s+2 ", content)
+TextUtils.assertPatternInTarget("^  Document types:\\s+5 ", content)
+TextUtils.assertPatternInTarget("^  Ignored:\\s+1 ", content)
+TextUtils.assertPatternInTarget("^  License categories:\\s+4 ", content)
+TextUtils.assertPatternInTarget("^  License names:\\s+5", content)
+TextUtils.assertPatternInTarget("^  Notices:\\s+2 ", content)
+TextUtils.assertPatternInTarget("^  Standards:\\s+8 ", content)
+TextUtils.assertPatternInTarget("^  Unapproved:\\s+2 ", content)
+TextUtils.assertPatternInTarget("^  Unknown:\\s+2 ", content)
+
+logOutput = new File(args[1])
+log = logOutput.text
+
+TextUtils.assertPatternNotInTarget("^ERROR:", log)
+TextUtils.assertPatternNotInTarget("^WARN:", log)
+*/
