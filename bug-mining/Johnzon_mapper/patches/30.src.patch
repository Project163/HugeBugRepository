diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
index 917aee5c..df0aa37a 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
@@ -304,20 +304,7 @@ public class Mapper implements Closeable {
     }
 
     public <T> Collection<T> readCollection(final InputStream stream, final ParameterizedType genericType) {
-        final JsonReader reader = readerFactory.createReader(stream(stream));
-        final Mappings.CollectionMapping mapping = mappings.findCollectionMapping(genericType);
-        if (mapping == null) {
-            throw new UnsupportedOperationException("type " + genericType + " not supported");
-        }
-        try {
-            return mapCollection(mapping, reader.readArray(), null);
-        } catch (final Exception e) {
-            throw new MapperException(e);
-        } finally {
-            if (config.isClose()) {
-                reader.close();
-            }
-        }
+        return mapObject(genericType, readerFactory.createReader(stream(stream)));
     }
 
     public <T> T readJohnzonCollection(final InputStream stream, final JohnzonCollectionType<T> genericType) {
@@ -329,20 +316,7 @@ public class Mapper implements Closeable {
     }
 
     public <T> Collection<T> readCollection(final Reader stream, final ParameterizedType genericType) {
-        final JsonReader reader = readerFactory.createReader(stream(stream));
-        final Mappings.CollectionMapping mapping = mappings.findCollectionMapping(genericType);
-        if (mapping == null) {
-            throw new UnsupportedOperationException("type " + genericType + " not supported");
-        }
-        try {
-            return mapCollection(mapping, reader.readArray(), null);
-        } catch (final Exception e) {
-            throw new MapperException(e);
-        } finally {
-            if (config.isClose()) {
-                reader.close();
-            }
-        }
+        return mapObject(genericType, readerFactory.createReader(stream(stream)));
     }
 
     public <T> T[] readArray(final Reader stream, final Class<T> clazz) {
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
index 140d2032..b0239d6e 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
@@ -133,9 +133,23 @@ public class MappingParserImpl implements MappingParser {
                 return (T) number.bigIntegerValue();
             }
         }
-        if (JsonArray.class.isInstance(jsonValue) && Class.class.isInstance(targetType) && ((Class) targetType).isArray()) {
-            return (T) buildArrayWithComponentType((JsonArray) jsonValue, ((Class) targetType).getComponentType(), null);
+        if (JsonArray.class.isInstance(jsonValue)) {
 
+            JsonArray jsonArray = (JsonArray) jsonValue;
+
+            if (Class.class.isInstance(targetType) && ((Class) targetType).isArray()) {
+                return (T) buildArrayWithComponentType(jsonArray, ((Class) targetType).getComponentType(), null);
+            }
+            if (ParameterizedType.class.isInstance(targetType)) {
+
+                final Mappings.CollectionMapping mapping = mappings.findCollectionMapping((ParameterizedType) targetType);
+                if (mapping == null) {
+                    throw new UnsupportedOperationException("type " + targetType + " not supported");
+                }
+
+                return (T) mapCollection(mapping, jsonArray, null);
+
+            }
         }
         if (JsonValue.NULL == jsonValue) {
             return null;
