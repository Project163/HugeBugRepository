diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/code/SourceCodeParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/code/SourceCodeParserTest.java
index 554b060fd..e6af91d85 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/code/SourceCodeParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/code/SourceCodeParserTest.java
@@ -16,14 +16,6 @@
  */
 package org.apache.tika.parser.code;
 
-import static java.nio.charset.StandardCharsets.UTF_8;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-import java.io.ByteArrayInputStream;
-import java.util.Set;
-
 import org.apache.tika.TikaTest;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaCoreProperties;
@@ -32,64 +24,72 @@ import org.apache.tika.parser.AutoDetectParser;
 import org.apache.tika.parser.ParseContext;
 import org.junit.Test;
 
+import java.io.ByteArrayInputStream;
+import java.util.Set;
+
+import static java.nio.charset.StandardCharsets.UTF_8;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 public class SourceCodeParserTest extends TikaTest {
 
-  private SourceCodeParser sourceCodeParser = new SourceCodeParser();
+    private SourceCodeParser sourceCodeParser = new SourceCodeParser();
 
-  @Test
-  public void testSupportTypes() throws Exception {
-    Set<MediaType> supportedTypes = sourceCodeParser.getSupportedTypes(new ParseContext());
-    assertTrue(supportedTypes.contains(new MediaType("text", "x-java-source")));
-    assertTrue(supportedTypes.contains(new MediaType("text", "x-groovy")));
-    assertTrue(supportedTypes.contains(new MediaType("text", "x-c++src")));
+    @Test
+    public void testSupportTypes() throws Exception {
+        Set<MediaType> supportedTypes = sourceCodeParser.getSupportedTypes(new ParseContext());
+        assertTrue(supportedTypes.contains(new MediaType("text", "x-java-source")));
+        assertTrue(supportedTypes.contains(new MediaType("text", "x-groovy")));
+        assertTrue(supportedTypes.contains(new MediaType("text", "x-c++src")));
 
-    assertFalse(sourceCodeParser.getSupportedTypes(new ParseContext()).contains(new MediaType("text", "html")));
-  }
+        assertFalse(sourceCodeParser.getSupportedTypes(new ParseContext()).contains(new MediaType("text", "html")));
+    }
 
-  @Test
-  public void testHTMLRenderWithReturnLine() throws Exception {
-    String htmlContent = getXML(getResourceAsStream("/test-documents/testJAVA.java"), sourceCodeParser, createMetadata("text/x-java-source")).xml;
-    
-    assertTrue(htmlContent.indexOf("<html:html lang=\"en\" xml:lang=\"en\"") == 0);
-    assertTrue(htmlContent.indexOf("<html:span class=\"java_keyword\">public</span><html:span class=\"java_plain\">") > 0);
-    assertTrue(htmlContent.indexOf("<html:span class=\"java_keyword\">static</span>") > 0);
-    assertTrue(htmlContent.indexOf("<html:br clear=\"none\" />") > 0);
-  }
-  
-  @Test
-  public void testTextRender() throws Exception {
-    String textContent = getText(getResourceAsStream("/test-documents/testJAVA.java"), sourceCodeParser, createMetadata("text/x-java-source"));
-    
-    assertTrue(textContent.length() > 0);
-    assertTrue(textContent.indexOf("html") < 0);
-    
-    textContent = getText(new ByteArrayInputStream("public class HelloWorld {}".getBytes(UTF_8)), sourceCodeParser, createMetadata("text/x-java-source"));
-    assertTrue(textContent.length() > 0);
-    assertTrue(textContent.indexOf("html") < 0);
-  }
+    @Test
+    public void testHTMLRenderWithReturnLine() throws Exception {
+        String htmlContent = getXML(getResourceAsStream("/test-documents/testJAVA.java"), sourceCodeParser, createMetadata("text/x-java-source")).xml;
 
-  @Test
-  public void testLoC() throws Exception {
-    Metadata metadata = createMetadata("text/x-groovy");
-    getText(getResourceAsStream("/test-documents/testGROOVY.groovy"), sourceCodeParser, metadata);
+        assertTrue(htmlContent.indexOf("<html:html lang=\"en\" xml:lang=\"en\"") == 0);
+        assertTrue(htmlContent.indexOf("<html:span class=\"java_keyword\">public</span><html:span class=\"java_plain\">") > 0);
+        assertTrue(htmlContent.indexOf("<html:span class=\"java_keyword\">static</span>") > 0);
+        assertTrue(htmlContent.indexOf("<html:br clear=\"none\" />") > 0);
+    }
 
-    assertEquals(metadata.get("LoC"), "9");
-  }
+    @Test
+    public void testTextRender() throws Exception {
+        String textContent = getText(getResourceAsStream("/test-documents/testJAVA.java"), sourceCodeParser, createMetadata("text/x-java-source"));
 
-  @Test
-  public void testAuthor() throws Exception {
-    Metadata metadata = createMetadata("text/x-c++src");
-    getText(getResourceAsStream("/test-documents/testCPP.cpp"), sourceCodeParser, metadata);
+        assertTrue(textContent.length() > 0);
+        assertTrue(textContent.indexOf("html") < 0);
 
-    assertEquals("Hong-Thai Nguyen", metadata.get(TikaCoreProperties.CREATOR));
-  }
+        textContent = getText(new ByteArrayInputStream("public class HelloWorld {}".getBytes(UTF_8)), sourceCodeParser, createMetadata("text/x-java-source"));
+        assertTrue(textContent.length() > 0);
+        assertTrue(textContent.indexOf("html") < 0);
+    }
 
-  @Test
-  public void testReturnContentAsIsForTextHandler() throws Exception {
-    String strContent = getXML(getResourceAsStream("/test-documents/testJAVA.java"), new AutoDetectParser(), createMetadata("text/plain")).xml;
+    @Test
+    public void testLoC() throws Exception {
+        Metadata metadata = createMetadata("text/x-groovy");
+        getText(getResourceAsStream("/test-documents/testGROOVY.groovy"), sourceCodeParser, metadata);
 
-    assertTrue(strContent.indexOf("public class HelloWorld {") > 0);
-  }
+        assertEquals(metadata.get("LoC"), "9");
+    }
+
+    @Test
+    public void testAuthor() throws Exception {
+        Metadata metadata = createMetadata("text/x-c++src");
+        getText(getResourceAsStream("/test-documents/testCPP.cpp"), sourceCodeParser, metadata);
+
+        assertEquals("Hong-Thai Nguyen", metadata.get(TikaCoreProperties.CREATOR));
+    }
+
+    @Test
+    public void testReturnContentAsIsForTextHandler() throws Exception {
+        String strContent = getXML(getResourceAsStream("/test-documents/testJAVA.java"), new AutoDetectParser(), createMetadata("text/plain")).xml;
+
+        assertTrue(strContent.indexOf("public class HelloWorld {") > 0);
+    }
 
   private Metadata createMetadata(String mimeType) {
     Metadata metadata = new Metadata();
