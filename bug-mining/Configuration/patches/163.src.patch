diff --git a/src/main/java/org/apache/commons/configuration/PropertiesConfiguration.java b/src/main/java/org/apache/commons/configuration/PropertiesConfiguration.java
index 79e2482b..98a36bb5 100644
--- a/src/main/java/org/apache/commons/configuration/PropertiesConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration/PropertiesConfiguration.java
@@ -228,7 +228,7 @@ public class PropertiesConfiguration extends AbstractFileConfiguration
     private volatile IOFactory ioFactory;
 
     /** Allow file inclusion or not */
-    private boolean includesAllowed;
+    private boolean includesAllowed = true;
 
     /**
      * Creates an empty PropertyConfiguration object which can be
@@ -238,7 +238,6 @@ public class PropertiesConfiguration extends AbstractFileConfiguration
     public PropertiesConfiguration()
     {
         layout = createLayout();
-        setIncludesAllowed(false);
     }
 
     /**
@@ -310,12 +309,11 @@ public class PropertiesConfiguration extends AbstractFileConfiguration
 
     /**
      * Controls whether additional files can be loaded by the include = <xxx>
-     * statement or not. Base rule is, that objects created by the empty
-     * C'tor can not have included files.
+     * statement or not. This is <b>true</b> per default.
      *
-     * @param includesAllowed includesAllowed True if Includes are allowed.
+     * @param includesAllowed True if Includes are allowed.
      */
-    protected void setIncludesAllowed(boolean includesAllowed)
+    public void setIncludesAllowed(boolean includesAllowed)
     {
         this.includesAllowed = includesAllowed;
     }
@@ -325,7 +323,7 @@ public class PropertiesConfiguration extends AbstractFileConfiguration
      *
      * @return True if include files are loaded.
      */
-    public boolean getIncludesAllowed()
+    public boolean isIncludesAllowed()
     {
         return this.includesAllowed;
     }
@@ -587,7 +585,7 @@ public class PropertiesConfiguration extends AbstractFileConfiguration
         if (StringUtils.isNotEmpty(getInclude())
                 && key.equalsIgnoreCase(getInclude()))
         {
-            if (getIncludesAllowed())
+            if (isIncludesAllowed())
             {
                 String[] files;
                 if (!isDelimiterParsingDisabled())
diff --git a/src/test/java/org/apache/commons/configuration/TestPropertiesConfiguration.java b/src/test/java/org/apache/commons/configuration/TestPropertiesConfiguration.java
index bd3fefb8..f879af8a 100644
--- a/src/test/java/org/apache/commons/configuration/TestPropertiesConfiguration.java
+++ b/src/test/java/org/apache/commons/configuration/TestPropertiesConfiguration.java
@@ -156,6 +156,41 @@ public class TestPropertiesConfiguration
         assertEquals("true", loaded);
     }
 
+    /**
+     * Tests whether include files can be resolved if a configuration file is
+     * read from a reader.
+     */
+    @Test
+    public void testLoadIncludeFromReader() throws ConfigurationException,
+            IOException
+    {
+        StringReader in =
+                new StringReader(PropertiesConfiguration.getInclude() + " = "
+                        + ConfigurationAssert.getTestURL("include.properties"));
+        conf = new PropertiesConfiguration();
+        conf.read(in);
+        assertEquals("Include file not loaded", "true",
+                conf.getString("include.loaded"));
+    }
+
+    /**
+     * Tests whether include files can be disabled.
+     */
+    @Test
+    public void testDisableIncludes() throws ConfigurationException,
+            IOException
+    {
+        String content =
+                PropertiesConfiguration.getInclude()
+                        + " = nonExistingIncludeFile" + CR + PROP_NAME + " = "
+                        + PROP_VALUE + CR;
+        StringReader in = new StringReader(content);
+        conf = new PropertiesConfiguration();
+        conf.setIncludesAllowed(false);
+        conf.read(in);
+        assertEquals("Data not loaded", PROP_VALUE, conf.getString(PROP_NAME));
+    }
+
     @Test
     public void testSetInclude() throws Exception
     {
