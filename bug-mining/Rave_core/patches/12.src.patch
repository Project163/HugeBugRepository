diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/events/PortalPreferenceJavascriptDebugModeEventListener.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/events/PortalPreferenceJavascriptDebugModeEventListener.java
new file mode 100644
index 00000000..fc18ffb5
--- /dev/null
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/events/PortalPreferenceJavascriptDebugModeEventListener.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.rave.portal.events;
+
+public interface PortalPreferenceJavascriptDebugModeEventListener extends RaveEventListener {
+
+
+}
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/events/PortalPreferenceJavascriptDebugModeSaveEvent.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/events/PortalPreferenceJavascriptDebugModeSaveEvent.java
new file mode 100644
index 00000000..cd499bca
--- /dev/null
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/events/PortalPreferenceJavascriptDebugModeSaveEvent.java
@@ -0,0 +1,30 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.rave.portal.events;
+
+import java.util.EventObject;
+
+public class PortalPreferenceJavascriptDebugModeSaveEvent extends EventObject implements RaveEvent {
+
+    public PortalPreferenceJavascriptDebugModeSaveEvent(Object source) {
+        super(source);
+    }
+    
+    
+}
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/events/RaveEvent.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/events/RaveEvent.java
new file mode 100644
index 00000000..59457587
--- /dev/null
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/events/RaveEvent.java
@@ -0,0 +1,22 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.rave.portal.events;
+
+public interface RaveEvent {
+}
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/events/RaveEventListener.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/events/RaveEventListener.java
new file mode 100644
index 00000000..2a2832a3
--- /dev/null
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/events/RaveEventListener.java
@@ -0,0 +1,25 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.rave.portal.events;
+
+public interface RaveEventListener {
+
+    void handleEvent(RaveEvent event);
+}
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/events/RaveEventManager.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/events/RaveEventManager.java
new file mode 100644
index 00000000..5859df81
--- /dev/null
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/events/RaveEventManager.java
@@ -0,0 +1,65 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.rave.portal.events;
+
+import org.springframework.stereotype.Component;
+
+import java.util.*;
+
+@Component
+public class RaveEventManager  {
+
+    private final Map<Class<? extends RaveEvent>, Set<RaveEventListener>> eventListenerMap;
+
+    public RaveEventManager() {
+        this.eventListenerMap = new Hashtable<Class<? extends RaveEvent>, Set<RaveEventListener>> ();
+    }
+
+    public void addListener(Class<? extends RaveEvent> event, RaveEventListener listener) {
+        synchronized (eventListenerMap){
+            if (eventListenerMap.containsKey(event)){
+                Set<RaveEventListener> eventListeners = eventListenerMap.get(event);
+                if(eventListeners == null){
+                    eventListeners = new HashSet<RaveEventListener>();
+                }
+                eventListeners.add(listener);
+            } else {
+                Set<RaveEventListener> eventListeners = new HashSet<RaveEventListener>();
+                eventListeners.add(listener);
+                eventListenerMap.put(event, eventListeners);
+            }
+        }
+    }
+
+    public void removeListener(Class<? extends RaveEvent> event, RaveEventListener listener) {
+        synchronized (eventListenerMap){
+            if(eventListenerMap.containsKey(event))
+                eventListenerMap.get(event).remove(listener);
+        }
+    }
+
+    public synchronized void fireEvent(RaveEvent event){
+        Set<RaveEventListener> listeners = eventListenerMap.get(event.getClass());
+        if (listeners != null && !listeners.isEmpty()){
+            for (RaveEventListener listener : eventListenerMap.get(event.getClass())) {
+                listener.handleEvent(event);
+            }
+        }
+    }
+}
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultPortalPreferenceService.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultPortalPreferenceService.java
index 21af0d8c..8ce7d388 100644
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultPortalPreferenceService.java
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/service/impl/DefaultPortalPreferenceService.java
@@ -19,10 +19,13 @@
 
 package org.apache.rave.portal.service.impl;
 
+import org.apache.rave.portal.events.PortalPreferenceJavascriptDebugModeSaveEvent;
+import org.apache.rave.portal.events.RaveEventManager;
 import org.apache.rave.portal.model.PortalPreference;
 import org.apache.rave.portal.model.impl.PortalPreferenceImpl;
 import org.apache.rave.portal.repository.PortalPreferenceRepository;
 import org.apache.rave.portal.service.PortalPreferenceService;
+import org.apache.rave.portal.web.util.PortalPreferenceKeys;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
@@ -39,10 +42,12 @@ import java.util.Map;
 public class DefaultPortalPreferenceService implements PortalPreferenceService {
 
     private final PortalPreferenceRepository repository;
+    private final RaveEventManager eventManager;
 
     @Autowired
-    public DefaultPortalPreferenceService(PortalPreferenceRepository repository) {
+    public DefaultPortalPreferenceService(PortalPreferenceRepository repository, RaveEventManager manager) {
         this.repository = repository;
+        this.eventManager = manager;
     }
 
     @Override
@@ -85,5 +90,8 @@ public class DefaultPortalPreferenceService implements PortalPreferenceService {
     @Transactional
     public void savePreference(PortalPreference preference) {
         repository.save(preference);
+        if (preference.getKey().equals(PortalPreferenceKeys.JAVASCRIPT_DEBUG_MODE))  {
+            eventManager.fireEvent(new PortalPreferenceJavascriptDebugModeSaveEvent(this));
+        }
     }
 }
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/web/renderer/ScriptManager.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/web/renderer/ScriptManager.java
index a2ef5868..ce7c8ead 100644
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/web/renderer/ScriptManager.java
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/web/renderer/ScriptManager.java
@@ -39,17 +39,19 @@ public interface ScriptManager {
 
     /**
      * Registers a global script block for inclusion in every page
+     * @param key
      * @param script the string representation of the script block
      * @param location the location in the page to render the script
      */
-    void registerScriptBlock(String script, ScriptLocation location);
+    void registerScriptBlock(String key, String script, ScriptLocation location);
 
     /**
      * Registers a script block for inclusion in the page
+     * @param key
      * @param script the string representation of the script block
      * @param location the location in the page to render the script
      * @param scope indicates the scope under which this script should be registered
      * @param context the context under which to register the script
      */
-    void registerScriptBlock(String script, ScriptLocation location, RenderScope scope, RenderContext context);
+    void registerScriptBlock(String key, String script, ScriptLocation location, RenderScope scope, RenderContext context);
 }
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/web/renderer/impl/DefaultScriptManager.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/web/renderer/impl/DefaultScriptManager.java
index b8c0cc9b..e84147ab 100644
--- a/rave-components/rave-core/src/main/java/org/apache/rave/portal/web/renderer/impl/DefaultScriptManager.java
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/web/renderer/impl/DefaultScriptManager.java
@@ -37,74 +37,79 @@ import java.util.*;
 @Service
 public class DefaultScriptManager implements ScriptManager{
     private static final String KEY = "KEY";
-    private final Map<ScriptLocation, List<String>> scriptRenderers;
+    private final Map<ScriptLocation, Map<String, String>> scriptRenderers;
 
     public DefaultScriptManager() {
-        this.scriptRenderers = new HashMap<ScriptLocation, List<String>>();
+        this.scriptRenderers = new HashMap<ScriptLocation, Map<String, String>>();
     }
 
     @Override
     public List<String> getScriptBlocks(ScriptLocation location, RenderContext context) {
-        List<String> combined = new LinkedList<String>();
+        Map<String, String> combined = new LinkedHashMap<String, String>();
         getAndAdd(location, combined, scriptRenderers);
         getAndAdd(location, combined, getOrCreateScriptMap(context));
-        return combined;
+        List<String> scriptContent = new ArrayList<String>();
+        for(Map.Entry<String, String> entry: combined.entrySet()){
+            scriptContent.add(entry.getValue());
+        }
+        return scriptContent;
     }
 
     @Override
-    public void registerScriptBlock(String script, ScriptLocation location) {
-        addScriptToMap(script, location, scriptRenderers);
+    public void registerScriptBlock(String key, String script, ScriptLocation location) {
+        addScriptToMap(key, script, location, scriptRenderers);
     }
 
     @Override
-    public void registerScriptBlock(String script, ScriptLocation location, RenderScope scope, RenderContext context) {
+    public void registerScriptBlock(String key, String script, ScriptLocation location, RenderScope scope, RenderContext context) {
         switch(scope) {
             case GLOBAL:
-                registerScriptBlock(script, location);
+                registerScriptBlock(key, script, location);
                 break;
             case CURRENT_REQUEST:
-                addScriptToContext(script, location, context);
+                addScriptToContext(key, script, location, context);
                 break;
             default:
                 throw new NotSupportedException("The scope, " + scope + " , is not supported by the script manager");
         }
     }
 
-    private static void getAndAdd(ScriptLocation location, List<String> output, Map<ScriptLocation, List<String>> map) {
-        List<String> scripts = map.get(location);
+    private static void getAndAdd(ScriptLocation location, Map<String, String> output, Map<ScriptLocation, Map<String, String>> map) {
+        Map<String, String> scripts = map.get(location);
         if(scripts != null) {
-            output.addAll(scripts);
+            output.putAll(scripts);
         }
     }
 
-    private static void addScriptToContext(String script, ScriptLocation location, RenderContext context) {
-        Map<ScriptLocation, List<String>> scriptMap = getOrCreateScriptMap(context);
-        addScriptToMap(script, location, scriptMap);
+    private static void addScriptToContext(String key, String script, ScriptLocation location, RenderContext context) {
+        Map<ScriptLocation, Map<String,String>> scriptMap = getOrCreateScriptMap(context);
+        addScriptToMap(key, script, location, scriptMap);
     }
 
 
-    private static void addScriptToMap(String script, ScriptLocation location, Map<ScriptLocation, List<String>> scripts) {
+    private static void addScriptToMap(String key, String script, ScriptLocation location, Map<ScriptLocation, Map<String, String>> scripts) {
         if (!scripts.containsKey(location)) {
-            addListForLocation(location, scripts);
+            addMapForLocation(location, scripts);
         }
-        scripts.get(location).add(script);
+        scripts.get(location).put(key, script);
     }
 
     //Lock on the instance of hte map to ensure that only one put per location takes place
     @Synchronized(discriminator = "'SM_#map.toString()'", id = "#location")
-    private static void addListForLocation(ScriptLocation location, Map<ScriptLocation, List<String>> map) {
+    private static void addMapForLocation(ScriptLocation location, Map<ScriptLocation, Map<String, String>> map) {
         if (!map.containsKey(location)) {
-            map.put(location, new ArrayList<String>());
+            map.put(location, new HashMap<String, String>());
         }
     }
+    
     @SuppressWarnings("unchecked")
-    private static Map<ScriptLocation, List<String>> getOrCreateScriptMap(RenderContext context) {
+    private static Map<ScriptLocation, Map<String,String>> getOrCreateScriptMap(RenderContext context) {
         if(context == null) {
             throw new IllegalArgumentException("Cannot have a null render context");
         }
-        Map<ScriptLocation, List<String>> scriptMap = (Map<ScriptLocation, List<String>>)context.getProperties().get(KEY);
+        Map<ScriptLocation, Map<String,String>> scriptMap = (Map<ScriptLocation, Map<String, String>>)context.getProperties().get(KEY);
         if(scriptMap == null) {
-            scriptMap = new HashMap<ScriptLocation, List<String>>();
+            scriptMap = new HashMap<ScriptLocation, Map<String,String>>();
             context.getProperties().put(KEY, scriptMap);
         }
         return scriptMap;
diff --git a/rave-components/rave-core/src/main/java/org/apache/rave/portal/web/util/PortalPreferenceKeys.java b/rave-components/rave-core/src/main/java/org/apache/rave/portal/web/util/PortalPreferenceKeys.java
new file mode 100644
index 00000000..37302a96
--- /dev/null
+++ b/rave-components/rave-core/src/main/java/org/apache/rave/portal/web/util/PortalPreferenceKeys.java
@@ -0,0 +1,30 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.rave.portal.web.util;
+
+/**
+ * Utility class for {@link org.apache.rave.portal.model.PortalPreference} keys
+ */
+public final class PortalPreferenceKeys {
+    private PortalPreferenceKeys() { }
+
+    public static final String TITLE_SUFFIX = "titleSuffix";
+    public static final String PAGE_SIZE = "pageSize";
+    public static final String JAVASCRIPT_DEBUG_MODE = "javaScriptDebugMode";
+}
diff --git a/rave-components/rave-core/src/main/resources/org/apache/rave/core-applicationContext.xml b/rave-components/rave-core/src/main/resources/org/apache/rave/core-applicationContext.xml
index 0732b2f2..93b900fa 100644
--- a/rave-components/rave-core/src/main/resources/org/apache/rave/core-applicationContext.xml
+++ b/rave-components/rave-core/src/main/resources/org/apache/rave/core-applicationContext.xml
@@ -45,6 +45,7 @@
 
     <!-- rave-core component base-package scan -->
     <context:component-scan base-package="org.apache.rave.portal.model"/>
+    <context:component-scan base-package="org.apache.rave.portal.events"/>
     <context:component-scan base-package="org.apache.rave.portal.repository"/>
     <context:component-scan base-package="org.apache.rave.portal.service"/>
     <context:component-scan base-package="org.apache.rave.portal.security"/>
@@ -149,4 +150,4 @@
         </property>
     </bean>
     -->
-</beans>
\ No newline at end of file
+</beans>
diff --git a/rave-components/rave-core/src/test/java/org/apache/rave/portal/service/impl/DefaultPortalPreferenceServiceTest.java b/rave-components/rave-core/src/test/java/org/apache/rave/portal/service/impl/DefaultPortalPreferenceServiceTest.java
index b129a446..eaee2cea 100644
--- a/rave-components/rave-core/src/test/java/org/apache/rave/portal/service/impl/DefaultPortalPreferenceServiceTest.java
+++ b/rave-components/rave-core/src/test/java/org/apache/rave/portal/service/impl/DefaultPortalPreferenceServiceTest.java
@@ -19,6 +19,7 @@
 
 package org.apache.rave.portal.service.impl;
 
+import org.apache.rave.portal.events.RaveEventManager;
 import org.apache.rave.portal.model.PortalPreference;
 import org.apache.rave.portal.model.impl.PortalPreferenceImpl;
 import org.apache.rave.portal.repository.PortalPreferenceRepository;
@@ -41,11 +42,13 @@ public class DefaultPortalPreferenceServiceTest {
 
     PortalPreferenceService service;
     PortalPreferenceRepository repository;
+    RaveEventManager manager;
 
     @Before
     public void setUp() throws Exception {
         repository = createMock(PortalPreferenceRepository.class);
-        service = new DefaultPortalPreferenceService(repository);
+        manager = createMock(RaveEventManager.class);
+        service = new DefaultPortalPreferenceService(repository, manager);
     }
 
     @Test
@@ -109,6 +112,7 @@ public class DefaultPortalPreferenceServiceTest {
 
         expect(repository.getByKey(key)).andReturn(null).once();
         expect(repository.save(fooBar)).andReturn(fooBarSaved).once();
+
         replay(repository);
         service.savePreference(key, value);
         verify(repository);
diff --git a/rave-components/rave-core/src/test/java/org/apache/rave/portal/web/renderer/ScriptManagerTest.java b/rave-components/rave-core/src/test/java/org/apache/rave/portal/web/renderer/ScriptManagerTest.java
index 36728a7f..0d75ddb0 100644
--- a/rave-components/rave-core/src/test/java/org/apache/rave/portal/web/renderer/ScriptManagerTest.java
+++ b/rave-components/rave-core/src/test/java/org/apache/rave/portal/web/renderer/ScriptManagerTest.java
@@ -36,6 +36,8 @@ public class ScriptManagerTest {
     
     public static final String SCRIPT_1 = "FOO";
     public static final String SCRIPT_2 = "BAR";
+    public static final String SCRIPT_1_KEY = "f";
+    public static final String SCRIPT_2_KEY = "b";
     
     private ScriptManager manager;
     private RenderContext context;
@@ -51,7 +53,7 @@ public class ScriptManagerTest {
 
     @Test
     public void registerBlockAndRetrieve_simple() {
-        manager.registerScriptBlock(SCRIPT_1, ScriptLocation.BEFORE_RAVE);
+        manager.registerScriptBlock(SCRIPT_1_KEY, SCRIPT_1, ScriptLocation.BEFORE_RAVE);
         List<String> scriptBlocks = manager.getScriptBlocks(ScriptLocation.BEFORE_RAVE, context);
         assertThat(scriptBlocks.size(), is(equalTo(1)));
         assertThat(scriptBlocks.get(0), is(equalTo(SCRIPT_1)));
@@ -59,7 +61,7 @@ public class ScriptManagerTest {
 
     @Test
     public void registerBlockAndRetrieve_simpleFullSignature() {
-        manager.registerScriptBlock(SCRIPT_1, ScriptLocation.BEFORE_RAVE, RenderScope.GLOBAL, context);
+        manager.registerScriptBlock(SCRIPT_1_KEY, SCRIPT_1, ScriptLocation.BEFORE_RAVE, RenderScope.GLOBAL, context);
         List<String> scriptBlocks = manager.getScriptBlocks(ScriptLocation.BEFORE_RAVE, context);
         assertThat(scriptBlocks.size(), is(equalTo(1)));
         assertThat(scriptBlocks.get(0), is(equalTo(SCRIPT_1)));
@@ -67,8 +69,8 @@ public class ScriptManagerTest {
 
     @Test
     public void registerBlockAndRetrieve_list() {
-        manager.registerScriptBlock(SCRIPT_1, ScriptLocation.BEFORE_RAVE);
-        manager.registerScriptBlock(SCRIPT_2, ScriptLocation.BEFORE_RAVE);
+        manager.registerScriptBlock(SCRIPT_1_KEY, SCRIPT_1, ScriptLocation.BEFORE_RAVE);
+        manager.registerScriptBlock(SCRIPT_2_KEY, SCRIPT_2, ScriptLocation.BEFORE_RAVE);
         List<String> scriptBlocks = manager.getScriptBlocks(ScriptLocation.BEFORE_RAVE, context);
         assertThat(scriptBlocks.size(), is(equalTo(2)));
         assertThat(scriptBlocks.get(0), is(equalTo(SCRIPT_1)));
@@ -77,8 +79,8 @@ public class ScriptManagerTest {
 
     @Test
     public void registerBlockAndRetrieve_multi() {
-        manager.registerScriptBlock(SCRIPT_1, ScriptLocation.BEFORE_RAVE);
-        manager.registerScriptBlock(SCRIPT_2, ScriptLocation.AFTER_RAVE);
+        manager.registerScriptBlock(SCRIPT_1_KEY, SCRIPT_1, ScriptLocation.BEFORE_RAVE);
+        manager.registerScriptBlock(SCRIPT_2_KEY, SCRIPT_2, ScriptLocation.AFTER_RAVE);
         List<String> scriptBlocks = manager.getScriptBlocks(ScriptLocation.BEFORE_RAVE, context);
         assertThat(scriptBlocks.size(), is(equalTo(1)));
         assertThat(scriptBlocks.get(0), is(equalTo(SCRIPT_1)));
@@ -89,7 +91,7 @@ public class ScriptManagerTest {
 
     @Test
     public void registerBlockAndRetrieve_simpleInContext() {
-        manager.registerScriptBlock(SCRIPT_1, ScriptLocation.BEFORE_RAVE, RenderScope.CURRENT_REQUEST, context);
+        manager.registerScriptBlock(SCRIPT_1_KEY, SCRIPT_1, ScriptLocation.BEFORE_RAVE, RenderScope.CURRENT_REQUEST, context);
         List<String> scriptBlocks = manager.getScriptBlocks(ScriptLocation.BEFORE_RAVE, context);
         assertThat(scriptBlocks.size(), is(equalTo(1)));
         assertThat(scriptBlocks.get(0), is(equalTo(SCRIPT_1)));
@@ -97,8 +99,8 @@ public class ScriptManagerTest {
 
     @Test
     public void registerBlockAndRetrieve_listInContext() {
-        manager.registerScriptBlock(SCRIPT_1, ScriptLocation.BEFORE_RAVE, RenderScope.CURRENT_REQUEST, context);
-        manager.registerScriptBlock(SCRIPT_2, ScriptLocation.BEFORE_RAVE, RenderScope.CURRENT_REQUEST, context);
+        manager.registerScriptBlock(SCRIPT_1_KEY, SCRIPT_1, ScriptLocation.BEFORE_RAVE, RenderScope.CURRENT_REQUEST, context);
+        manager.registerScriptBlock(SCRIPT_2_KEY, SCRIPT_2, ScriptLocation.BEFORE_RAVE, RenderScope.CURRENT_REQUEST, context);
         List<String> scriptBlocks = manager.getScriptBlocks(ScriptLocation.BEFORE_RAVE, context);
         assertThat(scriptBlocks.size(), is(equalTo(2)));
         assertThat(scriptBlocks.get(0), is(equalTo(SCRIPT_1)));
@@ -107,8 +109,8 @@ public class ScriptManagerTest {
 
     @Test
     public void registerBlockAndRetrieve_multiInContext() {
-        manager.registerScriptBlock(SCRIPT_1, ScriptLocation.BEFORE_RAVE, RenderScope.CURRENT_REQUEST, context);
-        manager.registerScriptBlock(SCRIPT_2, ScriptLocation.AFTER_RAVE, RenderScope.CURRENT_REQUEST, context);
+        manager.registerScriptBlock(SCRIPT_1_KEY, SCRIPT_1, ScriptLocation.BEFORE_RAVE, RenderScope.CURRENT_REQUEST, context);
+        manager.registerScriptBlock(SCRIPT_2_KEY, SCRIPT_2, ScriptLocation.AFTER_RAVE, RenderScope.CURRENT_REQUEST, context);
         List<String> scriptBlocks = manager.getScriptBlocks(ScriptLocation.BEFORE_RAVE, context);
         assertThat(scriptBlocks.size(), is(equalTo(1)));
         assertThat(scriptBlocks.get(0), is(equalTo(SCRIPT_1)));
@@ -119,8 +121,8 @@ public class ScriptManagerTest {
 
     @Test
     public void registerBlockAndRetrieve_combined() {
-        manager.registerScriptBlock(SCRIPT_1, ScriptLocation.BEFORE_RAVE, RenderScope.GLOBAL, context);
-        manager.registerScriptBlock(SCRIPT_2, ScriptLocation.BEFORE_RAVE, RenderScope.CURRENT_REQUEST, context);
+        manager.registerScriptBlock(SCRIPT_1_KEY, SCRIPT_1, ScriptLocation.BEFORE_RAVE, RenderScope.GLOBAL, context);
+        manager.registerScriptBlock(SCRIPT_2_KEY, SCRIPT_2, ScriptLocation.BEFORE_RAVE, RenderScope.CURRENT_REQUEST, context);
         List<String> scriptBlocks = manager.getScriptBlocks(ScriptLocation.BEFORE_RAVE, context);
         assertThat(scriptBlocks.size(), is(equalTo(2)));
         assertThat(scriptBlocks.get(0), is(equalTo(SCRIPT_1)));
