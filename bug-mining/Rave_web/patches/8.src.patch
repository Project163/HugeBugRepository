diff --git a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/UserController.java b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/UserController.java
index a1db0e7d..6a8df60e 100644
--- a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/UserController.java
+++ b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/UserController.java
@@ -20,16 +20,21 @@
 package org.apache.rave.portal.web.controller.admin;
 
 import org.apache.rave.portal.model.Authority;
+import org.apache.rave.portal.model.NewUser;
 import org.apache.rave.portal.model.PortalPreference;
 import org.apache.rave.portal.model.User;
 import org.apache.rave.portal.model.util.SearchResult;
 import org.apache.rave.portal.service.AuthorityService;
+import org.apache.rave.portal.service.NewAccountService;
 import org.apache.rave.portal.service.PortalPreferenceService;
 import org.apache.rave.portal.service.UserService;
 import org.apache.rave.portal.web.util.ModelKeys;
 import org.apache.rave.portal.web.util.PortalPreferenceKeys;
 import org.apache.rave.portal.web.util.ViewNames;
+import org.apache.rave.portal.web.validator.NewAccountValidator;
 import org.apache.rave.portal.web.validator.UserProfileValidator;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.stereotype.Controller;
@@ -60,6 +65,8 @@ import static org.apache.rave.portal.web.controller.admin.AdminControllerUtil.is
 @SessionAttributes({"user", ModelKeys.TOKENCHECK})
 public class UserController {
 
+    private static final Logger logger = LoggerFactory.getLogger(UserController.class);
+
     private static final String SELECTED_ITEM = "users";
 
     @Autowired
@@ -74,13 +81,20 @@ public class UserController {
     @Autowired
     private PortalPreferenceService preferenceService;
 
-    @InitBinder
+    @Autowired
+    private NewAccountValidator newAccountValidator;
+
+    @Autowired
+    private NewAccountService newAccountService;
+
+    @InitBinder(value = {"user"})
     public void initBinder(WebDataBinder dataBinder) {
         dataBinder.registerCustomEditor(GrantedAuthority.class, new AuthorityEditor());
         dataBinder.registerCustomEditor(Authority.class, new AuthorityEditor());
         dataBinder.setDisallowedFields("entityId", "username", "password", "confirmPassword");
     }
 
+
     @RequestMapping(value = {"/admin/users"}, method = RequestMethod.GET)
     public String viewUsers(@RequestParam(required = false, defaultValue = "0") int offset,
                             @RequestParam(required = false) final String action,
@@ -151,7 +165,51 @@ public class UserController {
         status.setComplete();
         return "redirect:/app/admin/users?action=delete";
     }
-    
+
+    @RequestMapping(method = RequestMethod.GET, value = {"/admin/adduser"})
+    public String setUpForm(ModelMap model) {
+        logger.debug("Initializing new account form");
+        AdminControllerUtil.addNavigationMenusToModel(SELECTED_ITEM, (Model) model);
+        model.addAttribute(ModelKeys.NEW_USER, new NewUser());
+        return ViewNames.ADMIN_NEW_ACCOUNT;
+
+    }
+
+    @RequestMapping(value = {"/admin/newaccount", "/admin/newaccount/*"}, method = RequestMethod.POST)
+    public String create(@ModelAttribute NewUser newUser, BindingResult results, Model model) {
+        logger.debug("Creating a new user account");
+        model.addAttribute(ModelKeys.NEW_USER, newUser);
+        newAccountValidator.validate(newUser, results);
+        if (results.hasErrors()) {
+            logger.info("newaccount.jsp: shows validation errors");
+            addNavigationMenusToModel(SELECTED_ITEM, model);
+            return ViewNames.ADMIN_NEW_ACCOUNT;
+        }
+        try {
+            logger.debug("newaccount.jsp: passed form validation");
+            newAccountService.createNewAccount(newUser);
+            addNavigationMenusToModel("home", model);
+            return ViewNames.ADMIN_HOME;
+        } catch (org.springframework.dao.IncorrectResultSizeDataAccessException ex) {
+            addNavigationMenusToModel(SELECTED_ITEM, model);
+            logger.info("Account creation failed: ", ex);
+            results.reject("Account already exists", "Unable to create account");
+            return ViewNames.ADMIN_NEW_ACCOUNT;
+
+        } catch (Exception ex) {
+            if (logger.isDebugEnabled()) {
+                logger.error("Account creation failed: ", ex);
+            } else {
+                logger.error("Account creation failed: {}", ex.getMessage());
+            }
+            results.reject("Unable to create account:" + ex.getMessage(), "Unable to create account");
+            addNavigationMenusToModel(SELECTED_ITEM, model);
+            return ViewNames.ADMIN_NEW_ACCOUNT;
+        }
+
+    }
+
+
     @ModelAttribute("authorities")
     public SearchResult<Authority> populateAuthorityList() {
         return authorityService.getAllAuthorities();
@@ -175,9 +233,16 @@ public class UserController {
         this.userProfileValidator = userProfileValidator;
     }
 
-    // setters for unit tests
-    public void setPreferenceService(PortalPreferenceService preferenceService) {
-            this.preferenceService = preferenceService;
+    void setPreferenceService(PortalPreferenceService preferenceService) {
+        this.preferenceService = preferenceService;
+    }
+
+    void setNewAccountValidator(NewAccountValidator newAccountValidator) {
+        this.newAccountValidator = newAccountValidator;
+    }
+
+    void setNewAccountService(NewAccountService newAccountService) {
+        this.newAccountService = newAccountService;
     }
 
 
@@ -193,7 +258,8 @@ public class UserController {
         }
 
     }
-   public int getPageSize() {
+
+    public int getPageSize() {
         final PortalPreference pageSizePref = preferenceService.getPreference(PortalPreferenceKeys.PAGE_SIZE);
         if (pageSizePref == null) {
             return DEFAULT_PAGE_SIZE;
diff --git a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/util/ViewNames.java b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/util/ViewNames.java
index 499b4ce3..39b6bf50 100644
--- a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/util/ViewNames.java
+++ b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/util/ViewNames.java
@@ -37,6 +37,7 @@ public final class ViewNames {
     public static final String PERSON_PROFILE = USER_PREFIX + "personProfile";
 
     public static final String ADMIN_HOME = ADMIN_PREFIX + "home";
+    public static final String ADMIN_NEW_ACCOUNT = ADMIN_PREFIX + "newaccount";
     public static final String ADMIN_PREFERENCES = ADMIN_PREFIX + "preferences";
     public static final String ADMIN_PREFERENCE_DETAIL = ADMIN_PREFIX + "preferencedetail";
     public static final String ADMIN_USERS = ADMIN_PREFIX + "users";
@@ -63,4 +64,4 @@ public final class ViewNames {
     public static String getPersonPageView(String layoutName) {
         return new StringBuilder(PERSON_PROFILE).append(".").append(layoutName).toString();
     }
-}
\ No newline at end of file
+}
diff --git a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/UserControllerTest.java b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/UserControllerTest.java
index 6c18cca6..552ddd84 100644
--- a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/UserControllerTest.java
+++ b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/UserControllerTest.java
@@ -20,14 +20,16 @@
 package org.apache.rave.portal.web.controller.admin;
 
 import org.apache.rave.portal.model.Authority;
+import org.apache.rave.portal.model.NewUser;
 import org.apache.rave.portal.model.User;
 import org.apache.rave.portal.model.util.SearchResult;
 import org.apache.rave.portal.service.AuthorityService;
+import org.apache.rave.portal.service.NewAccountService;
 import org.apache.rave.portal.service.PortalPreferenceService;
 import org.apache.rave.portal.service.UserService;
 import org.apache.rave.portal.web.util.ModelKeys;
-import org.apache.rave.portal.web.util.PortalPreferenceKeys;
 import org.apache.rave.portal.web.util.ViewNames;
+import org.apache.rave.portal.web.validator.NewAccountValidator;
 import org.apache.rave.portal.web.validator.UserProfileValidator;
 import org.junit.Before;
 import org.junit.Test;
@@ -45,6 +47,7 @@ import static junit.framework.Assert.assertEquals;
 import static junit.framework.Assert.assertFalse;
 import static junit.framework.Assert.assertTrue;
 import static org.easymock.EasyMock.createMock;
+import static org.easymock.EasyMock.createNiceMock;
 import static org.easymock.EasyMock.expect;
 import static org.easymock.EasyMock.expectLastCall;
 import static org.easymock.EasyMock.replay;
@@ -59,6 +62,7 @@ public class UserControllerTest {
 
     private UserController controller;
     private UserService userService;
+    private NewAccountService newAccountService;
     private AuthorityService authorityService;
     private PortalPreferenceService preferenceService;
     private String validToken;
@@ -235,6 +239,70 @@ public class UserControllerTest {
 
     }
 
+    @Test
+    public void setupForm() {
+        ModelMap modelMap = new ExtendedModelMap();
+        final String viewName = controller.setUpForm(modelMap);
+        assertEquals(ViewNames.ADMIN_NEW_ACCOUNT, viewName);
+        assertTrue(modelMap.containsAttribute(TABS));
+        assertTrue(modelMap.get(ModelKeys.NEW_USER) instanceof NewUser);
+    }
+
+    @Test
+    public void create_ValidFormSubmitted() throws Exception {
+        final Model model = createNiceMock(Model.class);
+        final NewUser newUser = new NewUser();
+        final BindingResult errors = new BeanPropertyBindingResult(newUser, ModelKeys.NEW_USER);
+        final String username = "username";
+        final String password = "password";
+        final String email = "newuser@example.com";
+        final String confirmPassword = password;
+
+        newUser.setUsername(username);
+        newUser.setPassword(password);
+        newUser.setConfirmPassword(confirmPassword);
+        newUser.setEmail(email);
+
+        expect(userService.getUserByUsername(username)).andReturn(null);
+        expect(userService.getUserByEmail(email)).andReturn(null);
+
+        newAccountService.createNewAccount(newUser);
+
+        expectLastCall();
+        replay(userService, model, newAccountService);
+
+        String result = controller.create(newUser, errors, model);
+        verify(userService, model, newAccountService);
+
+        assertFalse(errors.hasErrors());
+        assertEquals(ViewNames.ADMIN_HOME, result);
+    }
+    @Test
+    public void create_EmptyForm() throws Exception {
+        final Model model = createNiceMock(Model.class);
+        final NewUser newUser = new NewUser();
+        final BindingResult errors = new BeanPropertyBindingResult(newUser, ModelKeys.NEW_USER);
+        final String username = "";
+        final String password = "";
+        final String email = "";
+        final String confirmPassword = password;
+
+        newUser.setUsername(username);
+        newUser.setPassword(password);
+        newUser.setConfirmPassword(confirmPassword);
+        newUser.setEmail(email);
+
+        newAccountService.createNewAccount(newUser);
+
+        replay(model);
+
+        String result = controller.create(newUser, errors, model);
+        verify(model);
+
+        assertTrue(errors.hasErrors());
+        assertEquals(ViewNames.ADMIN_NEW_ACCOUNT, result);
+    }
+
     @Test
     public void getAuthoritiesForModelMap() {
         final SearchResult<Authority> authorities = createSearchResultWithTwoAuthorities();
@@ -261,6 +329,12 @@ public class UserControllerTest {
         UserProfileValidator userProfileValidator = new UserProfileValidator(userService);
         controller.setUserProfileValidator(userProfileValidator);
         validToken = AdminControllerUtil.generateSessionToken();
+
+        final NewAccountValidator validator = new NewAccountValidator(userService);
+        controller.setNewAccountValidator(validator);
+
+        newAccountService = createMock(NewAccountService.class);
+        controller.setNewAccountService(newAccountService);
     }
 
 
