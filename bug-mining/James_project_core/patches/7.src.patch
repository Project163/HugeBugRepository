diff --git a/core/src/main/java/org/apache/james/core/MaybeSender.java b/core/src/main/java/org/apache/james/core/MaybeSender.java
index cdd4474d8f..6460ddc42d 100644
--- a/core/src/main/java/org/apache/james/core/MaybeSender.java
+++ b/core/src/main/java/org/apache/james/core/MaybeSender.java
@@ -55,6 +55,7 @@ public class MaybeSender {
         return new MaybeSender(Optional.empty());
     }
 
+    @SuppressWarnings("deprecation")
     public static MaybeSender of(MailAddress mailAddress) {
         return new MaybeSender(Optional.ofNullable(mailAddress)
             .filter(address -> !address.isNullSender()));
diff --git a/core/src/test/java/org/apache/james/core/MailAddressTest.java b/core/src/test/java/org/apache/james/core/MailAddressTest.java
index 16e9a5b863..816997861e 100644
--- a/core/src/test/java/org/apache/james/core/MailAddressTest.java
+++ b/core/src/test/java/org/apache/james/core/MailAddressTest.java
@@ -232,24 +232,28 @@ public class MailAddressTest {
             .isEqualTo(MailAddress.nullSender());
     }
 
+    @SuppressWarnings("deprecation")
     @Test
     public void getMailSenderShouldReturnNullSenderWhenNullSender() {
         assertThat(MailAddress.getMailSender(MailAddress.NULL_SENDER_AS_STRING))
             .isEqualTo(MailAddress.nullSender());
     }
 
+    @SuppressWarnings("deprecation")
     @Test
     public void getMailSenderShouldReturnParsedAddressWhenNotNullAddress() throws Exception {
         assertThat(MailAddress.getMailSender(GOOD_ADDRESS))
             .isEqualTo(new MailAddress(GOOD_ADDRESS));
     }
 
+    @SuppressWarnings("deprecation")
     @Test
     public void equalsShouldReturnFalseWhenOnlyFirstMemberIsANullSender() {
         assertThat(MailAddress.getMailSender(GOOD_ADDRESS))
             .isNotEqualTo(MailAddress.nullSender());
     }
 
+    @SuppressWarnings("deprecation")
     @Test
     public void equalsShouldReturnFalseWhenOnlySecondMemberIsANullSender() {
         assertThat(MailAddress.nullSender())
