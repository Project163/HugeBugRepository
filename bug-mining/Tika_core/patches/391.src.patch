diff --git a/tika-core/src/main/java/org/apache/tika/metadata/filter/CompositeMetadataFilter.java b/tika-core/src/main/java/org/apache/tika/metadata/filter/CompositeMetadataFilter.java
index 2c7d97661..95b12d520 100644
--- a/tika-core/src/main/java/org/apache/tika/metadata/filter/CompositeMetadataFilter.java
+++ b/tika-core/src/main/java/org/apache/tika/metadata/filter/CompositeMetadataFilter.java
@@ -35,4 +35,9 @@ public class CompositeMetadataFilter extends MetadataFilter {
             filter.filter(metadata);
         }
     }
+
+    @Override
+    public String toString() {
+        return "CompositeMetadataFilter{" + "filters=" + filters + '}';
+    }
 }
diff --git a/tika-core/src/main/java/org/apache/tika/metadata/filter/FieldNameMappingFilter.java b/tika-core/src/main/java/org/apache/tika/metadata/filter/FieldNameMappingFilter.java
index db16f5dff..00c60d8f5 100644
--- a/tika-core/src/main/java/org/apache/tika/metadata/filter/FieldNameMappingFilter.java
+++ b/tika-core/src/main/java/org/apache/tika/metadata/filter/FieldNameMappingFilter.java
@@ -75,4 +75,9 @@ public class FieldNameMappingFilter extends MetadataFilter {
             this.mappings.put(e.getKey(), e.getValue());
         }
     }
+
+    @Override
+    public String toString() {
+        return "FieldNameMappingFilter{" + "mappings=" + mappings + ", excludeUnmapped=" + excludeUnmapped + '}';
+    }
 }
diff --git a/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java b/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java
index 691bf7f9f..25256a77f 100644
--- a/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java
+++ b/tika-core/src/main/java/org/apache/tika/parser/ParseContext.java
@@ -17,8 +17,10 @@
 package org.apache.tika.parser;
 
 import java.io.Serializable;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Set;
 
 /**
  * Parse context. Used to pass context information to Tika parsers.
@@ -82,4 +84,33 @@ public class ParseContext implements Serializable {
             return defaultValue;
         }
     }
+
+    public boolean isEmpty() {
+        return context.size() == 0;
+    }
+
+    //this should really only be used for serialization
+    public Set<String> keySet() {
+        return Collections
+                .unmodifiableSet(context.keySet());
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+
+        ParseContext that = (ParseContext) o;
+        return context.equals(that.context);
+    }
+
+    @Override
+    public int hashCode() {
+        return context.hashCode();
+    }
+
 }
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/FetchEmitTuple.java b/tika-core/src/main/java/org/apache/tika/pipes/FetchEmitTuple.java
index 0c0334fd4..a0f40901b 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/FetchEmitTuple.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/FetchEmitTuple.java
@@ -20,6 +20,7 @@ import java.io.Serializable;
 import java.util.Objects;
 
 import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
 import org.apache.tika.pipes.emitter.EmitKey;
 import org.apache.tika.pipes.extractor.EmbeddedDocumentBytesConfig;
 import org.apache.tika.pipes.fetcher.FetchKey;
@@ -36,41 +37,30 @@ public class FetchEmitTuple implements Serializable {
     private final FetchKey fetchKey;
     private EmitKey emitKey;
     private final Metadata metadata;
+    private final ParseContext parseContext;
     private final ON_PARSE_EXCEPTION onParseException;
-    private HandlerConfig handlerConfig;
 
     private EmbeddedDocumentBytesConfig embeddedDocumentBytesConfig;
 
     public FetchEmitTuple(String id, FetchKey fetchKey, EmitKey emitKey) {
-        this(id, fetchKey, emitKey, new Metadata(), HandlerConfig.DEFAULT_HANDLER_CONFIG,
-                DEFAULT_ON_PARSE_EXCEPTION);
+        this(id, fetchKey, emitKey, new Metadata());
     }
-    public FetchEmitTuple(String id, FetchKey fetchKey, EmitKey emitKey, ON_PARSE_EXCEPTION onParseException) {
-        this(id, fetchKey, emitKey, new Metadata(), HandlerConfig.DEFAULT_HANDLER_CONFIG,
-                onParseException);
-    }
-
     public FetchEmitTuple(String id, FetchKey fetchKey, EmitKey emitKey, Metadata metadata) {
-        this(id, fetchKey, emitKey, metadata, HandlerConfig.DEFAULT_HANDLER_CONFIG,
-                DEFAULT_ON_PARSE_EXCEPTION);
+        this(id, fetchKey, emitKey, metadata, new ParseContext());
     }
 
-    public FetchEmitTuple(String id, FetchKey fetchKey, EmitKey emitKey, Metadata metadata,
-                          HandlerConfig handlerConfig, ON_PARSE_EXCEPTION onParseException) {
-        this(id, fetchKey, emitKey, metadata, handlerConfig, onParseException,
-                EmbeddedDocumentBytesConfig.SKIP);
+    public FetchEmitTuple(String id, FetchKey fetchKey, EmitKey emitKey, Metadata metadata, ParseContext parseContext) {
+        this(id, fetchKey, emitKey, metadata, parseContext, ON_PARSE_EXCEPTION.EMIT);
     }
 
-    public FetchEmitTuple(String id, FetchKey fetchKey, EmitKey emitKey, Metadata metadata,
-                          HandlerConfig handlerConfig, ON_PARSE_EXCEPTION onParseException,
-                          EmbeddedDocumentBytesConfig embeddedDocumentBytesConfig) {
+    public FetchEmitTuple(String id, FetchKey fetchKey, EmitKey emitKey, Metadata metadata, ParseContext parseContext,
+                          ON_PARSE_EXCEPTION onParseException) {
         this.id = id;
         this.fetchKey = fetchKey;
         this.emitKey = emitKey;
         this.metadata = metadata;
-        this.handlerConfig = handlerConfig;
+        this.parseContext = parseContext;
         this.onParseException = onParseException;
-        this.embeddedDocumentBytesConfig = embeddedDocumentBytesConfig;
     }
 
     public String getId() {
@@ -88,24 +78,15 @@ public class FetchEmitTuple implements Serializable {
         return metadata;
     }
 
-    public ON_PARSE_EXCEPTION getOnParseException() {
-        return onParseException;
+    public ParseContext getParseContext() {
+        return parseContext;
     }
-
     public void setEmitKey(EmitKey emitKey) {
         this.emitKey = emitKey;
     }
 
-    public void setHandlerConfig(HandlerConfig handlerConfig) {
-        this.handlerConfig = handlerConfig;
-    }
-
-    public HandlerConfig getHandlerConfig() {
-        return handlerConfig == null ? HandlerConfig.DEFAULT_HANDLER_CONFIG : handlerConfig;
-    }
-
-    public EmbeddedDocumentBytesConfig getEmbeddedDocumentBytesConfig() {
-        return embeddedDocumentBytesConfig;
+    public ON_PARSE_EXCEPTION getOnParseException() {
+        return onParseException;
     }
 
     @Override
@@ -118,46 +99,28 @@ public class FetchEmitTuple implements Serializable {
         }
 
         FetchEmitTuple that = (FetchEmitTuple) o;
-
-        if (!Objects.equals(id, that.id)) {
-            return false;
-        }
-        if (!Objects.equals(fetchKey, that.fetchKey)) {
-            return false;
-        }
-        if (!Objects.equals(emitKey, that.emitKey)) {
-            return false;
-        }
-        if (!Objects.equals(metadata, that.metadata)) {
-            return false;
-        }
-        if (onParseException != that.onParseException) {
-            return false;
-        }
-        if (!Objects.equals(handlerConfig, that.handlerConfig)) {
-            return false;
-        }
-        return Objects.equals(embeddedDocumentBytesConfig, that.embeddedDocumentBytesConfig);
+        return Objects.equals(id, that.id) && Objects.equals(fetchKey, that.fetchKey) && Objects.equals(emitKey, that.emitKey)
+                && Objects.equals(metadata, that.metadata) &&
+                Objects.equals(parseContext, that.parseContext) && onParseException == that.onParseException &&
+                Objects.equals(embeddedDocumentBytesConfig, that.embeddedDocumentBytesConfig);
     }
 
     @Override
     public int hashCode() {
-        int result = id != null ? id.hashCode() : 0;
-        result = 31 * result + (fetchKey != null ? fetchKey.hashCode() : 0);
-        result = 31 * result + (emitKey != null ? emitKey.hashCode() : 0);
-        result = 31 * result + (metadata != null ? metadata.hashCode() : 0);
-        result = 31 * result + (onParseException != null ? onParseException.hashCode() : 0);
-        result = 31 * result + (handlerConfig != null ? handlerConfig.hashCode() : 0);
-        result = 31 * result +
-                (embeddedDocumentBytesConfig != null ? embeddedDocumentBytesConfig.hashCode() : 0);
+        int result = Objects.hashCode(id);
+        result = 31 * result + Objects.hashCode(fetchKey);
+        result = 31 * result + Objects.hashCode(emitKey);
+        result = 31 * result + Objects.hashCode(metadata);
+        result = 31 * result + Objects.hashCode(parseContext);
+        result = 31 * result + Objects.hashCode(onParseException);
+        result = 31 * result + Objects.hashCode(embeddedDocumentBytesConfig);
         return result;
     }
 
     @Override
     public String toString() {
-        return "FetchEmitTuple{" + "id='" + id + '\'' + ", fetchKey=" + fetchKey + ", emitKey=" +
-                emitKey + ", metadata=" + metadata + ", onParseException=" + onParseException +
-                ", handlerConfig=" + handlerConfig + ", embeddedDocumentBytesConfig=" +
-                embeddedDocumentBytesConfig + '}';
+        return "FetchEmitTuple{" + "id='" + id + '\'' + ", fetchKey=" + fetchKey + ", emitKey=" + emitKey +
+                ", metadata=" + metadata + ", parseContext=" + parseContext +
+                ", onParseException=" + onParseException + ", embeddedDocumentBytesConfig=" + embeddedDocumentBytesConfig + '}';
     }
 }
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/HandlerConfig.java b/tika-core/src/main/java/org/apache/tika/pipes/HandlerConfig.java
index d128dcb3d..8cb3edfa8 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/HandlerConfig.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/HandlerConfig.java
@@ -78,6 +78,10 @@ public class HandlerConfig implements Serializable {
     PARSE_MODE parseMode = PARSE_MODE.RMETA;
 
 
+    public HandlerConfig() {
+
+    }
+
     public HandlerConfig(BasicContentHandlerFactory.HANDLER_TYPE type, PARSE_MODE parseMode,
                          int writeLimit,
                          int maxEmbeddedResources, boolean throwOnWriteLimitReached) {
@@ -92,22 +96,56 @@ public class HandlerConfig implements Serializable {
         return type;
     }
 
+    public void setType(BasicContentHandlerFactory.HANDLER_TYPE type) {
+        this.type = type;
+    }
+
+    public void setType(String typeString) {
+        setType(BasicContentHandlerFactory.HANDLER_TYPE.valueOf(typeString));
+    }
+
     public int getWriteLimit() {
         return writeLimit;
     }
 
+    public void setWriteLimit(int writeLimit) {
+        this.writeLimit = writeLimit;
+    }
+
     public int getMaxEmbeddedResources() {
         return maxEmbeddedResources;
     }
 
-    public PARSE_MODE getParseMode() {
-        return parseMode;
+    public void setMaxEmbeddedResources(int maxEmbeddedResources) {
+        this.maxEmbeddedResources = maxEmbeddedResources;
     }
 
     public boolean isThrowOnWriteLimitReached() {
         return throwOnWriteLimitReached;
     }
 
+    public void setThrowOnWriteLimitReached(boolean throwOnWriteLimitReached) {
+        this.throwOnWriteLimitReached = throwOnWriteLimitReached;
+    }
+
+    public PARSE_MODE getParseMode() {
+        return parseMode;
+    }
+
+    public void setParseMode(PARSE_MODE parseMode) {
+        this.parseMode = parseMode;
+    }
+
+    public void setParseMode(String parseMode) {
+        this.parseMode = PARSE_MODE.parseMode(parseMode);
+    }
+
+    @Override
+    public String toString() {
+        return "HandlerConfig{" + "type=" + type + ", writeLimit=" + writeLimit + ", maxEmbeddedResources=" + maxEmbeddedResources +
+                ", throwOnWriteLimitReached=" + throwOnWriteLimitReached + ", parseMode=" + parseMode + '}';
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -116,22 +154,19 @@ public class HandlerConfig implements Serializable {
         if (o == null || getClass() != o.getClass()) {
             return false;
         }
+
         HandlerConfig that = (HandlerConfig) o;
-        return writeLimit == that.writeLimit && maxEmbeddedResources == that.maxEmbeddedResources &&
-                throwOnWriteLimitReached == that.throwOnWriteLimitReached && type == that.type &&
-                parseMode == that.parseMode;
+        return writeLimit == that.writeLimit && maxEmbeddedResources == that.maxEmbeddedResources && throwOnWriteLimitReached == that.throwOnWriteLimitReached &&
+                type == that.type && parseMode == that.parseMode;
     }
 
     @Override
     public int hashCode() {
-        return Objects.hash(type, writeLimit, maxEmbeddedResources, throwOnWriteLimitReached,
-                parseMode);
-    }
-
-    @Override
-    public String toString() {
-        return "HandlerConfig{" + "type=" + type + ", writeLimit=" + writeLimit +
-                ", maxEmbeddedResources=" + maxEmbeddedResources + ", throwOnWriteLimitReached=" +
-                throwOnWriteLimitReached + ", parseMode=" + parseMode + '}';
+        int result = Objects.hashCode(type);
+        result = 31 * result + writeLimit;
+        result = 31 * result + maxEmbeddedResources;
+        result = 31 * result + Boolean.hashCode(throwOnWriteLimitReached);
+        result = 31 * result + Objects.hashCode(parseMode);
+        return result;
     }
 }
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/PipesClient.java b/tika-core/src/main/java/org/apache/tika/pipes/PipesClient.java
index 52e72df85..129067136 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/PipesClient.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/PipesClient.java
@@ -48,6 +48,7 @@ import org.slf4j.LoggerFactory;
 
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaCoreProperties;
+import org.apache.tika.parser.ParseContext;
 import org.apache.tika.pipes.emitter.EmitData;
 import org.apache.tika.pipes.emitter.EmitKey;
 import org.apache.tika.utils.ProcessUtils;
@@ -325,7 +326,7 @@ public class PipesClient implements Closeable {
             case INTERMEDIATE_RESULT:
                 LOG.debug("pipesClientId={} intermediate success: {} in {} ms", pipesClientId,
                         t.getId(), millis);
-                return deserializeIntermediateResult(t.getEmitKey());
+                return deserializeIntermediateResult(t.getEmitKey(), t.getParseContext());
             case PARSE_SUCCESS:
                 //there may have been a parse exception, but the parse didn't crash
                 LOG.debug("pipesClientId={} parse success: {} in {} ms", pipesClientId, t.getId(),
@@ -383,7 +384,7 @@ public class PipesClient implements Closeable {
         }
     }
 
-    private PipesResult deserializeIntermediateResult(EmitKey emitKey) throws IOException {
+    private PipesResult deserializeIntermediateResult(EmitKey emitKey, ParseContext parseContext) throws IOException {
 
         int length = input.readInt();
         byte[] bytes = new byte[length];
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/PipesServer.java b/tika-core/src/main/java/org/apache/tika/pipes/PipesServer.java
index 991694f88..95bb0e9ed 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/PipesServer.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/PipesServer.java
@@ -69,11 +69,10 @@ import org.apache.tika.pipes.emitter.Emitter;
 import org.apache.tika.pipes.emitter.EmitterManager;
 import org.apache.tika.pipes.emitter.StreamEmitter;
 import org.apache.tika.pipes.emitter.TikaEmitterException;
+import org.apache.tika.pipes.extractor.EmbeddedDocumentBytesConfig;
 import org.apache.tika.pipes.extractor.EmittingEmbeddedDocumentBytesHandler;
-import org.apache.tika.pipes.fetcher.FetchKey;
 import org.apache.tika.pipes.fetcher.Fetcher;
 import org.apache.tika.pipes.fetcher.FetcherManager;
-import org.apache.tika.pipes.fetcher.RangeFetcher;
 import org.apache.tika.sax.BasicContentHandlerFactory;
 import org.apache.tika.sax.ContentHandlerFactory;
 import org.apache.tika.sax.RecursiveParserWrapperHandler;
@@ -281,7 +280,7 @@ public class PipesServer implements Runnable {
 
     private void emit(String taskId, EmitKey emitKey,
                       boolean isExtractEmbeddedBytes, MetadataListAndEmbeddedBytes parseData,
-                      String parseExceptionStack) {
+                      String parseExceptionStack, ParseContext parseContext) {
         Emitter emitter = null;
 
         try {
@@ -297,7 +296,7 @@ public class PipesServer implements Runnable {
                     parseData.toBePackagedForStreamEmitter()) {
                 emitContentsAndBytes(emitter, emitKey, parseData);
             } else {
-                emitter.emit(emitKey.getEmitKey(), parseData.getMetadataList());
+                emitter.emit(emitKey.getEmitKey(), parseData.getMetadataList(), parseContext);
             }
         } catch (IOException | TikaEmitterException e) {
             LOG.warn("emit exception", e);
@@ -401,8 +400,11 @@ public class PipesServer implements Runnable {
         String stack = getContainerStacktrace(t, parseData.getMetadataList());
         //we need to apply this after we pull out the stacktrace
         filterMetadata(parseData.getMetadataList());
+        ParseContext parseContext = t.getParseContext();
+        FetchEmitTuple.ON_PARSE_EXCEPTION onParseException = t.getOnParseException();
+        EmbeddedDocumentBytesConfig embeddedDocumentBytesConfig = parseContext.get(EmbeddedDocumentBytesConfig.class);
         if (StringUtils.isBlank(stack) ||
-                t.getOnParseException() == FetchEmitTuple.ON_PARSE_EXCEPTION.EMIT) {
+                onParseException == FetchEmitTuple.ON_PARSE_EXCEPTION.EMIT) {
             injectUserMetadata(t.getMetadata(), parseData.getMetadataList());
             EmitKey emitKey = t.getEmitKey();
             if (StringUtils.isBlank(emitKey.getEmitKey())) {
@@ -410,14 +412,14 @@ public class PipesServer implements Runnable {
                 t.setEmitKey(emitKey);
             }
             EmitData emitData = new EmitData(t.getEmitKey(), parseData.getMetadataList(), stack);
-            if (t.getEmbeddedDocumentBytesConfig().isExtractEmbeddedDocumentBytes() &&
+            if (embeddedDocumentBytesConfig.isExtractEmbeddedDocumentBytes() &&
                     parseData.toBePackagedForStreamEmitter()) {
-                emit(t.getId(), emitKey, t.getEmbeddedDocumentBytesConfig().isExtractEmbeddedDocumentBytes(),
-                        parseData, stack);
+                emit(t.getId(), emitKey, embeddedDocumentBytesConfig.isExtractEmbeddedDocumentBytes(),
+                        parseData, stack, parseContext);
             } else if (maxForEmitBatchBytes >= 0 &&
                     emitData.getEstimatedSizeBytes() >= maxForEmitBatchBytes) {
-                emit(t.getId(), emitKey, t.getEmbeddedDocumentBytesConfig().isExtractEmbeddedDocumentBytes(),
-                        parseData, stack);
+                emit(t.getId(), emitKey, embeddedDocumentBytesConfig.isExtractEmbeddedDocumentBytes(),
+                        parseData, stack, parseContext);
             } else {
                 //send back to the client
                 write(emitData);
@@ -456,35 +458,18 @@ public class PipesServer implements Runnable {
     }
 
     protected MetadataListAndEmbeddedBytes parseFromTuple(FetchEmitTuple t, Fetcher fetcher) {
-        FetchKey fetchKey = t.getFetchKey();
-        if (fetchKey.hasRange()) {
-            if (!(fetcher instanceof RangeFetcher)) {
-                throw new IllegalArgumentException(
-                        "fetch key has a range, but the fetcher is not a range fetcher");
-            }
-            Metadata metadata = new Metadata();
-            try (InputStream stream = ((RangeFetcher) fetcher).fetch(fetchKey.getFetchKey(),
-                    fetchKey.getRangeStart(), fetchKey.getRangeEnd(), metadata)) {
-                return parseWithStream(t, stream, metadata);
-            } catch (SecurityException e) {
-                LOG.error("security exception " + t.getId(), e);
-                throw e;
-            } catch (TikaException | IOException e) {
-                LOG.warn("fetch exception " + t.getId(), e);
-                write(STATUS.FETCH_EXCEPTION, ExceptionUtils.getStackTrace(e));
-            }
-        } else {
-            Metadata metadata = new Metadata();
-            try (InputStream stream = fetcher.fetch(t.getFetchKey().getFetchKey(), metadata)) {
-                return parseWithStream(t, stream, metadata);
-            } catch (SecurityException e) {
-                LOG.error("security exception " + t.getId(), e);
-                throw e;
-            } catch (TikaException | IOException e) {
-                LOG.warn("fetch exception " + t.getId(), e);
-                write(STATUS.FETCH_EXCEPTION, ExceptionUtils.getStackTrace(e));
-            }
+
+        Metadata metadata = new Metadata();
+        try (InputStream stream = fetcher.fetch(t.getFetchKey().getFetchKey(), metadata, t.getParseContext())) {
+            return parseWithStream(t, stream, metadata);
+        } catch (SecurityException e) {
+            LOG.error("security exception " + t.getId(), e);
+            throw e;
+        } catch (TikaException | IOException e) {
+            LOG.warn("fetch exception " + t.getId(), e);
+            write(STATUS.FETCH_EXCEPTION, ExceptionUtils.getStackTrace(e));
         }
+
         return null;
     }
 
@@ -528,10 +513,11 @@ public class PipesServer implements Runnable {
     private MetadataListAndEmbeddedBytes parseWithStream(FetchEmitTuple fetchEmitTuple,
                                                          InputStream stream, Metadata metadata)
             throws TikaConfigException {
-        HandlerConfig handlerConfig = fetchEmitTuple.getHandlerConfig();
+
         List<Metadata> metadataList;
         //this adds the EmbeddedDocumentByteStore to the parsecontext
-        ParseContext parseContext = createParseContext(fetchEmitTuple);
+        ParseContext parseContext = setupParseContext(fetchEmitTuple);
+        HandlerConfig handlerConfig = parseContext.get(HandlerConfig.class);
         if (handlerConfig.getParseMode() == HandlerConfig.PARSE_MODE.RMETA) {
             metadataList =
                     parseRecursive(fetchEmitTuple, handlerConfig, stream, metadata, parseContext);
@@ -544,10 +530,16 @@ public class PipesServer implements Runnable {
                 parseContext.get(EmbeddedDocumentBytesHandler.class));
     }
 
-    private ParseContext createParseContext(FetchEmitTuple fetchEmitTuple)
+    private ParseContext setupParseContext(FetchEmitTuple fetchEmitTuple)
             throws TikaConfigException {
-        ParseContext parseContext = new ParseContext();
-        if (! fetchEmitTuple.getEmbeddedDocumentBytesConfig().isExtractEmbeddedDocumentBytes()) {
+        ParseContext parseContext = fetchEmitTuple.getParseContext();
+        if (parseContext.get(HandlerConfig.class) == null) {
+            parseContext.set(HandlerConfig.class, HandlerConfig.DEFAULT_HANDLER_CONFIG);
+        }
+        EmbeddedDocumentBytesConfig embeddedDocumentBytesConfig = parseContext.get(EmbeddedDocumentBytesConfig.class);
+        if (embeddedDocumentBytesConfig == null) {
+            //make sure there's one here -- or do we make this default in fetchemit tuple?
+            parseContext.set(EmbeddedDocumentBytesConfig.class, EmbeddedDocumentBytesConfig.SKIP);
             return parseContext;
         }
         EmbeddedDocumentExtractorFactory factory = ((AutoDetectParser)autoDetectParser)
@@ -561,18 +553,17 @@ public class PipesServer implements Runnable {
                         "instance of EmbeddedDocumentByteStoreExtractorFactory if you want" +
                         "to extract embedded bytes! I see this embedded doc factory: " +
                         factory.getClass() + "and a request: " +
-                        fetchEmitTuple.getEmbeddedDocumentBytesConfig());
+                        embeddedDocumentBytesConfig);
             }
         }
         //TODO: especially clean this up.
-        if (!StringUtils.isBlank(fetchEmitTuple.getEmbeddedDocumentBytesConfig().getEmitter())) {
+        if (!StringUtils.isBlank(embeddedDocumentBytesConfig.getEmitter())) {
             parseContext.set(EmbeddedDocumentBytesHandler.class,
-                    new EmittingEmbeddedDocumentBytesHandler(fetchEmitTuple.getEmitKey(),
-                            fetchEmitTuple.getEmbeddedDocumentBytesConfig(), emitterManager));
+                    new EmittingEmbeddedDocumentBytesHandler(fetchEmitTuple, emitterManager));
         } else {
             parseContext.set(EmbeddedDocumentBytesHandler.class,
                     new BasicEmbeddedDocumentBytesHandler(
-                    fetchEmitTuple.getEmbeddedDocumentBytesConfig()));
+                    embeddedDocumentBytesConfig));
         }
         return parseContext;
     }
@@ -693,11 +684,10 @@ public class PipesServer implements Runnable {
         } catch (IOException e) {
             LOG.warn("problem detecting: " + t.getId(), e);
         }
-
-        if (t.getEmbeddedDocumentBytesConfig() != null &&
-                t.getEmbeddedDocumentBytesConfig().isIncludeOriginal()) {
-            EmbeddedDocumentBytesHandler embeddedDocumentByteStore =
-                    parseContext.get(EmbeddedDocumentBytesHandler.class);
+        EmbeddedDocumentBytesConfig embeddedDocumentBytesConfig = parseContext.get(EmbeddedDocumentBytesConfig.class);
+        if (embeddedDocumentBytesConfig != null &&
+                embeddedDocumentBytesConfig.isIncludeOriginal()) {
+            EmbeddedDocumentBytesHandler embeddedDocumentByteStore = parseContext.get(EmbeddedDocumentBytesHandler.class);
             try (InputStream is = Files.newInputStream(tis.getPath())) {
                 embeddedDocumentByteStore.add(0, metadata, is);
             } catch (IOException e) {
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/async/AsyncEmitter.java b/tika-core/src/main/java/org/apache/tika/pipes/async/AsyncEmitter.java
index fce65c540..e0fe605f3 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/async/AsyncEmitter.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/async/AsyncEmitter.java
@@ -42,7 +42,7 @@ import org.apache.tika.utils.ExceptionUtils;
  */
 public class AsyncEmitter implements Callable<Integer> {
 
-    static final EmitData EMIT_DATA_STOP_SEMAPHORE = new EmitData(null, null);
+    static final EmitData EMIT_DATA_STOP_SEMAPHORE = new EmitData(null, null, null);
     static final int EMITTER_FUTURE_CODE = 2;
 
     private static final Logger LOG = LoggerFactory.getLogger(AsyncEmitter.class);
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/emitter/AbstractEmitter.java b/tika-core/src/main/java/org/apache/tika/pipes/emitter/AbstractEmitter.java
index 648e0949d..4629f9263 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/emitter/AbstractEmitter.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/emitter/AbstractEmitter.java
@@ -19,6 +19,8 @@ package org.apache.tika.pipes.emitter;
 import java.io.IOException;
 import java.util.List;
 
+import org.apache.tika.parser.ParseContext;
+
 public abstract class AbstractEmitter implements Emitter {
 
     private String name;
@@ -33,7 +35,7 @@ public abstract class AbstractEmitter implements Emitter {
     }
 
     /**
-     * The default behavior is to call {@link #emit(String, List)} on each item.
+     * The default behavior is to call {@link #emit(String, List, ParseContext)} on each item.
      * Some implementations, e.g. Solr/ES/vespa, can benefit from subclassing this and
      * emitting a bunch of docs at once.
      *
@@ -44,7 +46,7 @@ public abstract class AbstractEmitter implements Emitter {
     @Override
     public void emit(List<? extends EmitData> emitData) throws IOException, TikaEmitterException {
         for (EmitData d : emitData) {
-            emit(d.getEmitKey().getEmitKey(), d.getMetadataList());
+            emit(d.getEmitKey().getEmitKey(), d.getMetadataList(), d.getParseContext());
         }
     }
 }
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/emitter/EmitData.java b/tika-core/src/main/java/org/apache/tika/pipes/emitter/EmitData.java
index 95376a9fa..09d448adf 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/emitter/EmitData.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/emitter/EmitData.java
@@ -20,6 +20,7 @@ import java.io.Serializable;
 import java.util.List;
 
 import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
 import org.apache.tika.utils.StringUtils;
 
 public class EmitData implements Serializable {
@@ -30,18 +31,23 @@ public class EmitData implements Serializable {
 
     private final EmitKey emitKey;
     private final List<Metadata> metadataList;
-
     private final String containerStackTrace;
+    private ParseContext parseContext = null;
 
     public EmitData(EmitKey emitKey, List<Metadata> metadataList) {
         this(emitKey, metadataList, StringUtils.EMPTY);
     }
 
     public EmitData(EmitKey emitKey, List<Metadata> metadataList, String containerStackTrace) {
+        this(emitKey, metadataList, containerStackTrace, new ParseContext());
+    }
+
+    public EmitData(EmitKey emitKey, List<Metadata> metadataList, String containerStackTrace, ParseContext parseContext) {
         this.emitKey = emitKey;
         this.metadataList = metadataList;
         this.containerStackTrace = (containerStackTrace == null) ? StringUtils.EMPTY :
                 containerStackTrace;
+        this.parseContext = parseContext;
     }
 
     public EmitKey getEmitKey() {
@@ -60,6 +66,14 @@ public class EmitData implements Serializable {
         return estimateSizeInBytes(getEmitKey().getEmitKey(), getMetadataList(), containerStackTrace);
     }
 
+    public void setParseContext(ParseContext parseContext) {
+        this.parseContext = parseContext;
+    }
+
+    public ParseContext getParseContext() {
+        return parseContext;
+    }
+
     private static long estimateSizeInBytes(String id, List<Metadata> metadataList,
                                             String containerStackTrace) {
         long sz = 36 + id.length() * 2;
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/emitter/EmitKey.java b/tika-core/src/main/java/org/apache/tika/pipes/emitter/EmitKey.java
index e57006480..0f62ee06a 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/emitter/EmitKey.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/emitter/EmitKey.java
@@ -21,6 +21,8 @@ import java.util.Objects;
 
 public class EmitKey implements Serializable {
 
+    public static EmitKey NO_EMIT = new EmitKey(null, null);
+
     /**
      * Serial version UID
      */
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/emitter/Emitter.java b/tika-core/src/main/java/org/apache/tika/pipes/emitter/Emitter.java
index f60ef3b77..c748541af 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/emitter/Emitter.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/emitter/Emitter.java
@@ -20,12 +20,13 @@ import java.io.IOException;
 import java.util.List;
 
 import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
 
 public interface Emitter {
 
     String getName();
 
-    void emit(String emitKey, List<Metadata> metadataList) throws IOException, TikaEmitterException;
+    void emit(String emitKey, List<Metadata> metadataList, ParseContext parseContext) throws IOException, TikaEmitterException;
 
     void emit(List<? extends EmitData> emitData) throws IOException, TikaEmitterException;
     //TODO -- add this later for xhtml?
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/emitter/EmptyEmitter.java b/tika-core/src/main/java/org/apache/tika/pipes/emitter/EmptyEmitter.java
index b77107ba0..ef7adbef5 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/emitter/EmptyEmitter.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/emitter/EmptyEmitter.java
@@ -20,6 +20,7 @@ import java.io.IOException;
 import java.util.List;
 
 import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
 
 public class EmptyEmitter implements Emitter {
 
@@ -29,7 +30,7 @@ public class EmptyEmitter implements Emitter {
     }
 
     @Override
-    public void emit(String emitKey, List<Metadata> metadataList)
+    public void emit(String emitKey, List<Metadata> metadataList, ParseContext parseContext)
             throws IOException, TikaEmitterException {
 
     }
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/emitter/StreamEmitter.java b/tika-core/src/main/java/org/apache/tika/pipes/emitter/StreamEmitter.java
index 10526eb0e..30249b877 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/emitter/StreamEmitter.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/emitter/StreamEmitter.java
@@ -20,8 +20,9 @@ import java.io.IOException;
 import java.io.InputStream;
 
 import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
 
 public interface StreamEmitter extends Emitter {
-    void emit(String emitKey, InputStream inputStream, Metadata userMetadata)
+    void emit(String emitKey, InputStream inputStream, Metadata userMetadata, ParseContext parseContext)
             throws IOException, TikaEmitterException;
 }
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/extractor/EmbeddedDocumentBytesConfig.java b/tika-core/src/main/java/org/apache/tika/pipes/extractor/EmbeddedDocumentBytesConfig.java
index 071de05c4..c667fd766 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/extractor/EmbeddedDocumentBytesConfig.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/extractor/EmbeddedDocumentBytesConfig.java
@@ -96,13 +96,16 @@ public class EmbeddedDocumentBytesConfig implements Serializable {
         return includeOriginal;
     }
 
-    public void setZeroPadNameLength(int zeroPadName) {
+    public void setZeroPadName(int zeroPadName) {
         this.zeroPadName = zeroPadName;
     }
 
     public void setSuffixStrategy(SUFFIX_STRATEGY suffixStrategy) {
         this.suffixStrategy = suffixStrategy;
     }
+    public void setSuffixStrategy(String suffixStrategy) {
+        setSuffixStrategy(SUFFIX_STRATEGY.valueOf(suffixStrategy));
+    }
 
     public void setEmbeddedIdPrefix(String embeddedIdPrefix) {
         this.embeddedIdPrefix = embeddedIdPrefix;
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/extractor/EmittingEmbeddedDocumentBytesHandler.java b/tika-core/src/main/java/org/apache/tika/pipes/extractor/EmittingEmbeddedDocumentBytesHandler.java
index 1132a4bc6..9c73578f0 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/extractor/EmittingEmbeddedDocumentBytesHandler.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/extractor/EmittingEmbeddedDocumentBytesHandler.java
@@ -25,6 +25,8 @@ import org.apache.commons.io.IOExceptionWithCause;
 import org.apache.tika.exception.TikaConfigException;
 import org.apache.tika.extractor.AbstractEmbeddedDocumentBytesHandler;
 import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
+import org.apache.tika.pipes.FetchEmitTuple;
 import org.apache.tika.pipes.emitter.EmitKey;
 import org.apache.tika.pipes.emitter.Emitter;
 import org.apache.tika.pipes.emitter.EmitterManager;
@@ -37,11 +39,16 @@ public class EmittingEmbeddedDocumentBytesHandler extends AbstractEmbeddedDocume
     private final StreamEmitter emitter;
 
     private static final Metadata METADATA = new Metadata();
-    public EmittingEmbeddedDocumentBytesHandler(EmitKey containerEmitKey,
-                                                EmbeddedDocumentBytesConfig embeddedDocumentBytesConfig,
+    private static final ParseContext PARSE_CONTEXT = new ParseContext();
+
+    public EmittingEmbeddedDocumentBytesHandler(FetchEmitTuple fetchEmitTuple,
                                                 EmitterManager emitterManager) throws TikaConfigException {
-        this.containerEmitKey = containerEmitKey;
-        this.embeddedDocumentBytesConfig = embeddedDocumentBytesConfig;
+
+        this.containerEmitKey = fetchEmitTuple.getEmitKey();
+        this.embeddedDocumentBytesConfig = fetchEmitTuple.getParseContext().get(EmbeddedDocumentBytesConfig.class);
+        if (this.embeddedDocumentBytesConfig == null) {
+            throw new TikaConfigException("EmbeddedDocumentBytesConfig must not be null!");
+        }
         Emitter tmpEmitter =
                 emitterManager.getEmitter(embeddedDocumentBytesConfig.getEmitter());
         if (! (tmpEmitter instanceof StreamEmitter)) {
@@ -58,7 +65,7 @@ public class EmittingEmbeddedDocumentBytesHandler extends AbstractEmbeddedDocume
         String emitKey = getEmitKey(containerEmitKey.getEmitKey(),
                 id, embeddedDocumentBytesConfig, metadata);
         try {
-            emitter.emit(emitKey, inputStream, METADATA);
+            emitter.emit(emitKey, inputStream, METADATA, PARSE_CONTEXT);
         } catch (TikaEmitterException e) {
             throw new IOExceptionWithCause(e);
         }
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/fetcher/EmptyFetcher.java b/tika-core/src/main/java/org/apache/tika/pipes/fetcher/EmptyFetcher.java
index 022d00a8c..d64f81524 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/fetcher/EmptyFetcher.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/fetcher/EmptyFetcher.java
@@ -21,6 +21,7 @@ import java.io.InputStream;
 
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
 
 public class EmptyFetcher implements Fetcher {
 
@@ -30,7 +31,7 @@ public class EmptyFetcher implements Fetcher {
     }
 
     @Override
-    public InputStream fetch(String fetchKey, Metadata metadata) throws TikaException, IOException {
+    public InputStream fetch(String fetchKey, Metadata metadata, ParseContext parseContext) throws TikaException, IOException {
         return null;
     }
 }
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/fetcher/Fetcher.java b/tika-core/src/main/java/org/apache/tika/pipes/fetcher/Fetcher.java
index 1b3fa2a24..8f7a186fd 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/fetcher/Fetcher.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/fetcher/Fetcher.java
@@ -21,6 +21,7 @@ import java.io.InputStream;
 
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
 
 /**
  * Interface for an object that will fetch an InputStream given
@@ -33,5 +34,5 @@ public interface Fetcher {
 
     String getName();
 
-    InputStream fetch(String fetchKey, Metadata metadata) throws TikaException, IOException;
+    InputStream fetch(String fetchKey, Metadata metadata, ParseContext parseContext) throws TikaException, IOException;
 }
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/fetcher/RangeFetcher.java b/tika-core/src/main/java/org/apache/tika/pipes/fetcher/RangeFetcher.java
index 0a3ceae7f..246165c98 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/fetcher/RangeFetcher.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/fetcher/RangeFetcher.java
@@ -21,6 +21,7 @@ import java.io.InputStream;
 
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
 
 /**
  * This class extracts a range of bytes from a given fetch key.
@@ -28,7 +29,12 @@ import org.apache.tika.metadata.Metadata;
 public interface RangeFetcher extends Fetcher {
     //At some point, Tika 3.x?, we may want to add optional ranges to the fetchKey?
 
-    InputStream fetch(String fetchKey, long startOffset, long endOffset, Metadata metadata)
+    default InputStream fetch(String fetchKey, long startOffset, long endOffset, Metadata metadata)
+            throws TikaException, IOException {
+        return fetch(fetchKey, startOffset, endOffset, metadata, new ParseContext());
+    }
+
+    InputStream fetch(String fetchKey, long startOffset, long endOffset, Metadata metadata, ParseContext parseContext)
             throws TikaException, IOException;
 
 }
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/fetcher/fs/FileSystemFetcher.java b/tika-core/src/main/java/org/apache/tika/pipes/fetcher/fs/FileSystemFetcher.java
index d926e3ca6..718899976 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/fetcher/fs/FileSystemFetcher.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/fetcher/fs/FileSystemFetcher.java
@@ -41,6 +41,7 @@ import org.apache.tika.metadata.FileSystem;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.Property;
 import org.apache.tika.metadata.TikaCoreProperties;
+import org.apache.tika.parser.ParseContext;
 import org.apache.tika.pipes.fetcher.AbstractFetcher;
 
 public class FileSystemFetcher extends AbstractFetcher implements Initializable {
@@ -58,10 +59,9 @@ public class FileSystemFetcher extends AbstractFetcher implements Initializable
     }
 
     @Override
-    public InputStream fetch(String fetchKey, Metadata metadata) throws IOException, TikaException {
-
+    public InputStream fetch(String fetchKey, Metadata metadata, ParseContext parseContext) throws IOException, TikaException {
         if (fetchKey.contains("\u0000")) {
-            throw new IllegalArgumentException("Path must not contain \u0000. " +
+            throw new IllegalArgumentException("Path must not contain 'u0000'. " +
                     "Please review the life decisions that led you to requesting " +
                     "a file name with this character in it.");
         }
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/fetcher/url/UrlFetcher.java b/tika-core/src/main/java/org/apache/tika/pipes/fetcher/url/UrlFetcher.java
index f415a3560..7692516cd 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/fetcher/url/UrlFetcher.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/fetcher/url/UrlFetcher.java
@@ -24,6 +24,7 @@ import java.util.Locale;
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
 import org.apache.tika.pipes.fetcher.AbstractFetcher;
 
 /**
@@ -35,7 +36,7 @@ import org.apache.tika.pipes.fetcher.AbstractFetcher;
 public class UrlFetcher extends AbstractFetcher {
 
     @Override
-    public InputStream fetch(String fetchKey, Metadata metadata) throws IOException, TikaException {
+    public InputStream fetch(String fetchKey, Metadata metadata, ParseContext parseContext) throws IOException, TikaException {
         if (fetchKey.contains("\u0000")) {
             throw new IllegalArgumentException("URL must not contain \u0000. " +
                     "Please review the life decisions that led you to requesting " +
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/pipesiterator/filelist/FileListPipesIterator.java b/tika-core/src/main/java/org/apache/tika/pipes/pipesiterator/filelist/FileListPipesIterator.java
index 90cabe881..75cb8390c 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/pipesiterator/filelist/FileListPipesIterator.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/pipesiterator/filelist/FileListPipesIterator.java
@@ -30,7 +30,9 @@ import org.apache.tika.config.InitializableProblemHandler;
 import org.apache.tika.config.TikaConfig;
 import org.apache.tika.exception.TikaConfigException;
 import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
 import org.apache.tika.pipes.FetchEmitTuple;
+import org.apache.tika.pipes.HandlerConfig;
 import org.apache.tika.pipes.emitter.EmitKey;
 import org.apache.tika.pipes.fetcher.FetchKey;
 import org.apache.tika.pipes.pipesiterator.PipesIterator;
@@ -67,8 +69,10 @@ public class FileListPipesIterator extends PipesIterator implements Initializabl
                 if (! line.startsWith("#") && !StringUtils.isBlank(line)) {
                     FetchKey fetchKey = new FetchKey(getFetcherName(), line);
                     EmitKey emitKey = new EmitKey(getEmitterName(), line);
+                    ParseContext parseContext = new ParseContext();
+                    parseContext.set(HandlerConfig.class, getHandlerConfig());
                     tryToAdd(new FetchEmitTuple(line, fetchKey, emitKey,
-                            new Metadata(), getHandlerConfig(), getOnParseException()));
+                            new Metadata(), parseContext, getOnParseException()));
                 }
                 line = reader.readLine();
             }
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/pipesiterator/fs/FileSystemPipesIterator.java b/tika-core/src/main/java/org/apache/tika/pipes/pipesiterator/fs/FileSystemPipesIterator.java
index 9e903fd8b..793ac27fb 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/pipesiterator/fs/FileSystemPipesIterator.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/pipesiterator/fs/FileSystemPipesIterator.java
@@ -38,7 +38,9 @@ import org.apache.tika.config.Param;
 import org.apache.tika.config.TikaConfig;
 import org.apache.tika.exception.TikaConfigException;
 import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
 import org.apache.tika.pipes.FetchEmitTuple;
+import org.apache.tika.pipes.HandlerConfig;
 import org.apache.tika.pipes.async.AsyncProcessor;
 import org.apache.tika.pipes.emitter.EmitKey;
 import org.apache.tika.pipes.fetcher.FetchKey;
@@ -152,8 +154,10 @@ public class FileSystemPipesIterator extends PipesIterator
             String relPath = basePath.relativize(file).toString();
 
             try {
+                ParseContext parseContext = new ParseContext();
+                parseContext.set(HandlerConfig.class, getHandlerConfig());
                 tryToAdd(new FetchEmitTuple(relPath, new FetchKey(fetcherName, relPath),
-                        new EmitKey(emitterName, relPath), new Metadata(), getHandlerConfig(),
+                        new EmitKey(emitterName, relPath), new Metadata(), parseContext,
                         getOnParseException()));
             } catch (TimeoutException e) {
                 throw new IOException(e);
diff --git a/tika-core/src/test/java/org/apache/tika/pipes/PipesServerTest.java b/tika-core/src/test/java/org/apache/tika/pipes/PipesServerTest.java
index 4aca5207e..dd8ef4ff4 100644
--- a/tika-core/src/test/java/org/apache/tika/pipes/PipesServerTest.java
+++ b/tika-core/src/test/java/org/apache/tika/pipes/PipesServerTest.java
@@ -33,6 +33,7 @@ import org.junit.jupiter.api.io.TempDir;
 import org.apache.tika.TikaTest;
 import org.apache.tika.extractor.BasicEmbeddedDocumentBytesHandler;
 import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
 import org.apache.tika.pipes.emitter.EmitKey;
 import org.apache.tika.pipes.extractor.EmbeddedDocumentBytesConfig;
 import org.apache.tika.pipes.fetcher.FetchKey;
@@ -104,12 +105,12 @@ public class PipesServerTest extends TikaTest {
         EmbeddedDocumentBytesConfig embeddedDocumentBytesConfig =
                 new EmbeddedDocumentBytesConfig(true);
         embeddedDocumentBytesConfig.setIncludeOriginal(true);
-
+        ParseContext parseContext = new ParseContext();
+        parseContext.set(HandlerConfig.class, HandlerConfig.DEFAULT_HANDLER_CONFIG);
+        parseContext.set(EmbeddedDocumentBytesConfig.class, embeddedDocumentBytesConfig);
         FetchEmitTuple fetchEmitTuple = new FetchEmitTuple("id",
                 new FetchKey("fs", "mock.xml"),
-                new EmitKey("", ""), new Metadata(),
-                HandlerConfig.DEFAULT_HANDLER_CONFIG, FetchEmitTuple.ON_PARSE_EXCEPTION.EMIT,
-                embeddedDocumentBytesConfig);
+                new EmitKey("", ""), new Metadata(), parseContext);
         Fetcher fetcher = FetcherManager.load(tikaConfig).getFetcher();
         PipesServer.MetadataListAndEmbeddedBytes
                 parseData = pipesServer.parseFromTuple(fetchEmitTuple, fetcher);
@@ -160,12 +161,13 @@ public class PipesServerTest extends TikaTest {
         EmbeddedDocumentBytesConfig embeddedDocumentBytesConfig =
                 new EmbeddedDocumentBytesConfig(true);
         embeddedDocumentBytesConfig.setIncludeOriginal(true);
-
+        ParseContext parseContext = new ParseContext();
+        parseContext.set(HandlerConfig.class, HandlerConfig.DEFAULT_HANDLER_CONFIG);
+        parseContext.set(EmbeddedDocumentBytesConfig.class, embeddedDocumentBytesConfig);
         FetchEmitTuple fetchEmitTuple = new FetchEmitTuple("id",
                 new FetchKey("fs", "mock.xml"),
-                new EmitKey("", ""), new Metadata(),
-                HandlerConfig.DEFAULT_HANDLER_CONFIG, FetchEmitTuple.ON_PARSE_EXCEPTION.EMIT,
-                embeddedDocumentBytesConfig);
+                new EmitKey("", ""), new Metadata(), parseContext);
+
         Fetcher fetcher = FetcherManager.load(tikaConfig).getFetcher();
         PipesServer.MetadataListAndEmbeddedBytes
                 parseData = pipesServer.parseFromTuple(fetchEmitTuple, fetcher);
diff --git a/tika-core/src/test/java/org/apache/tika/pipes/async/MockEmitter.java b/tika-core/src/test/java/org/apache/tika/pipes/async/MockEmitter.java
index 2374c1474..b940ec7be 100644
--- a/tika-core/src/test/java/org/apache/tika/pipes/async/MockEmitter.java
+++ b/tika-core/src/test/java/org/apache/tika/pipes/async/MockEmitter.java
@@ -23,6 +23,7 @@ import java.util.List;
 import java.util.concurrent.ArrayBlockingQueue;
 
 import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
 import org.apache.tika.pipes.emitter.AbstractEmitter;
 import org.apache.tika.pipes.emitter.EmitData;
 import org.apache.tika.pipes.emitter.EmitKey;
@@ -40,11 +41,11 @@ public class MockEmitter extends AbstractEmitter {
     }
 
     @Override
-    public void emit(String emitKey, List<Metadata> metadataList)
+    public void emit(String emitKey, List<Metadata> metadataList, ParseContext parseContext)
             throws IOException, TikaEmitterException {
         emit(
                 Collections.singletonList(new EmitData(new EmitKey(getName(), emitKey),
-                 metadataList)));
+                 metadataList, null, parseContext)));
     }
 
     @Override
diff --git a/tika-core/src/test/java/org/apache/tika/pipes/async/MockFetcher.java b/tika-core/src/test/java/org/apache/tika/pipes/async/MockFetcher.java
index 10af275e3..acb533ece 100644
--- a/tika-core/src/test/java/org/apache/tika/pipes/async/MockFetcher.java
+++ b/tika-core/src/test/java/org/apache/tika/pipes/async/MockFetcher.java
@@ -23,6 +23,7 @@ import java.nio.charset.StandardCharsets;
 
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
 import org.apache.tika.pipes.fetcher.Fetcher;
 
 public class MockFetcher implements Fetcher {
@@ -37,7 +38,7 @@ public class MockFetcher implements Fetcher {
     }
 
     @Override
-    public InputStream fetch(String fetchKey, Metadata metadata) throws TikaException, IOException {
+    public InputStream fetch(String fetchKey, Metadata metadata, ParseContext parseContext) throws TikaException, IOException {
         return new ByteArrayInputStream(BYTES);
     }
 }
diff --git a/tika-core/src/test/java/org/apache/tika/pipes/emitter/MockEmitter.java b/tika-core/src/test/java/org/apache/tika/pipes/emitter/MockEmitter.java
index 036a95965..89c3c2ce4 100644
--- a/tika-core/src/test/java/org/apache/tika/pipes/emitter/MockEmitter.java
+++ b/tika-core/src/test/java/org/apache/tika/pipes/emitter/MockEmitter.java
@@ -26,6 +26,7 @@ import org.apache.tika.config.InitializableProblemHandler;
 import org.apache.tika.config.Param;
 import org.apache.tika.exception.TikaConfigException;
 import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
 
 public class MockEmitter extends AbstractEmitter implements Initializable {
 
@@ -52,7 +53,7 @@ public class MockEmitter extends AbstractEmitter implements Initializable {
     }
 
     @Override
-    public void emit(String emitKey, List<Metadata> metadataList)
+    public void emit(String emitKey, List<Metadata> metadataList, ParseContext parseContext)
             throws IOException, TikaEmitterException {
 
     }
diff --git a/tika-core/src/test/java/org/apache/tika/pipes/fetcher/MockFetcher.java b/tika-core/src/test/java/org/apache/tika/pipes/fetcher/MockFetcher.java
index 060432724..e9104e0a8 100644
--- a/tika-core/src/test/java/org/apache/tika/pipes/fetcher/MockFetcher.java
+++ b/tika-core/src/test/java/org/apache/tika/pipes/fetcher/MockFetcher.java
@@ -29,6 +29,7 @@ import org.apache.tika.config.Param;
 import org.apache.tika.exception.TikaConfigException;
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
 
 public class MockFetcher extends AbstractFetcher implements Initializable {
 
@@ -64,7 +65,7 @@ public class MockFetcher extends AbstractFetcher implements Initializable {
 
 
     @Override
-    public InputStream fetch(String fetchKey, Metadata metadata) throws TikaException, IOException {
+    public InputStream fetch(String fetchKey, Metadata metadata, ParseContext parseContext) throws TikaException, IOException {
         return byteString == null ? new ByteArrayInputStream(new byte[0]) :
                 new ByteArrayInputStream(byteString.getBytes(StandardCharsets.UTF_8));
     }
