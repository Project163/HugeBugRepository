diff --git a/src/main/java/org/apache/commons/configuration2/ConfigurationConverter.java b/src/main/java/org/apache/commons/configuration2/ConfigurationConverter.java
index 01a9794b..30cbbce6 100644
--- a/src/main/java/org/apache/commons/configuration2/ConfigurationConverter.java
+++ b/src/main/java/org/apache/commons/configuration2/ConfigurationConverter.java
@@ -62,10 +62,10 @@ public final class ConfigurationConverter
      * configuration (if it extends AbstractConfiguration) or with a comma as
      * delimiter otherwise.
      *
-     * @param config Configuration object to convert
+     * @param config ImmutableConfiguration object to convert
      * @return Properties created from the Configuration
      */
-    public static Properties getProperties(Configuration config)
+    public static Properties getProperties(ImmutableConfiguration config)
     {
         Properties props = new Properties();
         ListDelimiterHandler listHandler;
@@ -114,6 +114,21 @@ public final class ConfigurationConverter
         return props;
     }
 
+    /**
+     * Convert a Configuration class into a Properties class. List properties
+     * are joined into a string using either the list delimiter handler of the
+     * configuration (if it extends AbstractConfiguration) or with a comma as
+     * delimiter otherwise.
+     * This version of the method exists only for backwards compatibility reason.
+     *
+     * @param config Configuration object to convert
+     * @return Properties created from the Configuration
+     */
+    public static Properties getProperties(Configuration config)
+    {
+        return getProperties((ImmutableConfiguration) config);
+    }
+
     /**
      * Convert a Configuration class into a Map class.
      *
diff --git a/src/main/java/org/apache/commons/configuration2/ConfigurationUtils.java b/src/main/java/org/apache/commons/configuration2/ConfigurationUtils.java
index 6132571f..a5244873 100644
--- a/src/main/java/org/apache/commons/configuration2/ConfigurationUtils.java
+++ b/src/main/java/org/apache/commons/configuration2/ConfigurationUtils.java
@@ -105,18 +105,30 @@ public final class ConfigurationUtils
      * @param configuration the configuration
      * @param out the output stream to dump the configuration to
      */
-    public static void dump(Configuration configuration, PrintStream out)
+    public static void dump(ImmutableConfiguration configuration, PrintStream out)
     {
         dump(configuration, new PrintWriter(out));
     }
 
+    /**
+     * Dump the configuration key/value mappings to some ouput stream.
+     * This version of the method exists only for backwards compatibility reason.
+     *
+     * @param configuration the configuration
+     * @param out the output stream to dump the configuration to
+     */
+    public static void dump(Configuration configuration, PrintStream out)
+    {
+        dump((ImmutableConfiguration) configuration, out);
+    }
+
     /**
      * Dump the configuration key/value mappings to some writer.
      *
      * @param configuration the configuration
      * @param out the writer to dump the configuration to
      */
-    public static void dump(Configuration configuration, PrintWriter out)
+    public static void dump(ImmutableConfiguration configuration, PrintWriter out)
     {
         for (Iterator<String> keys = configuration.getKeys(); keys.hasNext();)
         {
@@ -135,6 +147,18 @@ public final class ConfigurationUtils
         out.flush();
     }
 
+    /**
+     * Dump the configuration key/value mappings to some writer.
+     * This version of the method exists only for backwards compatibility reason.
+     *
+     * @param configuration the configuration
+     * @param out the writer to dump the configuration to
+     */
+    public static void dump(Configuration configuration, PrintWriter out)
+    {
+        dump((ImmutableConfiguration) configuration, out);
+    }
+
     /**
      * Get a string representation of the key/value mappings of a
      * configuration.
@@ -142,13 +166,26 @@ public final class ConfigurationUtils
      * @param configuration the configuration
      * @return a string representation of the configuration
      */
-    public static String toString(Configuration configuration)
+    public static String toString(ImmutableConfiguration configuration)
     {
         StringWriter writer = new StringWriter();
         dump(configuration, new PrintWriter(writer));
         return writer.toString();
     }
 
+    /**
+     * Get a string representation of the key/value mappings of a
+     * configuration.
+     * This version of the method exists only for backwards compatibility reason.
+     *
+     * @param configuration the configuration
+     * @return a string representation of the configuration
+     */
+    public static String toString(Configuration configuration)
+    {
+        return toString((ImmutableConfiguration) configuration);
+    }
+
     /**
      * <p>Copy all properties from the source configuration to the target
      * configuration. Properties in the target configuration are replaced with
@@ -163,7 +200,7 @@ public final class ConfigurationUtils
      * @param target the target configuration
      * @since 1.1
      */
-    public static void copy(Configuration source, Configuration target)
+    public static void copy(ImmutableConfiguration source, Configuration target)
     {
         for (Iterator<String> keys = source.getKeys(); keys.hasNext();)
         {
@@ -172,6 +209,25 @@ public final class ConfigurationUtils
         }
     }
 
+    /**
+     * <p>Copy all properties from the source configuration to the target
+     * configuration. Properties in the target configuration are replaced with
+     * the properties with the same key in the source configuration.</p>
+     * <p><em>Note:</em> This method is not able to handle some specifics of
+     * configurations derived from {@code AbstractConfiguration} (e.g.
+     * list delimiters). For a full support of all of these features the
+     * {@code copy()} method of {@code AbstractConfiguration} should
+     * be used. In a future release this method might become deprecated.</p>
+     *
+     * @param source the source configuration
+     * @param target the target configuration
+     * @since 1.1
+     */
+    public static void copy(Configuration source, Configuration target)
+    {
+        copy((ImmutableConfiguration) source, target);
+    }
+
     /**
      * <p>Append all properties from the source configuration to the target
      * configuration. Properties in the source configuration are appended to
@@ -186,7 +242,7 @@ public final class ConfigurationUtils
      * @param target the target configuration
      * @since 1.1
      */
-    public static void append(Configuration source, Configuration target)
+    public static void append(ImmutableConfiguration source, Configuration target)
     {
         for (Iterator<String> keys = source.getKeys(); keys.hasNext();)
         {
@@ -195,6 +251,25 @@ public final class ConfigurationUtils
         }
     }
 
+    /**
+     * <p>Append all properties from the source configuration to the target
+     * configuration. Properties in the source configuration are appended to
+     * the properties with the same key in the target configuration.</p>
+     * <p><em>Note:</em> This method is not able to handle some specifics of
+     * configurations derived from {@code AbstractConfiguration} (e.g.
+     * list delimiters). For a full support of all of these features the
+     * {@code copy()} method of {@code AbstractConfiguration} should
+     * be used. In a future release this method might become deprecated.</p>
+     *
+     * @param source the source configuration
+     * @param target the target configuration
+     * @since 1.1
+     */
+    public static void append(Configuration source, Configuration target)
+    {
+        append((ImmutableConfiguration) source, target);
+    }
+
     /**
      * Converts the passed in configuration to a hierarchical one. If the
      * configuration is already hierarchical, it is directly returned. Otherwise
diff --git a/src/main/java/org/apache/commons/configuration2/plist/PropertyListConfiguration.java b/src/main/java/org/apache/commons/configuration2/plist/PropertyListConfiguration.java
index 8a3de5f0..b51bad03 100644
--- a/src/main/java/org/apache/commons/configuration2/plist/PropertyListConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration2/plist/PropertyListConfiguration.java
@@ -34,6 +34,7 @@ import org.apache.commons.configuration2.BaseHierarchicalConfiguration;
 import org.apache.commons.configuration2.Configuration;
 import org.apache.commons.configuration2.FileBasedConfiguration;
 import org.apache.commons.configuration2.HierarchicalConfiguration;
+import org.apache.commons.configuration2.ImmutableConfiguration;
 import org.apache.commons.configuration2.MapConfiguration;
 import org.apache.commons.configuration2.ex.ConfigurationException;
 import org.apache.commons.configuration2.tree.ImmutableNode;
@@ -322,13 +323,13 @@ public class PropertyListConfiguration extends BaseHierarchicalConfiguration
                             .getNodeHandler();
             printNode(out, indentLevel, handler.getRootNode(), handler);
         }
-        else if (value instanceof Configuration)
+        else if (value instanceof ImmutableConfiguration)
         {
             // display a flat Configuration as a dictionary
             out.println();
             out.println(padding + "{");
 
-            Configuration config = (Configuration) value;
+            ImmutableConfiguration config = (ImmutableConfiguration) value;
             Iterator<String> it = config.getKeys();
             while (it.hasNext())
             {
diff --git a/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java b/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java
index 7895a5de..929146de 100644
--- a/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java
@@ -45,6 +45,7 @@ import org.apache.commons.configuration2.BaseHierarchicalConfiguration;
 import org.apache.commons.configuration2.Configuration;
 import org.apache.commons.configuration2.FileBasedConfiguration;
 import org.apache.commons.configuration2.HierarchicalConfiguration;
+import org.apache.commons.configuration2.ImmutableConfiguration;
 import org.apache.commons.configuration2.MapConfiguration;
 import org.apache.commons.configuration2.ex.ConfigurationException;
 import org.apache.commons.configuration2.ex.ConfigurationRuntimeException;
@@ -387,12 +388,12 @@ public class XMLPropertyListConfiguration extends BaseHierarchicalConfiguration
             printNode(out, indentLevel, config.getNodeModel().getNodeHandler()
                     .getRootNode());
         }
-        else if (value instanceof Configuration)
+        else if (value instanceof ImmutableConfiguration)
         {
             // display a flat Configuration as a dictionary
             out.println(padding + "<dict>");
 
-            Configuration config = (Configuration) value;
+            ImmutableConfiguration config = (ImmutableConfiguration) value;
             Iterator<String> it = config.getKeys();
             while (it.hasNext())
             {
diff --git a/src/test/java/org/apache/commons/configuration2/ConfigurationAssert.java b/src/test/java/org/apache/commons/configuration2/ConfigurationAssert.java
index 0598ee63..b47f8303 100644
--- a/src/test/java/org/apache/commons/configuration2/ConfigurationAssert.java
+++ b/src/test/java/org/apache/commons/configuration2/ConfigurationAssert.java
@@ -59,7 +59,7 @@ public class ConfigurationAssert
      * @param expected the expected properties
      * @param actual the configuration to check
      */
-    public static void assertConfigurationEquals(Configuration expected, Configuration actual)
+    public static void assertConfigurationEquals(ImmutableConfiguration expected, ImmutableConfiguration actual)
     {
         // check that the actual configuration contains all the properties of the expected configuration
         for (Iterator<String> it = expected.getKeys(); it.hasNext();)
@@ -150,7 +150,7 @@ public class ConfigurationAssert
      * @param config the configuration
      * @return a list with all keys of this configuration
      */
-    public static List<String> keysToList(Configuration config)
+    public static List<String> keysToList(ImmutableConfiguration config)
     {
         List<String> keyList = new LinkedList<String>();
         appendKeys(config, keyList);
@@ -163,7 +163,7 @@ public class ConfigurationAssert
      * @param config the configuration
      * @return a set with all keys of this configuration
      */
-    public static Set<String> keysToSet(Configuration config)
+    public static Set<String> keysToSet(ImmutableConfiguration config)
     {
         Set<String> keySet = new HashSet<String>();
         appendKeys(config, keySet);
@@ -176,7 +176,7 @@ public class ConfigurationAssert
      * @param config the configuration
      * @param collection the target collection
      */
-    public static void appendKeys(Configuration config,
+    public static void appendKeys(ImmutableConfiguration config,
             Collection<String> collection)
     {
         for (Iterator<String> it = config.getKeys(); it.hasNext();)
