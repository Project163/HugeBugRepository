diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index c4b370e8..f4f14dbc 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -39,6 +39,8 @@ New Features in 3.2:
 
 Bugs Fixed in 3.2:
 ==================
+
+* JEXL-245:      Engine in strict mode fails to fail on unsolvable variables or properties
 * JEXL-244:      Webapp classloader memory leaks
 * JEXL-241:      NPE when script containing string interpolation executed in multiple threads
 * JEXL-240:      Unable to invoke a call operator using antish style variable resolution
diff --git a/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java b/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java
index d2d81952..d0d62acf 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java
@@ -1015,9 +1015,9 @@ public class Interpreter extends InterpreterBase {
         // pass first piece of data in and loop through children
         Object object = null;
         JexlNode objectNode;
+        JexlNode ptyNode = null;
         StringBuilder ant = null;
         boolean antish = !(parent instanceof ASTReference);
-        boolean pty = true;
         int v = 1;
         main:
         for (int c = 0; c < numChildren; c++) {
@@ -1060,7 +1060,7 @@ public class Interpreter extends InterpreterBase {
                             break;
                         }
                     } else {
-                        pty = false;
+                        ptyNode = objectNode;
                         break;
                     }
                 }
@@ -1075,7 +1075,9 @@ public class Interpreter extends InterpreterBase {
                 }
                 object = context.get(ant.toString());
             } else {
-                break;
+                // the last one may be null
+                ptyNode = c != numChildren - 1? objectNode : null;
+                break; //
             }
         }
         if (object == null && !isTernaryProtected(node)) {
@@ -1083,8 +1085,8 @@ public class Interpreter extends InterpreterBase {
                 boolean undefined = !(context.has(ant.toString()) || isLocalVariable(node, 0));
                 // variable unknown in context and not a local
                 return unsolvableVariable(node, ant.toString(), undefined);
-            } else if (!pty) {
-                return unsolvableProperty(node, "<null>.<?>", null);
+            } else if (ptyNode != null) {
+                return unsolvableProperty(node, ptyNode != null? ptyNode.toString() : "<null>.<?>", null);
             }
         }
         return object;
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index 51c7aec6..306c082f 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -26,6 +26,9 @@
     </properties>
     <body>
         <release version="3.2" date="unreleased">
+            <action dev="henrib" type="fix" issue="JEXL-245" due-to="Ate Douma">
+                Engine in strict mode fails to fail on unsolvable variables or properties
+            </action>
             <action dev="henrib" type="fix" issue="JEXL-244" due-to="Dmitri Blinov">
                 Webapp classloader memory leaks
             </action>
diff --git a/src/test/java/org/apache/commons/jexl3/IssuesTest200.java b/src/test/java/org/apache/commons/jexl3/IssuesTest200.java
index e09a9cf2..25671a41 100644
--- a/src/test/java/org/apache/commons/jexl3/IssuesTest200.java
+++ b/src/test/java/org/apache/commons/jexl3/IssuesTest200.java
@@ -246,9 +246,7 @@ public class IssuesTest200 extends JexlTestCase {
     private static void handle(ExecutorService pool, final JexlScript script, final Map<String, Object> payload) {
        pool.submit(new Runnable() {
             @Override public void run() {
-                System.out.printf("START: %s\n", Thread.currentThread());
-                System.out.println(script.execute(new MapContext(payload)));
-                System.out.printf("STOP: %s\n", Thread.currentThread());
+                script.execute(new MapContext(payload));
             }
         });
     }
@@ -300,4 +298,49 @@ public class IssuesTest200 extends JexlTestCase {
             // ok
         }
     }
+
+    public static class Foo245 {
+        private Object bar = null;
+
+        void setBar(Object bar) {
+            this.bar = bar;
+        }
+
+        public Object getBar() {
+            return bar;
+        }
+    }
+
+    @Test
+    public void test245() throws Exception {
+        MapContext ctx = new MapContext();
+        Foo245 foo245 = new Foo245();
+        ctx.set("foo", foo245);
+
+        JexlEngine engine = new JexlBuilder().strict(true).silent(false).create();
+        JexlExpression foobar = engine.createExpression("foo.bar");
+        JexlExpression foobaz = engine.createExpression("foo.baz");
+        JexlExpression foobarbaz = engine.createExpression("foo.bar.baz");
+        // add ambiguity with null & not-null
+        Object[] args = { null, 245 };
+        for(Object arg : args ){
+            foo245.setBar(arg);
+            // ok
+            Assert.assertEquals(foo245.getBar(), foobar.evaluate(ctx));
+            // fail level 1
+            try {
+                foobaz.evaluate(ctx);
+                Assert.fail("foo.baz is not solvable");
+            } catch(JexlException xp) {
+                Assert.assertTrue(xp instanceof JexlException.Property);
+            }
+            // fail level 2
+            try {
+                foobarbaz.evaluate(ctx);
+                Assert.fail("foo.bar.baz is not solvable");
+            } catch(JexlException xp) {
+                Assert.assertTrue(xp instanceof JexlException.Property);
+            }
+        }
+    }
 }
diff --git a/src/test/java/org/apache/commons/jexl3/scripting/JexlScriptEngineOptionalTest.java b/src/test/java/org/apache/commons/jexl3/scripting/JexlScriptEngineOptionalTest.java
index c2c89c5a..ab739dc9 100644
--- a/src/test/java/org/apache/commons/jexl3/scripting/JexlScriptEngineOptionalTest.java
+++ b/src/test/java/org/apache/commons/jexl3/scripting/JexlScriptEngineOptionalTest.java
@@ -24,37 +24,41 @@ import javax.script.CompiledScript;
 
 import javax.script.ScriptEngine;
 import javax.script.ScriptEngineManager;
-import junit.framework.TestCase;
+import org.junit.Assert;
+import org.junit.Test;
 
-public class JexlScriptEngineOptionalTest extends TestCase {
+public class JexlScriptEngineOptionalTest {
     private final JexlScriptEngineFactory factory = new JexlScriptEngineFactory();
     private final ScriptEngineManager manager = new ScriptEngineManager();
     private final ScriptEngine engine = manager.getEngineByName("jexl");
 
+    @Test
     public void testOutput() throws Exception {
         String output = factory.getOutputStatement("foo\u00a9bar");
-        assertEquals("JEXL.out.print('foo\\u00a9bar')", output);
+        Assert.assertEquals("JEXL.out.print('foo\\u00a9bar')", output);
         // redirect output to capture evaluation result
         final StringWriter outContent = new StringWriter();
         engine.getContext().setWriter(outContent);
         engine.eval(output);
-        assertEquals("foo\u00a9bar", outContent.toString());
+        Assert.assertEquals("foo\u00a9bar", outContent.toString());
     }
 
+    @Test
     public void testError() throws Exception {
         String error = "JEXL.err.print('ERROR')";
         // redirect error to capture evaluation result
         final StringWriter outContent = new StringWriter();
         engine.getContext().setErrorWriter(outContent);
         engine.eval(error);
-        assertEquals("ERROR", outContent.toString());
+        Assert.assertEquals("ERROR", outContent.toString());
     }
 
+    @Test
     public void testCompilable() throws Exception {
-        assertTrue("Engine should implement Compilable", engine instanceof Compilable);
+        Assert.assertTrue("Engine should implement Compilable", engine instanceof Compilable);
         Compilable cengine = (Compilable) engine;
         CompiledScript script = cengine.compile("40 + 2");
-        assertEquals(Integer.valueOf(42), script.eval());
-        assertEquals(Integer.valueOf(42), script.eval());
+        Assert.assertEquals(Integer.valueOf(42), script.eval());
+        Assert.assertEquals(Integer.valueOf(42), script.eval());
     }
 }
