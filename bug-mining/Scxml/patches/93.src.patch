diff --git a/src/main/java/org/apache/commons/scxml2/SCXMLExecutor.java b/src/main/java/org/apache/commons/scxml2/SCXMLExecutor.java
index 0bbfa674..e68fa80f 100644
--- a/src/main/java/org/apache/commons/scxml2/SCXMLExecutor.java
+++ b/src/main/java/org/apache/commons/scxml2/SCXMLExecutor.java
@@ -370,9 +370,7 @@ public class SCXMLExecutor implements SCXMLIOProcessor {
      */
     public void triggerEvent(final TriggerEvent evt)
             throws ModelException {
-        if (evt != null) {
-            externalEventQueue.add(evt);
-        }
+        addEvent(evt);
         triggerEvents();
     }
 
@@ -390,9 +388,7 @@ public class SCXMLExecutor implements SCXMLIOProcessor {
             throws ModelException {
         if (evts != null) {
             for (TriggerEvent evt : evts) {
-                if (evt != null) {
-                    externalEventQueue.add(evt);
-                }
+                addEvent(evt);
             }
         }
         triggerEvents();
@@ -437,5 +433,4 @@ public class SCXMLExecutor implements SCXMLIOProcessor {
             log.debug(sb.toString());
         }
     }
-}
-
+}
\ No newline at end of file
diff --git a/src/main/java/org/apache/commons/scxml2/env/SimpleScheduler.java b/src/main/java/org/apache/commons/scxml2/env/SimpleScheduler.java
index 16ac3d86..5deda454 100644
--- a/src/main/java/org/apache/commons/scxml2/env/SimpleScheduler.java
+++ b/src/main/java/org/apache/commons/scxml2/env/SimpleScheduler.java
@@ -126,13 +126,7 @@ public class SimpleScheduler implements EventDispatcher, Serializable {
                 if (log.isWarnEnabled()) {
                     log.warn("<send>: Unavailable target - " + target);
                 }
-                try {
-                    this.executor.triggerEvent(new TriggerEvent(
-                        EVENT_ERR_SEND_TARGETUNAVAILABLE,
-                        TriggerEvent.ERROR_EVENT));
-                } catch (ModelException me) {
-                    log.error(me.getMessage(), me);
-                }
+                this.executor.addEvent(new TriggerEvent(EVENT_ERR_SEND_TARGETUNAVAILABLE,TriggerEvent.ERROR_EVENT));
                 return; // done
             }
 
@@ -232,12 +226,7 @@ public class SimpleScheduler implements EventDispatcher, Serializable {
         @Override
         public void run() {
             timers.remove(sendId);
-            try {
-                executor.triggerEvent(new TriggerEvent(event,
-                    TriggerEvent.SIGNAL_EVENT, payload));
-            } catch (ModelException me) {
-                log.error(me.getMessage(), me);
-            }
+            executor.addEvent(new TriggerEvent(event, TriggerEvent.SIGNAL_EVENT, payload));
             if (log.isDebugEnabled()) {
                 log.debug("Fired event '" + event + "' as scheduled by "
                     + "<send> with id '" + sendId + "'");
diff --git a/src/main/java/org/apache/commons/scxml2/invoke/SimpleSCXMLInvoker.java b/src/main/java/org/apache/commons/scxml2/invoke/SimpleSCXMLInvoker.java
index 51f3596f..886184da 100644
--- a/src/main/java/org/apache/commons/scxml2/invoke/SimpleSCXMLInvoker.java
+++ b/src/main/java/org/apache/commons/scxml2/invoke/SimpleSCXMLInvoker.java
@@ -125,11 +125,7 @@ public class SimpleSCXMLInvoker implements Invoker, Serializable {
             return; // no further processing should take place
         }
         boolean doneBefore = executor.getCurrentStatus().isFinal();
-        try {
-            executor.triggerEvent(evt);
-        } catch (ModelException me) {
-            throw new InvokerException(me.getMessage(), me.getCause());
-        }
+        executor.addEvent(evt);
         if (!doneBefore && executor.getCurrentStatus().isFinal()) {
             TriggerEvent te = new TriggerEvent("done.invoke."+parentStateId,TriggerEvent.SIGNAL_EVENT);
             new AsyncTrigger(parentIOProcessor, te).start();
@@ -142,11 +138,7 @@ public class SimpleSCXMLInvoker implements Invoker, Serializable {
     public void cancel()
     throws InvokerException {
         cancelled = true;
-        try {
-            executor.triggerEvent(new TriggerEvent("cancel.invoke."+parentStateId, TriggerEvent.CANCEL_EVENT));
-        } catch (ModelException me) {
-            throw new InvokerException(me.getMessage(), me.getCause());
-        }
+        executor.addEvent(new TriggerEvent("cancel.invoke."+parentStateId, TriggerEvent.CANCEL_EVENT));
     }
 
 }
