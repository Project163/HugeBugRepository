diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPatchImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPatchImpl.java
index 390c4386..5d43376b 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPatchImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPatchImpl.java
@@ -162,11 +162,11 @@ class JsonPatchImpl implements JsonPatch {
                    final JsonValue value) {
             this.provider = provider;
             this.operation = operation;
-            this.path = new JsonPatchPointerImpl(provider, path);
+            this.path = new JsonPointerImpl(provider, path);
 
             // ignore from if we do not need it
             if (operation == JsonPatch.Operation.MOVE || operation == JsonPatch.Operation.COPY) {
-                this.from = new JsonPatchPointerImpl(provider, from);
+                this.from = new JsonPointerImpl(provider, from);
             } else {
                 this.from = null;
             }
@@ -251,23 +251,4 @@ class JsonPatchImpl implements JsonPatch {
         }
     }
 
-    public static class JsonPatchPointerImpl extends JsonPointerImpl {
-
-        /**
-         * Constructs and initializes a JsonPointer.
-         *
-         * @param provider the JsonProvider
-         * @param jsonPointer the JSON Pointer string
-         * @throws NullPointerException if {@code jsonPointer} is {@code null}
-         * @throws JsonException        if {@code jsonPointer} is not a valid JSON Pointer
-         */
-        public JsonPatchPointerImpl(final JsonProvider provider, final String jsonPointer) {
-            super(provider, jsonPointer);
-        }
-
-        @Override
-        protected int minusShift() {
-            return 1;
-        }
-    }
 }
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPointerImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPointerImpl.java
index 2f1a76d0..e2277a39 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPointerImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPointerImpl.java
@@ -27,7 +27,6 @@ import javax.json.JsonPointer;
 import javax.json.JsonStructure;
 import javax.json.JsonValue;
 import javax.json.spi.JsonProvider;
-
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -41,15 +40,18 @@ public class JsonPointerImpl implements JsonPointer {
     private final String jsonPointer;
     private final List<String> referenceTokens = new ArrayList<>();
     private static final Pattern IS_NUMBER = Pattern.compile("\\d+");
+    private boolean isStrictCompliance;
 
     /**
      * Constructs and initializes a JsonPointer.
      *
+     * @param provider the JSON Provider creating this pointer
+     * @param isStrictCompliance is we are running in a strict compliance or not
      * @param jsonPointer the JSON Pointer string
      * @throws NullPointerException if {@code jsonPointer} is {@code null}
      * @throws JsonException        if {@code jsonPointer} is not a valid JSON Pointer
      */
-    public JsonPointerImpl(final JsonProvider provider, final String jsonPointer) {
+    public JsonPointerImpl(final JsonProvider provider, final boolean isStrictCompliance, final String jsonPointer) {
         if (jsonPointer == null) {
             throw new NullPointerException("jsonPointer must not be null");
         }
@@ -58,6 +60,7 @@ public class JsonPointerImpl implements JsonPointer {
         }
 
         this.provider = provider;
+        this.isStrictCompliance = isStrictCompliance;
         this.jsonPointer = jsonPointer;
         String[] encodedReferenceTokens = jsonPointer.split("/", -1);
 
@@ -66,6 +69,18 @@ public class JsonPointerImpl implements JsonPointer {
         }
     }
 
+    /**
+     * Constructs and initializes a JsonPointer.
+     *
+     * @param provider the JSON Provider creating this pointer
+     * @param jsonPointer the JSON Pointer string
+     * @throws NullPointerException if {@code jsonPointer} is {@code null}
+     * @throws JsonException        if {@code jsonPointer} is not a valid JSON Pointer
+     */
+    public JsonPointerImpl(final JsonProvider provider, final String jsonPointer) {
+        this(provider, false, jsonPointer);
+    }
+
     /**
      * Compares this {@code JsonPointer} with another object.
      *
@@ -475,7 +490,10 @@ public class JsonPointerImpl implements JsonPointer {
             return jsonArray.size();
 
         } else if (!addOperation && referenceToken.equals("-")) {
-            final int arrayIndex = jsonArray.size() - minusShift();
+            // by default there is no shift. RFC says /- is the element right after the last one.
+            // for replace/remove and get, Johnzon treats it as last element of the array
+            final int shift = isStrictCompliance ? 0 : 1;
+            final int arrayIndex = jsonArray.size() - shift;
             validateArraySize(referenceToken, jsonArray, arrayIndex, jsonArray.size());
             return arrayIndex;
         }
@@ -492,16 +510,6 @@ public class JsonPointerImpl implements JsonPointer {
         }
     }
 
-    /**
-     * This method can be overridden in sub classes.
-     * It's main goal is to support patch operation using "-" to replace, remove last element which is forbidden in JsonPointer
-     *
-     * @return the shift to apply on minus. For pointer, it's 0 because we need the element right after the last.
-     */
-    protected int minusShift() {
-        return 0;
-    }
-
     private void validateJsonPointer(JsonValue target, int size) throws NullPointerException, JsonException {
         if (target == null) {
             throw new NullPointerException("target must not be null");
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonProviderImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonProviderImpl.java
index 282f286e..4bad8eb4 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonProviderImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonProviderImpl.java
@@ -53,6 +53,12 @@ import javax.json.stream.JsonParser;
 import javax.json.stream.JsonParserFactory;
 
 public class JsonProviderImpl extends JsonProvider implements Serializable {
+
+    /**
+     * This makes Johnzon to be compliant with spec, essentially regarding the JSON Pointer /-
+     */
+    private final boolean isStrictCompliance = Boolean.getBoolean("org.apache.johnzon.STRICT_JSONP_COMPLIANCE");
+
     private final Supplier<BufferStrategy.BufferProvider<char[]>> bufferProvider = new Cached<>(() ->
         BufferStrategyFactory.valueOf(System.getProperty(AbstractJsonFactory.BUFFER_STRATEGY, "QUEUE"))
             .newCharProvider(Integer.getInteger("org.apache.johnzon.default-char-provider.length", 1024)));
@@ -203,7 +209,7 @@ public class JsonProviderImpl extends JsonProvider implements Serializable {
 
     @Override
     public JsonPointer createPointer(String path) {
-        return new JsonPointerImpl(this, path);
+        return new JsonPointerImpl(this, isStrictCompliance, path);
     }
 
     @Override
diff --git a/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPatchTest.java b/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPatchTest.java
index a2552717..8acefe24 100644
--- a/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPatchTest.java
+++ b/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPatchTest.java
@@ -30,7 +30,6 @@ import javax.json.JsonPatch;
 import javax.json.JsonStructure;
 import javax.json.JsonValue;
 import javax.json.spi.JsonProvider;
-
 import java.io.StringReader;
 
 import static org.junit.Assert.assertEquals;
diff --git a/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPointerTest.java b/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPointerTest.java
index f9e782c4..7d91570a 100644
--- a/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPointerTest.java
+++ b/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPointerTest.java
@@ -457,19 +457,7 @@ public class JsonPointerTest {
 
     @Test(expected = JsonException.class)
     public void testRemoveLastArrayElement() {
-        JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/0/-");
-        JsonStructure target = Json.createArrayBuilder()
-                                   .add(Json.createArrayBuilder()
-                                            .add("bar")
-                                            .add("qux")
-                                            .add("baz")).build(); // [["bar","qux","baz"]]
-
-        JsonStructure result = jsonPointer.remove(target);
-        assertEquals("[[\"bar\",\"qux\"]]", result.toString()); // [["bar","qux"]]
-    }
-
-    public void testRemoveLastArrayElementWithPatch() {
-        JsonPointerImpl jsonPointer = new JsonPatchImpl.JsonPatchPointerImpl(JsonProvider.provider(), "/0/-");
+        JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), true, "/0/-");
         JsonStructure target = Json.createArrayBuilder()
                                    .add(Json.createArrayBuilder()
                                             .add("bar")
@@ -482,7 +470,7 @@ public class JsonPointerTest {
 
     @Test(expected = JsonException.class)
     public void testGetLastArrayElementSimple() {
-        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/-");
+        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), true, "/-");
         final JsonStructure target = Json.createArrayBuilder()
                                          .add("bar")
                                          .add("qux")
@@ -494,7 +482,7 @@ public class JsonPointerTest {
 
     @Test(expected = JsonException.class)
     public void testGetLastArrayElement() {
-        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/-");
+        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), true, "/-");
         final JsonStructure target = Json.createArrayBuilder()
                                          .add(Json.createArrayBuilder()
                                                   .add("bar")
@@ -506,7 +494,7 @@ public class JsonPointerTest {
 
     @Test(expected = JsonException.class)
     public void testGetLastArrayElement2() {
-        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/0/-");
+        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), true, "/0/-");
         final JsonStructure target = Json.createArrayBuilder()
                                          .add(Json.createArrayBuilder()
                                                   .add("bar")
@@ -518,7 +506,7 @@ public class JsonPointerTest {
 
     @Test(expected = JsonException.class)
     public void testReplaceLastArrayElementSimple() {
-        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/-");
+        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), true, "/-");
         final JsonStructure target = Json.createArrayBuilder()
                                          .add("bar")
                                          .add("qux")
@@ -530,7 +518,7 @@ public class JsonPointerTest {
 
     @Test(expected = JsonException.class)
     public void testReplaceLastArrayElement() {
-        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/-");
+        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), true, "/-");
         final JsonStructure target = Json.createArrayBuilder()
                                          .add(Json.createArrayBuilder()
                                                   .add("bar")
@@ -542,7 +530,7 @@ public class JsonPointerTest {
 
     @Test(expected = JsonException.class)
     public void testReplaceLastArrayElement2() {
-        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/0/-");
+        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), true, "/0/-");
         final JsonStructure target = Json.createArrayBuilder()
                                          .add(Json.createArrayBuilder()
                                                   .add("bar")
@@ -593,7 +581,7 @@ public class JsonPointerTest {
 
     @Test(expected = JsonException.class)
     public void testRemoveLastArrayElementSimple() {
-        JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/-");
+        JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), true, "/-");
         JsonStructure target = Json.createArrayBuilder()
                 .add("bar")
                 .add("qux")
@@ -604,19 +592,6 @@ public class JsonPointerTest {
         assertEquals("[\"bar\",\"qux\"]", result.toString());
     }
 
-    @Test
-    public void testRemoveLastArrayElementSimpleWithPatch() {
-        JsonPointerImpl jsonPointer = new JsonPatchImpl.JsonPatchPointerImpl(JsonProvider.provider(), "/-");
-        JsonStructure target = Json.createArrayBuilder()
-                                   .add("bar")
-                                   .add("qux")
-                                   .add("baz")
-                                   .build();
-
-        JsonStructure result = jsonPointer.remove(target);
-        assertEquals("[\"bar\",\"qux\"]", result.toString());
-    }
-
     @Test(expected = JsonException.class)
     public void testRemoveLastArrayElementFromEmptySimple() {
         final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/-");
@@ -626,7 +601,7 @@ public class JsonPointerTest {
 
     @Test(expected = JsonException.class)
     public void testRemoveLastArrayElementFromEmpty() {
-        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/0/-");
+        final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), true, "/0/-");
         final JsonStructure target = Json.createArrayBuilder()
                                    .add(Json.createArrayBuilder()
                                             .add("bar")
