diff --git a/tika-server/src/main/java/org/apache/tika/server/resource/TikaResource.java b/tika-server/src/main/java/org/apache/tika/server/resource/TikaResource.java
index 152ff2877..96d44ff30 100644
--- a/tika-server/src/main/java/org/apache/tika/server/resource/TikaResource.java
+++ b/tika-server/src/main/java/org/apache/tika/server/resource/TikaResource.java
@@ -45,6 +45,7 @@ import java.io.OutputStream;
 import java.io.OutputStreamWriter;
 import java.io.Writer;
 import java.lang.reflect.Field;
+import java.lang.reflect.Method;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
@@ -198,6 +199,7 @@ public class TikaResource {
         try {
             String property = StringUtils.removeStart(key, prefix);
             Field field = object.getClass().getDeclaredField(StringUtils.uncapitalize(property));
+
             field.setAccessible(true);
             if (field.getType() == String.class) {
                 field.set(object, httpHeaders.getFirst(key));
@@ -207,6 +209,20 @@ public class TikaResource {
                 field.setDouble(object, Double.parseDouble(httpHeaders.getFirst(key)));
             } else if (field.getType() == boolean.class) {
                 field.setBoolean(object, Boolean.parseBoolean(httpHeaders.getFirst(key)));
+            } else {
+                //couldn't find a directly accessible field
+                //try for setX(String s)
+                String setter = StringUtils.uncapitalize(property);
+                setter = "set"+setter.substring(0,1).toUpperCase(Locale.US)+setter.substring(1);
+                Method m = null;
+                try {
+                    m = object.getClass().getMethod(setter, String.class);
+                } catch (NoSuchMethodException e) {
+                    //swallow
+                }
+                if (m != null) {
+                    m.invoke(object, httpHeaders.getFirst(key));
+                }
             }
         } catch (Throwable ex) {
             throw new WebApplicationException(String.format(Locale.ROOT,
diff --git a/tika-server/src/test/java/org/apache/tika/server/TikaResourceTest.java b/tika-server/src/test/java/org/apache/tika/server/TikaResourceTest.java
index 4cb6d7c7d..be5092a0b 100644
--- a/tika-server/src/test/java/org/apache/tika/server/TikaResourceTest.java
+++ b/tika-server/src/test/java/org/apache/tika/server/TikaResourceTest.java
@@ -21,7 +21,6 @@ import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
 import javax.ws.rs.core.Response;
-
 import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.List;
@@ -30,6 +29,8 @@ import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
 import org.apache.cxf.jaxrs.client.WebClient;
 import org.apache.cxf.jaxrs.ext.multipart.Attachment;
 import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;
+import org.apache.tika.parser.ocr.TesseractOCRConfig;
+import org.apache.tika.parser.ocr.TesseractOCRParser;
 import org.apache.tika.server.resource.TikaResource;
 import org.junit.Test;
 
@@ -190,4 +191,37 @@ public class TikaResourceTest extends CXFTestBase {
         assertTrue(responseMsg.contains("Example text"));
     }
 
+    //TIKA-2290
+    @Test
+    public void testPDFOCRConfig() throws Exception {
+        if (! new TesseractOCRParser().hasTesseract(new TesseractOCRConfig())) {
+            return;
+        }
+
+        Response response = WebClient.create(endPoint + TIKA_PATH)
+                .type("application/pdf")
+                .accept("text/plain")
+                .header(TikaResource.X_TIKA_PDF_HEADER_PREFIX+"OcrStrategy", "no_ocr")
+                .put(ClassLoader.getSystemResourceAsStream("testOCR.pdf"));
+        String responseMsg = getStringFromInputStream((InputStream) response
+                .getEntity());
+        assertTrue(responseMsg.trim().equals(""));
+
+        response = WebClient.create(endPoint + TIKA_PATH)
+                .type("application/pdf")
+                .accept("text/plain")
+                .header(TikaResource.X_TIKA_PDF_HEADER_PREFIX+"OcrStrategy", "ocr_only")
+                .put(ClassLoader.getSystemResourceAsStream("testOCR.pdf"));
+        responseMsg = getStringFromInputStream((InputStream) response
+                .getEntity());
+        assertContains("Happy New Year 2003!", responseMsg);
+
+        //now try a bad value
+        response = WebClient.create(endPoint + TIKA_PATH)
+                .type("application/pdf")
+                .accept("text/plain")
+                .header(TikaResource.X_TIKA_PDF_HEADER_PREFIX + "OcrStrategy", "non-sense-value")
+                .put(ClassLoader.getSystemResourceAsStream("testOCR.pdf"));
+        assertEquals(500, response.getStatus());
+    }
 }
diff --git a/tika-server/src/test/resources/testOCR.pdf b/tika-server/src/test/resources/testOCR.pdf
new file mode 100644
index 000000000..531e08a06
Binary files /dev/null and b/tika-server/src/test/resources/testOCR.pdf differ
