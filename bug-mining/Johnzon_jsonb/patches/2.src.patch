diff --git a/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JohnzonBuilder.java b/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JohnzonBuilder.java
index c0d9c1fe..b66d90e5 100644
--- a/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JohnzonBuilder.java
+++ b/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JohnzonBuilder.java
@@ -198,7 +198,7 @@ public class JohnzonBuilder implements JsonbBuilder {
                 throw new IllegalArgumentException(adapter + " doesn't implement JsonbAdapter");
             }
             final Type[] args = pt.getActualTypeArguments();
-            builder.addAdapter(args[0], args[1], new JohnzonJsonbAdapter(adapter));
+            builder.addAdapter(args[0], args[1], new JohnzonJsonbAdapter(adapter, args[0], args[1]));
         }));
 
         config.getProperty(JsonbConfig.STRICT_IJSON).map(Boolean.class::cast).ifPresent(ijson -> {
diff --git a/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JsonbAccessMode.java b/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JsonbAccessMode.java
index 4f8351be..4a0a3407 100644
--- a/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JsonbAccessMode.java
+++ b/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JsonbAccessMode.java
@@ -272,10 +272,10 @@ public class JsonbAccessMode implements AccessMode, Closeable {
             if (pt == null) {
                 throw new IllegalArgumentException(value + " doesn't implement JsonbAdapter");
             }
-            final Type[] args = pt.getActualTypeArguments();
             final JohnzonAdapterFactory.Instance<? extends JsonbAdapter> instance = newAdapter(value);
             toRelease.add(instance);
-            converter = new JohnzonJsonbAdapter(instance.getValue());
+            final Type[] actualTypeArguments = pt.getActualTypeArguments();
+            converter = new JohnzonJsonbAdapter(instance.getValue(), actualTypeArguments[0], actualTypeArguments[1]);
         } else if (dateFormat != null) { // TODO: support lists, LocalDate?
             if (Date.class == type) {
                 converter = new ConverterAdapter<>(new JsonbDateConverter(dateFormat));
diff --git a/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/converter/JohnzonJsonbAdapter.java b/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/converter/JohnzonJsonbAdapter.java
index 4c79610d..c9992b21 100644
--- a/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/converter/JohnzonJsonbAdapter.java
+++ b/johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/converter/JohnzonJsonbAdapter.java
@@ -18,16 +18,21 @@
  */
 package org.apache.johnzon.jsonb.converter;
 
-import org.apache.johnzon.mapper.Adapter;
+import org.apache.johnzon.mapper.TypeAwareAdapter;
 
 import javax.json.bind.JsonbException;
 import javax.json.bind.adapter.JsonbAdapter;
+import java.lang.reflect.Type;
 
-public class JohnzonJsonbAdapter<A, B> implements Adapter<A, B> {
+public class JohnzonJsonbAdapter<A, B> implements TypeAwareAdapter<A, B> {
     private final JsonbAdapter<A, B> delegate;
+    private final Type from;
+    private final Type to;
 
-    public JohnzonJsonbAdapter(final JsonbAdapter<A, B> delegate) {
+    public JohnzonJsonbAdapter(final JsonbAdapter<A, B> delegate, final Type from, final Type to) {
         this.delegate = delegate;
+        this.from = from;
+        this.to = to;
     }
 
     @Override
@@ -53,4 +58,14 @@ public class JohnzonJsonbAdapter<A, B> implements Adapter<A, B> {
             throw new JsonbException(e.getMessage(), e);
         }
     }
+
+    @Override
+    public Type getTo() {
+        return to;
+    }
+
+    @Override
+    public Type getFrom() {
+        return from;
+    }
 }
diff --git a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/AdapterTest.java b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/AdapterTest.java
index 5aa6b7da..538399c1 100644
--- a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/AdapterTest.java
+++ b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/AdapterTest.java
@@ -25,8 +25,13 @@ import javax.json.bind.JsonbBuilder;
 import javax.json.bind.JsonbConfig;
 import javax.json.bind.adapter.JsonbAdapter;
 import javax.json.bind.annotation.JsonbTypeAdapter;
+import javax.json.bind.config.PropertyOrderStrategy;
+import java.util.ArrayList;
+import java.util.List;
 
+import static java.util.Arrays.asList;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 public class AdapterTest {
     @Test
@@ -46,6 +51,56 @@ public class AdapterTest {
         assertEquals(foo.dummy.value, read.dummy.value);
     }
 
+    @Test
+    public void notYetPloymorphism() { // we run it since it checked list/item conversion
+        final Bar bar = new Bar();
+        bar.value = 11;
+
+        final Bar2 bar2 = new Bar2();
+        bar2.value = 21;
+        bar2.value2 = 22;
+
+        final Polymorphism foo = new Polymorphism();
+        foo.bars = new ArrayList<>(asList(bar, bar2));
+
+        final Jsonb jsonb = JsonbBuilder.create(new JsonbConfig().withPropertyOrderStrategy(PropertyOrderStrategy.LEXICOGRAPHICAL));
+
+        final String toString = jsonb.toJson(foo);
+        assertEquals("{\"bars\":[" +
+                "{\"type\":\"org.apache.johnzon.jsonb.AdapterTest$Bar\",\"value\":{\"value\":11}}," +
+                "{\"type\":\"org.apache.johnzon.jsonb.AdapterTest$Bar2\",\"value\":{\"value\":21,\"value2\":22}}]}", toString);
+
+        final Polymorphism read = jsonb.fromJson(toString, Polymorphism.class);
+        assertEquals(2, read.bars.size());
+        assertEquals(11, read.bars.get(0).value);
+        assertTrue(Bar.class == read.bars.get(0).getClass());
+        assertEquals(21, read.bars.get(1).value);
+        /* not yet working since model is statically typed
+        assertTrue(Bar2.class == read.bars.get(1).getClass());
+        assertEquals(22, Bar2.class.cast(read.bars.get(1)).value2);
+        */
+    }
+
+    public static class Polymorphism {
+        @JsonbTypeAdapter(PolyBarAdapter.class)
+        public List<Bar> bars;
+    }
+
+
+    public static class TypeInstance {
+        public String type;
+        private Bar value;
+
+        public Bar getValue() {
+            return value;
+        }
+
+        public void setValue(final Bar value) {
+            this.value = value;
+        }
+    }
+
+
     public static class Foo {
         public Bar bar;
 
@@ -53,10 +108,29 @@ public class AdapterTest {
         public Dummy dummy;
     }
 
+    public static class Bar2 extends Bar {
+        public int value2;
+    }
+
     public static class Bar {
         public int value;
     }
 
+    public static class PolyBarAdapter implements JsonbAdapter<Bar, TypeInstance> {
+        @Override
+        public Bar adaptToJson(final TypeInstance obj) throws Exception {
+            return obj.value;
+        }
+
+        @Override
+        public TypeInstance adaptFromJson(final Bar obj) throws Exception {
+            final TypeInstance typeInstance = new TypeInstance();
+            typeInstance.type = obj.getClass().getName();
+            typeInstance.value = obj;
+            return typeInstance;
+        }
+    }
+
     public static class Dummy {
         public long value;
     }
