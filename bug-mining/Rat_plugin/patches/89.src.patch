diff --git a/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java b/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java
index 2603c50a..d5e70ed7 100644
--- a/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java
+++ b/apache-rat-plugin/src/main/java/org/apache/rat/mp/AbstractRatMojo.java
@@ -105,21 +105,21 @@ public abstract class AbstractRatMojo extends BaseRatMojo {
 
     /**
      * Whether to add the default list of license matchers.
-     * @deprecated By default, license matchers are added.  Use &lt;configurationNoDefaults&gt; to remove them.
+     * @deprecated @deprecated Use specific configuration under &lt;configuration&gt;.
      */
     @Deprecated
     @Parameter(property = "rat.addDefaultLicenseMatchers")
     private boolean addDefaultLicenseMatchers;
 
     /** The list of approved licenses
-     * @deprecated Use specific configuration under &lt;configuration&gt;.
+     * @deprecated @deprecated Use specific configuration under &lt;configuration&gt;.
      */
     @Deprecated
     @Parameter(required = false)
     private String[] approvedLicenses;
 
     /** The file of approved licenses
-     * @deprecated Use specific configuration under &lt;configuration&gt;.
+     * @deprecated @deprecated Use specific configuration under &lt;configuration&gt;.
      */
     @Deprecated
     @Parameter(property = "rat.approvedFile")
@@ -136,14 +136,14 @@ public abstract class AbstractRatMojo extends BaseRatMojo {
     private SimpleLicenseFamily[] licenseFamilies;
 
     /** The list of license definitions.
-     * @deprecated Deprecated for removal since 0.17: Use &lt;Config&gt; instead. See configuration file documentation.
+     * @deprecated Deprecated for removal since 0.17: Use specific configuration under &lt;configuration&gt;. See configuration file documentation.
      */
     @Deprecated
     @Parameter
     private Object[] licenses;
 
     /** The list of family definitions.
-     * @deprecated Use &lt;Configs&gt;.
+     * @deprecated Use specific configuration under &lt;configuration&gt;.
      */
     @Deprecated
     @Parameter
@@ -176,8 +176,9 @@ public abstract class AbstractRatMojo extends BaseRatMojo {
      * <li>configuration files for IDEA, see
      * <a href="#useIdeaDefaultExcludes">useIdeaDefaultExcludes</a></li>
      * </ul>
-     * @deprecated use &lt;inputExcludeStd&gt;&lt;exclude&gt;STANDARD_PATTERNS&lt;/exclude&gt;
-     * &lt;exclude&gt;STANDARD_SCM&lt;/exclude&gt;&lt;/inputExcludeStd&gt;
+     * @deprecated When set to true specifies that the STANDARD_PATTERNS are excluded, as are
+     * the STANDARD_SCMS patterns. Use the various InputExclude and InputInclude elements to
+     * explicitly specify what to include or exclude.
      */
     @Parameter(property = "rat.useDefaultExcludes", defaultValue = "true")
     @Deprecated
@@ -255,6 +256,10 @@ public abstract class AbstractRatMojo extends BaseRatMojo {
     @Parameter(defaultValue = "${project}", required = true, readonly = true)
     protected MavenProject project;
 
+    protected AbstractRatMojo() {
+        DefaultLog.setInstance(makeLog());
+    }
+
     /**
      * @return the Maven project.
      */
@@ -349,10 +354,9 @@ public abstract class AbstractRatMojo extends BaseRatMojo {
 
     private org.apache.rat.utils.Log makeLog() {
         return new org.apache.rat.utils.Log() {
-            private final org.apache.maven.plugin.logging.Log log = getLog();
-
             @Override
             public Level getLevel() {
+                final org.apache.maven.plugin.logging.Log log = getLog();
                 if (log.isDebugEnabled()) {
                     return Level.DEBUG;
                 }
@@ -370,6 +374,7 @@ public abstract class AbstractRatMojo extends BaseRatMojo {
 
             @Override
             public void log(final Level level, final String message, final Throwable throwable) {
+                final org.apache.maven.plugin.logging.Log log = getLog();
                 switch (level) {
                     case DEBUG:
                         if (throwable != null) {
@@ -406,6 +411,7 @@ public abstract class AbstractRatMojo extends BaseRatMojo {
 
             @Override
             public void log(final Level level, final String msg) {
+                final org.apache.maven.plugin.logging.Log log = getLog();
                 switch (level) {
                     case DEBUG:
                         log.debug(msg);
@@ -459,10 +465,9 @@ public abstract class AbstractRatMojo extends BaseRatMojo {
     }
 
     protected ReportConfiguration getConfiguration() throws MojoExecutionException {
+        Log log = DefaultLog.getInstance();
         if (reportConfiguration == null) {
-            DefaultLog.setInstance(makeLog());
             try {
-                Log log = DefaultLog.getInstance();
                 if (super.getLog().isDebugEnabled()) {
                     log.debug("Start BaseRatMojo Configuration options");
                     for (Map.Entry<String, List<String>> entry : args.entrySet()) {
@@ -476,7 +481,8 @@ public abstract class AbstractRatMojo extends BaseRatMojo {
 
                 setIncludeExclude();
 
-                ReportConfiguration config = OptionCollection.parseCommands(args().toArray(new String[0]),
+                getLog().warn("Basedir is : " + basedir);
+                ReportConfiguration config = OptionCollection.parseCommands(basedir, args().toArray(new String[0]),
                         o -> getLog().warn("Help option not supported"),
                         true);
                 reportDeprecatedProcessing();
@@ -498,7 +504,7 @@ public abstract class AbstractRatMojo extends BaseRatMojo {
                     }
                 }
                 if (families != null || getDeprecatedConfigs().findAny().isPresent()) {
-                    if (super.getLog().isDebugEnabled()) {
+                    if (log.isEnabled(Log.Level.DEBUG)) {
                         log.debug(format("%s license families loaded from pom", families.length));
                     }
                     Consumer<ILicenseFamily> logger = super.getLog().isDebugEnabled() ? l -> log.debug(format("Family: %s", l))
@@ -519,10 +525,10 @@ public abstract class AbstractRatMojo extends BaseRatMojo {
                 }
 
                 if (licenses != null) {
-                    if (super.getLog().isDebugEnabled()) {
+                    if (log.isEnabled(Log.Level.DEBUG)) {
                         log.debug(format("%s licenses loaded from pom", licenses.length));
                     }
-                    Consumer<ILicense> logger = super.getLog().isDebugEnabled() ? l -> log.debug(format("License: %s", l))
+                    Consumer<ILicense> logger = log.isEnabled(Log.Level.DEBUG) ? l -> log.debug(format("License: %s", l))
                             : l -> {
                     };
                     Consumer<ILicense> addApproved = (approvedLicenses == null || approvedLicenses.length == 0)
diff --git a/apache-rat-plugin/src/test/java/org/apache/rat/mp/OptionMojoTest.java b/apache-rat-plugin/src/test/java/org/apache/rat/mp/OptionMojoTest.java
index 07c461da..5f5eceb6 100644
--- a/apache-rat-plugin/src/test/java/org/apache/rat/mp/OptionMojoTest.java
+++ b/apache-rat-plugin/src/test/java/org/apache/rat/mp/OptionMojoTest.java
@@ -29,9 +29,15 @@ import org.apache.rat.test.AbstractOptionsProvider;
 import org.apache.rat.OptionCollectionTest;
 import org.apache.rat.ReportConfiguration;
 import org.apache.rat.plugin.BaseRatMojo;
+import org.apache.rat.utils.DefaultLog;
 import org.codehaus.plexus.component.configurator.ComponentConfigurationException;
+import org.junit.jupiter.api.AfterAll;
+import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.condition.EnabledOnOs;
+import org.junit.jupiter.api.condition.OS;
+import org.junit.jupiter.api.io.TempDir;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.ArgumentsProvider;
 import org.junit.jupiter.params.provider.ArgumentsSource;
@@ -41,7 +47,6 @@ import java.io.FileWriter;
 import java.io.IOException;
 import java.lang.reflect.Method;
 import java.nio.charset.StandardCharsets;
-import java.nio.file.FileSystems;
 import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.List;
@@ -51,30 +56,51 @@ import static org.junit.jupiter.api.Assertions.fail;
 
 
 public class OptionMojoTest {
-    static final Path testPath = FileSystems.getDefault().getPath("target", "optionTest");
+
+    @TempDir
+    static Path testPath;
+
     static String POM_FMT;
 
     @BeforeAll
     public static void makeDirs() throws IOException {
-        testPath.toFile().mkdirs();
         POM_FMT = IOUtils.resourceToString("/optionTest/pom.tpl", StandardCharsets.UTF_8);
     }
 
+    @AfterAll
+    static void preserveData() {
+         AbstractOptionsProvider.preserveData(testPath.toFile(), "optionTest");
+    }
+
+    /**
+     * This method is a known workaround for
+     * {@link <a href="https://github.com/junit-team/junit5/issues/2811">junit 5 issue #2811</a> }.
+     */
+    @AfterEach
+    @EnabledOnOs(OS.WINDOWS)
+    void cleanUp() {
+        System.gc();
+    }
+
     @ParameterizedTest
-    @ArgumentsSource(OptionsProvider.class)
-    public void testOptionsUpdateConfig(String name, OptionCollectionTest.OptionTest test) {
+    @ArgumentsSource(MojoOptionsProvider.class)
+    void testOptionsUpdateConfig(String name, OptionCollectionTest.OptionTest test) {
+        DefaultLog.getInstance().info("Running " + name);
         test.test();
     }
 
-    public static class OptionsProvider extends AbstractOptionsProvider implements ArgumentsProvider  {
+    static class MojoOptionsProvider extends AbstractOptionsProvider implements ArgumentsProvider  {
 
         private RatCheckMojo mojo = null;
-        public OptionsProvider() {
-            super(BaseRatMojo.unsupportedArgs());
+
+        public MojoOptionsProvider() {
+            super(BaseRatMojo.unsupportedArgs(), testPath.toFile());
         }
 
-       private RatCheckMojo generateMojo(Pair<Option,String[]>... args) throws IOException {
-           MavenOption keyOption = new MavenOption(args[0].getKey() == null ? Option.builder().longOpt("no-option").build() : args[0].getKey());
+       private RatCheckMojo generateMojo(List<Pair<Option, String[]>> args) throws IOException {
+           MavenOption keyOption = new MavenOption(args.get(0).getKey() == null ?
+                   Option.builder().longOpt("no-option").build() :
+                   args.get(0).getKey());
            List<String> mavenOptions = new ArrayList<>();
            for (Pair<Option, String[]> pair : args) {
                if (pair.getKey() != null) {
@@ -84,7 +110,6 @@ public class OptionMojoTest {
                            mavenOptions.add(new MavenOption(pair.getKey()).xmlNode(value));
                        }
                    } else {
-                       MavenOption mavenOption = new MavenOption(pair.getKey());
                        mavenOptions.add(new MavenOption(pair.getKey()).xmlNode("true"));
                    }
                }
@@ -111,9 +136,10 @@ public class OptionMojoTest {
        }
 
         @Override
-        protected ReportConfiguration generateConfig(Pair<Option, String[]>... args) throws IOException {
+        protected final ReportConfiguration generateConfig(List<Pair<Option, String[]>> args) throws IOException {
             try {
                 this.mojo = generateMojo(args);
+                AbstractOptionsProvider.setup(this.mojo.getProject().getBasedir());
                 return mojo.getConfiguration();
             } catch (MojoExecutionException e) {
                 throw new IOException(e.getMessage(), e);
@@ -124,65 +150,6 @@ public class OptionMojoTest {
         protected void helpTest() {
             fail("Should not call help");
         }
-
-/*
-        private void execExcludeTest(Option option, String[] args) {
-
-            try {
-                ReportConfiguration config = generateConfig(ImmutablePair.of(option, args));
-                File workingDir = mojo.getProject().getBasedir();
-                for (String fn : new String[] {"some.foo", "B.bar", "justbaz", "notbaz"}) {
-                    try (FileOutputStream fos = new FileOutputStream(new File(workingDir, fn))) {
-                        fos.write("Hello world".getBytes());
-                    }
-                }
-
-                assertThat(ds.getExcludedList()).contains("some.foo");
-                assertThat(ds.getExcludedList()).contains("B.bar");
-                assertThat(ds.getExcludedList()).contains("justbaz");
-                assertThat(ds.getIncludedList()).contains("notbaz");
-            } catch (IOException | MojoExecutionException e) {
-                fail(e.getMessage(), e);
-            }
-        }
-
-        @Override
-        protected void excludeTest() {
-            String[] args = { "*.foo", "*.bar", "justbaz"};
-            execExcludeTest(Arg.EXCLUDE.find("exclude"), args);
-        }
-
-        @Override
-        protected void inputExcludeTest() {
-            String[] args = { "*.foo", "*.bar", "justbaz"};
-            execExcludeTest(Arg.EXCLUDE.find("input-exclude"), args);
-        }
-
-        private void excludeFileTest(Option option) {
-            File outputFile = new File(baseDir, "exclude.txt");
-            try (FileWriter fw = new FileWriter(outputFile)) {
-                fw.write("*.foo");
-                fw.write(System.lineSeparator());
-                fw.write("*.bar");
-                fw.write(System.lineSeparator());
-                fw.write("justbaz");
-                fw.write(System.lineSeparator());
-            } catch (IOException e) {
-                throw new RuntimeException(e);
-            }
-            execExcludeTest(option, new String[] {outputFile.getPath()});
-        }
-
-        protected void excludeFileTest() {
-            excludeFileTest(Arg.EXCLUDE_FILE.find("exclude-file"));
-        }
-
-
-        protected void inputExcludeFileTest() {
-            excludeFileTest(Arg.EXCLUDE_FILE.find("input-exclude-file"));
-        }
-
- */
     }
 
     public abstract static class SimpleMojoTestcase extends BetterAbstractMojoTestCase {
