diff --git a/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/DelegateProvider.java b/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/DelegateProvider.java
index aee0790c..21a2b0e8 100644
--- a/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/DelegateProvider.java
+++ b/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/DelegateProvider.java
@@ -18,6 +18,8 @@
  */
 package org.apache.johnzon.jaxrs;
 
+import static java.util.Optional.ofNullable;
+
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.MultivaluedMap;
 import javax.ws.rs.ext.MessageBodyReader;
@@ -33,7 +35,8 @@ public abstract class DelegateProvider<T> implements MessageBodyWriter<T>, Messa
     private final MessageBodyWriter<T> writer;
 
     protected DelegateProvider(final MessageBodyReader<T> reader, final MessageBodyWriter<T> writer) {
-        this.reader = reader;
+        this.reader = shouldThrowNoContentExceptionOnEmptyStreams() && isJaxRs2() ?
+                new NoContentExceptionHandlerReader<>(reader) : reader;
         this.writer = writer;
     }
 
@@ -70,4 +73,19 @@ public abstract class DelegateProvider<T> implements MessageBodyWriter<T>, Messa
                         final OutputStream entityStream) throws IOException {
         writer.writeTo(t, rawType, genericType, annotations, mediaType, httpHeaders, entityStream);
     }
+
+    protected boolean shouldThrowNoContentExceptionOnEmptyStreams() {
+        return false;
+    }
+
+    private static boolean isJaxRs2() {
+        try {
+            ofNullable(Thread.currentThread().getContextClassLoader())
+                    .orElseGet(ClassLoader::getSystemClassLoader)
+                    .loadClass("javax.ws.rs.core.Feature");
+            return true;
+        } catch (final NoClassDefFoundError | ClassNotFoundException e) {
+            return false;
+        }
+    }
 }
diff --git a/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/JohnzonProvider.java b/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/JohnzonProvider.java
index 9847c4de..b99e42b2 100644
--- a/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/JohnzonProvider.java
+++ b/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/JohnzonProvider.java
@@ -37,4 +37,8 @@ public class JohnzonProvider<T> extends DelegateProvider<T> {
     public JohnzonProvider() {
         this(new MapperBuilder().setDoCloseOnStreams(false).build(), null);
     }
+
+    protected boolean shouldThrowNoContentExceptionOnEmptyStreams() {
+        return Boolean.getBoolean("johnzon.jaxrs.johnzon.throwNoContentExceptionOnEmptyStreams");
+    }
 }
diff --git a/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/JsrProvider.java b/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/JsrProvider.java
index 06ec86d1..872dfe97 100644
--- a/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/JsrProvider.java
+++ b/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/JsrProvider.java
@@ -18,9 +18,16 @@
  */
 package org.apache.johnzon.jaxrs;
 
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Type;
+
 import javax.json.JsonStructure;
 import javax.ws.rs.Consumes;
 import javax.ws.rs.Produces;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.MultivaluedMap;
 import javax.ws.rs.ext.Provider;
 
 @Provider
@@ -30,4 +37,16 @@ public class JsrProvider extends DelegateProvider<JsonStructure> {
     public JsrProvider() {
         super(new JsrMessageBodyReader(), new JsrMessageBodyWriter());
     }
+
+    @Override
+    public JsonStructure readFrom(final Class<JsonStructure> rawType, final Type genericType,
+                                  final Annotation[] annotations, final MediaType mediaType,
+                                  final MultivaluedMap<String, String> httpHeaders,
+                                  final InputStream entityStream) throws IOException {
+        return super.readFrom(rawType, genericType, annotations, mediaType, httpHeaders, entityStream);
+    }
+
+    protected boolean shouldThrowNoContentExceptionOnEmptyStreams() {
+        return Boolean.getBoolean("johnzon.jaxrs.jsr.throwNoContentExceptionOnEmptyStreams");
+    }
 }
diff --git a/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/NoContentExceptionHandlerReader.java b/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/NoContentExceptionHandlerReader.java
new file mode 100644
index 00000000..acd496d2
--- /dev/null
+++ b/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/NoContentExceptionHandlerReader.java
@@ -0,0 +1,63 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.johnzon.jaxrs;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Type;
+
+import javax.ws.rs.WebApplicationException;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.MultivaluedMap;
+import javax.ws.rs.core.NoContentException;
+import javax.ws.rs.ext.MessageBodyReader;
+
+public class NoContentExceptionHandlerReader<T> implements MessageBodyReader<T> {
+    private final MessageBodyReader<T> delegate;
+
+    public NoContentExceptionHandlerReader(final MessageBodyReader<T> delegate) {
+        this.delegate = delegate;
+    }
+
+    public MessageBodyReader<T> getDelegate() {
+        return delegate;
+    }
+
+    @Override
+    public boolean isReadable(final Class<?> type, final Type genericType, final Annotation[] annotations, final MediaType mediaType) {
+        return delegate.isReadable(type, genericType, annotations, mediaType);
+    }
+
+    @Override
+    public T readFrom(final Class<T> type, final Type genericType, final Annotation[] annotations,
+                      final MediaType mediaType, final MultivaluedMap<String, String> httpHeaders,
+                      final InputStream entityStream) throws IOException, WebApplicationException {
+        try {
+            return delegate.readFrom(type, genericType, annotations, mediaType, httpHeaders, entityStream);
+        } catch (final IllegalStateException ise) {
+            if (ise.getClass().getName()
+                    .equals("org.apache.johnzon.core.JsonReaderImpl$NothingToRead")) {
+                // spec enables to return an empty java object but it does not mean anything in JSON context so just fail
+                throw new NoContentException(ise);
+            }
+            throw ise;
+        }
+    }
+}
diff --git a/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/WildcardJohnzonProvider.java b/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/WildcardJohnzonProvider.java
index 275c0f1b..585622d0 100644
--- a/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/WildcardJohnzonProvider.java
+++ b/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/WildcardJohnzonProvider.java
@@ -45,4 +45,8 @@ public class WildcardJohnzonProvider<T> extends DelegateProvider<T> {
     public WildcardJohnzonProvider() {
         this(new MapperBuilder().setDoCloseOnStreams(false).build(), null);
     }
+
+    protected boolean shouldThrowNoContentExceptionOnEmptyStreams() {
+        return Boolean.getBoolean("johnzon.jaxrs.johnzon.wildcard.throwNoContentExceptionOnEmptyStreams");
+    }
 }
diff --git a/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/WildcardJsrProvider.java b/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/WildcardJsrProvider.java
index e4242070..657a69e9 100644
--- a/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/WildcardJsrProvider.java
+++ b/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/WildcardJsrProvider.java
@@ -37,4 +37,8 @@ public class WildcardJsrProvider extends DelegateProvider<JsonStructure> {
     public WildcardJsrProvider() {
         super(new JsrMessageBodyReader(), new JsrMessageBodyWriter());
     }
+
+    protected boolean shouldThrowNoContentExceptionOnEmptyStreams() {
+        return Boolean.getBoolean("johnzon.jaxrs.jsr.wildcard.throwNoContentExceptionOnEmptyStreams");
+    }
 }
