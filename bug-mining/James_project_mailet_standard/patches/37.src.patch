diff --git a/mailet/standard/src/main/java/org/apache/james/transport/mailets/MailAttributesListToMimeHeaders.java b/mailet/standard/src/main/java/org/apache/james/transport/mailets/MailAttributesListToMimeHeaders.java
index a253e08688..e9a1db1390 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/mailets/MailAttributesListToMimeHeaders.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/mailets/MailAttributesListToMimeHeaders.java
@@ -19,17 +19,16 @@
 
 package org.apache.james.transport.mailets;
 
-import java.io.Serializable;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Map.Entry;
-import java.util.Optional;
 
 import javax.mail.MessagingException;
 import javax.mail.internet.MimeMessage;
 
 import org.apache.mailet.AttributeName;
 import org.apache.mailet.AttributeUtils;
+import org.apache.mailet.AttributeValue;
 import org.apache.mailet.Mail;
 import org.apache.mailet.base.GenericMailet;
 import org.slf4j.Logger;
@@ -85,20 +84,15 @@ public class MailAttributesListToMimeHeaders extends GenericMailet {
             .ifPresent(attribute -> {
                 if (attribute instanceof Collection) {
                     @SuppressWarnings("unchecked")
-                    Optional<Collection<Serializable>> values = Optional.of((Collection<Serializable>) attribute);
-                    addCollectionToHeader(message, entry.getValue(), values);
+                    Collection<AttributeValue<?>> values = (Collection<AttributeValue<?>>) attribute;
+                    values.forEach(
+                        value -> addValueToHeader(message, entry.getValue(), value.getValue()));
                 } else {
                     LOGGER.warn("Can not add {} to headers. Expecting class Collection but got {}.", attribute, attribute.getClass());
                 }
             });
     }
 
-    private void addCollectionToHeader(MimeMessage message, String headerName, Optional<Collection<Serializable>> values) {
-        values.ifPresent(collection ->
-            collection.forEach(
-                value -> addValueToHeader(message, headerName, value)));
-    }
-
     private void addValueToHeader(MimeMessage message, String headerName, Object value) {
         try {
             if (value instanceof String) {
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/mailets/MimeDecodingMailet.java b/mailet/standard/src/main/java/org/apache/james/transport/mailets/MimeDecodingMailet.java
index 80a1d12db1..8a2e1fa712 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/mailets/MimeDecodingMailet.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/mailets/MimeDecodingMailet.java
@@ -79,32 +79,32 @@ public class MimeDecodingMailet extends GenericMailet {
     }
 
     private void setAttribute(Mail mail, Attribute attribute) {
-        Function<Map.Entry<String, byte[]>, Stream<Pair<String, byte[]>>> convertToMapContent =
+        Function<Map.Entry<String, AttributeValue<byte[]>>, Stream<Pair<String, byte[]>>> convertToMapContent =
             Throwing
-                .<Map.Entry<String, byte[]>, Stream<Pair<String, byte[]>>>function(entry ->
-                    extractContent(entry.getValue())
+                .<Map.Entry<String, AttributeValue<byte[]>>, Stream<Pair<String, byte[]>>>function(entry ->
+                    extractContent(entry.getValue().getValue())
                         .stream()
                         .map(content -> Pair.of(entry.getKey(), content)))
                 .sneakyThrow();
 
-        ImmutableMap<String, byte[]> extractedMimeContentByName = getAttributeContent(attribute)
+        Map<String, AttributeValue<?>> extractedMimeContentByName = getAttributeContent(attribute)
                 .entrySet()
                 .stream()
                 .flatMap(convertToMapContent)
-                .collect(ImmutableMap.toImmutableMap(Pair::getKey, Pair::getValue));
+                .collect(ImmutableMap.toImmutableMap(Pair::getKey, pair -> AttributeValue.of(pair.getValue())));
 
-        mail.setAttribute(new Attribute(attributeName, AttributeValue.ofAny(extractedMimeContentByName)));
+        mail.setAttribute(new Attribute(attributeName, AttributeValue.of(extractedMimeContentByName)));
     }
 
     @SuppressWarnings("unchecked")
-    private Map<String, byte[]> getAttributeContent(Attribute attribute) {
+    private Map<String, AttributeValue<byte[]>> getAttributeContent(Attribute attribute) {
         Object attributeValue = attribute.getValue().value();
         if (! (attributeValue instanceof Map)) {
             LOGGER.debug("Invalid attribute found into attribute {} class Map expected but {} found.",
                     attribute, attributeValue.getClass());
             return ImmutableMap.of();
         }
-        return (Map<String, byte[]>) attributeValue;
+        return (Map<String, AttributeValue<byte[]>>) attributeValue;
     }
 
     private Optional<byte[]> extractContent(Object rawMime) throws MessagingException {
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/mailets/RecoverAttachment.java b/mailet/standard/src/main/java/org/apache/james/transport/mailets/RecoverAttachment.java
index 172b76689a..89d84e8c05 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/mailets/RecoverAttachment.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/mailets/RecoverAttachment.java
@@ -33,6 +33,7 @@ import javax.mail.internet.MimeMultipart;
 
 import org.apache.mailet.AttributeName;
 import org.apache.mailet.AttributeUtils;
+import org.apache.mailet.AttributeValue;
 import org.apache.mailet.Experimental;
 import org.apache.mailet.Mail;
 import org.apache.mailet.MailetException;
@@ -66,7 +67,7 @@ import com.github.fge.lambdas.Throwing;
 public class RecoverAttachment extends GenericMailet {
     private static final Logger LOGGER = LoggerFactory.getLogger(RecoverAttachment.class);
     @SuppressWarnings("unchecked")
-    private static final Class<Map<String, byte[]>> MAP_STRING_BYTES_CLASS = (Class<Map<String, byte[]>>) (Object) Map.class;
+    private static final Class<Map<String, AttributeValue<?>>> MAP_STRING_BYTES_CLASS = (Class<Map<String, AttributeValue<?>>>) (Object) Map.class;
 
     private static final String ATTRIBUTE_PARAMETER_NAME = "attribute";
 
@@ -98,11 +99,11 @@ public class RecoverAttachment extends GenericMailet {
     public void service(Mail mail) throws MailetException {
         AttributeUtils
             .getValueAndCastFromMail(mail, attributeName, MAP_STRING_BYTES_CLASS)
-            .ifPresent(Throwing.<Map<String, byte[]>>consumer(attachments ->
+            .ifPresent(Throwing.<Map<String, AttributeValue<?>>>consumer(attachments ->
                     processAttachment(mail, attachments)).sneakyThrow());
     }
 
-    private void processAttachment(Mail mail, Map<String, byte[]> attachments) throws MailetException {
+    private void processAttachment(Mail mail, Map<String,  AttributeValue<?>> attachments) throws MailetException {
         MimeMessage message;
         try {
             message = mail.getMessage();
@@ -111,10 +112,13 @@ public class RecoverAttachment extends GenericMailet {
                     "Could not retrieve message from Mail object", e);
         }
 
-        Iterator<byte[]> i = attachments.values().iterator();
+        Iterator<AttributeValue<?>> i = attachments.values().iterator();
         try {
             while (i.hasNext()) {
-                byte[] bytes = i.next();
+                if (!(i.next().getValue() instanceof byte[])) {
+                    continue;
+                }
+                byte[] bytes = (byte[]) i.next().getValue();
                 InputStream is = new BufferedInputStream(
                         new ByteArrayInputStream(bytes));
                 MimeBodyPart p = new MimeBodyPart(is);
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/mailets/StripAttachment.java b/mailet/standard/src/main/java/org/apache/james/transport/mailets/StripAttachment.java
index 63c3ddff2f..bd04f95ba2 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/mailets/StripAttachment.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/mailets/StripAttachment.java
@@ -93,7 +93,7 @@ import com.google.common.collect.ImmutableMap;
 public class StripAttachment extends GenericMailet {
     private static final Logger LOGGER = LoggerFactory.getLogger(StripAttachment.class);
     @SuppressWarnings("unchecked")
-    private static final Class<Map<String, byte[]>> MAP_STRING_BYTES_CLASS = (Class<Map<String, byte[]>>) (Object) Map.class;
+    private static final Class<Map<String, AttributeValue<byte[]>>> MAP_STRING_BYTES_CLASS = (Class<Map<String, AttributeValue<byte[]>>>) (Object) Map.class;
 
     @SuppressWarnings("unchecked")
     private static final Class<List<AttributeValue<String>>> LIST_OF_STRINGS = (Class<List<AttributeValue<String>>>)(Object) List.class;
@@ -354,15 +354,17 @@ public class StripAttachment extends GenericMailet {
     }
 
     private void addPartContent(BodyPart bodyPart, Mail mail, String fileName, AttributeName attributeName) throws IOException, MessagingException {
-        ImmutableMap.Builder<String, byte[]> fileNamesToPartContent = AttributeUtils
+        ImmutableMap.Builder<String, AttributeValue<?>> fileNamesToPartContent = AttributeUtils
             .getValueAndCastFromMail(mail, attributeName, MAP_STRING_BYTES_CLASS)
-            .map(ImmutableMap.<String, byte[]>builder()::putAll)
+            .map(ImmutableMap.<String, AttributeValue<?>>builder()::putAll)
             .orElse(ImmutableMap.builder());
 
         UnsynchronizedByteArrayOutputStream byteArrayOutputStream = new UnsynchronizedByteArrayOutputStream();
         bodyPart.writeTo(byteArrayOutputStream);
-        fileNamesToPartContent.put(fileName, byteArrayOutputStream.toByteArray());
-        mail.setAttribute(new Attribute(attributeName, AttributeValue.ofAny(fileNamesToPartContent.build())));
+        fileNamesToPartContent.put(fileName, AttributeValue.of(byteArrayOutputStream.toByteArray()));
+
+        Map<String, AttributeValue<?>> build = fileNamesToPartContent.build();
+        mail.setAttribute(new Attribute(attributeName, AttributeValue.of(build)));
     }
 
     private void storeFileNameAsAttribute(Mail mail, AttributeValue<String> fileName, boolean hasToBeStored) {
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/MailAttributesListToMimeHeadersTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/MailAttributesListToMimeHeadersTest.java
index 2380666164..f359927e9b 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/MailAttributesListToMimeHeadersTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/MailAttributesListToMimeHeadersTest.java
@@ -28,6 +28,7 @@ import javax.mail.MessagingException;
 
 import org.apache.james.core.builder.MimeMessageBuilder;
 import org.apache.mailet.Attribute;
+import org.apache.mailet.AttributeValue;
 import org.apache.mailet.Mailet;
 import org.apache.mailet.base.test.FakeMail;
 import org.apache.mailet.base.test.FakeMailetConfig;
@@ -43,8 +44,8 @@ class MailAttributesListToMimeHeadersTest {
     private static final String VALUE_1_2 = "test1.2";
     private static final String VALUE_2_1 = "test2.1";
     private static final String VALUE_2_2 = "test2.2";
-    private static final ImmutableList<String> MAIL_ATTRIBUTE_VALUE1 = ImmutableList.of(VALUE_1_1, VALUE_1_2);
-    private static final ImmutableList<String> MAIL_ATTRIBUTE_VALUE2 = ImmutableList.of(VALUE_2_1, VALUE_2_2);
+    private static final ImmutableList<AttributeValue<String>> MAIL_ATTRIBUTE_VALUE1 = ImmutableList.of(AttributeValue.of(VALUE_1_1), AttributeValue.of(VALUE_1_2));
+    private static final ImmutableList<AttributeValue<String>> MAIL_ATTRIBUTE_VALUE2 = ImmutableList.of(AttributeValue.of(VALUE_2_1), AttributeValue.of(VALUE_2_2));
 
     private static final String MAIL_ATTRIBUTE_NAME1 = "org.apache.james.test";
     private static final String MAIL_ATTRIBUTE_NAME2 = "org.apache.james.test2";
@@ -127,32 +128,6 @@ class MailAttributesListToMimeHeadersTest {
             .containsExactly(VALUE_1_1, VALUE_1_2);
     }
 
-    @Test
-    void shouldIgnoreNullValueInsideList() throws MessagingException {
-        FakeMailetConfig mailetConfig = FakeMailetConfig.builder()
-            .mailetName("Test")
-            .setProperty("simplemapping",
-                MAIL_ATTRIBUTE_NAME1 + "; " + HEADER_NAME1)
-            .build();
-
-        mailet.init(mailetConfig);
-
-        ArrayList<String> listWithNull = new ArrayList<>();
-        listWithNull.add("1");
-        listWithNull.add(null);
-        listWithNull.add("2");
-        FakeMail mail = FakeMail.builder()
-            .name("mail")
-            .mimeMessage(MailUtil.createMimeMessage())
-            .attribute(Attribute.convertToAttribute(MAIL_ATTRIBUTE_NAME1, listWithNull))
-            .build();
-
-        mailet.service(mail);
-
-        assertThat(mail.getMessage().getHeader(HEADER_NAME1))
-            .containsExactly("1", "2");
-    }
-
     @Test
     void shouldPutAttributesIntoHeadersWhenMappingDefined() throws MessagingException {
         FakeMailetConfig mailetConfig = FakeMailetConfig.builder()
@@ -175,10 +150,14 @@ class MailAttributesListToMimeHeadersTest {
         mailet.service(mail);
 
         assertThat(mail.getMessage().getHeader(HEADER_NAME1))
-            .containsExactlyElementsOf(MAIL_ATTRIBUTE_VALUE1);
+            .containsExactlyElementsOf(MAIL_ATTRIBUTE_VALUE1.stream()
+                .map(AttributeValue::getValue)
+                .collect(ImmutableList.toImmutableList()));
 
         assertThat(mail.getMessage().getHeader(HEADER_NAME2))
-            .containsExactlyElementsOf(MAIL_ATTRIBUTE_VALUE2);
+            .containsExactlyElementsOf(MAIL_ATTRIBUTE_VALUE2.stream()
+                .map(AttributeValue::getValue)
+                .collect(ImmutableList.toImmutableList()));
     }
 
     @Test
@@ -224,7 +203,9 @@ class MailAttributesListToMimeHeadersTest {
 
         assertThat(mail.getMessage().getHeader(HEADER_NAME1)).isNull();
         assertThat(mail.getMessage().getHeader(HEADER_NAME2))
-            .containsExactlyElementsOf(MAIL_ATTRIBUTE_VALUE2);
+            .containsExactlyElementsOf(MAIL_ATTRIBUTE_VALUE2.stream()
+                .map(AttributeValue::getValue)
+                .collect(ImmutableList.toImmutableList()));
     }
 
 
@@ -240,7 +221,7 @@ class MailAttributesListToMimeHeadersTest {
         FakeMail mail = FakeMail.builder()
             .name("mail")
             .mimeMessage(MimeMessageBuilder.mimeMessageBuilder())
-            .attribute(Attribute.convertToAttribute(MAIL_ATTRIBUTE_NAME1, ImmutableList.of(3L, value)))
+            .attribute(Attribute.convertToAttribute(MAIL_ATTRIBUTE_NAME1, ImmutableList.of(AttributeValue.of(3L), AttributeValue.of(value))))
             .build();
 
         mailet.service(mail);
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/MimeDecodingMailetTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/MimeDecodingMailetTest.java
index 455c3a2ed6..a2efee348c 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/MimeDecodingMailetTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/MimeDecodingMailetTest.java
@@ -37,7 +37,6 @@ import org.apache.mailet.MailetException;
 import org.apache.mailet.base.test.FakeMail;
 import org.apache.mailet.base.test.FakeMailContext;
 import org.apache.mailet.base.test.FakeMailetConfig;
-import org.assertj.core.data.MapEntry;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
@@ -49,7 +48,7 @@ class MimeDecodingMailetTest {
 
     private static final AttributeName MAIL_ATTRIBUTE = AttributeName.of("mime.attachments");
     @SuppressWarnings("unchecked")
-    private static final Class<Map<String, byte[]>> MAP_STRING_BYTES_CLASS = (Class<Map<String, byte[]>>) (Object) Map.class;
+    private static final Class<Map<String, AttributeValue<byte[]>>> MAP_STRING_BYTES_CLASS = (Class<Map<String, AttributeValue<byte[]>>>) (Object) Map.class;
 
     private MailetContext mailetContext;
     private MimeDecodingMailet testee;
@@ -145,15 +144,15 @@ class MimeDecodingMailetTest {
                 + "Content-Type: application/octet-stream; charset=utf-8\r\n\r\n"
                 + text;
         String expectedKey = "mimePart1";
-        AttributeValue<?> value = AttributeValue.ofAny(ImmutableMap.of(expectedKey, content.getBytes(StandardCharsets.UTF_8)));
+        AttributeValue<?> value = AttributeValue.of(ImmutableMap.of(expectedKey, AttributeValue.of(content.getBytes(StandardCharsets.UTF_8))));
         mail.setAttribute(new Attribute(MAIL_ATTRIBUTE, value));
 
-        byte[] expectedValue = text.getBytes(StandardCharsets.UTF_8);
+        AttributeValue<byte[]> expectedValue = AttributeValue.of(text.getBytes(StandardCharsets.UTF_8));
         testee.service(mail);
 
-        Optional<Map<String, byte[]>> processedAttribute = AttributeUtils.getValueAndCastFromMail(mail, MAIL_ATTRIBUTE, MAP_STRING_BYTES_CLASS);
+        Optional<Map<String, AttributeValue<byte[]>>> processedAttribute = AttributeUtils.getValueAndCastFromMail(mail, MAIL_ATTRIBUTE, MAP_STRING_BYTES_CLASS);
         assertThat(processedAttribute).hasValueSatisfying(map ->
-            assertThat(map)
-                .containsExactly(MapEntry.entry(expectedKey, expectedValue)));
+            assertThat(map.values().stream().findFirst().get().getValue())
+                .contains(expectedValue.value()));
     }
 }
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/StripAttachmentTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/StripAttachmentTest.java
index 4eb7979466..3e47283a73 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/StripAttachmentTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/StripAttachmentTest.java
@@ -65,7 +65,7 @@ class StripAttachmentTest {
     @SuppressWarnings("unchecked")
     private static Class<Collection<AttributeValue<String>>> COLLECTION_STRING_CLASS = (Class<Collection<AttributeValue<String>>>) (Object) Collection.class;
     @SuppressWarnings("unchecked")
-    private static Class<Map<String, byte[]>> MAP_STRING_BYTES_CLASS = (Class<Map<String, byte[]>>) (Object) Map.class;
+    private static Class<Map<String, AttributeValue<?>>> MAP_STRING_BYTES_CLASS = (Class<Map<String, AttributeValue<?>>>) (Object) Map.class;
 
     private static final String EXPECTED_ATTACHMENT_CONTENT = "#¤ãàé";
     private static final Optional<String> ABSENT_MIME_TYPE = Optional.empty();
@@ -283,13 +283,13 @@ class StripAttachmentTest {
 
         mailet.service(mail);
 
-        Optional<Map<String, byte[]>> savedValue = AttributeUtils.getValueAndCastFromMail(mail, AttributeName.of(customAttribute), MAP_STRING_BYTES_CLASS);
-        ConsumerChainer<Map<String, byte[]>> assertValue = Throwing.consumer(saved -> {
+        Optional<Map<String, AttributeValue<?>>> savedValue = AttributeUtils.getValueAndCastFromMail(mail, AttributeName.of(customAttribute), MAP_STRING_BYTES_CLASS);
+        ConsumerChainer<Map<String, AttributeValue<?>>> assertValue = Throwing.consumer(saved -> {
             assertThat(saved)
                     .hasSize(1)
                     .containsKeys(expectedKey);
 
-            MimeBodyPart savedBodyPart = new MimeBodyPart(new ByteArrayInputStream(saved.get(expectedKey)));
+            MimeBodyPart savedBodyPart = new MimeBodyPart(new ByteArrayInputStream((byte[]) saved.get(expectedKey).getValue()));
             String content = IOUtils.toString(savedBodyPart.getInputStream(), StandardCharsets.UTF_8);
             assertThat(content).isEqualTo(EXPECTED_ATTACHMENT_CONTENT);
         });
@@ -321,13 +321,13 @@ class StripAttachmentTest {
 
         mailet.service(mail);
 
-        Optional<Map<String, byte[]>> savedValue = AttributeUtils.getValueAndCastFromMail(mail, AttributeName.of(customAttribute), MAP_STRING_BYTES_CLASS);
-        ConsumerChainer<Map<String, byte[]>> assertValue = Throwing.consumer(saved -> {
+        Optional<Map<String, AttributeValue<?>>> savedValue = AttributeUtils.getValueAndCastFromMail(mail, AttributeName.of(customAttribute), MAP_STRING_BYTES_CLASS);
+        ConsumerChainer<Map<String, AttributeValue<?>>> assertValue = Throwing.consumer(saved -> {
             assertThat(saved)
                     .hasSize(1)
                     .containsKeys(expectedKey);
 
-            MimeBodyPart savedBodyPart = new MimeBodyPart(new ByteArrayInputStream(saved.get(expectedKey)));
+            MimeBodyPart savedBodyPart = new MimeBodyPart(new ByteArrayInputStream((byte[]) saved.get(expectedKey).getValue()));
             String content = IOUtils.toString(savedBodyPart.getInputStream(), StandardCharsets.UTF_8);
             assertThat(content).isEqualTo(EXPECTED_ATTACHMENT_CONTENT);
         });
@@ -655,7 +655,7 @@ class StripAttachmentTest {
         
         //Then
         assertThat(actual).isTrue();
-        Optional<Map<String, byte[]>> savedValue = AttributeUtils.getValueAndCastFromMail(mail, AttributeName.of(customAttribute), MAP_STRING_BYTES_CLASS);
+        Optional<Map<String,  AttributeValue<?>>> savedValue = AttributeUtils.getValueAndCastFromMail(mail, AttributeName.of(customAttribute), MAP_STRING_BYTES_CLASS);
         assertThat(savedValue)
                 .isPresent()
                 .hasValueSatisfying(saved ->
