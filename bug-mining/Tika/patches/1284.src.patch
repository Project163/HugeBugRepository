diff --git a/tika-pipes/tika-fetchers/tika-fetcher-http/pom.xml b/tika-pipes/tika-fetchers/tika-fetcher-http/pom.xml
index f01609043..07b4f8843 100644
--- a/tika-pipes/tika-fetchers/tika-fetcher-http/pom.xml
+++ b/tika-pipes/tika-fetchers/tika-fetcher-http/pom.xml
@@ -52,6 +52,12 @@
       <type>test-jar</type>
       <scope>test</scope>
     </dependency>
+    <dependency>
+      <groupId>org.mockito</groupId>
+      <artifactId>mockito-core</artifactId>
+      <version>${mockito.version}</version>
+      <scope>test</scope>
+    </dependency>
   </dependencies>
 
   <build>
diff --git a/tika-pipes/tika-fetchers/tika-fetcher-http/src/main/java/org/apache/tika/pipes/fetcher/http/HttpFetcher.java b/tika-pipes/tika-fetchers/tika-fetcher-http/src/main/java/org/apache/tika/pipes/fetcher/http/HttpFetcher.java
index b819ff993..2ef4ea49c 100644
--- a/tika-pipes/tika-fetchers/tika-fetcher-http/src/main/java/org/apache/tika/pipes/fetcher/http/HttpFetcher.java
+++ b/tika-pipes/tika-fetchers/tika-fetcher-http/src/main/java/org/apache/tika/pipes/fetcher/http/HttpFetcher.java
@@ -111,6 +111,7 @@ public class HttpFetcher extends AbstractFetcher implements Initializable, Range
     private static String USER_AGENT = "User-Agent";
 
     Logger LOG = LoggerFactory.getLogger(HttpFetcher.class);
+
     private HttpClientFactory httpClientFactory = new HttpClientFactory();
     private HttpClient httpClient;
     //back-off client that disables compression
@@ -149,7 +150,7 @@ public class HttpFetcher extends AbstractFetcher implements Initializable, Range
 
     @Override
     public InputStream fetch(String fetchKey, long startRange, long endRange, Metadata metadata)
-            throws IOException, TikaException {
+            throws IOException {
         HttpGet get = new HttpGet(fetchKey);
         if (! StringUtils.isBlank(userAgent)) {
             get.setHeader(USER_AGENT, userAgent);
@@ -204,7 +205,7 @@ public class HttpFetcher extends AbstractFetcher implements Initializable, Range
             }
             throw e;
         } catch  (IOException e) {
-            if (timeout.get() == true) {
+            if (timeout.get()) {
                 throw new TikaTimeoutException("Overall timeout after " + overallTimeout + "ms");
             } else {
                 throw e;
@@ -283,9 +284,7 @@ public class HttpFetcher extends AbstractFetcher implements Initializable, Range
                 URI uri = uriList.get(uriList.size() - 1);
                 if (uri != null) {
                     URL u = uri.toURL();
-                    if (u != null) {
-                        metadata.set(HTTP_TARGET_URL, u.toString());
-                    }
+                    metadata.set(HTTP_TARGET_URL, u.toString());
                 }
             } catch (MalformedURLException e) {
                 //swallow
@@ -315,7 +314,7 @@ public class HttpFetcher extends AbstractFetcher implements Initializable, Range
             IOUtils.copyLarge(is, bos, 0, maxErrMsgSize);
             return new String(bos.toByteArray(), StandardCharsets.UTF_8);
         } catch (IOException e) {
-            LOG.warn("IOexception trying to read error message", e);
+            LOG.warn("IOException trying to read error message", e);
             return "";
         } catch (NullPointerException e ) {
             return "";
@@ -448,6 +447,11 @@ public class HttpFetcher extends AbstractFetcher implements Initializable, Range
     @Override
     public void checkInitialization(InitializableProblemHandler problemHandler)
             throws TikaConfigException {
+    }
 
+    // For test purposes
+    void setHttpClientFactory(HttpClientFactory httpClientFactory) {
+        this.httpClientFactory = httpClientFactory;
     }
+
 }
diff --git a/tika-pipes/tika-fetchers/tika-fetcher-http/src/test/java/org/apache/tika/pipes/fetcher/http/HttpFetcherTest.java b/tika-pipes/tika-fetchers/tika-fetcher-http/src/test/java/org/apache/tika/pipes/fetcher/http/HttpFetcherTest.java
index aacebb2a9..c4d83e188 100644
--- a/tika-pipes/tika-fetchers/tika-fetcher-http/src/test/java/org/apache/tika/pipes/fetcher/http/HttpFetcherTest.java
+++ b/tika-pipes/tika-fetchers/tika-fetcher-http/src/test/java/org/apache/tika/pipes/fetcher/http/HttpFetcherTest.java
@@ -17,16 +17,35 @@
 package org.apache.tika.pipes.fetcher.http;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.mockito.ArgumentMatchers.*;
+import static org.mockito.Mockito.*;
 
 import java.io.ByteArrayOutputStream;
+import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.Charset;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.nio.file.StandardCopyOption;
+import java.util.Collections;
 import java.util.zip.GZIPInputStream;
 
 import org.apache.commons.io.IOUtils;
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpResponse;
+import org.apache.http.HttpStatus;
+import org.apache.http.StatusLine;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.protocol.HttpContext;
+import org.apache.tika.client.HttpClientFactory;
+import org.apache.tika.exception.TikaException;
+import org.apache.tika.metadata.Property;
+import org.apache.tika.metadata.TikaCoreProperties;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
@@ -35,10 +54,53 @@ import org.apache.tika.io.TemporaryResources;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.pipes.fetcher.FetcherManager;
 
-@Disabled("requires network connectivity")
 public class HttpFetcherTest extends TikaTest {
 
+    private static final String TEST_URL = "wontbecalled";
+    private static final String CONTENT = "request content";
+
+    private HttpFetcher httpFetcher;
+
+    @BeforeEach
+    public void before() throws Exception {
+        final HttpResponse mockResponse =
+                buildMockResponse(HttpStatus.SC_OK, IOUtils.toInputStream(CONTENT, Charset.defaultCharset()));
+
+        mockClientResponse(mockResponse);
+    }
+
+    @Test
+    public void test2xxResponse() throws TikaException, IOException {
+        final Metadata meta = new Metadata();
+        meta.set(TikaCoreProperties.RESOURCE_NAME_KEY, "fileName");
+
+        try (final InputStream ignored = httpFetcher.fetch(TEST_URL, meta)) {
+            // HTTP headers added into meta
+            assertEquals("200", meta.get("http-header:status-code"));
+            assertEquals(TEST_URL, meta.get("http-connection:target-url"));
+            // Content size included in meta
+            assertEquals("15", meta.get("Content-Length"));
+
+            // Filename passed in should be preserved
+            assertEquals("fileName", meta.get(TikaCoreProperties.RESOURCE_NAME_KEY));
+        }
+    }
+
     @Test
+    public void test4xxResponse() throws Exception {
+        // Setup client to respond with 403
+        mockClientResponse(buildMockResponse(HttpStatus.SC_FORBIDDEN, null));
+
+        final Metadata meta = new Metadata();
+        assertThrows(IOException.class, () -> httpFetcher.fetch(TEST_URL, meta));
+
+        // Meta still populated
+        assertEquals("403", meta.get("http-header:status-code"));
+        assertEquals(TEST_URL, meta.get("http-connection:target-url"));
+    }
+
+    @Test
+    @Disabled("requires network connectivity")
     public void testRedirect() throws Exception {
         String url = "https://t.co/cvfkWAEIxw?amp=1";
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
@@ -53,6 +115,7 @@ public class HttpFetcherTest extends TikaTest {
     }
 
     @Test
+    @Disabled("requires network connectivity")
     public void testRange() throws Exception {
         String url =
                 "https://commoncrawl.s3.amazonaws.com/crawl-data/CC-MAIN-2020-45/segments/1603107869785.9/warc/CC-MAIN-20201020021700-20201020051700-00529.warc.gz";
@@ -77,5 +140,30 @@ public class HttpFetcherTest extends TikaTest {
                 Paths.get(HttpFetcherTest.class.getResource("/" + path).toURI()));
     }
 
+    private void mockClientResponse(final HttpResponse response) throws Exception {
+        httpFetcher = (HttpFetcher) getFetcherManager("tika-config-http.xml").getFetcher("http");
+
+        final HttpClient httpClient = mock(HttpClient.class);
+        final HttpClientFactory clientFactory = mock(HttpClientFactory.class);
+
+        when(httpClient.execute(any(HttpUriRequest.class), any(HttpContext.class))).thenReturn(response);
+        when(clientFactory.build()).thenReturn(httpClient);
+        when(clientFactory.copy()).thenReturn(clientFactory);
 
+        httpFetcher.setHttpClientFactory(clientFactory);
+        httpFetcher.initialize(Collections.emptyMap());
+    }
+
+    private static HttpResponse buildMockResponse(final int statusCode, final InputStream is) throws IOException {
+        final HttpResponse response = mock(HttpResponse.class);
+        final StatusLine status = mock(StatusLine.class);
+        final HttpEntity entity = mock(HttpEntity.class);
+
+        when(status.getStatusCode()).thenReturn(statusCode);
+        when(entity.getContent()).thenReturn(is);
+        when(response.getStatusLine()).thenReturn(status);
+        when(response.getEntity()).thenReturn(entity);
+
+        return response;
+    }
 }
