diff --git a/src/java/org/apache/commons/configuration/CombinedConfiguration.java b/src/java/org/apache/commons/configuration/CombinedConfiguration.java
index 757771d2..908b6088 100644
--- a/src/java/org/apache/commons/configuration/CombinedConfiguration.java
+++ b/src/java/org/apache/commons/configuration/CombinedConfiguration.java
@@ -118,6 +118,9 @@ public class CombinedConfiguration extends HierarchicalConfiguration implements
     /** Constant for the default node combiner. */
     private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
 
+    /** Constant for the name of the property used for the reload check.*/
+    private static final String PROP_RELOAD_CHECK = "CombinedConfigurationReloadCheck";
+
     /** Stores the combiner. */
     private NodeCombiner nodeCombiner;
 
@@ -130,6 +133,9 @@ public class CombinedConfiguration extends HierarchicalConfiguration implements
     /** Stores a map with the named configurations. */
     private Map namedConfigurations;
 
+    /** A flag whether an enhanced reload check is to be performed.*/
+    private boolean forceReloadCheck;
+
     /**
      * Creates a new instance of <code>CombinedConfiguration</code> and
      * initializes the combiner to be used.
@@ -185,6 +191,34 @@ public class CombinedConfiguration extends HierarchicalConfiguration implements
         invalidate();
     }
 
+    /**
+     * Returns a flag whether an enhanced reload check must be performed.
+     *
+     * @return the force reload check flag
+     * @since 1.4
+     */
+    public boolean isForceReloadCheck()
+    {
+        return forceReloadCheck;
+    }
+
+    /**
+     * Sets the force reload check flag. If this flag is set, each property
+     * access on this configuration will cause a reload check on the contained
+     * configurations. This is a workaround for a problem with some reload
+     * implementations that only check if a reload is required when they are
+     * triggered. Per default this mode is disabled. If the force reload check
+     * flag is set to <b>true</b>, accessing properties will be less
+     * performant, but reloads on contained configurations will be detected.
+     *
+     * @param forceReloadCheck the value of the flag
+     * @since 1.4
+     */
+    public void setForceReloadCheck(boolean forceReloadCheck)
+    {
+        this.forceReloadCheck = forceReloadCheck;
+    }
+
     /**
      * Adds a new configuration to this combined configuration. It is possible
      * (but not mandatory) to give the new configuration a name. This name must
@@ -443,6 +477,40 @@ public class CombinedConfiguration extends HierarchicalConfiguration implements
         return copy;
     }
 
+    /**
+     * Returns the value of the specified property. This implementation
+     * evaluates the <em>force reload check</em> flag. If it is set, all
+     * contained configurations will be triggered before the value of the
+     * requested property is retrieved.
+     *
+     * @param key the key of the desired property
+     * @return the value of this property
+     * @since 1.4
+     */
+    public Object getProperty(String key)
+    {
+        if (isForceReloadCheck())
+        {
+            for (Iterator it = configurations.iterator(); it.hasNext();)
+            {
+                try
+                {
+                    // simply retrieve a property; this is enough for
+                    // triggering a reload
+                    ((ConfigData) it.next()).getConfiguration().getProperty(
+                            PROP_RELOAD_CHECK);
+                }
+                catch (Exception ex)
+                {
+                    // ignore all exceptions, e.g. missing property exceptions
+                    ;
+                }
+            }
+        }
+
+        return super.getProperty(key);
+    }
+
     /**
      * Creates the root node of this combined configuration.
      *
diff --git a/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java b/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java
index d3aca381..295e97dc 100644
--- a/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java
@@ -16,11 +16,16 @@
  */
 package org.apache.commons.configuration;
 
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.PrintWriter;
 import java.util.Collection;
 import java.util.Set;
 
 import org.apache.commons.configuration.event.ConfigurationEvent;
 import org.apache.commons.configuration.event.ConfigurationListener;
+import org.apache.commons.configuration.reloading.FileAlwaysReloadingStrategy;
 import org.apache.commons.configuration.tree.NodeCombiner;
 import org.apache.commons.configuration.tree.UnionCombiner;
 
@@ -66,6 +71,7 @@ public class TestCombinedConfiguration extends TestCase
         assertTrue("Wrong node combiner",
                 config.getNodeCombiner() instanceof UnionCombiner);
         assertNull("Test config was found", config.getConfiguration(TEST_NAME));
+        assertFalse("Force reload check flag is set", config.isForceReloadCheck());
     }
 
     /**
@@ -404,6 +410,63 @@ public class TestCombinedConfiguration extends TestCase
         listener.checkEvent(3, 2);
     }
 
+    /**
+     * Tests if file-based configurations can be reloaded.
+     */
+    public void testReloading() throws Exception
+    {
+        config.setForceReloadCheck(true);
+        File testDir = new File("target");
+        File testXmlFile = new File(testDir, "reload.xml");
+        File testPropsFile = new File(testDir, "reload.properties");
+        writeFile(testXmlFile, "<xml><xmlReload>0</xmlReload></xml>");
+        writeFile(testPropsFile, "propsReload = 0");
+        XMLConfiguration c1 = new XMLConfiguration(testXmlFile);
+        c1.setReloadingStrategy(new FileAlwaysReloadingStrategy());
+        PropertiesConfiguration c2 = new PropertiesConfiguration(testPropsFile);
+        c2.setThrowExceptionOnMissing(true);
+        c2.setReloadingStrategy(new FileAlwaysReloadingStrategy());
+        config.addConfiguration(c1);
+        config.addConfiguration(c2);
+        assertEquals("Wrong xml reload value", 0, config.getInt("xmlReload"));
+        assertEquals("Wrong props reload value", 0, config
+                .getInt("propsReload"));
+
+        writeFile(testXmlFile, "<xml><xmlReload>1</xmlReload></xml>");
+        assertEquals("XML reload not detected", 1, config.getInt("xmlReload"));
+        config.setForceReloadCheck(false);
+        writeFile(testPropsFile, "propsReload = 1");
+        assertEquals("Props reload detected though check flag is false", 0, config
+                .getInt("propsReload"));
+
+        assertTrue("XML file cannot be removed", testXmlFile.delete());
+        assertTrue("Props file cannot be removed", testPropsFile.delete());
+    }
+
+    /**
+     * Helper method for writing a file.
+     *
+     * @param file the file to be written
+     * @param content the file's content
+     * @throws IOException if an error occurs
+     */
+    private static void writeFile(File file, String content) throws IOException
+    {
+        PrintWriter out = null;
+        try
+        {
+            out = new PrintWriter(new FileWriter(file));
+            out.print(content);
+        }
+        finally
+        {
+            if (out != null)
+            {
+                out.close();
+            }
+        }
+    }
+
     /**
      * Helper method for creating a test configuration to be added to the
      * combined configuration.
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 23c8fed4..c83ad9fe 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,16 @@
 
   <body>
     <release version="1.4-dev" date="in SVN">
+      <action dev="oheger" type="update" issue="CONFIGURATION-240">
+        File-based configurations with a reloading strategy did not work well
+        together with CombinedConfiguration because the reloading strategy is
+        only checked when its associated configuration is accessed (which does
+        not happen when only the combined configuration is queried).
+        As a workaround CombinedConfiguration now provides the boolean
+        forceReloadCheck property. If this is set to true, all contained
+        configurations will be triggered when a property is queried. This will
+        cause a reload if necessary.
+      </action>
       <action dev="oheger" type="add" issue="CONFIGURATION-243">
         Configuration declarations in the configuration definition file for
         DefaultConfigurationBuilder that are marked as optional now support a
