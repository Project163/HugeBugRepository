diff --git a/src/main/java/org/apache/commons/configuration2/builder/DefaultReloadingDetectorFactory.java b/src/main/java/org/apache/commons/configuration2/builder/DefaultReloadingDetectorFactory.java
index c17b8bfc..4ec28dd3 100644
--- a/src/main/java/org/apache/commons/configuration2/builder/DefaultReloadingDetectorFactory.java
+++ b/src/main/java/org/apache/commons/configuration2/builder/DefaultReloadingDetectorFactory.java
@@ -42,8 +42,14 @@ public class DefaultReloadingDetectorFactory implements
             throws ConfigurationException
     {
         Long refreshDelay = params.getReloadingRefreshDelay();
-        return (refreshDelay != null) ? new FileHandlerReloadingDetector(
+
+        FileHandlerReloadingDetector fileHandlerReloadingDetector =
+                (refreshDelay != null) ? new FileHandlerReloadingDetector(
                 handler, refreshDelay) : new FileHandlerReloadingDetector(
                 handler);
+
+        fileHandlerReloadingDetector.refresh();
+
+        return fileHandlerReloadingDetector;
     }
 }
diff --git a/src/main/java/org/apache/commons/configuration2/reloading/FileHandlerReloadingDetector.java b/src/main/java/org/apache/commons/configuration2/reloading/FileHandlerReloadingDetector.java
index f2d6ef41..f86bf098 100644
--- a/src/main/java/org/apache/commons/configuration2/reloading/FileHandlerReloadingDetector.java
+++ b/src/main/java/org/apache/commons/configuration2/reloading/FileHandlerReloadingDetector.java
@@ -187,6 +187,16 @@ public class FileHandlerReloadingDetector implements ReloadingDetector
         updateLastModified(getLastModificationDate());
     }
 
+    /**
+     * Tells this implementation that the internally stored state should be
+     * refreshed. This method is intended to be called after the creation
+     * of an instance.
+     */
+    public void refresh()
+    {
+        updateLastModified(getLastModificationDate());
+    }
+
     /**
      * Returns the date of the last modification of the monitored file. A return
      * value of 0 indicates, that the monitored file does not exist.
diff --git a/src/test/java/org/apache/commons/configuration2/reloading/TestFileHandlerReloadingDetector.java b/src/test/java/org/apache/commons/configuration2/reloading/TestFileHandlerReloadingDetector.java
index 5695a184..191a5c7a 100644
--- a/src/test/java/org/apache/commons/configuration2/reloading/TestFileHandlerReloadingDetector.java
+++ b/src/test/java/org/apache/commons/configuration2/reloading/TestFileHandlerReloadingDetector.java
@@ -121,6 +121,46 @@ public class TestFileHandlerReloadingDetector
                 detector.isReloadingRequired());
     }
 
+    /**
+     * Tests whether a changed file is detected after initialization and invoking
+     * refresh.
+     */
+    @Test
+    public void testRefreshIsReloadingRequiredTrue() throws Exception
+    {
+        File f = EasyMock.createMock(File.class);
+        EasyMock.expect(f.exists()).andReturn(Boolean.TRUE).anyTimes();
+        EasyMock.expect(f.lastModified()).andReturn(LAST_MODIFIED);
+        EasyMock.expect(f.lastModified()).andReturn(LAST_MODIFIED + 1);
+        EasyMock.replay(f);
+        FileHandlerReloadingDetector detector = new FileHandlerReloadingDetectorTestImpl(f);
+        detector.refresh();
+        assertTrue("Reloading not detected", detector.isReloadingRequired());
+    }
+
+    /**
+     * Tests a refresh cycle with a detected reload operation and a notification that
+     * reloading was performed.
+     */
+    @Test
+    public void testRefreshReloadingAndReset() throws Exception
+    {
+        File f = EasyMock.createMock(File.class);
+        EasyMock.expect(f.exists()).andReturn(Boolean.TRUE).anyTimes();
+        EasyMock.expect(f.lastModified()).andReturn(LAST_MODIFIED).times(2);
+        EasyMock.expect(f.lastModified()).andReturn(LAST_MODIFIED + 1).times(3);
+        EasyMock.expect(f.lastModified()).andReturn(LAST_MODIFIED + 2);
+        EasyMock.replay(f);
+        FileHandlerReloadingDetector detector = new FileHandlerReloadingDetectorTestImpl(f);
+        detector.refresh();
+        assertFalse("Reloading required", detector.isReloadingRequired());
+        assertTrue("Reloading not detected", detector.isReloadingRequired());
+        detector.reloadingPerformed();
+        assertFalse("Still reloading required", detector.isReloadingRequired());
+        assertTrue("Next reloading not detected",
+                detector.isReloadingRequired());
+    }
+
     /**
      * Tests whether the refresh delay is taken into account.
      */
