diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/mp3/Mp3Parser.java b/tika-parsers/src/main/java/org/apache/tika/parser/mp3/Mp3Parser.java
index 345f486fa..52dad7cef 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/mp3/Mp3Parser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/mp3/Mp3Parser.java
@@ -65,48 +65,70 @@ public class Mp3Parser extends AbstractParser {
         metadata.set(XMPDM.AUDIO_COMPRESSOR, "MP3");
 
         XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);
-        xhtml.startDocument();
 
         // Create handlers for the various kinds of ID3 tags
         ID3TagsAndAudio audioAndTags = getAllTagHandlers(stream, handler);
 
+        //process as much metadata as possible before
+        //writing to xhtml
+        if (audioAndTags.duration > 0) {
+            metadata.set(XMPDM.DURATION, audioAndTags.duration);
+        }
+
+        if (audioAndTags.audio != null) {
+            metadata.set("samplerate", String.valueOf(audioAndTags.audio.getSampleRate()));
+            metadata.set("channels", String.valueOf(audioAndTags.audio.getChannels()));
+            metadata.set("version", audioAndTags.audio.getVersion());
+
+            metadata.set(
+                    XMPDM.AUDIO_SAMPLE_RATE,
+                    Integer.toString(audioAndTags.audio.getSampleRate()));
+            if(audioAndTags.audio.getChannels() == 1) {
+                metadata.set(XMPDM.AUDIO_CHANNEL_TYPE, "Mono");
+            } else if(audioAndTags.audio.getChannels() == 2) {
+                metadata.set(XMPDM.AUDIO_CHANNEL_TYPE, "Stereo");
+            } else if(audioAndTags.audio.getChannels() == 5) {
+                metadata.set(XMPDM.AUDIO_CHANNEL_TYPE, "5.1");
+            } else if(audioAndTags.audio.getChannels() == 7) {
+                metadata.set(XMPDM.AUDIO_CHANNEL_TYPE, "7.1");
+            }
+        }
+
+        xhtml.startDocument();
         // Process tags metadata if the file has supported tags
+        List<String> comments = new ArrayList<>();
         if (audioAndTags.tags.length > 0) {
-           CompositeTagHandler tag = new CompositeTagHandler(audioAndTags.tags);
-
-           metadata.set(TikaCoreProperties.TITLE, tag.getTitle());
-           metadata.set(TikaCoreProperties.CREATOR, tag.getArtist());
-           metadata.set(XMPDM.ARTIST, tag.getArtist());
-           metadata.set(XMPDM.ALBUM_ARTIST, tag.getAlbumArtist());
-           metadata.set(XMPDM.COMPOSER, tag.getComposer());
-           metadata.set(XMPDM.ALBUM, tag.getAlbum());
-           metadata.set(XMPDM.COMPILATION, tag.getCompilation());
-           metadata.set(XMPDM.RELEASE_DATE, tag.getYear());
-           metadata.set(XMPDM.GENRE, tag.getGenre());
-
-           List<String> comments = new ArrayList<String>();
-           for (ID3Comment comment : tag.getComments()) {
-              StringBuffer cmt = new StringBuffer();
-              if (comment.getLanguage() != null) {
-                 cmt.append(comment.getLanguage());
-                 cmt.append(" - ");
-              }
-              if (comment.getDescription() != null) {
-                 cmt.append(comment.getDescription());
-                 if (comment.getText() != null) {
-                    cmt.append("\n");
-                 }
-              }
-              if (comment.getText() != null) {
-                 cmt.append(comment.getText());
-              }
-              
-              comments.add(cmt.toString());
-              metadata.add(XMPDM.LOG_COMMENT.getName(), cmt.toString());
-           }
+            CompositeTagHandler tag = new CompositeTagHandler(audioAndTags.tags);
+
+            metadata.set(TikaCoreProperties.TITLE, tag.getTitle());
+            metadata.set(TikaCoreProperties.CREATOR, tag.getArtist());
+            metadata.set(XMPDM.ARTIST, tag.getArtist());
+            metadata.set(XMPDM.ALBUM_ARTIST, tag.getAlbumArtist());
+            metadata.set(XMPDM.COMPOSER, tag.getComposer());
+            metadata.set(XMPDM.ALBUM, tag.getAlbum());
+            metadata.set(XMPDM.COMPILATION, tag.getCompilation());
+            metadata.set(XMPDM.RELEASE_DATE, tag.getYear());
+            metadata.set(XMPDM.GENRE, tag.getGenre());
 
-           xhtml.element("h1", tag.getTitle());
-           xhtml.element("p", tag.getArtist());
+            for (ID3Comment comment : tag.getComments()) {
+                StringBuffer cmt = new StringBuffer();
+                if (comment.getLanguage() != null) {
+                    cmt.append(comment.getLanguage());
+                    cmt.append(" - ");
+                }
+                if (comment.getDescription() != null) {
+                    cmt.append(comment.getDescription());
+                    if (comment.getText() != null) {
+                        cmt.append("\n");
+                    }
+                }
+                if (comment.getText() != null) {
+                    cmt.append(comment.getText());
+                }
+
+                comments.add(cmt.toString());
+                metadata.add(XMPDM.LOG_COMMENT.getName(), cmt.toString());
+            }
 
             // ID3v1.1 Track addition
             StringBuilder sb = new StringBuilder();
@@ -119,36 +141,21 @@ public class Mp3Parser extends AbstractParser {
                 sb.append(", disc ").append(tag.getDisc());
                 metadata.set(XMPDM.DISC_NUMBER, tag.getDisc());
             }
+
+            xhtml.element("h1", tag.getTitle());
+            xhtml.element("p", tag.getArtist());
+
+
             xhtml.element("p", sb.toString());
-            
+
             xhtml.element("p", tag.getYear());
             xhtml.element("p", tag.getGenre());
-            xhtml.element("p", String.valueOf(audioAndTags.duration));
-            for (String comment : comments) {
-               xhtml.element("p", comment);
-            }
         }
-        if (audioAndTags.duration > 0) {
-            metadata.set(XMPDM.DURATION, audioAndTags.duration);
-        }
-        if (audioAndTags.audio != null) {
-            metadata.set("samplerate", String.valueOf(audioAndTags.audio.getSampleRate()));
-            metadata.set("channels", String.valueOf(audioAndTags.audio.getChannels()));
-            metadata.set("version", audioAndTags.audio.getVersion());
-            
-            metadata.set(
-                    XMPDM.AUDIO_SAMPLE_RATE,
-                    Integer.toString(audioAndTags.audio.getSampleRate()));
-            if(audioAndTags.audio.getChannels() == 1) {
-               metadata.set(XMPDM.AUDIO_CHANNEL_TYPE, "Mono");
-            } else if(audioAndTags.audio.getChannels() == 2) {
-               metadata.set(XMPDM.AUDIO_CHANNEL_TYPE, "Stereo");
-            } else if(audioAndTags.audio.getChannels() == 5) {
-               metadata.set(XMPDM.AUDIO_CHANNEL_TYPE, "5.1");
-            } else if(audioAndTags.audio.getChannels() == 7) {
-               metadata.set(XMPDM.AUDIO_CHANNEL_TYPE, "7.1");
-            }
+        xhtml.element("p", String.valueOf(audioAndTags.duration));
+        for (String comment : comments) {
+            xhtml.element("p", comment);
         }
+
         if (audioAndTags.lyrics != null && audioAndTags.lyrics.hasLyrics()) {
            xhtml.startElement("p", "class", "lyrics");
            xhtml.characters(audioAndTags.lyrics.lyricsText);
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/mp3/Mp3ParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/mp3/Mp3ParserTest.java
index 951e46d25..3979b4978 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/mp3/Mp3ParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/mp3/Mp3ParserTest.java
@@ -22,6 +22,7 @@ import static org.junit.Assert.assertEquals;
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
 
+import org.apache.tika.TikaTest;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaCoreProperties;
 import org.apache.tika.metadata.XMPDM;
@@ -35,7 +36,7 @@ import org.xml.sax.ContentHandler;
 /**
  * Test case for parsing mp3 files.
  */
-public class Mp3ParserTest {
+public class Mp3ParserTest extends TikaTest {
 
     /**
      * Checks the duration of an MP3 file.
@@ -133,6 +134,19 @@ public class Mp3ParserTest {
         checkDuration(metadata, 2);
     }
 
+    /**
+     * Test that metadata is added before xhtml content
+     * is written...so that more metadata shows up in the xhtml
+     */
+    @Test
+    public void testAddingToMetadataBeforeWriting() throws Exception {
+        String content = getXML("testMP3id3v1.mp3").xml;
+        assertContains("<meta name=\"xmpDM:audioSampleRate\" content=\"44100\"",
+                content);
+        assertContains("<meta name=\"xmpDM:duration\" content=\"2455",
+                content);
+        assertContains("meta name=\"xmpDM:audioChannelType\" content=\"Mono\"", content);
+    }
     /**
      * Test that with both id3v2 and id3v1, we prefer the
      *  details from id3v2
