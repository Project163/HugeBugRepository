diff --git a/src/test/java/org/apache/commons/scxml/invoke/InvokeTest.java b/src/test/java/org/apache/commons/scxml/invoke/InvokeTest.java
index bcfa0c6f..1434dee6 100644
--- a/src/test/java/org/apache/commons/scxml/invoke/InvokeTest.java
+++ b/src/test/java/org/apache/commons/scxml/invoke/InvokeTest.java
@@ -80,65 +80,49 @@ public class InvokeTest extends TestCase {
     /**
      * Test the SCXML documents, usage of &lt;invoke&gt;
      */
-    public void testInvoke01Sample() {
-        try {
-            SCXML scxml = SCXMLParser.parse(invoke01,
-                new SimpleErrorHandler());
-            exec = new SCXMLExecutor(new JexlEvaluator(), new SimpleDispatcher(),
-                new SimpleErrorReporter());
-            assertNotNull(exec);
-            exec.setRootContext(new JexlContext());
-            exec.setStateMachine(scxml);
-            exec.registerInvokerClass("scxml", SimpleSCXMLInvoker.class);
-            exec.go();
-            Set currentStates = exec.getCurrentStatus().getStates();
-            assertEquals(1, currentStates.size());
-            assertEquals("invoker", ((State)currentStates.iterator().
-                next()).getId());
-        } catch (Exception e) {
-            e.printStackTrace();
-            fail(e.getMessage());
-        }
+    public void testInvoke01Sample() throws Exception {
+        SCXML scxml = SCXMLParser.parse(invoke01,
+            new SimpleErrorHandler());
+        exec = new SCXMLExecutor(new JexlEvaluator(), new SimpleDispatcher(),
+            new SimpleErrorReporter());
+        assertNotNull(exec);
+        exec.setRootContext(new JexlContext());
+        exec.setStateMachine(scxml);
+        exec.registerInvokerClass("scxml", SimpleSCXMLInvoker.class);
+        exec.go();
+        Set currentStates = exec.getCurrentStatus().getStates();
+        assertEquals(1, currentStates.size());
+        assertEquals("invoker", ((State)currentStates.iterator().next()).getId());
     }
 
-    public void testInvoke02Sample() {
-        try {
-            SCXML scxml = SCXMLParser.parse(invoke02,
-                new SimpleErrorHandler());
-            exec = new SCXMLExecutor(new JexlEvaluator(), new SimpleDispatcher(),
-                new SimpleErrorReporter());
-            assertNotNull(exec);
-            exec.setRootContext(new JexlContext());
-            exec.setStateMachine(scxml);
-            exec.registerInvokerClass("scxml", SimpleSCXMLInvoker.class);
-            exec.go();
-            Set currentStates = exec.getCurrentStatus().getStates();
-            assertEquals(1, currentStates.size());
-        } catch (Exception e) {
-            e.printStackTrace();
-            fail(e.getMessage());
-        }
+    public void testInvoke02Sample() throws Exception {
+        SCXML scxml = SCXMLParser.parse(invoke02,
+            new SimpleErrorHandler());
+        exec = new SCXMLExecutor(new JexlEvaluator(), new SimpleDispatcher(),
+            new SimpleErrorReporter());
+        assertNotNull(exec);
+        exec.setRootContext(new JexlContext());
+        exec.setStateMachine(scxml);
+        exec.registerInvokerClass("scxml", SimpleSCXMLInvoker.class);
+        exec.go();
+        Set currentStates = exec.getCurrentStatus().getStates();
+        assertEquals(1, currentStates.size());
     }
 
-    public void testInvoke03Sample() {
-        try {
-            SCXML scxml = SCXMLParser.parse(invoke03,
-                new SimpleErrorHandler());
-            exec = new SCXMLExecutor(new JexlEvaluator(), new SimpleDispatcher(),
-                new SimpleErrorReporter());
-            assertNotNull(exec);
-            exec.setRootContext(new JexlContext());
-            exec.setStateMachine(scxml);
-            exec.registerInvokerClass("scxml", SimpleSCXMLInvoker.class);
-            exec.go();
-            Set currentStates = exec.getCurrentStatus().getStates();
-            assertEquals(1, currentStates.size());
-            SCXMLTestHelper.fireEvent(exec, "s1.next");
-            SCXMLTestHelper.fireEvent(exec, "state1.next");
-        } catch (Exception e) {
-            e.printStackTrace();
-            fail(e.getMessage());
-        }
+    public void testInvoke03Sample() throws Exception {
+        SCXML scxml = SCXMLParser.parse(invoke03,
+            new SimpleErrorHandler());
+        exec = new SCXMLExecutor(new JexlEvaluator(), new SimpleDispatcher(),
+            new SimpleErrorReporter());
+        assertNotNull(exec);
+        exec.setRootContext(new JexlContext());
+        exec.setStateMachine(scxml);
+        exec.registerInvokerClass("scxml", SimpleSCXMLInvoker.class);
+        exec.go();
+        Set currentStates = exec.getCurrentStatus().getStates();
+        assertEquals(1, currentStates.size());
+        SCXMLTestHelper.fireEvent(exec, "s1.next");
+        SCXMLTestHelper.fireEvent(exec, "state1.next");
     }
 
     public static void main(String args[]) {
