diff --git a/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java b/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java
index 9d262dbb..fbd47a48 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java
@@ -1005,9 +1005,16 @@ public class Interpreter extends InterpreterBase {
      */
     protected Object runClosure(final Closure closure, final Object data) {
         final ASTJexlScript script = closure.getScript();
+        // if empty script, nothing to evaluate
+        final int numChildren = script.jjtGetNumChildren();
+        if (numChildren == 0) {
+            return null;
+        }
         block = new LexicalFrame(frame, block).defineArgs();
         try {
-            final JexlNode body = script.jjtGetChild(script.jjtGetNumChildren() - 1);
+            final JexlNode body = script instanceof ASTJexlLambda
+                    ? script.jjtGetChild(numChildren - 1)
+                    : script;
             return interpret(body);
         } finally {
             block = block.pop();
diff --git a/src/test/java/org/apache/commons/jexl3/LambdaTest.java b/src/test/java/org/apache/commons/jexl3/LambdaTest.java
index b696b314..328e89b2 100644
--- a/src/test/java/org/apache/commons/jexl3/LambdaTest.java
+++ b/src/test/java/org/apache/commons/jexl3/LambdaTest.java
@@ -297,6 +297,30 @@ public class LambdaTest extends JexlTestCase {
         Assert.assertEquals(42, result);
     }
 
+    @Test
+    public void testCurry4() throws Exception {
+        final JexlEngine jexl = createEngine();
+        JexlScript script;
+        Object result;
+
+        final JexlScript base = jexl.createScript("(x, y, z)->{ x + y + z }");
+        script = base.curry(5);
+        result = script.execute(null, 15, 22);
+        Assert.assertEquals(42, result);
+    }
+
+    @Test
+    public void testCurry5() throws Exception {
+        final JexlEngine jexl = createEngine();
+        JexlScript script;
+        Object result;
+
+        final JexlScript base = jexl.createScript("var t = x + y + z; return t", "x", "y", "z");
+        script = base.curry(5);
+        result = script.execute(null, 15, 22);
+        Assert.assertEquals(42, result);
+    }
+
     @Test
     public void test270() throws Exception {
         final JexlEngine jexl = createEngine();
