diff --git a/apache-rat-core/src/main/java/org/apache/rat/DeprecationReporter.java b/apache-rat-core/src/main/java/org/apache/rat/DeprecationReporter.java
index 1d307b69..2a1dd63a 100644
--- a/apache-rat-core/src/main/java/org/apache/rat/DeprecationReporter.java
+++ b/apache-rat-core/src/main/java/org/apache/rat/DeprecationReporter.java
@@ -94,7 +94,7 @@ public final class DeprecationReporter {
      */
     public static void logDeprecated(final Class<?> clazz) {
         if (clazz.getAnnotation(Deprecated.class) != null) {
-            String name = format("Deprecated class used: %s ", clazz);
+            String name = format("class used: %s ", clazz);
             Info info = clazz.getAnnotation(Info.class);
             if (info == null) {
                 DefaultLog.getInstance().warn(formatEntry(name, "", false, ""));
diff --git a/apache-rat-core/src/main/java/org/apache/rat/analysis/TikaProcessor.java b/apache-rat-core/src/main/java/org/apache/rat/analysis/TikaProcessor.java
index 9cad66cf..693af5bf 100644
--- a/apache-rat-core/src/main/java/org/apache/rat/analysis/TikaProcessor.java
+++ b/apache-rat-core/src/main/java/org/apache/rat/analysis/TikaProcessor.java
@@ -141,9 +141,13 @@ public final class TikaProcessor {
                         .setDocumentType(fromMediaType(mediaType));
             }
             if (Document.Type.STANDARD == document.getMetaData().getDocumentType()) {
-                document.getMetaData().setCharset(detectCharset(stream, document.getName()));
-                if (NoteGuesser.isNote(document)) {
-                    document.getMetaData().setDocumentType(Document.Type.NOTICE);
+                try {
+                    document.getMetaData().setCharset(detectCharset(stream, document.getName()));
+                    if (NoteGuesser.isNote(document)) {
+                        document.getMetaData().setDocumentType(Document.Type.NOTICE);
+                    }
+                } catch (UnsupportedCharsetException e) {
+                    document.getMetaData().setDocumentType(Document.Type.UNKNOWN);
                 }
             }
             return result;
@@ -155,11 +159,12 @@ public final class TikaProcessor {
     /**
      * Determine the character set for the input stream. Input stream must implement {@code mark}.
      * @param stream the stream to check.
-     * @param documentName the name of the document being read.
+     * @param documentName the name of the document being processed.
      * @return the detected character set or {@code null} if not detectable.
      * @throws IOException on IO error.
+     * @throws UnsupportedCharsetException on unsupported charset.
      */
-    private static Charset detectCharset(final InputStream stream, final DocumentName documentName) throws IOException {
+    private static Charset detectCharset(final InputStream stream, final DocumentName documentName) throws IOException, UnsupportedCharsetException {
         CharsetDetector encodingDetector = new CharsetDetector();
         encodingDetector.setText(stream);
         CharsetMatch charsetMatch = encodingDetector.detect();
@@ -167,8 +172,9 @@ public final class TikaProcessor {
             try {
                 return Charset.forName(charsetMatch.getName());
             } catch (UnsupportedCharsetException e) {
-                DefaultLog.getInstance().warn(String.format("Unsupported character set '%s' in file '%s'. Will use system default encoding.",
-                                charsetMatch.getName(), documentName));
+                DefaultLog.getInstance().warn(String.format("Unsupported character set '%s' in file '%s'",
+                        charsetMatch.getName(), documentName));
+                throw e;
             }
         }
         return null;
diff --git a/apache-rat-core/src/main/java/org/apache/rat/api/Document.java b/apache-rat-core/src/main/java/org/apache/rat/api/Document.java
index 0dbfa10c..a29babf7 100644
--- a/apache-rat-core/src/main/java/org/apache/rat/api/Document.java
+++ b/apache-rat-core/src/main/java/org/apache/rat/api/Document.java
@@ -109,7 +109,12 @@ public abstract class Document implements Comparable<Document> {
      * @throws IOException if this document cannot be read.
      */
     public Reader reader() throws IOException {
-        return new CharsetDetector().getReader(TikaProcessor.markSupportedInputStream(inputStream()), getMetaData().getCharset().name());
+        // RAT-494: Tika's CharsetDetector.getReader() may return null if the read can not be constructed due to I/O or encoding errors
+        Reader result = new CharsetDetector().getReader(TikaProcessor.markSupportedInputStream(inputStream()), getMetaData().getCharset().name());
+        if (result == null) {
+            throw new IOException(String.format("Can not read document `%s`", getName()));
+        }
+        return result;
     }
 
     /**
