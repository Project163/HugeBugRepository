diff --git a/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java b/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java
index e3e60cf17..7023598d0 100644
--- a/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java
+++ b/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java
@@ -727,7 +727,7 @@ public class TikaCLI {
         } else if (System.getProperty("os.name")
                 .toLowerCase(Locale.ROOT).startsWith("mac os x")) {
             // TIKA-324: Override the default encoding on Mac OS X
-            return new OutputStreamWriter(output, "UTF-8");
+            return new OutputStreamWriter(output, IOUtils.UTF_8);
         } else {
             return new OutputStreamWriter(output, Charset.defaultCharset());
         }
diff --git a/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java b/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java
index 85c9819c2..0a0d04fe5 100644
--- a/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java
+++ b/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java
@@ -459,7 +459,7 @@ public class TikaGUI extends JFrame
                 InputStream stream = url.openStream();
                 try {
                     StringWriter writer = new StringWriter();
-                    IOUtils.copy(stream, writer, "UTF-8");
+                    IOUtils.copy(stream, writer, IOUtils.UTF_8.name());
 
                     JEditorPane editor =
                         new JEditorPane("text/plain", writer.toString());
diff --git a/tika-app/src/test/java/org/apache/tika/cli/TikaCLITest.java b/tika-app/src/test/java/org/apache/tika/cli/TikaCLITest.java
index 043d5b423..4f90a570d 100644
--- a/tika-app/src/test/java/org/apache/tika/cli/TikaCLITest.java
+++ b/tika-app/src/test/java/org/apache/tika/cli/TikaCLITest.java
@@ -16,20 +16,20 @@
  */
 package org.apache.tika.cli;
 
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.PrintStream;
 import java.net.URI;
-
 import org.apache.commons.io.FileUtils;
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
 /**
  * Tests the Tika's cli
  */
@@ -49,7 +49,7 @@ public class TikaCLITest {
         outContent = new ByteArrayOutputStream();
         resourcePrefix = testDataURI.toString();
         stdout = System.out;
-        System.setOut(new PrintStream(outContent, true, "UTF-8"));
+        System.setOut(new PrintStream(outContent, true, IOUtils.UTF_8.name()));
     }
 
     /**
@@ -73,7 +73,7 @@ public class TikaCLITest {
     public void testListParserDetail() throws Exception{
         String[] params = {"--list-parser-detail"};
         TikaCLI.main(params);
-        assertTrue(outContent.toString("UTF-8").contains("application/vnd.oasis.opendocument.text-web"));
+        assertTrue(outContent.toString(IOUtils.UTF_8.name()).contains("application/vnd.oasis.opendocument.text-web"));
     }
 
     /**
@@ -98,7 +98,7 @@ public class TikaCLITest {
     public void testXMLOutput() throws Exception{
         String[] params = {"-x", resourcePrefix + "alice.cli.test"};
         TikaCLI.main(params);
-        assertTrue(outContent.toString("UTF-8").contains("?xml version=\"1.0\" encoding=\"UTF-8\"?"));
+        assertTrue(outContent.toString(IOUtils.UTF_8.name()).contains("?xml version=\"1.0\" encoding=\"UTF-8\"?"));
     }
 
     /**
@@ -112,7 +112,7 @@ public class TikaCLITest {
         TikaCLI.main(params);
         assertTrue(outContent.toString("UTF-8").contains("html xmlns=\"http://www.w3.org/1999/xhtml"));
         assertTrue("Expanded <title></title> element should be present",
-                outContent.toString("UTF-8").contains("<title></title>"));
+                outContent.toString(IOUtils.UTF_8.name()).contains("<title></title>"));
     }
 
     /**
@@ -124,7 +124,7 @@ public class TikaCLITest {
     public void testTextOutput() throws Exception{
         String[] params = {"-t", resourcePrefix + "alice.cli.test"};
         TikaCLI.main(params);
-        assertTrue(outContent.toString("UTF-8").contains("finished off the cake"));
+        assertTrue(outContent.toString(IOUtils.UTF_8.name()).contains("finished off the cake"));
     }
 
     /**
@@ -135,7 +135,7 @@ public class TikaCLITest {
     public void testMetadataOutput() throws Exception{
         String[] params = {"-m", resourcePrefix + "alice.cli.test"};
         TikaCLI.main(params);
-        assertTrue(outContent.toString("UTF-8").contains("text/plain"));
+        assertTrue(outContent.toString(IOUtils.UTF_8.name()).contains("text/plain"));
     }
 
     /**
@@ -147,7 +147,7 @@ public class TikaCLITest {
     public void testJsonMetadataOutput() throws Exception {
         String[] params = {"--json", resourcePrefix + "testJsonMultipleInts.html"};
         TikaCLI.main(params);
-        String json = outContent.toString("UTF-8");
+        String json = outContent.toString(IOUtils.UTF_8.name());
         //TIKA-1310
         assertTrue(json.contains("\"fb:admins\":\"1,2,3,4\","));
         
@@ -168,7 +168,7 @@ public class TikaCLITest {
     public void testJsonMetadataPrettyPrintOutput() throws Exception {
         String[] params = {"--json", "-r", resourcePrefix + "testJsonMultipleInts.html"};
         TikaCLI.main(params);
-        String json = outContent.toString("UTF-8");
+        String json = outContent.toString(IOUtils.UTF_8.name());
 
         assertTrue(json.contains("  \"X-Parsed-By\": [\n" +
                 "    \"org.apache.tika.parser.DefaultParser\",\n" +
@@ -191,7 +191,7 @@ public class TikaCLITest {
     public void testLanguageOutput() throws Exception{
         String[] params = {"-l", resourcePrefix + "alice.cli.test"};
         TikaCLI.main(params);
-        assertTrue(outContent.toString("UTF-8").contains("en"));
+        assertTrue(outContent.toString(IOUtils.UTF_8.name()).contains("en"));
     }
 
     /**
@@ -203,7 +203,7 @@ public class TikaCLITest {
     public void testDetectOutput() throws Exception{
         String[] params = {"-d", resourcePrefix + "alice.cli.test"};
         TikaCLI.main(params);
-        assertTrue(outContent.toString("UTF-8").contains("text/plain"));
+        assertTrue(outContent.toString(IOUtils.UTF_8.name()).contains("text/plain"));
     }
 
     /**
@@ -215,7 +215,7 @@ public class TikaCLITest {
     public void testListMetModels() throws Exception{
         String[] params = {"--list-met-models", resourcePrefix + "alice.cli.test"};
         TikaCLI.main(params);
-        assertTrue(outContent.toString("UTF-8").contains("text/plain"));
+        assertTrue(outContent.toString(IOUtils.UTF_8.name()).contains("text/plain"));
     }
 
     /**
@@ -227,7 +227,7 @@ public class TikaCLITest {
     public void testListSupportedTypes() throws Exception{
         String[] params = {"--list-supported-types", resourcePrefix + "alice.cli.test"};
         TikaCLI.main(params);
-        assertTrue(outContent.toString("UTF-8").contains("supertype: application/octet-stream"));
+        assertTrue(outContent.toString(IOUtils.UTF_8.name()).contains("supertype: application/octet-stream"));
     }
 
     /**
@@ -300,7 +300,7 @@ public class TikaCLITest {
     public void testMultiValuedMetadata() throws Exception {
         String[] params = {"-m", resourcePrefix + "testMultipleSheets.numbers"};
         TikaCLI.main(params);
-        String content = outContent.toString("UTF-8");
+        String content = outContent.toString(IOUtils.UTF_8.name());
         assertTrue(content.contains("sheetNames: Checking"));
         assertTrue(content.contains("sheetNames: Secon sheet"));
         assertTrue(content.contains("sheetNames: Logical Sheet 3"));
@@ -314,7 +314,7 @@ public class TikaCLITest {
         new File("subdir/foo.txt").delete();
         new File("subdir").delete();
         TikaCLI.main(params);
-        String content = outContent.toString("UTF-8");
+        String content = outContent.toString(IOUtils.UTF_8.name());
         assertTrue(content.contains("Extracting 'subdir/foo.txt'"));
         // clean up. TODO: These should be in target.
         new File("target/subdir/foo.txt").delete();
@@ -340,7 +340,7 @@ public class TikaCLITest {
     public void testConfig() throws Exception {
         String[] params = new String[]{"--config="+testDataFile.toString()+"/tika-config1.xml", resourcePrefix+"bad_xml.xml"};
         TikaCLI.main(params);
-        String content = outContent.toString("UTF-8");
+        String content = outContent.toString(IOUtils.UTF_8.name());
         assertTrue(content.contains("apple"));
         assertTrue(content.contains("org.apache.tika.parser.html.HtmlParser"));
     }
@@ -349,7 +349,7 @@ public class TikaCLITest {
     public void testJsonRecursiveMetadataParserMetadataOnly() throws Exception {
         String[] params = new String[]{"-m", "-J", "-r", resourcePrefix+"test_recursive_embedded.docx"};
         TikaCLI.main(params);
-        String content = outContent.toString("UTF-8");
+        String content = outContent.toString(IOUtils.UTF_8.name());
         assertTrue(content.contains("[\n" +
                 "  {\n" +
                 "    \"Application-Name\": \"Microsoft Office Word\",\n" +
@@ -365,7 +365,7 @@ public class TikaCLITest {
     public void testJsonRecursiveMetadataParserDefault() throws Exception {
         String[] params = new String[]{"-J", "-r", resourcePrefix+"test_recursive_embedded.docx"};
         TikaCLI.main(params);
-        String content = outContent.toString("UTF-8");
+        String content = outContent.toString(IOUtils.UTF_8.name());
         assertTrue(content.contains("\"X-TIKA:content\": \"\\u003chtml xmlns\\u003d\\\"http://www.w3.org/1999/xhtml"));
     }
 
@@ -373,7 +373,7 @@ public class TikaCLITest {
     public void testJsonRecursiveMetadataParserText() throws Exception {
         String[] params = new String[]{"-J", "-r", "-t", resourcePrefix+"test_recursive_embedded.docx"};
         TikaCLI.main(params);
-        String content = outContent.toString("UTF-8");
+        String content = outContent.toString(IOUtils.UTF_8.name());
         assertTrue(content.contains("\\n\\nembed_4\\n"));
         assertTrue(content.contains("\\n\\nembed_0"));
     }
diff --git a/tika-bundle/src/test/java/org/apache/tika/bundle/BundleIT.java b/tika-bundle/src/test/java/org/apache/tika/bundle/BundleIT.java
index 9b6d20bb8..07bb54516 100644
--- a/tika-bundle/src/test/java/org/apache/tika/bundle/BundleIT.java
+++ b/tika-bundle/src/test/java/org/apache/tika/bundle/BundleIT.java
@@ -41,6 +41,7 @@ import org.apache.tika.config.TikaConfig;
 import org.apache.tika.detect.DefaultDetector;
 import org.apache.tika.detect.Detector;
 import org.apache.tika.fork.ForkParser;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.mime.MediaType;
 import org.apache.tika.parser.ParseContext;
@@ -101,7 +102,7 @@ public class BundleIT {
         ForkParser parser = (ForkParser) bc.getService(bc.getServiceReference(ForkParser.class.getName()));
         ClassLoader classLoader = parser.getClass().getClassLoader();
         String data = "<!DOCTYPE html>\n<html><body><p>test <span>content</span></p></body></html>";
-        InputStream stream = new ByteArrayInputStream(data.getBytes("UTF-8"));
+        InputStream stream = new ByteArrayInputStream(data.getBytes(IOUtils.UTF_8));
         Writer writer = new StringWriter();
         ContentHandler contentHandler = new BodyContentHandler(writer);
         Metadata metadata = new Metadata();
diff --git a/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java b/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java
index 09a14326e..997b2bfbc 100644
--- a/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java
+++ b/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java
@@ -29,6 +29,7 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.regex.Pattern;
+import org.apache.tika.io.IOUtils;
 
 /**
  * Internal utility class that Tika uses to look up service providers.
@@ -329,7 +330,7 @@ public class ServiceLoader {
         InputStream stream = resource.openStream();
         try {
             BufferedReader reader =
-                new BufferedReader(new InputStreamReader(stream, "UTF-8"));
+                new BufferedReader(new InputStreamReader(stream, IOUtils.UTF_8));
             String line = reader.readLine();
             while (line != null) {
                 line = COMMENT.matcher(line).replaceFirst("");
diff --git a/tika-core/src/main/java/org/apache/tika/detect/MagicDetector.java b/tika-core/src/main/java/org/apache/tika/detect/MagicDetector.java
index 97c9837ee..9f51efb5b 100644
--- a/tika-core/src/main/java/org/apache/tika/detect/MagicDetector.java
+++ b/tika-core/src/main/java/org/apache/tika/detect/MagicDetector.java
@@ -19,14 +19,13 @@ package org.apache.tika.detect;
 import java.io.CharArrayWriter;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.UnsupportedEncodingException;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.charset.Charset;
 import java.util.Locale;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.mime.MediaType;
 
@@ -99,11 +98,7 @@ public class MagicDetector implements Detector {
         } else if (type.equals("stringignorecase")) {
             decoded = decodeString(value.toLowerCase(Locale.ROOT), type);
         } else if (type.equals("byte")) {
-            try {
-                decoded = tmpVal.getBytes("UTF-8");
-            } catch (UnsupportedEncodingException e) {
-                throw new AssertionError("UTF-8 not supported.");
-            }
+            decoded = tmpVal.getBytes(IOUtils.UTF_8);
         } else if (type.equals("host16") || type.equals("little16")) {
             int i = Integer.parseInt(tmpVal, radix);
             decoded = new byte[] { (byte) (i & 0x00FF), (byte) (i >> 8) };
@@ -399,7 +394,7 @@ public class MagicDetector implements Detector {
                     flags = Pattern.CASE_INSENSITIVE;
                 }
                 
-                Pattern p = Pattern.compile(new String(this.pattern, "UTF-8"), flags);
+                Pattern p = Pattern.compile(new String(this.pattern, IOUtils.UTF_8), flags);
 
                 ByteBuffer bb = ByteBuffer.wrap(buffer);
                 CharBuffer result = ISO_8859_1.decode(bb);
diff --git a/tika-core/src/main/java/org/apache/tika/detect/NameDetector.java b/tika-core/src/main/java/org/apache/tika/detect/NameDetector.java
index 18418a22f..42fb2b470 100644
--- a/tika-core/src/main/java/org/apache/tika/detect/NameDetector.java
+++ b/tika-core/src/main/java/org/apache/tika/detect/NameDetector.java
@@ -22,6 +22,7 @@ import java.net.URLDecoder;
 import java.util.Map;
 import java.util.regex.Pattern;
 
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.mime.MediaType;
 
@@ -119,7 +120,7 @@ public class NameDetector implements Detector {
             int percent = name.indexOf('%');
             if (percent != -1) {
                 try {
-                    name = URLDecoder.decode(name, "UTF-8");
+                    name = URLDecoder.decode(name, IOUtils.UTF_8.name());
                 } catch (UnsupportedEncodingException e) {
                     throw new IllegalStateException("UTF-8 not supported", e);
                 }
diff --git a/tika-core/src/main/java/org/apache/tika/embedder/ExternalEmbedder.java b/tika-core/src/main/java/org/apache/tika/embedder/ExternalEmbedder.java
index 8f069b170..11a8a7c03 100644
--- a/tika-core/src/main/java/org/apache/tika/embedder/ExternalEmbedder.java
+++ b/tika-core/src/main/java/org/apache/tika/embedder/ExternalEmbedder.java
@@ -413,7 +413,7 @@ public class ExternalEmbedder implements Embedder {
             if (process.exitValue() != 0) {
                 throw new TikaException("There was an error executing the command line" +
                         "\nExecutable Command:\n\n" + cmd +
-                        "\nExecutable Error:\n\n" + stdErrOutputStream.toString("UTF-8"));
+                        "\nExecutable Error:\n\n" + stdErrOutputStream.toString(IOUtils.UTF_8.name()));
             }
         }
     }
diff --git a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java
index 930598ea0..d25f7e34a 100644
--- a/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java
+++ b/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java
@@ -263,7 +263,7 @@ class ForkClient {
             String manifest =
                 "Main-Class: " + ForkServer.class.getName() + "\n";
             jar.putNextEntry(new ZipEntry("META-INF/MANIFEST.MF"));
-            jar.write(manifest.getBytes("UTF-8"));
+            jar.write(manifest.getBytes(IOUtils.UTF_8));
 
             Class<?>[] bootstrap = {
                     ForkServer.class, ForkObjectInputStream.class,
diff --git a/tika-core/src/main/java/org/apache/tika/io/IOUtils.java b/tika-core/src/main/java/org/apache/tika/io/IOUtils.java
index 908fa3008..b05dc2187 100644
--- a/tika-core/src/main/java/org/apache/tika/io/IOUtils.java
+++ b/tika-core/src/main/java/org/apache/tika/io/IOUtils.java
@@ -28,9 +28,9 @@ import java.io.OutputStream;
 import java.io.OutputStreamWriter;
 import java.io.Reader;
 import java.io.StringWriter;
-import java.io.UnsupportedEncodingException;
 import java.io.Writer;
 import java.nio.channels.Channel;
+import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -77,6 +77,9 @@ import java.util.List;
  */
 public class IOUtils {
 
+    //TODO: switch to StandardCharsets when we move to Java 1.7
+    public static final Charset UTF_8 = Charset.forName("UTF-8");
+
     /**
      * The default buffer size to use.
      */
@@ -255,7 +258,7 @@ public class IOUtils {
      */
     @Deprecated
     public static byte[] toByteArray(String input) throws IOException {
-        return input.getBytes("UTF-8");
+        return input.getBytes(IOUtils.UTF_8);
     }
 
     // read char[]
@@ -393,7 +396,7 @@ public class IOUtils {
      */
     @Deprecated
     public static String toString(byte[] input) throws IOException {
-        return new String(input, "UTF-8");
+        return new String(input, IOUtils.UTF_8);
     }
 
     /**
@@ -415,7 +418,7 @@ public class IOUtils {
             throws IOException {
         // If no encoding is specified, default to UTF-8.
         if (encoding == null) {
-            return new String(input, "UTF-8");
+            return new String(input, IOUtils.UTF_8);
         } else {
             return new String(input, encoding);
         }
@@ -437,7 +440,7 @@ public class IOUtils {
      * @since Commons IO 1.1
      */
     public static List<String> readLines(InputStream input) throws IOException {
-        InputStreamReader reader = new InputStreamReader(input, "UTF-8");
+        InputStreamReader reader = new InputStreamReader(input, IOUtils.UTF_8);
         return readLines(reader);
     }
 
@@ -531,13 +534,8 @@ public class IOUtils {
      * @since Commons IO 1.1
      */
     public static InputStream toInputStream(String input) {
-        try {
-            byte[] bytes = input.getBytes("UTF-8");
-            return new ByteArrayInputStream(bytes);
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
-
+        byte[] bytes = input.getBytes(IOUtils.UTF_8);
+        return new ByteArrayInputStream(bytes);
     }
 
     /**
@@ -554,7 +552,7 @@ public class IOUtils {
      * @since Commons IO 1.1
      */
     public static InputStream toInputStream(String input, String encoding) throws IOException {
-        byte[] bytes = encoding != null ? input.getBytes(encoding) : input.getBytes("UTF-8");
+        byte[] bytes = encoding != null ? input.getBytes(encoding) : input.getBytes(IOUtils.UTF_8);
         return new ByteArrayInputStream(bytes);
     }
 
@@ -592,7 +590,7 @@ public class IOUtils {
      */
     public static void write(byte[] data, Writer output) throws IOException {
         if (data != null) {
-            output.write(new String(data, "UTF-8"));
+            output.write(new String(data, IOUtils.UTF_8));
         }
     }
 
@@ -660,7 +658,7 @@ public class IOUtils {
     public static void write(char[] data, OutputStream output)
             throws IOException {
         if (data != null) {
-            output.write(new String(data).getBytes("UTF-8"));
+            output.write(new String(data).getBytes(IOUtils.UTF_8));
         }
     }
 
@@ -786,7 +784,7 @@ public class IOUtils {
     public static void write(String data, OutputStream output)
             throws IOException {
         if (data != null) {
-            output.write(data.getBytes("UTF-8"));
+            output.write(data.getBytes(IOUtils.UTF_8));
         }
     }
 
@@ -855,7 +853,7 @@ public class IOUtils {
     public static void write(StringBuffer data, OutputStream output)
             throws IOException {
         if (data != null) {
-            output.write(data.toString().getBytes("UTF-8"));
+            output.write(data.toString().getBytes(IOUtils.UTF_8));
         }
     }
 
@@ -961,7 +959,7 @@ public class IOUtils {
      */
     public static void copy(InputStream input, Writer output)
             throws IOException {
-        InputStreamReader in = new InputStreamReader(input, "UTF-8");
+        InputStreamReader in = new InputStreamReader(input, IOUtils.UTF_8);
         copy(in, output);
     }
 
@@ -1068,7 +1066,7 @@ public class IOUtils {
      */
     public static void copy(Reader input, OutputStream output)
             throws IOException {
-        OutputStreamWriter out = new OutputStreamWriter(output, "UTF-8");
+        OutputStreamWriter out = new OutputStreamWriter(output, IOUtils.UTF_8);
         copy(input, out);
         // XXX Unless anyone is planning on rewriting OutputStreamWriter, we
         // have to flush here.
diff --git a/tika-core/src/main/java/org/apache/tika/language/LanguageIdentifier.java b/tika-core/src/main/java/org/apache/tika/language/LanguageIdentifier.java
index 8a072b92e..ff49406c3 100644
--- a/tika-core/src/main/java/org/apache/tika/language/LanguageIdentifier.java
+++ b/tika-core/src/main/java/org/apache/tika/language/LanguageIdentifier.java
@@ -25,6 +25,8 @@ import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
 
+import org.apache.tika.io.IOUtils;
+
 /**
  * Identifier of the language that best matches a given content profile.
  * The content profile is compared to generic language profiles based on
@@ -44,7 +46,6 @@ public class LanguageIdentifier {
     private static final Map<String, LanguageProfile> PROFILES =
         new HashMap<String, LanguageProfile>();
     private static final String PROFILE_SUFFIX = ".ngp";
-    private static final String PROFILE_ENCODING = "UTF-8";
 
     private static Properties props = new Properties();
     private static String errors = "";
@@ -76,7 +77,7 @@ public class LanguageIdentifier {
                 LanguageIdentifier.class.getResourceAsStream(language + PROFILE_SUFFIX);
             try {
                 BufferedReader reader =
-                    new BufferedReader(new InputStreamReader(stream, PROFILE_ENCODING));
+                    new BufferedReader(new InputStreamReader(stream, IOUtils.UTF_8));
                 String line = reader.readLine();
                 while (line != null) {
                     if (line.length() > 0 && !line.startsWith("#")) {
diff --git a/tika-core/src/main/java/org/apache/tika/language/LanguageProfilerBuilder.java b/tika-core/src/main/java/org/apache/tika/language/LanguageProfilerBuilder.java
index cdf760b6d..099ec592d 100644
--- a/tika-core/src/main/java/org/apache/tika/language/LanguageProfilerBuilder.java
+++ b/tika-core/src/main/java/org/apache/tika/language/LanguageProfilerBuilder.java
@@ -33,8 +33,9 @@ import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import org.apache.tika.exception.TikaException;
 
+import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 /**
  * This class runs a ngram analysis over submitted text, results might be used
  * for automatic language identification.
@@ -341,7 +342,7 @@ public class LanguageProfilerBuilder {
 
         ngrams.clear();
         ngramcounts = new int[maxLength + 1];
-        BufferedReader reader = new BufferedReader(new InputStreamReader(is, "UTF-8"));
+        BufferedReader reader = new BufferedReader(new InputStreamReader(is, IOUtils.UTF_8));
         String line = null;
 
         while ((line = reader.readLine()) != null) {
@@ -405,7 +406,7 @@ public class LanguageProfilerBuilder {
      */
     public void save(OutputStream os) throws IOException {
         os.write(("# NgramProfile generated at " + new Date() + 
-                  " for Apache Tika Language Identification\n").getBytes("UTF-8"));
+                  " for Apache Tika Language Identification\n").getBytes(IOUtils.UTF_8));
 
         // And then each ngram
 
@@ -432,7 +433,7 @@ public class LanguageProfilerBuilder {
         for (int i = 0; i < list.size(); i++) {
             NGramEntry e = list.get(i);
             String line = e.toString() + " " + e.getCount() + "\n";
-            os.write(line.getBytes("UTF-8"));
+            os.write(line.getBytes(IOUtils.UTF_8));
         }
         os.flush();
     }
diff --git a/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java b/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java
index 506439cde..21a274414 100644
--- a/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java
+++ b/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java
@@ -24,7 +24,6 @@ import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStream;
 import java.io.Reader;
-import java.io.UnsupportedEncodingException;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Map;
@@ -232,7 +231,7 @@ public class ExternalParser extends AbstractParser {
      */
     private void extractOutput(InputStream stream, XHTMLContentHandler xhtml)
             throws SAXException, IOException {
-        Reader reader = new InputStreamReader(stream, "UTF-8");
+        Reader reader = new InputStreamReader(stream, IOUtils.UTF_8);
         try {
             xhtml.startDocument();
             xhtml.startElement("p");
@@ -293,11 +292,7 @@ public class ExternalParser extends AbstractParser {
        new Thread() {
           public void run() {
              BufferedReader reader;
-             try {
-                 reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"));
-             } catch (UnsupportedEncodingException e) {
-                 throw new AssertionError("UTF-8 not supported.");
-             }
+              reader = new BufferedReader(new InputStreamReader(stream, IOUtils.UTF_8));
              try {
                 String line;
                 while ( (line = reader.readLine()) != null ) {
diff --git a/tika-core/src/test/java/org/apache/tika/detect/TextDetectorTest.java b/tika-core/src/test/java/org/apache/tika/detect/TextDetectorTest.java
index c50fc1492..26280c97d 100644
--- a/tika-core/src/test/java/org/apache/tika/detect/TextDetectorTest.java
+++ b/tika-core/src/test/java/org/apache/tika/detect/TextDetectorTest.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.util.Arrays;
 
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.mime.MediaType;
 import org.junit.Test;
@@ -54,8 +55,8 @@ public class TextDetectorTest {
 
     @Test
     public void testDetectText() throws Exception {
-        assertText("Hello, World!".getBytes("UTF-8"));
-        assertText(" \t\r\n".getBytes("UTF-8"));
+        assertText("Hello, World!".getBytes(IOUtils.UTF_8));
+        assertText(" \t\r\n".getBytes(IOUtils.UTF_8));
         assertNotText(new byte[] { -1, -2, -3, 0x09, 0x0A, 0x0C, 0x0D, 0x1B });
         assertNotText(new byte[] { 0 });
         assertNotText(new byte[] { 'H', 'e', 'l', 'l', 'o', 0 });
diff --git a/tika-core/src/test/java/org/apache/tika/io/TailStreamTest.java b/tika-core/src/test/java/org/apache/tika/io/TailStreamTest.java
index 0b4d3158c..35b99d46b 100644
--- a/tika-core/src/test/java/org/apache/tika/io/TailStreamTest.java
+++ b/tika-core/src/test/java/org/apache/tika/io/TailStreamTest.java
@@ -23,7 +23,6 @@ import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.UnsupportedEncodingException;
 import java.util.Arrays;
 
 import org.junit.Test;
@@ -69,11 +68,7 @@ public class TailStreamTest
      */
     private static InputStream generateStream(int from, int length)
     {
-        try {
-            return new ByteArrayInputStream(generateText(from, length).getBytes("UTF-8"));
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
+        return new ByteArrayInputStream(generateText(from, length).getBytes(IOUtils.UTF_8));
     }
 
     /**
@@ -128,7 +123,7 @@ public class TailStreamTest
         TailStream stream = new TailStream(generateStream(0, 2 * count), count);
         readStream(stream);
         assertEquals("Wrong buffer", generateText(count, count), new String(
-                stream.getTail(), "UTF-8"));
+                stream.getTail(), IOUtils.UTF_8));
     }
 
     /**
@@ -149,7 +144,7 @@ public class TailStreamTest
             read = stream.read(buf);
         }
         assertEquals("Wrong buffer", generateText(count - tailSize, tailSize),
-                new String(stream.getTail(), "UTF-8"));
+                new String(stream.getTail(), IOUtils.UTF_8));
         stream.close();
     }
 
@@ -169,7 +164,7 @@ public class TailStreamTest
         stream.reset();
         readStream(stream);
         assertEquals("Wrong buffer", generateText(tailSize, tailSize),
-                new String(stream.getTail(), "UTF-8"));
+                new String(stream.getTail(), IOUtils.UTF_8));
     }
 
     /**
@@ -185,7 +180,7 @@ public class TailStreamTest
         byte[] buf = new byte[count];
         stream.read(buf);
         assertEquals("Wrong buffer", generateText(count - tailSize, tailSize),
-                new String(stream.getTail(), "UTF-8"));
+                new String(stream.getTail(), IOUtils.UTF_8));
         stream.close();
     }
 
@@ -202,7 +197,7 @@ public class TailStreamTest
         assertEquals("Wrong skip result", skipCount, stream.skip(skipCount));
         assertEquals("Wrong buffer",
                 generateText(skipCount - tailSize, tailSize),
-                new String(stream.getTail(), "UTF-8"));
+                new String(stream.getTail(), IOUtils.UTF_8));
         stream.close();
     }
 
@@ -216,7 +211,7 @@ public class TailStreamTest
         TailStream stream = new TailStream(generateStream(0, count), 2 * count);
         assertEquals("Wrong skip result", count, stream.skip(2 * count));
         assertEquals("Wrong buffer", generateText(0, count),
-                new String(stream.getTail(), "UTF-8"));
+                new String(stream.getTail(), IOUtils.UTF_8));
         stream.close();
     }
 
diff --git a/tika-core/src/test/java/org/apache/tika/io/TikaInputStreamTest.java b/tika-core/src/test/java/org/apache/tika/io/TikaInputStreamTest.java
index abef52ba6..4c71baaaa 100644
--- a/tika-core/src/test/java/org/apache/tika/io/TikaInputStreamTest.java
+++ b/tika-core/src/test/java/org/apache/tika/io/TikaInputStreamTest.java
@@ -16,6 +16,10 @@
  */
 package org.apache.tika.io;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -27,11 +31,7 @@ import java.io.OutputStream;
 import java.net.URL;
 
 import org.apache.tika.metadata.Metadata;
-
 import org.junit.Test;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
 
 public class TikaInputStreamTest {
 
@@ -62,7 +62,7 @@ public class TikaInputStreamTest {
     @Test
     public void testStreamBased() throws IOException {
         InputStream input =
-            new ByteArrayInputStream("Hello, World!".getBytes("UTF-8"));
+            new ByteArrayInputStream("Hello, World!".getBytes(IOUtils.UTF_8));
         InputStream stream = TikaInputStream.get(input);
 
         File file = TikaInputStream.get(stream).getFile();
@@ -89,7 +89,7 @@ public class TikaInputStreamTest {
         File file = File.createTempFile("tika-", ".tmp");
         OutputStream stream = new FileOutputStream(file);
         try {
-            stream.write(data.getBytes("UTF-8"));
+            stream.write(data.getBytes(IOUtils.UTF_8));
         } finally {
             stream.close();
         }
@@ -108,7 +108,7 @@ public class TikaInputStreamTest {
     private String readStream(InputStream stream) throws IOException {
         ByteArrayOutputStream buffer = new ByteArrayOutputStream();
         IOUtils.copy(stream, buffer);
-        return buffer.toString("UTF-8");
+        return buffer.toString(IOUtils.UTF_8.name());
     }
 
     @Test
diff --git a/tika-core/src/test/java/org/apache/tika/language/LanguageIdentifierTest.java b/tika-core/src/test/java/org/apache/tika/language/LanguageIdentifierTest.java
index 9748d2954..4d6f4d09a 100644
--- a/tika-core/src/test/java/org/apache/tika/language/LanguageIdentifierTest.java
+++ b/tika-core/src/test/java/org/apache/tika/language/LanguageIdentifierTest.java
@@ -16,16 +16,16 @@
  */
 package org.apache.tika.language;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.Writer;
 import java.util.HashMap;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
 import org.apache.tika.io.IOUtils;
 import org.junit.Before;
 import org.junit.Test;
@@ -139,7 +139,7 @@ public class LanguageIdentifierTest {
         InputStream stream =
             LanguageIdentifierTest.class.getResourceAsStream(language + ".test");
         try {
-            IOUtils.copy(new InputStreamReader(stream, "UTF-8"), writer);
+            IOUtils.copy(new InputStreamReader(stream, IOUtils.UTF_8), writer);
         } finally {
             stream.close();
         }
diff --git a/tika-core/src/test/java/org/apache/tika/language/LanguageProfilerBuilderTest.java b/tika-core/src/test/java/org/apache/tika/language/LanguageProfilerBuilderTest.java
index c5409fc2b..cd3c4d8e0 100644
--- a/tika-core/src/test/java/org/apache/tika/language/LanguageProfilerBuilderTest.java
+++ b/tika-core/src/test/java/org/apache/tika/language/LanguageProfilerBuilderTest.java
@@ -17,6 +17,9 @@
 
 package org.apache.tika.language;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileInputStream;
@@ -27,12 +30,10 @@ import java.io.InputStreamReader;
 import java.net.URISyntaxException;
 
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.junit.After;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
 public class LanguageProfilerBuilderTest {
     /* Test members */
     private LanguageProfilerBuilder ngramProfile = null;
@@ -40,7 +41,6 @@ public class LanguageProfilerBuilderTest {
     private final String profileName = "../tika-core/src/test/resources/org/apache/tika/language/langbuilder/"
             + LanguageProfilerBuilderTest.class.getName();
     private final String corpusName = "langbuilder/welsh_corpus.txt";
-    private final String encoding = "UTF-8";
     private final String FILE_EXTENSION = "ngp";
     private final String LANGUAGE = "welsh";
     private final int maxlen = 1000;
@@ -50,7 +50,7 @@ public class LanguageProfilerBuilderTest {
         InputStream is =
                 LanguageProfilerBuilderTest.class.getResourceAsStream(corpusName);
         try {
-            ngramProfile = LanguageProfilerBuilder.create(profileName, is , encoding);
+            ngramProfile = LanguageProfilerBuilder.create(profileName, is , IOUtils.UTF_8.name());
         } finally {
             is.close();
         }
@@ -82,7 +82,7 @@ public class LanguageProfilerBuilderTest {
                 + FILE_EXTENSION));
         try {
             BufferedReader reader = new BufferedReader(new InputStreamReader(
-                    stream, encoding));
+                    stream, IOUtils.UTF_8));
             String line = reader.readLine();
             while (line != null) {
                 if (line.length() > 0 && !line.startsWith("#")) {// skips the
diff --git a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java
index 1fe8636cc..f93415900 100644
--- a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java
+++ b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java
@@ -25,8 +25,8 @@ import java.io.InputStream;
 import java.net.URL;
 
 import org.apache.tika.config.TikaConfig;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
-
 import org.junit.Before;
 import org.junit.Test;
 
@@ -85,7 +85,7 @@ public class MimeDetectionTest {
                 new ByteArrayInputStream("\ufefftest".getBytes("UTF-16BE")),
                 new Metadata()));
         assertEquals(MediaType.TEXT_PLAIN, mimeTypes.detect(
-                new ByteArrayInputStream("\ufefftest".getBytes("UTF-8")),
+                new ByteArrayInputStream("\ufefftest".getBytes(IOUtils.UTF_8)),
                 new Metadata()));
     }
 
@@ -195,7 +195,7 @@ public class MimeDetectionTest {
     @Test
     public void testNotXML() throws IOException {
         assertEquals(MediaType.TEXT_PLAIN, mimeTypes.detect(
-                new ByteArrayInputStream("<!-- test -->".getBytes("UTF-8")),
+                new ByteArrayInputStream("<!-- test -->".getBytes(IOUtils.UTF_8)),
                 new Metadata()));
     }
 
@@ -219,7 +219,7 @@ public class MimeDetectionTest {
      */
     @Test    
     public void testMimeMagicClashSamePriority() throws IOException {
-        byte[] helloWorld = "Hello, World!".getBytes("UTF-8");
+        byte[] helloWorld = "Hello, World!".getBytes(IOUtils.UTF_8);
         MediaType helloType = MediaType.parse("hello/world-file");
         MediaType helloXType = MediaType.parse("hello/x-world-hello");
         Metadata metadata;
diff --git a/tika-core/src/test/java/org/apache/tika/sax/BasicContentHandlerFactoryTest.java b/tika-core/src/test/java/org/apache/tika/sax/BasicContentHandlerFactoryTest.java
index 37ac6bab3..12507be71 100644
--- a/tika-core/src/test/java/org/apache/tika/sax/BasicContentHandlerFactoryTest.java
+++ b/tika-core/src/test/java/org/apache/tika/sax/BasicContentHandlerFactoryTest.java
@@ -16,6 +16,10 @@
  */
 package org.apache.tika.sax;
 
+import static junit.framework.Assert.assertFalse;
+import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -23,6 +27,7 @@ import java.io.UnsupportedEncodingException;
 import java.util.Set;
 
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.mime.MediaType;
 import org.apache.tika.parser.ParseContext;
@@ -34,15 +39,12 @@ import org.xml.sax.SAXException;
 import org.xml.sax.helpers.AttributesImpl;
 import org.xml.sax.helpers.DefaultHandler;
 
-import static junit.framework.Assert.assertFalse;
-import static junit.framework.Assert.assertTrue;
-import static org.junit.Assert.assertEquals;
-
 /**
  * Test cases for the {@link org.apache.tika.sax.BodyContentHandler} class.
  */
 public class BasicContentHandlerFactoryTest {
-    private static final String ENCODING = "UTF-8";
+
+    private static final String ENCODING = IOUtils.UTF_8.name();
     //default max char len (at least in WriteOutContentHandler is 100k)
     private static final int OVER_DEFAULT = 120000;
 
diff --git a/tika-core/src/test/java/org/apache/tika/sax/BodyContentHandlerTest.java b/tika-core/src/test/java/org/apache/tika/sax/BodyContentHandlerTest.java
index 7680b1697..1a278db2b 100644
--- a/tika-core/src/test/java/org/apache/tika/sax/BodyContentHandlerTest.java
+++ b/tika-core/src/test/java/org/apache/tika/sax/BodyContentHandlerTest.java
@@ -21,6 +21,7 @@ import static org.junit.Assert.assertEquals;
 import java.io.ByteArrayOutputStream;
 import java.io.OutputStream;
 
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.junit.Test;
 
@@ -45,7 +46,7 @@ public class BodyContentHandlerTest {
         xhtml.element("p", "Test text");
         xhtml.endDocument();
 
-        assertEquals("Test text\n", buffer.toString("UTF-8"));
+        assertEquals("Test text\n", buffer.toString(IOUtils.UTF_8.name()));
     }
 
 }
diff --git a/tika-example/src/main/java/org/apache/tika/example/DumpTikaConfigExample.java b/tika-example/src/main/java/org/apache/tika/example/DumpTikaConfigExample.java
index 587dbbc2e..8838b2673 100644
--- a/tika-example/src/main/java/org/apache/tika/example/DumpTikaConfigExample.java
+++ b/tika-example/src/main/java/org/apache/tika/example/DumpTikaConfigExample.java
@@ -16,20 +16,6 @@ package org.apache.tika.example;
  * limitations under the License.
  */
 
-import org.apache.tika.config.TikaConfig;
-import org.apache.tika.detect.DefaultDetector;
-import org.apache.tika.detect.Detector;
-import org.apache.tika.exception.TikaException;
-import org.apache.tika.language.translate.DefaultTranslator;
-import org.apache.tika.language.translate.Translator;
-import org.apache.tika.mime.MediaType;
-import org.apache.tika.parser.CompositeParser;
-import org.apache.tika.parser.ParseContext;
-import org.apache.tika.parser.Parser;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.Node;
-
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.transform.OutputKeys;
@@ -37,18 +23,35 @@ import javax.xml.transform.Transformer;
 import javax.xml.transform.TransformerFactory;
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
+
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStreamWriter;
 import java.io.StringWriter;
 import java.io.Writer;
+import java.nio.charset.Charset;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeMap;
 import java.util.TreeSet;
 
+import org.apache.tika.config.TikaConfig;
+import org.apache.tika.detect.DefaultDetector;
+import org.apache.tika.detect.Detector;
+import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
+import org.apache.tika.language.translate.DefaultTranslator;
+import org.apache.tika.language.translate.Translator;
+import org.apache.tika.mime.MediaType;
+import org.apache.tika.parser.CompositeParser;
+import org.apache.tika.parser.ParseContext;
+import org.apache.tika.parser.Parser;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+
 
 /**
  * This class shows how to dump a TikaConfig object to a configuration file.
@@ -187,19 +190,19 @@ public class DumpTikaConfigExample {
      */
     public static void main(String[] args) throws Exception {
 
-        String encoding = "UTF-8";
+        Charset encoding = IOUtils.UTF_8;
         Writer writer = null;
         if (args.length > 0) {
-            writer = new OutputStreamWriter(new FileOutputStream(new File(args[0])));
+            writer = new OutputStreamWriter(new FileOutputStream(new File(args[0])), encoding);
         } else {
             writer = new StringWriter();
         }
 
         if (args.length > 1) {
-            encoding = args[1];
+            encoding = Charset.forName(args[1]);
         }
         DumpTikaConfigExample ex = new DumpTikaConfigExample();
-        ex.dump(TikaConfig.getDefaultConfig(), writer, encoding);
+        ex.dump(TikaConfig.getDefaultConfig(), writer, encoding.name());
 
         writer.flush();
 
diff --git a/tika-parent/pom.xml b/tika-parent/pom.xml
index d518b8b16..bec153ac0 100644
--- a/tika-parent/pom.xml
+++ b/tika-parent/pom.xml
@@ -213,6 +213,14 @@
         <role>committer</role>
       </roles>
     </developer>
+    <developer>
+      <name>Tim Allison</name>
+      <id>tallison</id>
+      <timezone>-5</timezone>
+      <roles>
+        <role>committer</role>
+      </roles>
+    </developer>
   </developers>
   <contributors>
     <contributor>
@@ -274,7 +282,6 @@
   </properties>
 
   <build>
-    <pluginManagement>
       <plugins>
         <plugin>
           <artifactId>maven-compiler-plugin</artifactId>
@@ -287,7 +294,7 @@
         <plugin>
           <groupId>de.thetaphi</groupId>
           <artifactId>forbiddenapis</artifactId>
-          <version>1.6.1</version>
+          <version>1.7</version>
           <configuration>
             <targetVersion>${maven.compiler.target}</targetVersion>
             <internalRuntimeForbidden>true</internalRuntimeForbidden>
@@ -321,6 +328,36 @@
           <artifactId>maven-shade-plugin</artifactId>
           <version>2.3</version>
         </plugin>
+    </plugins>
+
+    <pluginManagement>
+      <plugins>
+        <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
+        <plugin>
+          <groupId>org.eclipse.m2e</groupId>
+          <artifactId>lifecycle-mapping</artifactId>
+          <version>1.0.0</version>
+          <configuration>
+            <lifecycleMappingMetadata>
+              <pluginExecutions>
+                <pluginExecution>
+                  <pluginExecutionFilter>
+                    <groupId>de.thetaphi</groupId>
+                    <artifactId>forbiddenapis</artifactId>
+                    <versionRange>[1.0,)</versionRange>
+                    <goals>
+                      <goal>check</goal>
+                      <goal>testCheck</goal>
+                    </goals>
+                  </pluginExecutionFilter>
+                  <action>
+                    <ignore/>
+                  </action>
+                </pluginExecution>
+              </pluginExecutions>
+            </lifecycleMappingMetadata>
+          </configuration>
+        </plugin>
       </plugins>
     </pluginManagement>
   </build>
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmDirectoryListingSet.java b/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmDirectoryListingSet.java
index ae0992fd8..d8862ca07 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmDirectoryListingSet.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmDirectoryListingSet.java
@@ -16,11 +16,11 @@
  */
 package org.apache.tika.parser.chm.accessor;
 
-import java.io.UnsupportedEncodingException;
 import java.math.BigInteger;
 import java.util.ArrayList;
 import java.util.List;
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.parser.chm.core.ChmCommons;
 import org.apache.tika.parser.chm.core.ChmConstants;
 import org.apache.tika.parser.chm.exception.ChmParsingException;
@@ -232,13 +232,10 @@ public class ChmDirectoryListingSet {
                     
                     DirectoryListingEntry dle = new DirectoryListingEntry();
                     dle.setNameLength(strlen);
-                    try {
-                        dle.setName(new String(ChmCommons.copyOfRange(
+                    dle.setName(new String(ChmCommons.copyOfRange(
                                 dir_chunk, placeHolder,
-                                (placeHolder + dle.getNameLength())), "UTF-8"));
-                    } catch (UnsupportedEncodingException ex) {
-                        dle.setName(new String(dir_chunk, placeHolder, placeHolder + dle.getNameLength()));
-                    }
+                                (placeHolder + dle.getNameLength())), IOUtils.UTF_8));
+
                     checkControlData(dle);
                     checkResetTable(dle);
                     setPlaceHolder(placeHolder
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmItsfHeader.java b/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmItsfHeader.java
index ed6c93fb9..3265be4e0 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmItsfHeader.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmItsfHeader.java
@@ -16,10 +16,10 @@
  */
 package org.apache.tika.parser.chm.accessor;
 
-import java.io.UnsupportedEncodingException;
 import java.math.BigInteger;
 
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.parser.chm.assertion.ChmAssert;
 import org.apache.tika.parser.chm.core.ChmConstants;
 import org.apache.tika.parser.chm.exception.ChmParsingException;
@@ -62,11 +62,7 @@ public class ChmItsfHeader implements ChmAccessor<ChmItsfHeader> {
     private int currentPlace = 0;
 
     public ChmItsfHeader() {
-        try {
-            signature = ChmConstants.ITSF.getBytes("UTF-8"); /* 0 (ITSF) */
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
+        signature = ChmConstants.ITSF.getBytes(IOUtils.UTF_8); /* 0 (ITSF) */
     }
 
     /**
@@ -74,11 +70,7 @@ public class ChmItsfHeader implements ChmAccessor<ChmItsfHeader> {
      */
     public String toString() {
         StringBuilder sb = new StringBuilder();
-        try {
-            sb.append(new String(getSignature(), "UTF-8") + " ");
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
+        sb.append(new String(getSignature(), IOUtils.UTF_8) + " ");
         sb.append(getVersion() + " ");
         sb.append(getHeaderLen() + " ");
         sb.append(getUnknown_000c() + " ");
@@ -471,12 +463,8 @@ public class ChmItsfHeader implements ChmAccessor<ChmItsfHeader> {
         chmItsfHeader.setUnknownLen(chmItsfHeader.unmarshalUint64(data, chmItsfHeader.getUnknownLen()));
         chmItsfHeader.setDirOffset(chmItsfHeader.unmarshalUint64(data, chmItsfHeader.getDirOffset()));
         chmItsfHeader.setDirLen(chmItsfHeader.unmarshalUint64(data, chmItsfHeader.getDirLen()));
-        try {
-            if (!new String(chmItsfHeader.getSignature(), "UTF-8").equals(ChmConstants.ITSF))
-                throw new TikaException("seems not valid file");
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
+        if (!new String(chmItsfHeader.getSignature(), IOUtils.UTF_8).equals(ChmConstants.ITSF))
+            throw new TikaException("seems not valid file");
         if (chmItsfHeader.getVersion() == ChmConstants.CHM_VER_2) {
             if (chmItsfHeader.getHeaderLen() < ChmConstants.CHM_ITSF_V2_LEN)
                 throw new TikaException("something wrong with header");
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmItspHeader.java b/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmItspHeader.java
index 238be5dba..bc693a5d0 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmItspHeader.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmItspHeader.java
@@ -16,14 +16,15 @@
  */
 package org.apache.tika.parser.chm.accessor;
 
+import java.io.UnsupportedEncodingException;
+
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.parser.chm.assertion.ChmAssert;
 import org.apache.tika.parser.chm.core.ChmCommons;
 import org.apache.tika.parser.chm.core.ChmConstants;
 import org.apache.tika.parser.chm.exception.ChmParsingException;
 
-import java.io.UnsupportedEncodingException;
-
 /**
  * Directory header The directory starts with a header; its format is as
  * follows: 0000: char[4] 'ITSP' 0004: DWORD Version number 1 0008: DWORD Length
@@ -68,25 +69,17 @@ public class ChmItspHeader implements ChmAccessor<ChmItspHeader> {
     private int currentPlace = 0;
 
     public ChmItspHeader() {
-        try {
-            signature = ChmConstants.ITSP.getBytes("UTF-8"); /*
+        signature = ChmConstants.ITSP.getBytes(IOUtils.UTF_8); /*
                                                                           * 0
                                                                           * (ITSP
                                                                           * )
                                                                           */
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
     }
 
     public String toString() {
         StringBuilder sb = new StringBuilder();
-        try {
-            sb.append("[ signature:=" + new String(getSignature(), "UTF-8")
-                    + System.getProperty("line.separator"));
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
+        sb.append("[ signature:=" + new String(getSignature(), IOUtils.UTF_8)
+                + System.getProperty("line.separator"));
         sb.append("version:=\t" + getVersion()
                 + System.getProperty("line.separator"));
         sb.append("header_len:=\t" + getHeader_len()
@@ -544,12 +537,9 @@ public class ChmItspHeader implements ChmAccessor<ChmItspHeader> {
                         ChmConstants.BYTE_ARRAY_LENGHT));
 
         /* Checks validity of the itsp header */
-        try {
-            if (!new String(chmItspHeader.getSignature(), "UTF-8").equals(ChmConstants.ITSP))
+        if (!new String(chmItspHeader.getSignature(), IOUtils.UTF_8).equals(ChmConstants.ITSP))
                 throw new ChmParsingException("seems not valid signature");
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
+
         if (chmItspHeader.getVersion() != ChmConstants.CHM_VER_1)
             throw new ChmParsingException("!=ChmConstants.CHM_VER_1");
 
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmLzxcControlData.java b/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmLzxcControlData.java
index afadc312e..7c8021022 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmLzxcControlData.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmLzxcControlData.java
@@ -16,13 +16,14 @@
  */
 package org.apache.tika.parser.chm.accessor;
 
+import java.io.UnsupportedEncodingException;
+
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.parser.chm.assertion.ChmAssert;
 import org.apache.tika.parser.chm.core.ChmConstants;
 import org.apache.tika.parser.chm.exception.ChmParsingException;
 
-import java.io.UnsupportedEncodingException;
-
 /**
  * 
  * ::DataSpace/Storage/<SectionName>/ControlData This file contains $20 bytes of
@@ -54,15 +55,11 @@ public class ChmLzxcControlData implements ChmAccessor<ChmLzxcControlData> {
     private int currentPlace = 0;
 
     public ChmLzxcControlData() {
-        try {
-            signature = ChmConstants.LZXC.getBytes("UTF-8"); /*
+        signature = ChmConstants.LZXC.getBytes(IOUtils.UTF_8); /*
                                                               * 4
                                                               * (LZXC
                                                               * )
                                                               */
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
     }
 
     /**
@@ -257,12 +254,8 @@ public class ChmLzxcControlData implements ChmAccessor<ChmLzxcControlData> {
     public String toString() {
         StringBuilder sb = new StringBuilder();
         sb.append("size(unknown):=" + this.getSize() + ", ");
-        try {
-            sb.append("signature(Compression type identifier):="
-                    + new String(this.getSignature(), "UTF-8") + ", ");
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
+        sb.append("signature(Compression type identifier):="
+                + new String(this.getSignature(), IOUtils.UTF_8) + ", ");
         sb.append("version(Possibly numeric code for LZX):="
                 + this.getVersion() + System.getProperty("line.separator"));
         sb.append("resetInterval(The Huffman reset interval):="
@@ -313,14 +306,10 @@ public class ChmLzxcControlData implements ChmAccessor<ChmLzxcControlData> {
                     "window size / resetInterval should be more than 1");
 
         /* checks a signature */
-        try {
-            if (!new String(chmLzxcControlData.getSignature(), "UTF-8")
-                    .equals(ChmConstants.LZXC))
-                throw new ChmParsingException(
-                        "the signature does not seem to be correct");
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
+        if (!new String(chmLzxcControlData.getSignature(), IOUtils.UTF_8)
+                .equals(ChmConstants.LZXC))
+            throw new ChmParsingException(
+                    "the signature does not seem to be correct");
     }
 
     /**
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmPmgiHeader.java b/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmPmgiHeader.java
index 195a34871..0ec5ab142 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmPmgiHeader.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmPmgiHeader.java
@@ -16,10 +16,10 @@
  */
 package org.apache.tika.parser.chm.accessor;
 
-import java.io.UnsupportedEncodingException;
 import java.util.Arrays;
 
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.parser.chm.assertion.ChmAssert;
 import org.apache.tika.parser.chm.core.ChmCommons;
 import org.apache.tika.parser.chm.core.ChmConstants;
@@ -54,11 +54,7 @@ public class ChmPmgiHeader implements ChmAccessor<ChmPmgiHeader> {
     private int currentPlace = 0;
 
     public ChmPmgiHeader() {
-        try {
-            signature = ChmConstants.CHM_PMGI_MARKER.getBytes("UTF-8"); /* 0 (PMGI) */
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
+        signature = ChmConstants.CHM_PMGI_MARKER.getBytes(IOUtils.UTF_8); /* 0 (PMGI) */
     }
 
     private int getDataRemained() {
@@ -84,12 +80,9 @@ public class ChmPmgiHeader implements ChmAccessor<ChmPmgiHeader> {
         ChmAssert.assertChmAccessorNotNull(chmPmgiHeader);
         ChmAssert.assertPositiveInt(count);
         this.setDataRemained(data.length);
-        try {
             index = ChmCommons.indexOf(data,
-                    ChmConstants.CHM_PMGI_MARKER.getBytes("UTF-8"));
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
+                    ChmConstants.CHM_PMGI_MARKER.getBytes(IOUtils.UTF_8));
+
         if (index >= 0)
             System.arraycopy(data, index, chmPmgiHeader.getSignature(), 0, count);
         else{
@@ -156,11 +149,7 @@ public class ChmPmgiHeader implements ChmAccessor<ChmPmgiHeader> {
      */
     public String toString() {
         StringBuilder sb = new StringBuilder();
-        try {
-            sb.append("signature:=" + new String(getSignature(), "UTF-8") + ", ");
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
+        sb.append("signature:=" + new String(getSignature(), IOUtils.UTF_8) + ", ");
         sb.append("free space:=" + getFreeSpace()
                 + System.getProperty("line.separator"));
         return sb.toString();
@@ -177,14 +166,10 @@ public class ChmPmgiHeader implements ChmAccessor<ChmPmgiHeader> {
         chmPmgiHeader.setFreeSpace(chmPmgiHeader.unmarshalUInt32(data, chmPmgiHeader.getFreeSpace()));
 
         /* check structure */
-        try {
-            if (!Arrays.equals(chmPmgiHeader.getSignature(),
-                    ChmConstants.CHM_PMGI_MARKER.getBytes("UTF-8")))
-                throw new TikaException(
-                        "it does not seem to be valid a PMGI signature, check ChmItsp index_root if it was -1, means no PMGI, use PMGL insted");
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
+        if (!Arrays.equals(chmPmgiHeader.getSignature(),
+                ChmConstants.CHM_PMGI_MARKER.getBytes(IOUtils.UTF_8)))
+            throw new TikaException(
+                    "it does not seem to be valid a PMGI signature, check ChmItsp index_root if it was -1, means no PMGI, use PMGL insted");
 
     }
 }
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmPmglHeader.java b/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmPmglHeader.java
index df55acfd0..7a66c85b9 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmPmglHeader.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/chm/accessor/ChmPmglHeader.java
@@ -16,9 +16,8 @@
  */
 package org.apache.tika.parser.chm.accessor;
 
-import java.io.UnsupportedEncodingException;
-
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.parser.chm.assertion.ChmAssert;
 import org.apache.tika.parser.chm.core.ChmConstants;
 import org.apache.tika.parser.chm.exception.ChmParsingException;
@@ -68,15 +67,11 @@ public class ChmPmglHeader implements ChmAccessor<ChmPmglHeader> {
     private int currentPlace = 0;
 
     public ChmPmglHeader() {
-        try {
-            signature = ChmConstants.PMGL.getBytes("UTF-8"); /*
+            signature = ChmConstants.PMGL.getBytes(IOUtils.UTF_8); /*
                                                                           * 0
                                                                           * (PMGL
                                                                           * )
                                                                           */
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
     }
 
     private int getDataRemained() {
@@ -108,11 +103,7 @@ public class ChmPmglHeader implements ChmAccessor<ChmPmglHeader> {
 
     public String toString() {
         StringBuilder sb = new StringBuilder();
-        try {
-            sb.append("signatute:=" + new String(getSignature(), "UTF-8") + ", ");
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
+        sb.append("signatute:=" + new String(getSignature(), IOUtils.UTF_8) + ", ");
         sb.append("free space:=" + getFreeSpace() + ", ");
         sb.append("unknown0008:=" + getUnknown0008() + ", ");
         sb.append("prev block:=" + getBlockPrev() + ", ");
@@ -175,13 +166,9 @@ public class ChmPmglHeader implements ChmAccessor<ChmPmglHeader> {
         chmPmglHeader.setBlockNext(chmPmglHeader.unmarshalInt32(data));
 
         /* check structure */
-        try {
-            if (!new String(chmPmglHeader.getSignature(), "UTF-8").equals(ChmConstants.PMGL))
-                throw new ChmParsingException(ChmPmglHeader.class.getName()
-                        + " pmgl != pmgl.signature");
-        } catch (UnsupportedEncodingException e) {
-            throw new AssertionError("UTF-8 not supported.");
-        }
+        if (!new String(chmPmglHeader.getSignature(), IOUtils.UTF_8).equals(ChmConstants.PMGL))
+            throw new ChmParsingException(ChmPmglHeader.class.getName()
+                    + " pmgl != pmgl.signature");
     }
 
     public byte[] getSignature() {
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/chm/core/ChmConstants.java b/tika-parsers/src/main/java/org/apache/tika/parser/chm/core/ChmConstants.java
index 1fa31c91b..1da0f377f 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/chm/core/ChmConstants.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/chm/core/ChmConstants.java
@@ -16,12 +16,14 @@
  */
 package org.apache.tika.parser.chm.core;
 
+import org.apache.tika.io.IOUtils;
+
 public class ChmConstants {
     /* Prevents instantiation */
     private ChmConstants() {
     }
 
-    public static final String DEFAULT_CHARSET = "UTF-8";
+    public static final String DEFAULT_CHARSET = IOUtils.UTF_8.name();
     public static final String ITSF = "ITSF";
     public static final String ITSP = "ITSP";
     public static final String PMGL = "PMGL";
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/chm/core/ChmExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/chm/core/ChmExtractor.java
index 1e72b9301..0833e5fc7 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/chm/core/ChmExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/chm/core/ChmExtractor.java
@@ -172,7 +172,7 @@ public class ChmExtractor {
 
             int indexOfControlData = getChmDirList().getControlDataIndex();
             int indexOfResetData = ChmCommons.indexOfResetTableBlock(getData(),
-                    ChmConstants.LZXC.getBytes("UTF-8"));
+                    ChmConstants.LZXC.getBytes(IOUtils.UTF_8));
             byte[] dir_chunk = null;
             if (indexOfResetData > 0)
                 dir_chunk = ChmCommons.copyOfRange( getData(), indexOfResetData, indexOfResetData  
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubParser.java
index 9cf954c1e..0d35f8e09 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubParser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/epub/EpubParser.java
@@ -93,7 +93,7 @@ public class EpubParser extends AbstractParser {
         ZipEntry entry = zip.getNextEntry();
         while (entry != null) {
             if (entry.getName().equals("mimetype")) {
-                String type = IOUtils.toString(zip, "UTF-8");
+                String type = IOUtils.toString(zip, IOUtils.UTF_8.name());
                 metadata.set(Metadata.CONTENT_TYPE, type);
             } else if (entry.getName().equals("metadata.xml")) {
                 meta.parse(zip, new DefaultHandler(), metadata, context);
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/gdal/GDALParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/gdal/GDALParser.java
index 3ec05eff5..c94a82bc2 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/gdal/GDALParser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/gdal/GDALParser.java
@@ -30,9 +30,8 @@ import java.util.Scanner;
 import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-
-//Tika imports
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.io.TemporaryResources;
 import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
@@ -41,12 +40,13 @@ import org.apache.tika.parser.AbstractParser;
 import org.apache.tika.parser.ParseContext;
 import org.apache.tika.parser.external.ExternalParser;
 import org.apache.tika.sax.XHTMLContentHandler;
+import org.xml.sax.ContentHandler;
+import org.xml.sax.SAXException;
 
 import static org.apache.tika.parser.external.ExternalParser.INPUT_FILE_TOKEN;
 
+//Tika imports
 //SAX imports
-import org.xml.sax.ContentHandler;
-import org.xml.sax.SAXException;
 
 /**
  * Wraps execution of the <a href="http//gdal.org/">Geospatial Data Abstraction
@@ -385,7 +385,7 @@ public class GDALParser extends AbstractParser {
     private String extractOutput(InputStream stream) throws SAXException,
             IOException {
         StringBuffer sb = new StringBuffer();
-        Reader reader = new InputStreamReader(stream, "UTF-8");
+        Reader reader = new InputStreamReader(stream, IOUtils.UTF_8);
         try {
             char[] buffer = new char[1024];
             for (int n = reader.read(buffer); n != -1; n = reader.read(buffer)) {
@@ -400,8 +400,8 @@ public class GDALParser extends AbstractParser {
     private void processOutput(ContentHandler handler, Metadata metadata,
                                String output) throws SAXException, IOException {
         XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);
-        InputStream stream = new ByteArrayInputStream(output.getBytes("UTF-8"));
-        Reader reader = new InputStreamReader(stream, "UTF-8");
+        InputStream stream = new ByteArrayInputStream(output.getBytes(IOUtils.UTF_8));
+        Reader reader = new InputStreamReader(stream, IOUtils.UTF_8);
         try {
             xhtml.startDocument();
             xhtml.startElement("p");
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java
index 2a6b9b984..75915e7ba 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java
@@ -301,7 +301,7 @@ public class ImageMetadataExtractor {
             @Override
             protected SimpleDateFormat initialValue()
             {
-               return new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
+               return new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", Locale.US);
             }
         };
 
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/image/xmp/JempboxExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/image/xmp/JempboxExtractor.java
index a74805a75..0e0a1d858 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/image/xmp/JempboxExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/image/xmp/JempboxExtractor.java
@@ -22,12 +22,12 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.Reader;
-import java.util.Iterator;
 import java.util.List;
 
 import org.apache.jempbox.xmp.XMPMetadata;
 import org.apache.jempbox.xmp.XMPSchemaDublinCore;
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaCoreProperties;
 import org.xml.sax.InputSource;
@@ -39,7 +39,7 @@ public class JempboxExtractor {
     private Metadata metadata;
     
     // The XMP spec says it must be unicode, but for most file formats it specifies "must be encoded in UTF-8"
-    private static final String DEFAULT_XMP_CHARSET = "UTF-8";
+    private static final String DEFAULT_XMP_CHARSET = IOUtils.UTF_8.name();
 
     public JempboxExtractor(Metadata metadata) {
         this.metadata = metadata;
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java
index e8dfaa648..d68387d5f 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java
@@ -28,6 +28,7 @@ import java.util.Set;
 import java.util.TimeZone;
 
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaCoreProperties;
 import org.apache.tika.mime.MediaType;
@@ -161,7 +162,7 @@ public class IptcAnpaParser implements Parser {
          }
          int msgsize = is.read(buf);                // read in at least the full data
 
-         String message = (new String(buf, "UTF-8")).toLowerCase(Locale.ROOT);
+         String message = (new String(buf, IOUtils.UTF_8)).toLowerCase(Locale.ROOT);
          // these are not if-then-else, because we want to go from most common
          // and fall through to least.  this is imperfect, as these tags could
          // show up in other agency stories, but i can't find a spec or any
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/mat/MatParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/mat/MatParser.java
index 8b1dd9f94..aa69eaddc 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/mat/MatParser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/mat/MatParser.java
@@ -24,6 +24,7 @@ import java.util.Set;
 import java.util.Map;
 
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.parser.AbstractParser;
@@ -86,7 +87,7 @@ public class MatParser extends AbstractParser {
             }
 
             // Get endian indicator from header file
-            String endianBytes = new String(hdr.getEndianIndicator(), "UTF-8"); // Retrieve endian bytes and convert to string
+            String endianBytes = new String(hdr.getEndianIndicator(), IOUtils.UTF_8); // Retrieve endian bytes and convert to string
             String endianCode = String.valueOf(endianBytes.toCharArray()); // Convert bytes to characters to string
             metadata.set("endian", endianCode);
 
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/mbox/OutlookPSTParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/mbox/OutlookPSTParser.java
index 57c0f3dd7..04390df6f 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/mbox/OutlookPSTParser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/mbox/OutlookPSTParser.java
@@ -25,9 +25,14 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.util.Set;
 
+import com.pff.PSTAttachment;
+import com.pff.PSTFile;
+import com.pff.PSTFolder;
+import com.pff.PSTMessage;
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.extractor.EmbeddedDocumentExtractor;
 import org.apache.tika.extractor.ParsingEmbeddedDocumentExtractor;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.io.TemporaryResources;
 import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
@@ -40,11 +45,6 @@ import org.xml.sax.ContentHandler;
 import org.xml.sax.SAXException;
 import org.xml.sax.helpers.AttributesImpl;
 
-import com.pff.PSTAttachment;
-import com.pff.PSTFile;
-import com.pff.PSTFolder;
-import com.pff.PSTMessage;
-
 /**
  * @author Tran Nam Quang
  * @author hong-thai.nguyen
@@ -149,7 +149,7 @@ public class OutlookPSTParser extends AbstractParser {
     mailMetadata.set("priority", valueOf(pstMail.getPriority()));
     mailMetadata.set("flagged", valueOf(pstMail.isFlagged()));
 
-    byte[] mailContent = pstMail.getBody().getBytes("UTF-8");
+    byte[] mailContent = pstMail.getBody().getBytes(IOUtils.UTF_8);
     embeddedExtractor.parseEmbedded(new ByteArrayInputStream(mailContent), handler, mailMetadata, true);
   }
 
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java
index 15b9d43c8..69724d27c 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java
@@ -47,6 +47,7 @@ import org.apache.poi.poifs.filesystem.DirectoryNode;
 import org.apache.poi.poifs.filesystem.Entry;
 import org.apache.poi.poifs.filesystem.NPOIFSFileSystem;
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.parser.ParseContext;
 import org.apache.tika.sax.XHTMLContentHandler;
@@ -234,7 +235,7 @@ public class WordExtractor extends AbstractPOIFSExtractor {
           CharacterRun cr = p.getCharacterRun(j);
 
           // FIELD_BEGIN_MARK:
-          if (cr.text().getBytes("UTF-8")[0] == 0x13) {
+          if (cr.text().getBytes(IOUtils.UTF_8)[0] == 0x13) {
              Field field = document.getFields().getFieldByStartOffset(docPart, cr.getStartOffset());
              // 58 is an embedded document
              // 56 is a document link
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/mp3/LyricsHandler.java b/tika-parsers/src/main/java/org/apache/tika/parser/mp3/LyricsHandler.java
index 60ea85f79..15a2d6ddb 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/mp3/LyricsHandler.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/mp3/LyricsHandler.java
@@ -20,6 +20,7 @@ import java.io.IOException;
 import java.io.InputStream;
 
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.xml.sax.ContentHandler;
 import org.xml.sax.SAXException;
 
@@ -82,7 +83,7 @@ public class LyricsHandler {
             //  size including the LYRICSBEGIN but excluding the 
             //  length+LYRICS200 at the end.
             int length = Integer.parseInt(
-                    new String(tagData, lookat-6, 6, "UTF-8")
+                    new String(tagData, lookat-6, 6, IOUtils.UTF_8)
             );
 
             String lyrics = new String(
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java b/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java
index bddf38e81..3e4d4f43f 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java
@@ -20,6 +20,7 @@ import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.Serializable;
+import java.util.Locale;
 import java.util.Properties;
 
 /**
@@ -211,7 +212,8 @@ public class TesseractOCRConfig implements Serializable{
 		try {
 			return Integer.parseInt(p);
 		} catch (Throwable ex) {
-			throw new RuntimeException(String.format("Cannot parse TesseractOCRConfig variable %s, invalid integer value", property), ex);
+			throw new RuntimeException(String.format(Locale.ROOT, "Cannot parse TesseractOCRConfig variable %s, invalid integer value",
+					property), ex);
 		}
 	}
 
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java
index 584a37d6e..972bcaaa0 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java
@@ -16,6 +16,8 @@
  */
 package org.apache.tika.parser.ocr;
 
+import javax.imageio.ImageIO;
+
 import java.awt.Image;
 import java.awt.image.BufferedImage;
 import java.io.File;
@@ -38,8 +40,6 @@ import java.util.concurrent.FutureTask;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
-import javax.imageio.ImageIO;
-
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.io.IOUtils;
 import org.apache.tika.io.TemporaryResources;
@@ -282,7 +282,7 @@ public class TesseractOCRParser extends AbstractParser {
      */
     private void extractOutput(InputStream stream, XHTMLContentHandler xhtml) throws SAXException, IOException {
 
-        Reader reader = new InputStreamReader(stream, "UTF-8");
+        Reader reader = new InputStreamReader(stream, IOUtils.UTF_8);
         xhtml.startDocument();
         xhtml.startElement("div");
         try {
@@ -306,7 +306,7 @@ public class TesseractOCRParser extends AbstractParser {
     private void logStream(final String logType, final InputStream stream, final File file) {
         new Thread() {
             public void run() {
-                Reader reader = new InputStreamReader(stream);
+                Reader reader = new InputStreamReader(stream, IOUtils.UTF_8);
                 StringBuilder out = new StringBuilder();
                 char[] buffer = new char[1024];
                 try {
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentParser.java
index a0f204224..943072e6d 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentParser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/odf/OpenDocumentParser.java
@@ -178,7 +178,7 @@ public class OpenDocumentParser extends AbstractParser {
         if (entry == null) return;
         
         if (entry.getName().equals("mimetype")) {
-            String type = IOUtils.toString(zip, "UTF-8");
+            String type = IOUtils.toString(zip, IOUtils.UTF_8.name());
             metadata.set(Metadata.CONTENT_TYPE, type);
         } else if (entry.getName().equals(META_NAME)) {
             meta.parse(zip, new DefaultHandler(), metadata, context);
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/pkg/ZipContainerDetector.java b/tika-parsers/src/main/java/org/apache/tika/parser/pkg/ZipContainerDetector.java
index d438da8d8..96beb4159 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/pkg/ZipContainerDetector.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/pkg/ZipContainerDetector.java
@@ -181,7 +181,7 @@ public class ZipContainerDetector implements Detector {
             if (mimetype != null) {
                 InputStream stream = zip.getInputStream(mimetype);
                 try {
-                    return MediaType.parse(IOUtils.toString(stream, "UTF-8"));
+                    return MediaType.parse(IOUtils.toString(stream, IOUtils.UTF_8.name()));
                 } finally {
                     stream.close();
                 }
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/video/FLVParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/video/FLVParser.java
index e900d3d05..1e0742755 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/video/FLVParser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/video/FLVParser.java
@@ -29,6 +29,7 @@ import java.util.Map.Entry;
 import java.util.Set;
 
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.mime.MediaType;
 import org.apache.tika.parser.AbstractParser;
@@ -130,7 +131,7 @@ public class FLVParser extends AbstractParser {
         int size = input.readUnsignedShort();
         byte[] chars = new byte[size];
         input.readFully(chars);
-        return new String(chars, "UTF-8");
+        return new String(chars, IOUtils.UTF_8);
     }
 
     private Object readAMFObject(DataInputStream input) throws IOException {
diff --git a/tika-parsers/src/test/java/org/apache/tika/embedder/ExternalEmbedderTest.java b/tika-parsers/src/test/java/org/apache/tika/embedder/ExternalEmbedderTest.java
index 7366ddea3..f03edc9cc 100644
--- a/tika-parsers/src/test/java/org/apache/tika/embedder/ExternalEmbedderTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/embedder/ExternalEmbedderTest.java
@@ -37,9 +37,8 @@ import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
 
-import org.apache.tika.embedder.Embedder;
-import org.apache.tika.embedder.ExternalEmbedder;
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.io.TemporaryResources;
 import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
@@ -60,7 +59,7 @@ public class ExternalEmbedderTest {
 
     protected static final DateFormat EXPECTED_METADATA_DATE_FORMATTER =
             new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", Locale.ROOT);
-    protected static final String DEFAULT_CHARSET = "UTF-8";
+    protected static final String DEFAULT_CHARSET = IOUtils.UTF_8.name();
     private static final String COMMAND_METADATA_ARGUMENT_DESCRIPTION = "dc:description";
     private static final String TEST_TXT_PATH = "/test-documents/testTXT.txt";
 
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/AutoDetectParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/AutoDetectParserTest.java
index 46db8b7e9..1ca3f0c33 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/AutoDetectParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/AutoDetectParserTest.java
@@ -33,6 +33,7 @@ import java.util.zip.ZipOutputStream;
 import org.apache.tika.config.TikaConfig;
 import org.apache.tika.detect.Detector;
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaCoreProperties;
 import org.apache.tika.metadata.XMPDM;
@@ -389,7 +390,7 @@ public class AutoDetectParserTest {
     public void testSpecificParserList() throws Exception {
         AutoDetectParser parser = new AutoDetectParser(new MyDetector(), new MyParser());
         
-        InputStream is = new ByteArrayInputStream("test".getBytes("UTF-8"));
+        InputStream is = new ByteArrayInputStream("test".getBytes(IOUtils.UTF_8));
         Metadata metadata = new Metadata();
         parser.parse(is, new BodyContentHandler(), metadata, new ParseContext());
         
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/ParsingReaderTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/ParsingReaderTest.java
index 3d749fd63..f056bd6ec 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/ParsingReaderTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/ParsingReaderTest.java
@@ -16,22 +16,22 @@
  */
 package org.apache.tika.parser;
 
-import static org.junit.Assert.assertEquals;
-
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
 import java.io.Reader;
-
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaCoreProperties;
 import org.junit.Test;
 
+import static org.junit.Assert.assertEquals;
+
 public class ParsingReaderTest {
 
     @Test
     public void testPlainText() throws Exception {
         String data = "test content";
-        InputStream stream = new ByteArrayInputStream(data.getBytes("UTF-8"));
+        InputStream stream = new ByteArrayInputStream(data.getBytes(IOUtils.UTF_8));
         Reader reader = new ParsingReader(stream, "test.txt");
         assertEquals('t', reader.read());
         assertEquals('e', reader.read());
@@ -54,7 +54,7 @@ public class ParsingReaderTest {
     @Test
     public void testXML() throws Exception {
         String data = "<p>test <span>content</span></p>";
-        InputStream stream = new ByteArrayInputStream(data.getBytes("UTF-8"));
+        InputStream stream = new ByteArrayInputStream(data.getBytes(IOUtils.UTF_8));
         Reader reader = new ParsingReader(stream, "test.xml");
         assertEquals(' ', (char) reader.read());
         assertEquals('t', (char) reader.read());
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmBlockInfo.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmBlockInfo.java
index ad3d517b9..5c1ef576e 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmBlockInfo.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmBlockInfo.java
@@ -18,6 +18,7 @@ package org.apache.tika.parser.chm;
 
 import static org.junit.Assert.assertTrue;
 
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.parser.chm.accessor.ChmDirectoryListingSet;
 import org.apache.tika.parser.chm.accessor.ChmItsfHeader;
 import org.apache.tika.parser.chm.accessor.ChmItspHeader;
@@ -67,7 +68,7 @@ public class TestChmBlockInfo {
         int indexOfControlData = chmDirListCont.getControlDataIndex();
 
         int indexOfResetTable = ChmCommons.indexOfResetTableBlock(data,
-                ChmConstants.LZXC.getBytes("UTF-8"));
+                ChmConstants.LZXC.getBytes(IOUtils.UTF_8));
         byte[] dir_chunk = null;
         if (indexOfResetTable > 0) {
             // dir_chunk = Arrays.copyOfRange( data, indexOfResetTable,
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmExtraction.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmExtraction.java
index 2264617c3..8702467bc 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmExtraction.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmExtraction.java
@@ -16,16 +16,7 @@
  */
 package org.apache.tika.parser.chm;
 
-import org.apache.tika.exception.TikaException;
-import org.apache.tika.metadata.Metadata;
-import org.apache.tika.parser.ParseContext;
-import org.apache.tika.parser.Parser;
-import org.apache.tika.parser.chm.accessor.ChmDirectoryListingSet;
-import org.apache.tika.parser.chm.accessor.DirectoryListingEntry;
-import org.apache.tika.parser.chm.core.ChmExtractor;
-import org.apache.tika.sax.BodyContentHandler;
-import org.junit.Test;
-import org.xml.sax.SAXException;
+import static org.junit.Assert.assertTrue;
 
 import java.io.ByteArrayInputStream;
 import java.io.File;
@@ -36,12 +27,22 @@ import java.net.URL;
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Set;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.regex.Pattern;
 
-import static org.junit.Assert.assertTrue;
+import org.apache.tika.exception.TikaException;
+import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.ParseContext;
+import org.apache.tika.parser.Parser;
+import org.apache.tika.parser.chm.accessor.ChmDirectoryListingSet;
+import org.apache.tika.parser.chm.accessor.DirectoryListingEntry;
+import org.apache.tika.parser.chm.core.ChmExtractor;
+import org.apache.tika.sax.BodyContentHandler;
+import org.junit.Test;
+import org.xml.sax.SAXException;
 
 public class TestChmExtraction {
 
@@ -130,7 +131,7 @@ public class TestChmExtraction {
                 throw new TikaException("Warning: File name contains a non ascii char : " + directoryListingEntry.getName());
             }
             
-            final String lowName = directoryListingEntry.getName().toLowerCase();
+            final String lowName = directoryListingEntry.getName().toLowerCase(Locale.ROOT);
             
             //check duplicate entry name which is seen before.
             if (names.contains(lowName)) {
@@ -149,7 +150,7 @@ public class TestChmExtraction {
                 }
 
                 //validate html
-                String html = new String(data);
+                String html = new String(data, "ISO-8859-1");
                 if (! htmlPairP.matcher(html).find()) {
                     System.err.println(lowName + " is invalid.");
                     System.err.println(html);
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmItspHeader.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmItspHeader.java
index 58c53487b..153c5a644 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmItspHeader.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmItspHeader.java
@@ -19,6 +19,7 @@ package org.apache.tika.parser.chm;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.parser.chm.accessor.ChmItsfHeader;
 import org.apache.tika.parser.chm.accessor.ChmItspHeader;
 import org.apache.tika.parser.chm.core.ChmCommons;
@@ -27,8 +28,6 @@ import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
-import java.io.UnsupportedEncodingException;
-
 /**
  * Tests all public methods of the ChmItspHeader
  * 
@@ -136,9 +135,9 @@ public class TestChmItspHeader {
     }
 
     @Test
-    public void testGetSignature() throws UnsupportedEncodingException {
+    public void testGetSignature() {
         assertEquals(TestParameters.VP_ISTP_SIGNATURE, new String(
-                chmItspHeader.getSignature(), "UTF-8"));
+                chmItspHeader.getSignature(), IOUtils.UTF_8));
     }
 
     @Test
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxState.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxState.java
index f41fc1757..fefc03506 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxState.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxState.java
@@ -21,6 +21,7 @@ import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.parser.chm.accessor.ChmDirectoryListingSet;
 import org.apache.tika.parser.chm.accessor.ChmItsfHeader;
 import org.apache.tika.parser.chm.accessor.ChmItspHeader;
@@ -64,7 +65,7 @@ public class TestChmLzxState {
                 ChmConstants.CONTROL_DATA);
 
         int indexOfResetTable = ChmCommons.indexOfResetTableBlock(data,
-                ChmConstants.LZXC.getBytes("UTF-8"));
+                ChmConstants.LZXC.getBytes(IOUtils.UTF_8));
         byte[] dir_chunk = null;
         if (indexOfResetTable > 0) {
             // dir_chunk = Arrays.copyOfRange( data, indexOfResetTable,
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxcControlData.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxcControlData.java
index 5ff1528d4..15a313b95 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxcControlData.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxcControlData.java
@@ -20,6 +20,7 @@ import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.parser.chm.accessor.ChmDirectoryListingSet;
 import org.apache.tika.parser.chm.accessor.ChmItsfHeader;
 import org.apache.tika.parser.chm.accessor.ChmItspHeader;
@@ -29,8 +30,6 @@ import org.apache.tika.parser.chm.core.ChmConstants;
 import org.junit.Before;
 import org.junit.Test;
 
-import java.io.UnsupportedEncodingException;
-
 /**
  * Tests all public methods of ChmLzxcControlData block
  */
@@ -62,7 +61,7 @@ public class TestChmLzxcControlData {
         int indexOfControlData = chmDirListCont.getControlDataIndex();
 
         int indexOfResetTable = ChmCommons.indexOfResetTableBlock(data,
-                ChmConstants.LZXC.getBytes("UTF-8"));
+                ChmConstants.LZXC.getBytes(IOUtils.UTF_8));
         byte[] dir_chunk = null;
         if (indexOfResetTable > 0) {
             // dir_chunk = Arrays.copyOfRange( data, indexOfResetTable,
@@ -129,16 +128,16 @@ public class TestChmLzxcControlData {
     }
 
     @Test
-    public void testGetSignature() throws UnsupportedEncodingException {
+    public void testGetSignature() {
         assertEquals(
-                TestParameters.VP_CONTROL_DATA_SIGNATURE.getBytes("UTF-8").length,
+                TestParameters.VP_CONTROL_DATA_SIGNATURE.getBytes(IOUtils.UTF_8).length,
                 chmLzxcControlData.getSignature().length);
     }
 
     @Test
-    public void testGetSignaure() throws UnsupportedEncodingException {
+    public void testGetSignaure() {
         assertEquals(
-                TestParameters.VP_CONTROL_DATA_SIGNATURE.getBytes("UTF-8").length,
+                TestParameters.VP_CONTROL_DATA_SIGNATURE.getBytes(IOUtils.UTF_8).length,
                 chmLzxcControlData.getSignature().length);
     }
 
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxcResetTable.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxcResetTable.java
index 6e9a0c834..84a35aa74 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxcResetTable.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxcResetTable.java
@@ -20,6 +20,7 @@ package org.apache.tika.parser.chm;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.parser.chm.accessor.ChmDirectoryListingSet;
 import org.apache.tika.parser.chm.accessor.ChmItsfHeader;
 import org.apache.tika.parser.chm.accessor.ChmItspHeader;
@@ -59,7 +60,7 @@ public class TestChmLzxcResetTable {
         int indexOfControlData = chmDirListCont.getControlDataIndex();
 
         int indexOfResetTable = ChmCommons.indexOfResetTableBlock(data,
-                ChmConstants.LZXC.getBytes("UTF-8"));
+                ChmConstants.LZXC.getBytes(IOUtils.UTF_8));
         byte[] dir_chunk = null;
         if (indexOfResetTable > 0) {
             // dir_chunk = Arrays.copyOfRange( data, indexOfResetTable,
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestPmglHeader.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestPmglHeader.java
index e9358b7d1..ab5160847 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestPmglHeader.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestPmglHeader.java
@@ -19,14 +19,13 @@ package org.apache.tika.parser.chm;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.parser.chm.accessor.ChmPmglHeader;
 import org.apache.tika.parser.chm.core.ChmCommons;
 import org.apache.tika.parser.chm.core.ChmConstants;
 import org.junit.Before;
 import org.junit.Test;
 
-import java.io.UnsupportedEncodingException;
-
 public class TestPmglHeader {
     ChmPmglHeader chmPmglHeader = null;
 
@@ -46,9 +45,9 @@ public class TestPmglHeader {
     }
 
     @Test
-    public void testChmPmglHeaderGet() throws UnsupportedEncodingException {
+    public void testChmPmglHeaderGet() {
         assertEquals(TestParameters.VP_PMGL_SIGNATURE, new String(
-                chmPmglHeader.getSignature(), "UTF-8"));
+                chmPmglHeader.getSignature(), IOUtils.UTF_8));
     }
 
     @Test
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/code/SourceCodeParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/code/SourceCodeParserTest.java
index e54d09de1..db7aea60c 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/code/SourceCodeParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/code/SourceCodeParserTest.java
@@ -24,6 +24,7 @@ import java.io.ByteArrayInputStream;
 import java.util.Set;
 
 import org.apache.tika.TikaTest;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaCoreProperties;
 import org.apache.tika.mime.MediaType;
@@ -62,7 +63,7 @@ public class SourceCodeParserTest extends TikaTest {
     assertTrue(textContent.length() > 0);
     assertTrue(textContent.indexOf("html") < 0);
     
-    textContent = getText(new ByteArrayInputStream("public class HelloWorld {}".getBytes("UTF-8")), sourceCodeParser, createMetadata("text/x-java-source"));
+    textContent = getText(new ByteArrayInputStream("public class HelloWorld {}".getBytes(IOUtils.UTF_8)), sourceCodeParser, createMetadata("text/x-java-source"));
     assertTrue(textContent.length() > 0);
     assertTrue(textContent.indexOf("html") < 0);
   }
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java
index a0cf15e4b..aafee5dea 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java
@@ -22,6 +22,11 @@ import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.sax.SAXTransformerFactory;
+import javax.xml.transform.sax.TransformerHandler;
+import javax.xml.transform.stream.StreamResult;
+
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -30,14 +35,9 @@ import java.io.Writer;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.regex.Pattern;
-
-import javax.xml.transform.OutputKeys;
-import javax.xml.transform.sax.SAXTransformerFactory;
-import javax.xml.transform.sax.TransformerHandler;
-import javax.xml.transform.stream.StreamResult;
-
 import org.apache.tika.Tika;
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Geographic;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaCoreProperties;
@@ -161,7 +161,7 @@ public class HtmlParserTest {
     public void testCharactersDirectlyUnderBodyElement() throws Exception {
         String test = "<html><body>test</body></html>";
         String content = new Tika().parseToString(
-                new ByteArrayInputStream(test.getBytes("UTF-8")));
+                new ByteArrayInputStream(test.getBytes(IOUtils.UTF_8)));
         assertEquals("test", content);
     }
 
@@ -218,7 +218,7 @@ public class HtmlParserTest {
             + "<body><a href=\"" + relative + "\">test</a></body></html>";
         final List<String> links = new ArrayList<String>();
         new HtmlParser().parse(
-                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                new ByteArrayInputStream(test.getBytes(IOUtils.UTF_8)),
                 new DefaultHandler() {
                     @Override
                     public void startElement(
@@ -243,7 +243,7 @@ public class HtmlParserTest {
         String test =
             "<html><body><table><tr><td>a</td><td>b</td></table></body></html>";
         String content = new Tika().parseToString(
-                new ByteArrayInputStream(test.getBytes("UTF-8")));
+                new ByteArrayInputStream(test.getBytes(IOUtils.UTF_8)));
         assertContains("a", content);
         assertContains("b", content);
         assertFalse(content.contains("ab"));
@@ -294,7 +294,7 @@ public class HtmlParserTest {
             "<html><head><title>\u017d</title></head><body></body></html>";
         Metadata metadata = new Metadata();
         new HtmlParser().parse (
-                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                new ByteArrayInputStream(test.getBytes(IOUtils.UTF_8)),
                 new BodyContentHandler(),  metadata, new ParseContext());
         assertEquals("\u017d", metadata.get(TikaCoreProperties.TITLE));
     }
@@ -311,7 +311,7 @@ public class HtmlParserTest {
 
         Metadata metadata = new Metadata();
         new HtmlParser().parse (
-                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                new ByteArrayInputStream(test.getBytes(IOUtils.UTF_8)),
                 new BodyContentHandler(),  metadata, new ParseContext());
         assertEquals("UTF-8", metadata.get(Metadata.CONTENT_ENCODING));
 
@@ -353,7 +353,7 @@ public class HtmlParserTest {
         Metadata metadata = new Metadata();
         metadata.add(Metadata.CONTENT_LANGUAGE, "en");
         new HtmlParser().parse (
-                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                new ByteArrayInputStream(test.getBytes(IOUtils.UTF_8)),
                 new BodyContentHandler(),  metadata, new ParseContext());
 
         assertEquals("en", metadata.get(Metadata.CONTENT_LANGUAGE));
@@ -401,7 +401,7 @@ public class HtmlParserTest {
 
         Metadata metadata = new Metadata();
         new HtmlParser().parse (
-                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                new ByteArrayInputStream(test.getBytes(IOUtils.UTF_8)),
                 new BodyContentHandler(),  metadata, new ParseContext());
         assertEquals("UTF-8", metadata.get(Metadata.CONTENT_ENCODING));
 
@@ -463,7 +463,7 @@ public class HtmlParserTest {
 
         StringWriter sw = new StringWriter();
         new HtmlParser().parse(
-                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                new ByteArrayInputStream(test.getBytes(IOUtils.UTF_8)),
                 makeHtmlTransformer(sw), new Metadata(), new ParseContext());
 
         String result = sw.toString();
@@ -500,7 +500,7 @@ public class HtmlParserTest {
 
         StringWriter sw = new StringWriter();
         new HtmlParser().parse(
-                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                new ByteArrayInputStream(test.getBytes(IOUtils.UTF_8)),
                 makeHtmlTransformer(sw), new Metadata(), new ParseContext());
 
         String result = sw.toString();
@@ -521,7 +521,7 @@ public class HtmlParserTest {
 
         StringWriter sw = new StringWriter();
         new HtmlParser().parse(
-                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                new ByteArrayInputStream(test.getBytes(IOUtils.UTF_8)),
                 makeHtmlTransformer(sw), new Metadata(), new ParseContext());
 
         String result = sw.toString();
@@ -543,7 +543,7 @@ public class HtmlParserTest {
 
         StringWriter sw = new StringWriter();
         new HtmlParser().parse(
-                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                new ByteArrayInputStream(test.getBytes(IOUtils.UTF_8)),
                 makeHtmlTransformer(sw), new Metadata(), new ParseContext());
 
         String result = sw.toString();
@@ -566,7 +566,7 @@ public class HtmlParserTest {
 
         StringWriter sw = new StringWriter();
         new HtmlParser().parse(
-                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                new ByteArrayInputStream(test.getBytes(IOUtils.UTF_8)),
                 makeHtmlTransformer(sw), new Metadata(), new ParseContext());
 
         String result = sw.toString();
@@ -589,7 +589,7 @@ public class HtmlParserTest {
 
         StringWriter sw = new StringWriter();
         new HtmlParser().parse(
-                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                new ByteArrayInputStream(test.getBytes(IOUtils.UTF_8)),
                 makeHtmlTransformer(sw), new Metadata(), new ParseContext());
 
         String result = sw.toString();
@@ -615,7 +615,7 @@ public class HtmlParserTest {
 
         StringWriter sw = new StringWriter();
         new HtmlParser().parse(
-                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                new ByteArrayInputStream(test.getBytes(IOUtils.UTF_8)),
                 makeHtmlTransformer(sw), metadata, new ParseContext());
 
         String result = sw.toString();
@@ -637,7 +637,7 @@ public class HtmlParserTest {
 
         StringWriter sw1 = new StringWriter();
         new HtmlParser().parse(
-                new ByteArrayInputStream(test1.getBytes("UTF-8")),
+                new ByteArrayInputStream(test1.getBytes(IOUtils.UTF_8)),
                 makeHtmlTransformer(sw1), new Metadata(), new ParseContext());
 
         String result = sw1.toString();
@@ -658,7 +658,7 @@ public class HtmlParserTest {
 
         StringWriter sw2 = new StringWriter();
         new HtmlParser().parse(
-                new ByteArrayInputStream(test2.getBytes("UTF-8")),
+                new ByteArrayInputStream(test2.getBytes(IOUtils.UTF_8)),
                 makeHtmlTransformer(sw2), new Metadata(), new ParseContext());
 
         result = sw2.toString();
@@ -710,7 +710,7 @@ public class HtmlParserTest {
 
         StringWriter sw = new StringWriter();
         new HtmlParser().parse(
-                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                new ByteArrayInputStream(test.getBytes(IOUtils.UTF_8)),
                 makeHtmlTransformer(sw), new Metadata(), new ParseContext());
 
         String result = sw.toString();
@@ -792,7 +792,7 @@ public class HtmlParserTest {
         StringWriter sw = new StringWriter();
 
         new HtmlParser().parse (
-                new ByteArrayInputStream(html.getBytes("UTF-8")),
+                new ByteArrayInputStream(html.getBytes(IOUtils.UTF_8)),
                 makeHtmlTransformer(sw),  metadata, parseContext);
 
         String result = sw.toString();
@@ -813,7 +813,7 @@ public class HtmlParserTest {
 
         BodyContentHandler handler = new BodyContentHandler();
         new HtmlParser().parse(
-                new ByteArrayInputStream(html.getBytes("UTF-8")),
+                new ByteArrayInputStream(html.getBytes(IOUtils.UTF_8)),
                 handler,  new Metadata(), new ParseContext());
 
         // Make sure we get <tab>, "one", newline, newline
@@ -1010,7 +1010,7 @@ public class HtmlParserTest {
         Metadata metadata = new Metadata();
         
         new HtmlParser().parse (
-                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                new ByteArrayInputStream(test.getBytes(IOUtils.UTF_8)),
                 new BodyContentHandler(),  metadata, new ParseContext());
 
         //Expecting first title to be set in meta data and second one to be ignored.
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java
index a6ca39e5a..fac5fb82d 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java
@@ -20,6 +20,7 @@ import javax.xml.transform.OutputKeys;
 import javax.xml.transform.sax.SAXTransformerFactory;
 import javax.xml.transform.sax.TransformerHandler;
 import javax.xml.transform.stream.StreamResult;
+
 import java.io.ByteArrayOutputStream;
 import java.io.InputStream;
 import java.io.PrintStream;
@@ -27,9 +28,9 @@ import java.io.StringWriter;
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
-
 import org.apache.tika.TikaTest;
 import org.apache.tika.exception.EncryptedDocumentException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.Office;
@@ -1035,13 +1036,13 @@ public class OOXMLParserTest extends TikaTest {
             
             //grab stderr
             ByteArrayOutputStream errContent = new ByteArrayOutputStream();
-            System.setErr(new PrintStream(errContent, true, "UTF-8"));
+            System.setErr(new PrintStream(errContent, true, IOUtils.UTF_8.name()));
             parser.parse(input, handler, metadata, context);
             
             //return stderr
             System.setErr(origErr);
             
-            String err = errContent.toString("UTF-8");
+            String err = errContent.toString(IOUtils.UTF_8.name());
             assertTrue(err.length() == 0);
             input.close();
         }
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/mp3/MpegStreamTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/mp3/MpegStreamTest.java
index 7e400f290..cda2ff03a 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/mp3/MpegStreamTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/mp3/MpegStreamTest.java
@@ -25,7 +25,7 @@ import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
-
+import org.apache.tika.io.IOUtils;
 import org.junit.After;
 import org.junit.Test;
 
@@ -157,7 +157,7 @@ public class MpegStreamTest
     public void testSkipNoCurrentHeader() throws IOException
     {
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
-        bos.write("This is a test".getBytes("UTF-8"));
+        bos.write("This is a test".getBytes(IOUtils.UTF_8));
         ByteArrayInputStream in = new ByteArrayInputStream(bos.toByteArray());
         stream = new MpegStream(in);
         assertFalse("Wrong result", stream.skipFrame());
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/pkg/Seven7ParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/pkg/Seven7ParserTest.java
index 9dda39273..01e55c680 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/pkg/Seven7ParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/pkg/Seven7ParserTest.java
@@ -124,7 +124,7 @@ public class Seven7ParserTest extends AbstractPkgTest {
            assertTrue("Modified at " + mod, mod.startsWith("20"));
        }
     }
-    
+
     @Test
     public void testPasswordProtected() throws Exception {
         Parser parser = new AutoDetectParser();
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/txt/TXTParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/txt/TXTParserTest.java
index 9402d6662..f6436751a 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/txt/TXTParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/txt/TXTParserTest.java
@@ -23,6 +23,7 @@ import static org.junit.Assert.assertNull;
 import java.io.ByteArrayInputStream;
 import java.io.StringWriter;
 
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaCoreProperties;
 import org.apache.tika.parser.ParseContext;
@@ -72,7 +73,7 @@ public class TXTParserTest {
         ContentHandler handler = new BodyContentHandler();
         Metadata metadata = new Metadata();
         parser.parse(
-                new ByteArrayInputStream(text.getBytes("UTF-8")),
+                new ByteArrayInputStream(text.getBytes(IOUtils.UTF_8)),
                 handler, metadata, new ParseContext());
         assertEquals("text/plain; charset=UTF-8", metadata.get(Metadata.CONTENT_TYPE));
         assertEquals("UTF-8", metadata.get(Metadata.CONTENT_ENCODING)); // deprecated
@@ -223,7 +224,7 @@ public class TXTParserTest {
         metadata.set(TikaCoreProperties.LANGUAGE, "en");
 
         parser.parse(
-                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                new ByteArrayInputStream(test.getBytes(IOUtils.UTF_8)),
                 new BodyContentHandler(),  metadata, new ParseContext());
 
         assertEquals("en", metadata.get(TikaCoreProperties.LANGUAGE));
@@ -277,7 +278,7 @@ public class TXTParserTest {
 
         Metadata metadata = new Metadata();
         parser.parse(
-                new ByteArrayInputStream(text.getBytes("UTF-8")),
+                new ByteArrayInputStream(text.getBytes(IOUtils.UTF_8)),
                 new BodyContentHandler(), metadata, new ParseContext());
         assertEquals("text/plain; charset=ISO-8859-1", metadata.get(Metadata.CONTENT_TYPE));
         
@@ -285,7 +286,7 @@ public class TXTParserTest {
         // we get back (see TIKA-868)
         metadata.set(Metadata.CONTENT_TYPE, "application/binary; charset=UTF-8");
         parser.parse(
-                new ByteArrayInputStream(text.getBytes("UTF-8")),
+                new ByteArrayInputStream(text.getBytes(IOUtils.UTF_8)),
                 new BodyContentHandler(), metadata, new ParseContext());
         assertEquals("text/plain; charset=UTF-8", metadata.get(Metadata.CONTENT_TYPE));
     }
diff --git a/tika-server/src/main/java/org/apache/tika/server/CSVMessageBodyWriter.java b/tika-server/src/main/java/org/apache/tika/server/CSVMessageBodyWriter.java
index 4a1812b1a..8aac12683 100644
--- a/tika-server/src/main/java/org/apache/tika/server/CSVMessageBodyWriter.java
+++ b/tika-server/src/main/java/org/apache/tika/server/CSVMessageBodyWriter.java
@@ -17,8 +17,6 @@
 
 package org.apache.tika.server;
 
-import org.apache.tika.metadata.Metadata;
-
 import javax.ws.rs.Produces;
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.MediaType;
@@ -35,6 +33,8 @@ import java.util.ArrayList;
 import java.util.Arrays;
 
 import au.com.bytecode.opencsv.CSVWriter;
+import org.apache.tika.io.IOUtils;
+import org.apache.tika.metadata.Metadata;
 
 @Provider
 @Produces("text/csv")
@@ -54,7 +54,7 @@ public class CSVMessageBodyWriter implements MessageBodyWriter<Metadata> {
       MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream) throws IOException,
       WebApplicationException {
 
-    CSVWriter writer = new CSVWriter(new OutputStreamWriter(entityStream, "UTF-8"));
+    CSVWriter writer = new CSVWriter(new OutputStreamWriter(entityStream, IOUtils.UTF_8));
 
     for (String name : metadata.names()) {
       String[] values = metadata.getValues(name);
diff --git a/tika-server/src/main/java/org/apache/tika/server/HTMLHelper.java b/tika-server/src/main/java/org/apache/tika/server/HTMLHelper.java
index 4c3509db8..9c6514239 100644
--- a/tika-server/src/main/java/org/apache/tika/server/HTMLHelper.java
+++ b/tika-server/src/main/java/org/apache/tika/server/HTMLHelper.java
@@ -40,7 +40,7 @@ public class HTMLHelper {
             throw new IllegalArgumentException("Template Not Found - " + PATH);
         }
         try {
-            String html = IOUtils.toString(htmlStr, "UTF-8");
+            String html = IOUtils.toString(htmlStr, IOUtils.UTF_8.name());
             int bodyAt = html.indexOf(BODY_VAR);
             PRE_BODY = html.substring(0, bodyAt);
             POST_BODY = html.substring(bodyAt + BODY_VAR.length());
diff --git a/tika-server/src/main/java/org/apache/tika/server/JSONMessageBodyWriter.java b/tika-server/src/main/java/org/apache/tika/server/JSONMessageBodyWriter.java
index 1f9a42e55..62ded047f 100644
--- a/tika-server/src/main/java/org/apache/tika/server/JSONMessageBodyWriter.java
+++ b/tika-server/src/main/java/org/apache/tika/server/JSONMessageBodyWriter.java
@@ -17,10 +17,6 @@
 
 package org.apache.tika.server;
 
-import org.apache.tika.exception.TikaException;
-import org.apache.tika.metadata.Metadata;
-import org.apache.tika.metadata.serialization.JsonMetadata;
-
 import javax.ws.rs.Produces;
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.MediaType;
@@ -35,6 +31,11 @@ import java.io.Writer;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 
+import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
+import org.apache.tika.metadata.Metadata;
+import org.apache.tika.metadata.serialization.JsonMetadata;
+
 @Provider
 @Produces(MediaType.APPLICATION_JSON)
 public class JSONMessageBodyWriter implements MessageBodyWriter<Metadata> {
@@ -52,7 +53,7 @@ public class JSONMessageBodyWriter implements MessageBodyWriter<Metadata> {
       MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream) throws IOException,
       WebApplicationException {
         try {
-            Writer writer = new OutputStreamWriter(entityStream, "UTF-8");
+            Writer writer = new OutputStreamWriter(entityStream, IOUtils.UTF_8);
             JsonMetadata.toJson(metadata, writer);
             writer.flush();
         } catch (TikaException e) {
diff --git a/tika-server/src/main/java/org/apache/tika/server/MetadataListMessageBodyWriter.java b/tika-server/src/main/java/org/apache/tika/server/MetadataListMessageBodyWriter.java
index 00fa92451..b4c37472c 100644
--- a/tika-server/src/main/java/org/apache/tika/server/MetadataListMessageBodyWriter.java
+++ b/tika-server/src/main/java/org/apache/tika/server/MetadataListMessageBodyWriter.java
@@ -17,15 +17,13 @@
 
 package org.apache.tika.server;
 
-import org.apache.tika.exception.TikaException;
-import org.apache.tika.metadata.serialization.JsonMetadataList;
-
 import javax.ws.rs.Produces;
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.MultivaluedMap;
 import javax.ws.rs.ext.MessageBodyWriter;
 import javax.ws.rs.ext.Provider;
+
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
@@ -33,6 +31,10 @@ import java.io.Writer;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 
+import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
+import org.apache.tika.metadata.serialization.JsonMetadataList;
+
 @Provider
 @Produces(MediaType.APPLICATION_JSON)
 public class MetadataListMessageBodyWriter implements MessageBodyWriter<MetadataList> {
@@ -53,7 +55,7 @@ public class MetadataListMessageBodyWriter implements MessageBodyWriter<Metadata
       MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream) throws IOException,
       WebApplicationException {
         try {
-            Writer writer = new OutputStreamWriter(entityStream, "UTF-8");
+            Writer writer = new OutputStreamWriter(entityStream, IOUtils.UTF_8);
             JsonMetadataList.toJson(list.getMetadata(), writer);
             writer.flush();
         } catch (TikaException e) {
diff --git a/tika-server/src/main/java/org/apache/tika/server/TextMessageBodyWriter.java b/tika-server/src/main/java/org/apache/tika/server/TextMessageBodyWriter.java
index dbfdf951d..c59ed5fc7 100644
--- a/tika-server/src/main/java/org/apache/tika/server/TextMessageBodyWriter.java
+++ b/tika-server/src/main/java/org/apache/tika/server/TextMessageBodyWriter.java
@@ -17,23 +17,22 @@
 
 package org.apache.tika.server;
 
-import au.com.bytecode.opencsv.CSVWriter;
-import org.apache.tika.metadata.Metadata;
-
 import javax.ws.rs.Produces;
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.MultivaluedMap;
 import javax.ws.rs.ext.MessageBodyWriter;
 import javax.ws.rs.ext.Provider;
+
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
 import java.io.Writer;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Arrays;
+
+import org.apache.tika.io.IOUtils;
+import org.apache.tika.metadata.Metadata;
 
 /**
  * Returns simple text string for a particular metadata value.
@@ -63,7 +62,7 @@ public class TextMessageBodyWriter implements MessageBodyWriter<Metadata> {
     if (metadata.names().length != 1) {
       throw new WebApplicationException("Metadata object must only have one entry!");
     }
-    Writer writer = new OutputStreamWriter(entityStream, "UTF-8");
+    Writer writer = new OutputStreamWriter(entityStream, IOUtils.UTF_8);
 
     for (String name : metadata.names()) {
       writer.write(metadata.get(name));
diff --git a/tika-server/src/main/java/org/apache/tika/server/TikaResource.java b/tika-server/src/main/java/org/apache/tika/server/TikaResource.java
index 891e97431..f3719f439 100644
--- a/tika-server/src/main/java/org/apache/tika/server/TikaResource.java
+++ b/tika-server/src/main/java/org/apache/tika/server/TikaResource.java
@@ -57,6 +57,7 @@ import org.apache.tika.config.TikaConfig;
 import org.apache.tika.detect.Detector;
 import org.apache.tika.exception.EncryptedDocumentException;
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaMetadataKeys;
@@ -179,7 +180,8 @@ public class TikaResource {
         field.setBoolean(object, Boolean.parseBoolean(httpHeaders.getFirst(key)));
       }
     } catch (Throwable ex) {
-      throw new WebApplicationException(String.format("%s is an invalid %s header", key, X_TIKA_OCR_HEADER_PREFIX));
+      throw new WebApplicationException(String.format(Locale.ROOT,
+              "%s is an invalid %s header", key, X_TIKA_OCR_HEADER_PREFIX));
     }
   }
 
@@ -256,7 +258,7 @@ public static void fillMetadata(AutoDetectParser parser, Metadata metadata, Pars
 
     return new StreamingOutput() {
       public void write(OutputStream outputStream) throws IOException, WebApplicationException {
-        Writer writer = new OutputStreamWriter(outputStream, "UTF-8");
+        Writer writer = new OutputStreamWriter(outputStream, IOUtils.UTF_8);
 
         BodyContentHandler body = new BodyContentHandler(new RichTextContentHandler(writer));
 
@@ -346,7 +348,7 @@ public static void fillMetadata(AutoDetectParser parser, Metadata metadata, Pars
     return new StreamingOutput() {
       public void write(OutputStream outputStream)
         throws IOException, WebApplicationException {
-        Writer writer = new OutputStreamWriter(outputStream, "UTF-8");
+        Writer writer = new OutputStreamWriter(outputStream, IOUtils.UTF_8);
         ContentHandler content;
 
         try {
@@ -354,7 +356,7 @@ public static void fillMetadata(AutoDetectParser parser, Metadata metadata, Pars
           TransformerHandler handler = factory.newTransformerHandler( );
           handler.getTransformer().setOutputProperty(OutputKeys.METHOD, format);
           handler.getTransformer().setOutputProperty(OutputKeys.INDENT, "yes");
-          handler.getTransformer().setOutputProperty(OutputKeys.ENCODING, "UTF-8");
+          handler.getTransformer().setOutputProperty(OutputKeys.ENCODING, IOUtils.UTF_8.name());
           handler.setResult(new StreamResult(writer));
           content = new ExpandedTitleContentHandler( handler );
         }
diff --git a/tika-server/src/main/java/org/apache/tika/server/UnpackerResource.java b/tika-server/src/main/java/org/apache/tika/server/UnpackerResource.java
index fe1158234..1d80c9e7c 100644
--- a/tika-server/src/main/java/org/apache/tika/server/UnpackerResource.java
+++ b/tika-server/src/main/java/org/apache/tika/server/UnpackerResource.java
@@ -17,6 +17,15 @@
 
 package org.apache.tika.server;
 
+import javax.ws.rs.PUT;
+import javax.ws.rs.Path;
+import javax.ws.rs.Produces;
+import javax.ws.rs.WebApplicationException;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.HttpHeaders;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.UriInfo;
+
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -29,15 +38,6 @@ import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
 
-import javax.ws.rs.PUT;
-import javax.ws.rs.Path;
-import javax.ws.rs.Produces;
-import javax.ws.rs.WebApplicationException;
-import javax.ws.rs.core.Context;
-import javax.ws.rs.core.HttpHeaders;
-import javax.ws.rs.core.Response;
-import javax.ws.rs.core.UriInfo;
-
 import au.com.bytecode.opencsv.CSVWriter;
 import org.apache.commons.lang.mutable.MutableInt;
 import org.apache.commons.logging.Log;
@@ -116,7 +116,7 @@ public class UnpackerResource {
     ByteArrayOutputStream text = new ByteArrayOutputStream();
 
     if (saveAll) {
-      ch = new BodyContentHandler(new RichTextContentHandler(new OutputStreamWriter(text, "UTF-8")));
+      ch = new BodyContentHandler(new RichTextContentHandler(new OutputStreamWriter(text, org.apache.tika.io.IOUtils.UTF_8)));
     } else {
       ch = new DefaultHandler();
     }
@@ -155,7 +155,7 @@ public class UnpackerResource {
   }
 
   public static void metadataToCsv(Metadata metadata, OutputStream outputStream) throws IOException {
-    CSVWriter writer = new CSVWriter(new OutputStreamWriter(outputStream, "UTF-8"));
+    CSVWriter writer = new CSVWriter(new OutputStreamWriter(outputStream, org.apache.tika.io.IOUtils.UTF_8));
 
     for (String name : metadata.names()) {
       String[] values = metadata.getValues(name);
diff --git a/tika-server/src/main/java/org/apache/tika/server/XMPMessageBodyWriter.java b/tika-server/src/main/java/org/apache/tika/server/XMPMessageBodyWriter.java
index 63a264281..73bb001e4 100644
--- a/tika-server/src/main/java/org/apache/tika/server/XMPMessageBodyWriter.java
+++ b/tika-server/src/main/java/org/apache/tika/server/XMPMessageBodyWriter.java
@@ -17,16 +17,13 @@
 
 package org.apache.tika.server;
 
-import org.apache.tika.exception.TikaException;
-import org.apache.tika.metadata.Metadata;
-import org.apache.tika.xmp.XMPMetadata;
-
 import javax.ws.rs.Produces;
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.MultivaluedMap;
 import javax.ws.rs.ext.MessageBodyWriter;
 import javax.ws.rs.ext.Provider;
+
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
@@ -34,6 +31,11 @@ import java.io.Writer;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 
+import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
+import org.apache.tika.metadata.Metadata;
+import org.apache.tika.xmp.XMPMetadata;
+
 @Provider
 @Produces("application/rdf+xml")
 public class XMPMessageBodyWriter implements MessageBodyWriter<Metadata> {
@@ -53,7 +55,7 @@ public class XMPMessageBodyWriter implements MessageBodyWriter<Metadata> {
           MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream) throws IOException,
         WebApplicationException {
             try {
-                Writer writer = new OutputStreamWriter(entityStream, "UTF-8");
+                Writer writer = new OutputStreamWriter(entityStream, IOUtils.UTF_8);
                 XMPMetadata xmp = new XMPMetadata(metadata);
                 writer.write(xmp.toString());
                 writer.flush();
diff --git a/tika-server/src/test/java/org/apache/tika/server/CXFTestBase.java b/tika-server/src/test/java/org/apache/tika/server/CXFTestBase.java
index 50f79019d..9ebf85f6a 100644
--- a/tika-server/src/test/java/org/apache/tika/server/CXFTestBase.java
+++ b/tika-server/src/test/java/org/apache/tika/server/CXFTestBase.java
@@ -17,8 +17,8 @@
 
 package org.apache.tika.server;
 
-import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -126,7 +126,7 @@ public abstract class CXFTestBase {
 
         zip.close();
         tempFile.delete();
-		return bos.toString("UTF-8");
+		return bos.toString(IOUtils.UTF_8.name());
 	}
 
 	protected Map<String, String> readArchiveFromStream(ArchiveInputStream zip) throws IOException {
diff --git a/tika-server/src/test/java/org/apache/tika/server/MetadataResourceTest.java b/tika-server/src/test/java/org/apache/tika/server/MetadataResourceTest.java
index 3284e1605..bf8166600 100644
--- a/tika-server/src/test/java/org/apache/tika/server/MetadataResourceTest.java
+++ b/tika-server/src/test/java/org/apache/tika/server/MetadataResourceTest.java
@@ -17,24 +17,20 @@
 
 package org.apache.tika.server;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
 
+import au.com.bytecode.opencsv.CSVReader;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.Reader;
-import java.io.StringWriter;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-
-import javax.ws.rs.core.MediaType;
-import javax.ws.rs.core.Response;
-
 import org.apache.cxf.helpers.IOUtils;
 import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
 import org.apache.cxf.jaxrs.client.WebClient;
@@ -44,7 +40,8 @@ import org.apache.tika.metadata.serialization.JsonMetadata;
 import org.junit.Assert;
 import org.junit.Test;
 
-import au.com.bytecode.opencsv.CSVReader;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 
 public class MetadataResourceTest extends CXFTestBase {
     private static final String META_PATH = "/meta";
@@ -75,7 +72,7 @@ public class MetadataResourceTest extends CXFTestBase {
                 .put(ClassLoader
                         .getSystemResourceAsStream(TikaResourceTest.TEST_DOC));
 
-        Reader reader = new InputStreamReader((InputStream) response.getEntity(), "UTF-8");
+        Reader reader = new InputStreamReader((InputStream) response.getEntity(), org.apache.tika.io.IOUtils.UTF_8);
 
         CSVReader csvReader = new CSVReader(reader);
 
@@ -125,7 +122,7 @@ public class MetadataResourceTest extends CXFTestBase {
         assertEquals(200, response.getStatus());
 
         // Check results
-        Reader reader = new InputStreamReader((InputStream) response.getEntity(), "UTF-8");
+        Reader reader = new InputStreamReader((InputStream) response.getEntity(), org.apache.tika.io.IOUtils.UTF_8);
         CSVReader csvReader = new CSVReader(reader);
 
         Map<String, String> metadata = new HashMap<String, String>();
@@ -149,7 +146,7 @@ public class MetadataResourceTest extends CXFTestBase {
                 .put(ClassLoader
                         .getSystemResourceAsStream(TikaResourceTest.TEST_DOC));
 
-        Reader reader = new InputStreamReader((InputStream) response.getEntity(), "UTF-8");
+        Reader reader = new InputStreamReader((InputStream) response.getEntity(), org.apache.tika.io.IOUtils.UTF_8);
 
         Metadata metadata = JsonMetadata.fromJson(reader);
         assertNotNull(metadata.get("Author"));
@@ -207,7 +204,8 @@ public class MetadataResourceTest extends CXFTestBase {
         Response response = WebClient.create(endPoint + META_PATH + "/Author").type("application/msword")
                 .accept(MediaType.APPLICATION_JSON).put(copy(stream, 12000));
         Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());
-        Metadata metadata = JsonMetadata.fromJson(new InputStreamReader((InputStream)response.getEntity()));
+        Metadata metadata = JsonMetadata.fromJson(new InputStreamReader(
+                (InputStream)response.getEntity(), org.apache.tika.io.IOUtils.UTF_8));
         assertEquals("Maxim Valyanskiy", metadata.get("Author"));
         assertEquals(1, metadata.names().length);
     }
diff --git a/tika-server/src/test/java/org/apache/tika/server/RecursiveMetadataResourceTest.java b/tika-server/src/test/java/org/apache/tika/server/RecursiveMetadataResourceTest.java
index 453e838af..bef00bd38 100644
--- a/tika-server/src/test/java/org/apache/tika/server/RecursiveMetadataResourceTest.java
+++ b/tika-server/src/test/java/org/apache/tika/server/RecursiveMetadataResourceTest.java
@@ -17,19 +17,20 @@
 
 package org.apache.tika.server;
 
-import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
-import org.apache.cxf.jaxrs.client.WebClient;
-import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;
-import org.apache.tika.metadata.Metadata;
-import org.apache.tika.metadata.serialization.JsonMetadataList;
-import org.junit.Test;
-
 import javax.ws.rs.core.Response;
+
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.Reader;
 import java.util.ArrayList;
 import java.util.List;
+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
+import org.apache.cxf.jaxrs.client.WebClient;
+import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;
+import org.apache.tika.io.IOUtils;
+import org.apache.tika.metadata.Metadata;
+import org.apache.tika.metadata.serialization.JsonMetadataList;
+import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -60,7 +61,7 @@ public class RecursiveMetadataResourceTest extends CXFTestBase {
                 .put(ClassLoader
                         .getSystemResourceAsStream(TEST_RECURSIVE_DOC));
 
-        Reader reader = new InputStreamReader((InputStream) response.getEntity(), "UTF-8");
+        Reader reader = new InputStreamReader((InputStream) response.getEntity(), IOUtils.UTF_8);
         List<Metadata> metadataList = JsonMetadataList.fromJson(reader);
 
         assertEquals(11, metadataList.size());
@@ -92,7 +93,7 @@ public class RecursiveMetadataResourceTest extends CXFTestBase {
         assertEquals(200, response.getStatus());
 
         // Check results
-        Reader reader = new InputStreamReader((InputStream) response.getEntity(), "UTF-8");
+        Reader reader = new InputStreamReader((InputStream) response.getEntity(), IOUtils.UTF_8);
         List<Metadata> metadataList = JsonMetadataList.fromJson(reader);
         assertNotNull(metadataList.get(0).get("Author"));
         assertEquals("pavel", metadataList.get(0).get("Author"));
diff --git a/tika-translate/src/main/java/org/apache/tika/language/translate/GoogleTranslator.java b/tika-translate/src/main/java/org/apache/tika/language/translate/GoogleTranslator.java
index 43d0dd869..6dfd756b7 100644
--- a/tika-translate/src/main/java/org/apache/tika/language/translate/GoogleTranslator.java
+++ b/tika-translate/src/main/java/org/apache/tika/language/translate/GoogleTranslator.java
@@ -17,22 +17,22 @@
 
 package org.apache.tika.language.translate;
 
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+
 import java.io.BufferedReader;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.util.Properties;
 import java.util.logging.Logger;
 
-import javax.ws.rs.core.MediaType;
-import javax.ws.rs.core.Response;
-
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import org.apache.cxf.jaxrs.client.WebClient;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.language.LanguageIdentifier;
 import org.apache.tika.language.LanguageProfile;
 
-import com.fasterxml.jackson.databind.JsonNode;
-import com.fasterxml.jackson.databind.ObjectMapper;
-
 /**
  * An implementation of a REST client to the <a
  * href="https://www.googleapis.com/language/translate/v2">Google Translate v2
@@ -85,7 +85,7 @@ public class GoogleTranslator implements Translator {
 				.query("key", apiKey).query("source", sourceLanguage)
 				.query("target", targetLanguage).query("q", text).get();
 		BufferedReader reader = new BufferedReader(new InputStreamReader(
-				(InputStream) response.getEntity(), "UTF-8"));
+				(InputStream) response.getEntity(), IOUtils.UTF_8));
 		String line = null;
 		StringBuffer responseText = new StringBuffer();
 		while ((line = reader.readLine()) != null) {
diff --git a/tika-translate/src/main/java/org/apache/tika/language/translate/Lingo24Translator.java b/tika-translate/src/main/java/org/apache/tika/language/translate/Lingo24Translator.java
index 750599e09..8bc5423ad 100644
--- a/tika-translate/src/main/java/org/apache/tika/language/translate/Lingo24Translator.java
+++ b/tika-translate/src/main/java/org/apache/tika/language/translate/Lingo24Translator.java
@@ -17,20 +17,22 @@
 
 package org.apache.tika.language.translate;
 
-import com.fasterxml.jackson.databind.JsonNode;
-import com.fasterxml.jackson.databind.ObjectMapper;
-import org.apache.cxf.jaxrs.client.WebClient;
-import org.apache.tika.exception.TikaException;
-import org.apache.tika.language.LanguageIdentifier;
-import org.apache.tika.language.LanguageProfile;
-
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
+
 import java.io.BufferedReader;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.util.Properties;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.apache.cxf.jaxrs.client.WebClient;
+import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
+import org.apache.tika.language.LanguageIdentifier;
+import org.apache.tika.language.LanguageProfile;
+
 /**
  * An implementation of a REST client for the
  * <a href="https://developer.lingo24.com/premium-machine-translation-api">Premium MT API v1</a>.
@@ -76,7 +78,7 @@ public class Lingo24Translator implements Translator {
                 .query("user_key", userKey).query("source", sourceLanguage)
                 .query("target", targetLanguage).query("q", text).get();
         BufferedReader reader = new BufferedReader(new InputStreamReader(
-                (InputStream) response.getEntity(), "UTF-8"));
+                (InputStream) response.getEntity(), IOUtils.UTF_8));
         String line = null;
         StringBuffer responseText = new StringBuffer();
         while ((line = reader.readLine()) != null) {
