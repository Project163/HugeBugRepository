diff --git a/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/grib/GribParser.java b/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/grib/GribParser.java
index c0069f594..a5b21b08e 100644
--- a/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/grib/GribParser.java
+++ b/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/grib/GribParser.java
@@ -17,12 +17,15 @@
 
 package org.apache.tika.parser.grib;
 
-import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.StandardCopyOption;
 import java.util.Collections;
 import java.util.Set;
 
+import org.apache.commons.io.FileUtils;
 import org.xml.sax.ContentHandler;
 import org.xml.sax.SAXException;
 import ucar.nc2.Attribute;
@@ -32,8 +35,6 @@ import ucar.nc2.Variable;
 import ucar.nc2.dataset.NetcdfDataset;
 
 import org.apache.tika.exception.TikaException;
-import org.apache.tika.io.TemporaryResources;
-import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.Property;
 import org.apache.tika.metadata.TikaCoreProperties;
@@ -58,13 +59,17 @@ public class GribParser extends AbstractParser {
 
         //Set MIME type as grib2
         metadata.set(Metadata.CONTENT_TYPE, GRIB_MIME_TYPE);
-
-        TikaInputStream tis = TikaInputStream.get(stream, new TemporaryResources());
-        File gribFile = tis.getFile();
+        //grib was not cleaning up its temp files no matter what we tried
+        //this is a work around the creates a temp directory then copies the full input file
+        //into that tmp directory.  We then delete the directory in the finally statement.
+        Path tmpDir = Files.createTempDirectory("tika-grib-");
 
         try {
             XHTMLContentHandler xhtml;
-            try (NetcdfFile ncFile = NetcdfDataset.openFile(gribFile.getAbsolutePath(), null)) {
+            Path gribFile = Files.createTempFile(tmpDir, "tika-file", ".grib2");
+            Files.copy(stream, gribFile, StandardCopyOption.REPLACE_EXISTING);
+
+            try (NetcdfFile ncFile = NetcdfDataset.openFile(gribFile.toString(), null)) {
 
                 // first parse out the set of global attributes
                 for (Attribute attr : ncFile.getGlobalAttributes()) {
@@ -111,6 +116,8 @@ public class GribParser extends AbstractParser {
 
         } catch (IOException e) {
             throw new TikaException("NetCDF parse error", e);
+        } finally {
+            FileUtils.deleteDirectory(tmpDir.toFile());
         }
     }
 
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDFParser.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDFParser.java
index a4e293a58..b3233c35e 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDFParser.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDFParser.java
@@ -142,11 +142,16 @@ public class PDFParser extends AbstractParser implements RenderingParser, Initia
 
         String password = "";
         PDFRenderingState incomingRenderingState = context.get(PDFRenderingState.class);
+        TikaInputStream tstream = null;
+        boolean shouldClose = false;
         try {
-            TikaInputStream tstream;
             if (shouldSpool(localConfig)) {
-                tstream = TikaInputStream.get(stream);
-                tstream.getPath();
+                if (stream instanceof TikaInputStream) {
+                    tstream = (TikaInputStream) stream;
+                } else {
+                    tstream = TikaInputStream.get(new CloseShieldInputStream(stream));
+                    shouldClose = true;
+                }
                 context.set(PDFRenderingState.class, new PDFRenderingState(tstream));
             } else {
                 tstream = TikaInputStream.cast(stream);
@@ -166,12 +171,15 @@ public class PDFParser extends AbstractParser implements RenderingParser, Initia
                 pdfDocument = getPDDocument(new CloseShieldInputStream(stream), password,
                         memoryUsageSetting, metadata, context);
             }
+            if (tstream != null) {
+                tstream.setOpenContainer(pdfDocument);
+            }
+
             boolean hasXFA = hasXFA(pdfDocument, metadata);
             boolean hasMarkedContent = hasMarkedContent(pdfDocument, metadata);
             extractMetadata(pdfDocument, metadata, context);
             AccessChecker checker = localConfig.getAccessChecker();
             checker.check(metadata);
-            tstream.setOpenContainer(pdfDocument);
             renderPagesBeforeParse(tstream, handler, metadata, context, localConfig);
             if (handler != null) {
                 if (shouldHandleXFAOnly(hasXFA, localConfig)) {
@@ -204,6 +212,9 @@ public class PDFParser extends AbstractParser implements RenderingParser, Initia
             } finally {
                 //replace the one that was here
                 context.set(PDFRenderingState.class, incomingRenderingState);
+                if (shouldClose && tstream != null) {
+                    tstream.close();
+                }
             }
         }
     }
