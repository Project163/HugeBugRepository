diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/FieldAccessMode.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/FieldAccessMode.java
index e1de549c..42bc13f1 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/FieldAccessMode.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/FieldAccessMode.java
@@ -135,6 +135,13 @@ public class FieldAccessMode extends BaseAccessMode {
         public boolean isNillable(final boolean global) {
             return global;
         }
+
+        @Override
+        public String toString() {
+            return "FieldDecoratedType{" +
+                    "field=" + field +
+                    '}';
+        }
     }
 
     public static class FieldWriter extends FieldDecoratedType implements Writer {
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/FieldAndMethodAccessMode.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/FieldAndMethodAccessMode.java
index ea5a6516..d1e12111 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/FieldAndMethodAccessMode.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/FieldAndMethodAccessMode.java
@@ -95,7 +95,12 @@ public class FieldAndMethodAccessMode extends BaseAccessMode {
 
             final Reader existing = readers.get(entry.getKey());
             if (existing == null) {
-                readers.put(entry.getKey(), entry.getValue());
+                if (f != null) { // useful to hold the Field and transient state for example, just as fallback
+                    readers.put(entry.getKey(), new CompositeReader(
+                            entry.getValue(), new FieldAccessMode.FieldReader(f, f.getType())));
+                } else {
+                    readers.put(entry.getKey(), entry.getValue());
+                }
             } else {
                 readers.put(entry.getKey(), new CompositeReader(entry.getValue(), existing));
             }
@@ -173,7 +178,12 @@ public class FieldAndMethodAccessMode extends BaseAccessMode {
 
             final Writer existing = writers.get(entry.getKey());
             if (existing == null) {
-                writers.put(entry.getKey(), entry.getValue());
+                if (f != null) { // useful to hold the Field and transient state for example, just as fallback
+                    writers.put(entry.getKey(), new CompositeWriter(
+                            entry.getValue(), new FieldAccessMode.FieldWriter(f, f.getType())));
+                } else {
+                    writers.put(entry.getKey(), entry.getValue());
+                }
             } else {
                 writers.put(entry.getKey(), new CompositeWriter(entry.getValue(), existing));
             }
@@ -231,6 +241,14 @@ public class FieldAndMethodAccessMode extends BaseAccessMode {
         public DecoratedType getType2() {
             return type2;
         }
+
+        @Override
+        public String toString() {
+            return "CompositeDecoratedType{" +
+                    "type1=" + type1 +
+                    ", type2=" + type2 +
+                    '}';
+        }
     }
 
     public static final class CompositeReader extends CompositeDecoratedType<Reader> implements Reader {
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/MethodAccessMode.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/MethodAccessMode.java
index fbaf1678..e35c425e 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/MethodAccessMode.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/MethodAccessMode.java
@@ -142,6 +142,13 @@ public class MethodAccessMode extends BaseAccessMode {
         public boolean isNillable(final boolean global) {
             return global;
         }
+
+        @Override
+        public String toString() {
+            return "MethodDecoratedType{" +
+                    "method=" + method +
+                    '}';
+        }
     }
 
     public static class MethodWriter extends MethodDecoratedType implements Writer {
