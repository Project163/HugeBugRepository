diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
index 606e7a9f..059bf1e2 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
@@ -130,6 +130,7 @@ public class MapperBuilder {
     private Map<Class<?>, String[]> ignoredForFields = new HashMap<Class<?>, String[]>();
     private boolean primitiveConverters;
     private boolean failOnUnknownProperties;
+    private SerializeValueFilter serializeValueFilter;
 
     public Mapper build() {
         if (readerFactory == null || generatorFactory == null) {
@@ -216,7 +217,8 @@ public class MapperBuilder {
                         version, close,
                         skipNull, skipEmptyArray,
                         treatByteArrayAsBase64, treatByteArrayAsBase64URL, readAttributeBeforeWrite,
-                        accessMode, encoding, attributeOrder, enforceQuoteString, failOnUnknownProperties),
+                        accessMode, encoding, attributeOrder, enforceQuoteString, failOnUnknownProperties,
+                        serializeValueFilter),
                 closeables);
     }
 
@@ -395,4 +397,9 @@ public class MapperBuilder {
         this.primitiveConverters = val;
         return this;
     }
+
+    public MapperBuilder setSerializeValueFilter(final SerializeValueFilter serializeValueFilter) {
+        this.serializeValueFilter = serializeValueFilter;
+        return this;
+    }
 }
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
index 983066d2..cbd3437c 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
@@ -64,6 +64,7 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
     private final Comparator<String> attributeOrder;
     private final boolean enforceQuoteString;
     private final boolean failOnUnknown;
+    private final SerializeValueFilter serializeValueFilter;
 
     private final Map<Class<?>, ObjectConverter.Writer<?>> objectConverterWriterCache;
     private final Map<Class<?>, ObjectConverter.Reader<?>> objectConverterReaderCache;
@@ -79,7 +80,8 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
                         final boolean readAttributeBeforeWrite,
                         final AccessMode accessMode, final Charset encoding,
                         final Comparator<String> attributeOrder,
-                        final boolean enforceQuoteString, final boolean failOnUnknown) {
+                        final boolean enforceQuoteString, final boolean failOnUnknown,
+                        final SerializeValueFilter serializeValueFilter) {
     //CHECKSTYLE:ON
         this.objectConverterWriters = objectConverterWriters;
         this.objectConverterReaders = objectConverterReaders;
@@ -96,11 +98,16 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
         this.attributeOrder = attributeOrder;
         this.enforceQuoteString = enforceQuoteString;
         this.failOnUnknown = failOnUnknown;
+        this.serializeValueFilter = serializeValueFilter == null ? (name, value) -> false : serializeValueFilter;
 
         this.objectConverterWriterCache = new HashMap<Class<?>, ObjectConverter.Writer<?>>(objectConverterWriters.size());
         this.objectConverterReaderCache = new HashMap<Class<?>, ObjectConverter.Reader<?>>(objectConverterReaders.size());
     }
 
+    public SerializeValueFilter getSerializeValueFilter() {
+        return serializeValueFilter;
+    }
+
     public Adapter findAdapter(final Type aClass) {
         final Adapter<?, ?> converter = adapters.get(new AdapterKey(aClass, String.class));
         if (converter != null) {
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java
index 107307a4..92609c9f 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java
@@ -292,6 +292,9 @@ public class MappingGeneratorImpl implements MappingGenerator {
                             final String key, final Object value,
                             final ObjectConverter.Writer objectConverter,
                             final Collection<String> ignoredProperties) throws InvocationTargetException, IllegalAccessException {
+        if (config.getSerializeValueFilter().shouldIgnore(key, value)) {
+            return;
+        }
         if (array) {
             final int length = Array.getLength(value);
             if (length == 0 && config.isSkipEmptyArray()) {
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/SerializeValueFilter.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/SerializeValueFilter.java
new file mode 100644
index 00000000..e29fd520
--- /dev/null
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/SerializeValueFilter.java
@@ -0,0 +1,28 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.johnzon.mapper;
+
+public interface SerializeValueFilter {
+    /**
+     * @param name the attribute name if set.
+     * @param value the value which will get serialized.
+     * @return true if the value should be ignored and not serialized.
+     */
+    boolean shouldIgnore(String name, Object value);
+}
diff --git a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java
index ca693f4f..949b2300 100644
--- a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java
+++ b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java
@@ -166,7 +166,7 @@ public class MapperConfigTest {
                                 new FieldAccessMode(true, true),
                                 Charset.forName("UTF-8"),
                                 null,
-                                false, false);
+                                false, false, null);
     }
 
 
diff --git a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/SerializeValueFilterTest.java b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/SerializeValueFilterTest.java
new file mode 100644
index 00000000..aa25f620
--- /dev/null
+++ b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/SerializeValueFilterTest.java
@@ -0,0 +1,46 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.johnzon.mapper;
+
+import org.junit.Test;
+
+import java.util.Collection;
+import java.util.List;
+
+import static java.util.Collections.singleton;
+import static java.util.Collections.singletonList;
+import static org.junit.Assert.assertEquals;
+
+public class SerializeValueFilterTest {
+    @Test
+    public void customIgnore() {
+        // in this test we will serialize lists but not sets or other collection impls
+        final Mapper mapper = new MapperBuilder().setSerializeValueFilter((name, value) -> !List.class.isInstance(value)).build();
+        assertEquals("{\"list\":[\"test\"]}", mapper.writeObjectAsString(new Foo(singletonList("test"))));
+        assertEquals("{}", mapper.writeObjectAsString(new Foo(singleton("test"))));
+    }
+
+    public static class Foo {
+        public Collection<String> list;
+
+        public Foo(final Collection<String> list) {
+            this.list = list;
+        }
+    }
+}
diff --git a/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java b/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java
index 712a8e68..1960d4e4 100644
--- a/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java
+++ b/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java
@@ -71,7 +71,7 @@ public class ExtendMappingTest {
                         public int compare(final String o1, final String o2) {
                             return o1.compareTo(o2);
                         }
-                    }, false, false));
+                    }, false, false, null));
         }
 
         @Override
