diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 60a4600..f601e2a 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -44,6 +44,9 @@ The <action> type attribute can be add,update,fix,remove.
   </properties>
   <body>
     <release version="1.2" date="TBD" description="TBD">
+      <action issue="LOGGING-157" dev="tn" type="fix" due-to="Ville SkyttÃ¤">
+        Fix javadoc to comply with javadoc tool from jdk 1.8.
+      </action>
     </release>
     <release version="1.1.3" date="2013-05-23" description="This is a maintenance release containing bug fixes.">
       <action issue="LOGGING-151" dev="tn" type="fix" due-to="Krzysztof Daniel">
diff --git a/src/main/java/org/apache/commons/logging/Log.java b/src/main/java/org/apache/commons/logging/Log.java
index 947c3e6..049ce3f 100644
--- a/src/main/java/org/apache/commons/logging/Log.java
+++ b/src/main/java/org/apache/commons/logging/Log.java
@@ -43,12 +43,12 @@ package org.apache.commons.logging;
  * to be logged).
  * <p>
  * For example,
- * <code><pre>
+ * <pre>
  *    if (log.isDebugEnabled()) {
  *        ... do something expensive ...
  *        log.debug(theResult);
  *    }
- * </pre></code>
+ * </pre>
  * <p>
  * Configuration of the underlying logging system will generally be done
  * external to the Logging APIs, through whatever mechanism is supported by
diff --git a/src/main/java/org/apache/commons/logging/LogFactory.java b/src/main/java/org/apache/commons/logging/LogFactory.java
index 30a3dbe..52e3891 100644
--- a/src/main/java/org/apache/commons/logging/LogFactory.java
+++ b/src/main/java/org/apache/commons/logging/LogFactory.java
@@ -151,23 +151,23 @@ public abstract class LogFactory {
      * classloaders to be substituted by an alternative implementation.
      * <p>
      * <strong>Note:</strong> <code>LogFactory</code> will print:
-     * <code><pre>
-     * [ERROR] LogFactory: Load of custom hashtable failed</em>
-     * </pre></code>
+     * <pre>
+     * [ERROR] LogFactory: Load of custom hashtable failed
+     * </pre>
      * to system error and then continue using a standard Hashtable.
      * <p>
      * <strong>Usage:</strong> Set this property when Java is invoked
      * and <code>LogFactory</code> will attempt to load a new instance
      * of the given implementation class.
      * For example, running the following ant scriplet:
-     * <code><pre>
+     * <pre>
      *  &lt;java classname="${test.runner}" fork="yes" failonerror="${test.failonerror}"&gt;
      *     ...
      *     &lt;sysproperty
      *        key="org.apache.commons.logging.LogFactory.HashtableImpl"
      *        value="org.apache.commons.logging.AltHashtable"/&gt;
      *  &lt;/java&gt;
-     * </pre></code>
+     * </pre>
      * will mean that <code>LogFactory</code> will load an instance of
      * <code>org.apache.commons.logging.AltHashtable</code>.
      * <p>
@@ -951,8 +951,8 @@ public abstract class LogFactory {
      * implementation class, loaded by the specified class loader.
      * If that fails, try the class loader used to load this
      * (abstract) LogFactory.
-     * <p>
      * <h2>ClassLoader conflicts</h2>
+     * <p>
      * Note that there can be problems if the specified ClassLoader is not the
      * same as the classloader that loaded this class, ie when loading a
      * concrete LogFactory subclass via a context classloader.
diff --git a/src/test/java/org/apache/commons/logging/AltHashtableTestCase.java b/src/test/java/org/apache/commons/logging/AltHashtableTestCase.java
index c70d884..8c8e01c 100644
--- a/src/test/java/org/apache/commons/logging/AltHashtableTestCase.java
+++ b/src/test/java/org/apache/commons/logging/AltHashtableTestCase.java
@@ -23,7 +23,7 @@ import junit.framework.TestCase;
 /**
  * Test the ability to force the LogFactory class to use some
  * arbitrary Hashtable implementation to store its mapping from
- * context-classloader -> LogFactory object.
+ * context-classloader -&gt; LogFactory object.
  */
 public class AltHashtableTestCase extends TestCase {
 
