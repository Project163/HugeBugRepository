diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/pkg/ArParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/pkg/ArParser.java
deleted file mode 100644
index 64a62903a..000000000
--- a/tika-parsers/src/main/java/org/apache/tika/parser/pkg/ArParser.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.tika.parser.pkg;
-
-import java.io.IOException;
-import java.io.InputStream;
-
-import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
-import org.apache.tika.exception.TikaException;
-import org.apache.tika.io.CloseShieldInputStream;
-import org.apache.tika.metadata.Metadata;
-import org.apache.tika.parser.ParseContext;
-import org.xml.sax.ContentHandler;
-import org.xml.sax.SAXException;
-
-/**
- * Ar archive parser.
- */
-public class ArParser extends PackageParser {
-
-    /**
-     * Parses the given stream as an ar archive.
-     */
-    public void parse(
-            InputStream stream, ContentHandler handler,
-            Metadata metadata, ParseContext context)
-            throws IOException, TikaException, SAXException {
-        // At the end we want to close the ar stream to release any associated
-        // resources, but the underlying document stream should not be closed
-        ArArchiveInputStream ar =
-            new ArArchiveInputStream(new CloseShieldInputStream(stream));
-        try {
-            parseArchive(ar, handler, metadata, context);
-        } finally {
-            ar.close();
-        }
-    }
-
-}
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/pkg/Bzip2Parser.java b/tika-parsers/src/main/java/org/apache/tika/parser/pkg/Bzip2Parser.java
deleted file mode 100644
index 0d22bd6c4..000000000
--- a/tika-parsers/src/main/java/org/apache/tika/parser/pkg/Bzip2Parser.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.tika.parser.pkg;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
-
-import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
-import org.apache.tika.exception.TikaException;
-import org.apache.tika.io.CloseShieldInputStream;
-import org.apache.tika.metadata.Metadata;
-import org.apache.tika.mime.MediaType;
-import org.apache.tika.parser.DelegatingParser;
-import org.apache.tika.parser.ParseContext;
-import org.apache.tika.sax.BodyContentHandler;
-import org.apache.tika.sax.EmbeddedContentHandler;
-import org.apache.tika.sax.XHTMLContentHandler;
-import org.xml.sax.ContentHandler;
-import org.xml.sax.SAXException;
-
-/**
- * Bzip2 parser.
- */
-public class Bzip2Parser extends DelegatingParser {
-
-    private static final Set<MediaType> SUPPORTED_TYPES =
-        Collections.unmodifiableSet(new HashSet<MediaType>(Arrays.asList(
-                MediaType.application("x-bzip"),
-                MediaType.application("x-bzip2"))));
-
-    public Set<MediaType> getSupportedTypes(ParseContext context) {
-        return SUPPORTED_TYPES;
-    }
-
-    /**
-     * Parses the given stream as a bzip2 file.
-     */
-    public void parse(
-            InputStream stream, ContentHandler handler,
-            Metadata metadata, ParseContext context)
-            throws IOException, SAXException, TikaException {
-        metadata.set(Metadata.CONTENT_TYPE, "application/x-bzip");
-
-        XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);
-        xhtml.startDocument();
-
-        // At the end we want to close the bzip2 stream to release any associated
-        // resources, but the underlying document stream should not be closed
-        InputStream bzip2 =
-            new BZip2CompressorInputStream(new CloseShieldInputStream(stream));
-        try {
-            Metadata entrydata = new Metadata();
-            String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
-            if (name != null) {
-                if (name.endsWith(".tbz")) {
-                    name = name.substring(0, name.length() - 4) + ".tar";
-                } else if (name.endsWith(".tbz2")) {
-                    name = name.substring(0, name.length() - 5) + ".tar";
-                } else if (name.endsWith(".bz")) {
-                    name = name.substring(0, name.length() - 3);
-                } else if (name.endsWith(".bz2")) {
-                    name = name.substring(0, name.length() - 4);
-                }
-                entrydata.set(Metadata.RESOURCE_NAME_KEY, name);
-            }
-            // Use the delegate parser to parse the compressed document
-            super.parse(
-                    new CloseShieldInputStream(bzip2),
-                    new EmbeddedContentHandler(
-                            new BodyContentHandler(xhtml)),
-                    entrydata, context);
-        } finally {
-            bzip2.close();
-        }
-
-        xhtml.endDocument();
-    }
-
-}
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/pkg/CpioParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/pkg/CpioParser.java
deleted file mode 100644
index a152e594b..000000000
--- a/tika-parsers/src/main/java/org/apache/tika/parser/pkg/CpioParser.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.tika.parser.pkg;
-
-import java.io.IOException;
-import java.io.InputStream;
-
-import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
-import org.apache.tika.exception.TikaException;
-import org.apache.tika.io.CloseShieldInputStream;
-import org.apache.tika.metadata.Metadata;
-import org.apache.tika.parser.ParseContext;
-import org.xml.sax.ContentHandler;
-import org.xml.sax.SAXException;
-
-/**
- * CPIO parser.
- */
-public class CpioParser extends PackageParser {
-
-    /**
-     * Parses the given stream as a cpio file.
-     */
-    public void parse(
-            InputStream stream, ContentHandler handler,
-            Metadata metadata, ParseContext context)
-            throws IOException, TikaException, SAXException {
-        // At the end we want to close the cpio stream to release any associated
-        // resources, but the underlying document stream should not be closed
-        CpioArchiveInputStream cpio =
-            new CpioArchiveInputStream(new CloseShieldInputStream(stream));
-        try {
-            parseArchive(cpio, handler, metadata, context);
-        } finally {
-            cpio.close();
-        }
-    }
-
-}
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/pkg/GzipParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/pkg/GzipParser.java
deleted file mode 100644
index 755497c05..000000000
--- a/tika-parsers/src/main/java/org/apache/tika/parser/pkg/GzipParser.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.tika.parser.pkg;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Collections;
-import java.util.Set;
-import java.util.zip.GZIPInputStream;
-
-import org.apache.commons.compress.compressors.gzip.GzipUtils;
-import org.apache.tika.exception.TikaException;
-import org.apache.tika.io.CloseShieldInputStream;
-import org.apache.tika.metadata.Metadata;
-import org.apache.tika.mime.MediaType;
-import org.apache.tika.parser.DelegatingParser;
-import org.apache.tika.parser.ParseContext;
-import org.apache.tika.sax.BodyContentHandler;
-import org.apache.tika.sax.EmbeddedContentHandler;
-import org.apache.tika.sax.XHTMLContentHandler;
-import org.xml.sax.ContentHandler;
-import org.xml.sax.SAXException;
-
-/**
- * Gzip parser.
- */
-public class GzipParser extends DelegatingParser {
-
-    private static final Set<MediaType> SUPPORTED_TYPES =
-        Collections.singleton(MediaType.application("x-gzip"));
-
-    public Set<MediaType> getSupportedTypes(ParseContext context) {
-        return SUPPORTED_TYPES;
-    }
-
-
-    /**
-     * Parses the given stream as a gzip file.
-     */
-    public void parse(
-            InputStream stream, ContentHandler handler,
-            Metadata metadata, ParseContext context)
-            throws IOException, SAXException, TikaException {
-        metadata.set(Metadata.CONTENT_TYPE, "application/x-gzip");
-
-        XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);
-        xhtml.startDocument();
-
-        // At the end we want to close the gzip stream to release any associated
-        // resources, but the underlying document stream should not be closed
-        InputStream gzip =
-            new GZIPInputStream(new CloseShieldInputStream(stream));
-        try {
-            Metadata entrydata = new Metadata();
-            String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
-            if (name != null && name.length() > 0) {
-                entrydata.set(
-                        Metadata.RESOURCE_NAME_KEY,
-                        GzipUtils.getUncompressedFilename(name));
-            }
-            // Use the delegate parser to parse the compressed document
-            super.parse(
-                    new CloseShieldInputStream(gzip),
-                    new EmbeddedContentHandler(
-                            new BodyContentHandler(xhtml)),
-                    entrydata, context);
-        } finally {
-            gzip.close();
-        }
-
-        xhtml.endDocument();
-    }
-
-}
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/pkg/PackageExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/pkg/PackageExtractor.java
new file mode 100644
index 000000000..6a80e6d93
--- /dev/null
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/pkg/PackageExtractor.java
@@ -0,0 +1,207 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tika.parser.pkg;
+
+import java.io.BufferedInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.zip.GZIPInputStream;
+
+import org.apache.commons.compress.archivers.ArchiveEntry;
+import org.apache.commons.compress.archivers.ArchiveInputStream;
+import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
+import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
+import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
+import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
+import org.apache.commons.compress.compressors.gzip.GzipUtils;
+import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.CloseShieldInputStream;
+import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.EmptyParser;
+import org.apache.tika.parser.ParseContext;
+import org.apache.tika.parser.Parser;
+import org.apache.tika.sax.BodyContentHandler;
+import org.apache.tika.sax.EmbeddedContentHandler;
+import org.apache.tika.sax.XHTMLContentHandler;
+import org.xml.sax.ContentHandler;
+import org.xml.sax.SAXException;
+
+/**
+ * Abstract base class for parsers that deal with package formats.
+ * Subclasses can call the
+ * {@link #parseArchive(ArchiveInputStream, ContentHandler, Metadata, ParseContext)}
+ * method to parse the package stream. Package entries will be written
+ * to the XHTML event stream as &lt;div class="package-entry"&gt; elements
+ * that contain the (optional) entry name as a &lt;h1&gt; element and the full
+ * structured body content of the parsed entry.
+ */
+class PackageExtractor {
+
+    private final ContentHandler handler;
+
+    private final Metadata metadata;
+
+    private final ParseContext context;
+
+    private final Parser parser;
+
+    public PackageExtractor(
+            ContentHandler handler, Metadata metadata, ParseContext context) {
+        this.handler = handler;
+        this.metadata = metadata;
+        this.context = context;
+        this.parser = context.get(Parser.class, EmptyParser.INSTANCE);
+    }
+
+    public void parse(InputStream stream)
+            throws IOException, SAXException, TikaException {
+        XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);
+        xhtml.startDocument();
+
+        // At the end we want to close the package/compression stream to
+        // release any associated resources, but the underlying document
+        // stream should not be closed
+        stream = new CloseShieldInputStream(stream);
+
+        // Capture the first byte to determine the packaging/compression format
+        if (!stream.markSupported()) {
+            stream = new BufferedInputStream(stream);
+        }
+        stream.mark(1);
+        int b = stream.read();
+        stream.reset();
+
+        if (b == 'B') { // BZh...
+            metadata.set(Metadata.CONTENT_TYPE, "application/x-bzip");
+            parseBZip2(stream, xhtml);
+        } else if (b == 0x1f) { // \037\213...
+            metadata.set(Metadata.CONTENT_TYPE, "application/x-gzip");
+            parseGZIP(stream, xhtml);
+        } else if (b == 'P') { // PK\003\004...
+            metadata.set(Metadata.CONTENT_TYPE, "application/zip");
+            parse(new ZipArchiveInputStream(stream), xhtml);
+        } else if (b == '0' || b == 0x71 || b == 0xc7) { // looks like cpio
+            metadata.set(Metadata.CONTENT_TYPE, "application/x-cpio");
+            parse(new CpioArchiveInputStream(stream), xhtml);
+        } else if (b == '=') { // =<ar> or =!<arch>
+            metadata.set(Metadata.CONTENT_TYPE, "application/x-archive");
+            parse(new ArArchiveInputStream(stream), xhtml);
+        } else { // assume tar
+            metadata.set(Metadata.CONTENT_TYPE, "application/x-tar");
+            parse(new TarArchiveInputStream(stream), xhtml);
+        }
+
+        xhtml.endDocument();
+    }
+
+    private void parseGZIP(InputStream stream, XHTMLContentHandler xhtml)
+            throws IOException, SAXException, TikaException {
+        InputStream gzip = new GZIPInputStream(stream);
+        try {
+            Metadata entrydata = new Metadata();
+            String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
+            if (name != null && name.length() > 0) {
+                entrydata.set(
+                        Metadata.RESOURCE_NAME_KEY,
+                        GzipUtils.getUncompressedFilename(name));
+            }
+            // Use the delegate parser to parse the compressed document
+            parser.parse(
+                    new CloseShieldInputStream(gzip),
+                    new EmbeddedContentHandler(
+                            new BodyContentHandler(xhtml)),
+                    entrydata, context);
+        } finally {
+            gzip.close();
+        }
+    }
+
+    private void parseBZip2(InputStream stream, XHTMLContentHandler xhtml)
+            throws IOException, SAXException, TikaException {
+        InputStream bzip2 = new BZip2CompressorInputStream(stream);
+        try {
+            Metadata entrydata = new Metadata();
+            String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
+            if (name != null) {
+                if (name.endsWith(".tbz")) {
+                    name = name.substring(0, name.length() - 4) + ".tar";
+                } else if (name.endsWith(".tbz2")) {
+                    name = name.substring(0, name.length() - 5) + ".tar";
+                } else if (name.endsWith(".bz")) {
+                    name = name.substring(0, name.length() - 3);
+                } else if (name.endsWith(".bz2")) {
+                    name = name.substring(0, name.length() - 4);
+                }
+                entrydata.set(Metadata.RESOURCE_NAME_KEY, name);
+            }
+            // Use the delegate parser to parse the compressed document
+            parser.parse(
+                    new CloseShieldInputStream(bzip2),
+                    new EmbeddedContentHandler(
+                            new BodyContentHandler(xhtml)),
+                    entrydata, context);
+        } finally {
+            bzip2.close();
+        }
+    }
+
+    /**
+     * Parses the given stream as a package of multiple underlying files.
+     * The package entries are parsed using the delegate parser instance.
+     * It is not an error if the entry can not be parsed, in that case
+     * just the entry name (if given) is emitted.
+     *
+     * @param stream package stream
+     * @param handler content handler
+     * @param metadata package metadata
+     * @throws IOException if an IO error occurs
+     * @throws SAXException if a SAX error occurs
+     */
+    public void parse(ArchiveInputStream archive, XHTMLContentHandler xhtml)
+            throws IOException, SAXException {
+        try {
+            ArchiveEntry entry = archive.getNextEntry();
+            while (entry != null) {
+                if (!entry.isDirectory()) {
+                    xhtml.startElement("div", "class", "package-entry");
+                    Metadata entrydata = new Metadata();
+                    String name = entry.getName();
+                    if (name != null && name.length() > 0) {
+                        entrydata.set(Metadata.RESOURCE_NAME_KEY, name);
+                        xhtml.element("h1", name);
+                    }
+                    try {
+                        // Use the delegate parser to parse this entry
+                        parser.parse(
+                                new CloseShieldInputStream(archive),
+                                new EmbeddedContentHandler(
+                                        new BodyContentHandler(xhtml)),
+                                        entrydata, context);
+                    } catch (TikaException e) {
+                        // Could not parse the entry, just skip the content
+                    }
+                    xhtml.endElement("div");
+                }
+                entry = archive.getNextEntry();
+            }
+        } finally {
+            archive.close();
+        }
+    }
+
+}
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/pkg/PackageParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/pkg/PackageParser.java
index cd20a7467..0a1f2af8b 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/pkg/PackageParser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/pkg/PackageParser.java
@@ -17,76 +17,57 @@
 package org.apache.tika.parser.pkg;
 
 import java.io.IOException;
+import java.io.InputStream;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
 
-import org.apache.commons.compress.archivers.ArchiveEntry;
-import org.apache.commons.compress.archivers.ArchiveInputStream;
 import org.apache.tika.exception.TikaException;
-import org.apache.tika.io.CloseShieldInputStream;
 import org.apache.tika.metadata.Metadata;
-import org.apache.tika.parser.DelegatingParser;
+import org.apache.tika.mime.MediaType;
 import org.apache.tika.parser.ParseContext;
-import org.apache.tika.sax.BodyContentHandler;
-import org.apache.tika.sax.EmbeddedContentHandler;
-import org.apache.tika.sax.XHTMLContentHandler;
+import org.apache.tika.parser.Parser;
 import org.xml.sax.ContentHandler;
 import org.xml.sax.SAXException;
 
 /**
- * Abstract base class for parsers that deal with package formats.
- * Subclasses can call the
- * {@link #parseArchive(ArchiveInputStream, ContentHandler, Metadata, ParseContext)}
- * method to parse the package stream. Package entries will be written
- * to the XHTML event stream as &lt;div class="package-entry"&gt; elements
- * that contain the (optional) entry name as a &lt;h1&gt; element and the full
- * structured body content of the parsed entry.
+ * Parser for various packaging and compression formats. Package entries will
+ * be written to the XHTML event stream as &lt;div class="package-entry"&gt;
+ * elements that contain the (optional) entry name as a &lt;h1&gt; element
+ * and the full structured body content of the parsed entry.
  */
-public abstract class PackageParser extends DelegatingParser {
+public class PackageParser implements Parser {
 
-    /**
-     * Parses the given stream as a package of multiple underlying files.
-     * The package entries are parsed using the delegate parser instance.
-     * It is not an error if the entry can not be parsed, in that case
-     * just the entry name (if given) is emitted.
-     *
-     * @param stream package stream
-     * @param handler content handler
-     * @param metadata package metadata
-     * @throws IOException if an IO error occurs
-     * @throws SAXException if a SAX error occurs
-     */
-    protected void parseArchive(
-            ArchiveInputStream archive, ContentHandler handler,
-            Metadata metadata, ParseContext context)
-            throws IOException, SAXException {
-        XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);
-        xhtml.startDocument();
+    private static final Set<MediaType> SUPPORTED_TYPES =
+        Collections.unmodifiableSet(new HashSet<MediaType>(Arrays.asList(
+                MediaType.application("x-archive"),
+                MediaType.application("x-bzip"),
+                MediaType.application("x-bzip2"),
+                MediaType.application("x-cpio"),
+                MediaType.application("x-gtar"),
+                MediaType.application("x-gzip"),
+                MediaType.application("x-tar"),
+                MediaType.application("zip"))));
 
-        ArchiveEntry entry = archive.getNextEntry();
-        while (entry != null) {
-            if (!entry.isDirectory()) {
-                xhtml.startElement("div", "class", "package-entry");
-                Metadata entrydata = new Metadata();
-                String name = entry.getName();
-                if (name != null && name.length() > 0) {
-                    entrydata.set(Metadata.RESOURCE_NAME_KEY, name);
-                    xhtml.element("h1", name);
-                }
-                try {
-                    // Use the delegate parser to parse this entry
-                    super.parse(
-                            new CloseShieldInputStream(archive),
-                            new EmbeddedContentHandler(
-                                    new BodyContentHandler(xhtml)),
-                            entrydata, context);
-                } catch (TikaException e) {
-                    // Could not parse the entry, just skip the content
-                }
-                xhtml.endElement("div");
-            }
-            entry = archive.getNextEntry();
-        }
+    public Set<MediaType> getSupportedTypes(ParseContext context) {
+        return SUPPORTED_TYPES;
+    }
 
-        xhtml.endDocument();
+    public void parse(
+            InputStream stream, ContentHandler handler,
+            Metadata metadata, ParseContext context)
+            throws IOException, SAXException, TikaException {
+        new PackageExtractor(handler, metadata, context).parse(stream);
+    }
+
+    /**
+     * @deprecated This method will be removed in Apache Tika 1.0.
+     */
+    public void parse(
+            InputStream stream, ContentHandler handler, Metadata metadata)
+            throws IOException, SAXException, TikaException {
+        parse(stream, handler, metadata, new ParseContext());
     }
 
 }
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/pkg/TarParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/pkg/TarParser.java
deleted file mode 100644
index 9543981b9..000000000
--- a/tika-parsers/src/main/java/org/apache/tika/parser/pkg/TarParser.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.tika.parser.pkg;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
-
-import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
-import org.apache.tika.exception.TikaException;
-import org.apache.tika.io.CloseShieldInputStream;
-import org.apache.tika.metadata.Metadata;
-import org.apache.tika.mime.MediaType;
-import org.apache.tika.parser.ParseContext;
-import org.xml.sax.ContentHandler;
-import org.xml.sax.SAXException;
-
-/**
- * Tar parser.
- */
-public class TarParser extends PackageParser {
-
-    private static final Set<MediaType> SUPPORTED_TYPES =
-        Collections.unmodifiableSet(new HashSet<MediaType>(Arrays.asList(
-                MediaType.application("x-tar"),
-                MediaType.application("x-gtar"))));
-
-    public Set<MediaType> getSupportedTypes(ParseContext context) {
-        return SUPPORTED_TYPES;
-    }
-
-    /**
-     * Parses the given stream as a tar file.
-     */
-    public void parse(
-            InputStream stream, ContentHandler handler,
-            Metadata metadata, ParseContext context)
-            throws IOException, TikaException, SAXException {
-        metadata.set(Metadata.CONTENT_TYPE, "application/x-tar");
-
-        // At the end we want to close the tar stream to release any associated
-        // resources, but the underlying document stream should not be closed
-        TarArchiveInputStream tar =
-            new TarArchiveInputStream(new CloseShieldInputStream(stream));
-        try {
-            parseArchive(tar, handler, metadata, context);
-        } finally {
-            tar.close();
-        }
-    }
-
-}
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/pkg/ZipParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/pkg/ZipParser.java
deleted file mode 100644
index 223d94c64..000000000
--- a/tika-parsers/src/main/java/org/apache/tika/parser/pkg/ZipParser.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.tika.parser.pkg;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Collections;
-import java.util.Set;
-
-import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
-import org.apache.tika.exception.TikaException;
-import org.apache.tika.io.CloseShieldInputStream;
-import org.apache.tika.metadata.Metadata;
-import org.apache.tika.mime.MediaType;
-import org.apache.tika.parser.ParseContext;
-import org.xml.sax.ContentHandler;
-import org.xml.sax.SAXException;
-
-/**
- * Zip File Parser.
- */
-public class ZipParser extends PackageParser {
-
-    private static final Set<MediaType> SUPPORTED_TYPES =
-        Collections.singleton(MediaType.application("zip"));
-
-    public Set<MediaType> getSupportedTypes(ParseContext context) {
-        return SUPPORTED_TYPES;
-    }
-
-    /**
-     * Parses the given stream as a Zip file.
-     */
-    public void parse(
-            InputStream stream, ContentHandler handler,
-            Metadata metadata, ParseContext context)
-            throws IOException, TikaException, SAXException {
-        metadata.set(Metadata.CONTENT_TYPE, "application/zip");
-
-        // At the end we want to close the Zip stream to release any associated
-        // resources, but the underlying document stream should not be closed
-        ZipArchiveInputStream zip =
-            new ZipArchiveInputStream(new CloseShieldInputStream(stream));
-        try {
-            parseArchive(zip, handler, metadata, context);
-        } finally {
-            zip.close();
-        }
-    }
-
-}
diff --git a/tika-parsers/src/main/resources/META-INF/services/org.apache.tika.parser.Parser b/tika-parsers/src/main/resources/META-INF/services/org.apache.tika.parser.Parser
index fe31fc212..126dc4a56 100644
--- a/tika-parsers/src/main/resources/META-INF/services/org.apache.tika.parser.Parser
+++ b/tika-parsers/src/main/resources/META-INF/services/org.apache.tika.parser.Parser
@@ -26,10 +26,7 @@ org.apache.tika.parser.microsoft.ooxml.OOXMLParser
 org.apache.tika.parser.mp3.Mp3Parser
 org.apache.tika.parser.odf.OpenDocumentParser
 org.apache.tika.parser.pdf.PDFParser
-org.apache.tika.parser.pkg.Bzip2Parser
-org.apache.tika.parser.pkg.GzipParser
-org.apache.tika.parser.pkg.TarParser
-org.apache.tika.parser.pkg.ZipParser
+org.apache.tika.parser.pkg.PackageParser
 org.apache.tika.parser.rtf.RTFParser
 org.apache.tika.parser.txt.TXTParser
 org.apache.tika.parser.video.FLVParser
