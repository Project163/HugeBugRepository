diff --git a/apache-rat-core/src/main/java/org/apache/rat/Report.java b/apache-rat-core/src/main/java/org/apache/rat/Report.java
index 78b95c9d..8b067251 100644
--- a/apache-rat-core/src/main/java/org/apache/rat/Report.java
+++ b/apache-rat-core/src/main/java/org/apache/rat/Report.java
@@ -32,6 +32,7 @@ import java.util.Arrays;
 import java.util.Comparator;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.TreeMap;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
@@ -138,7 +139,7 @@ public final class Report {
      */
     // TODO rework when Commons-CLI version 1.7.1 or higher is available.
     private static final DeprecatedAttributes ADD_ATTRIBUTES = DeprecatedAttributes.builder().setForRemoval(true).setSince("0.17")
-            .setDescription("Use '-A' or --addLicense instead.").get();
+            .setDescription("Use '-A' or '--addLicense' instead.").get();
     static final OptionGroup ADD = new OptionGroup()
             .addOption(Option.builder("a").hasArg(false)
                     .desc(format("[%s]", ADD_ATTRIBUTES))
@@ -457,16 +458,14 @@ public final class Report {
             DeprecationReporter.logDeprecated(log, EXCLUDE_CLI);
             String[] excludes = cl.getOptionValues(EXCLUDE_CLI);
             if (excludes != null) {
-                final FilenameFilter filter = parseExclusions(log, Arrays.asList(excludes));
-                configuration.setFilesToIgnore(filter);
+                parseExclusions(log, Arrays.asList(excludes)).ifPresent(configuration::setFilesToIgnore);
             }
         } else if (cl.hasOption(EXCLUDE_FILE_CLI)) {
             DeprecationReporter.logDeprecated(log, EXCLUDE_FILE_CLI);
             String excludeFileName = cl.getOptionValue(EXCLUDE_FILE_CLI);
             if (excludeFileName != null) {
-                final FilenameFilter filter = parseExclusions(log,
-                        FileUtils.readLines(new File(excludeFileName), StandardCharsets.UTF_8));
-                configuration.setFilesToIgnore(filter);
+                parseExclusions(log,FileUtils.readLines(new File(excludeFileName), StandardCharsets.UTF_8))
+                        .ifPresent(configuration::setFilesToIgnore);
             }
         }
 
@@ -515,9 +514,9 @@ public final class Report {
      *
      * @param log the Logger to use.
      * @param excludes the list of patterns to exclude.
-     * @return the FilenameFilter tht excludes the patterns
+     * @return the FilenameFilter tht excludes the patterns or an empty optional.
      */
-    static FilenameFilter parseExclusions(final Log log, final List<String> excludes) {
+    static Optional<FilenameFilter> parseExclusions(final Log log, final List<String> excludes) {
         final OrFileFilter orFilter = new OrFileFilter();
         int ignoredLines = 0;
         for (String exclude : excludes) {
@@ -544,7 +543,7 @@ public final class Report {
         if (ignoredLines > 0) {
             log.info("Ignored " + ignoredLines + " lines in your exclusion files as comments or empty lines.");
         }
-        return new NotFileFilter(orFilter);
+        return orFilter.getFileFilters().isEmpty() ? Optional.empty() : Optional.of(orFilter.negate());
     }
 
     static Options buildOptions() {
diff --git a/apache-rat-core/src/test/java/org/apache/rat/ReportTest.java b/apache-rat-core/src/test/java/org/apache/rat/ReportTest.java
index 01ac4a52..c42cfc78 100644
--- a/apache-rat-core/src/test/java/org/apache/rat/ReportTest.java
+++ b/apache-rat-core/src/test/java/org/apache/rat/ReportTest.java
@@ -18,8 +18,11 @@
  */
 package org.apache.rat;
 
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
@@ -37,6 +40,8 @@ import java.net.URL;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
+import java.util.Optional;
 import java.util.SortedSet;
 import java.util.List;
 import java.util.function.Predicate;
@@ -48,6 +53,12 @@ import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
 import org.apache.commons.io.FileUtils;
+import org.apache.commons.io.filefilter.IOFileFilter;
+import org.apache.commons.io.filefilter.NameFileFilter;
+import org.apache.commons.io.filefilter.NotFileFilter;
+import org.apache.commons.io.filefilter.OrFileFilter;
+import org.apache.commons.io.filefilter.RegexFileFilter;
+import org.apache.commons.io.filefilter.WildcardFileFilter;
 import org.apache.rat.license.ILicense;
 import org.apache.rat.license.LicenseSetFactory;
 import org.apache.commons.io.filefilter.FalseFileFilter;
@@ -87,9 +98,9 @@ public class ReportTest {
 
     @Test
     public void parseExclusionsForCLIUsage() {
-        final FilenameFilter filter = Report
+        final Optional<FilenameFilter> filter = Report
                 .parseExclusions(DefaultLog.getInstance(), Arrays.asList("", " # foo/bar", "foo", "##", " ./foo/bar"));
-        assertNotNull(filter);
+        assertThat(filter).isPresent();
     }
 
     @Test
@@ -174,7 +185,7 @@ public class ReportTest {
     }
 
     @Test
-    public void LicensesOptionNoDefaultsTest() throws Exception {
+    public void testLicensesOptionNoDefaults() throws Exception {
         CommandLine cl = new DefaultParser().parse(Report.buildOptions(), new String[] {"--no-default", "--licenses", "target/test-classes/report/LicenseOne.xml", "--licenses", "target/test-classes/report/LicenseTwo.xml"});
         ReportConfiguration config = Report.createConfiguration(DefaultLog.getInstance(), "", cl);
         SortedSet<ILicense> set = config.getLicenses(LicenseSetFactory.LicenseFilter.ALL);
@@ -342,7 +353,7 @@ public class ReportTest {
             DefaultLog.setInstance(null);
         }
         log.assertContains("WARN: Option [-d, --dir] used.  Deprecated for removal since 0.17: Use '--'");
-        log.assertContains("WARN: Option [-a] used.  Deprecated for removal since 0.17: Use '-A or --addLicense'");
+        log.assertContains("WARN: Option [-a] used.  Deprecated for removal since 0.17: Use '-A' or '--addLicense'");
     }
 
     @Test
@@ -365,4 +376,84 @@ public class ReportTest {
         assertNotNull(config, "Did not create ReportConfiguraiton");
         assertEquals(1, config.getLicenses(LicenseSetFactory.LicenseFilter.ALL).size());
     }
+
+    @ParameterizedTest
+    @MethodSource("exclusionsProvider")
+    public void testParseExclusions(String pattern, List<IOFileFilter> expectedPatterns, List<String> logEntries) {
+        TestingLog log = new TestingLog();
+        Optional<FilenameFilter> filter = Report.parseExclusions(log, Collections.singletonList(pattern));
+        if (expectedPatterns.isEmpty()) {
+            assertThat(filter).isEmpty();
+        } else {
+            assertInstanceOf(NotFileFilter.class, filter.get());
+            String result = filter.toString();
+            for (IOFileFilter expectedFilter : expectedPatterns) {
+                TextUtils.assertContains(expectedFilter.toString(), result);
+            }
+        }
+        assertEquals(log.isEmpty(), logEntries.isEmpty());
+        for (String logEntry : logEntries) {
+            log.assertContains(logEntry);
+        }
+    }
+
+    public static Stream<Arguments> exclusionsProvider() {
+        List<Arguments> lst = new ArrayList<>();
+
+        lst.add(Arguments.of( "", Collections.emptyList(), Collections.singletonList("INFO: Ignored 1 lines in your exclusion files as comments or empty lines.")));
+
+        lst.add(Arguments.of( "# a comment", Collections.emptyList(), Collections.singletonList("INFO: Ignored 1 lines in your exclusion files as comments or empty lines.")));
+
+        List<IOFileFilter> expected = new ArrayList<>();
+        String pattern = "hello.world";
+        expected.add(new RegexFileFilter(pattern));
+        expected.add(new NameFileFilter(pattern));
+        lst.add(Arguments.of( pattern, expected, Collections.emptyList()));
+
+        expected = new ArrayList<>();
+        pattern = "[Hh]ello.[Ww]orld";
+        expected.add(new RegexFileFilter(pattern));
+        expected.add(new NameFileFilter(pattern));
+        lst.add(Arguments.of( pattern, expected, Collections.emptyList()));
+
+        expected = new ArrayList<>();
+        pattern = "hell*.world";
+        expected.add(new RegexFileFilter(pattern));
+        expected.add(new NameFileFilter(pattern));
+        expected.add(WildcardFileFilter.builder().setWildcards(pattern).get());
+        lst.add(Arguments.of( pattern, expected, Collections.emptyList()));
+
+        expected = new ArrayList<>();
+        pattern = "*.world";
+        expected.add(new NameFileFilter(pattern));
+        expected.add(WildcardFileFilter.builder().setWildcards(pattern).get());
+        lst.add(Arguments.of( pattern, expected, Collections.emptyList()));
+
+        expected = new ArrayList<>();
+        pattern = "hello.*";
+        expected.add(new NameFileFilter(pattern));
+        expected.add(WildcardFileFilter.builder().setWildcards(pattern).get());
+        lst.add(Arguments.of( pattern, expected, Collections.emptyList()));
+
+        expected = new ArrayList<>();
+        pattern = "?ello.world";
+        expected.add(new NameFileFilter(pattern));
+        expected.add(WildcardFileFilter.builder().setWildcards(pattern).get());
+        lst.add(Arguments.of( pattern, expected, Collections.emptyList()));
+
+        expected = new ArrayList<>();
+        pattern = "hell?.world";
+        expected.add(new RegexFileFilter(pattern));
+        expected.add(new NameFileFilter(pattern));
+        expected.add(WildcardFileFilter.builder().setWildcards(pattern).get());
+        lst.add(Arguments.of( pattern, expected, Collections.emptyList()));
+
+        expected = new ArrayList<>();
+        pattern = "hello.worl?";
+        expected.add(new NameFileFilter(pattern));
+        expected.add(WildcardFileFilter.builder().setWildcards(pattern).get());
+        lst.add(Arguments.of( pattern, expected, Collections.emptyList()));
+
+        return lst.stream();
+    }
 }
diff --git a/apache-rat-core/src/test/java/org/apache/rat/testhelpers/TestingLog.java b/apache-rat-core/src/test/java/org/apache/rat/testhelpers/TestingLog.java
index b801f7f8..3d73b5fd 100644
--- a/apache-rat-core/src/test/java/org/apache/rat/testhelpers/TestingLog.java
+++ b/apache-rat-core/src/test/java/org/apache/rat/testhelpers/TestingLog.java
@@ -43,11 +43,11 @@ public class TestingLog implements Log {
     }
 
     public void assertContains(String expected) {
-        TextUtils.assertContains("WARN: Option [-d, --dir] used.  Deprecated for removal since 0.17: Use '--'", captured.toString());
+        TextUtils.assertContains(expected, captured.toString());
     }
 
     public void assertNotContains(String expected) {
-        TextUtils.assertContains("WARN: Option [-d, --dir] used.  Deprecated for removal since 0.17: Use '--'", captured.toString());
+        TextUtils.assertNotContains(expected, captured.toString());
     }
 
     public void assertContainsPattern(String pattern) {
@@ -63,4 +63,7 @@ public class TestingLog implements Log {
         captured.append(String.format("%s: %s%n", level, msg));
     }
 
+    public boolean isEmpty() {
+        return captured.length() == 0;
+    }
 }
