diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index b41ddb90..c718864d 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,9 @@
 
   <body>
     <release version="1.7" date="in SVN" description="">
+      <action dev="oheger" type="fix" issue="CONFIGURATION-359">
+        Fixed broken links to the API documentation in the user's guide.
+      </action>
       <action dev="oheger" type="update" issue="CONFIGURATION-358">
         Improvements of the user's guide for hierarchical configurations.
       </action>
diff --git a/xdocs/userguide/howto_basicfeatures.xml b/xdocs/userguide/howto_basicfeatures.xml
index 7a2b25f7..69fdd1fd 100644
--- a/xdocs/userguide/howto_basicfeatures.xml
+++ b/xdocs/userguide/howto_basicfeatures.xml
@@ -28,7 +28,7 @@
     <p>
       The <code>Configuration</code> interface defines a whole bunch of methods.
       Implementing these methods all from scratch can be quite hard. Because of
-      that the <code><a href="apidocs/org/apache/commons/configuration/AbstractConfiguration.html">
+      that the <code><a href="../apidocs/org/apache/commons/configuration/AbstractConfiguration.html">
       AbstractConfiguration</a></code> class exists. This class serves as a
       common base class for most of the <code>Configuration</code> implementations
       in <em>Commons Configuration</em> and provides a great deal of the
@@ -245,7 +245,7 @@ public class EchoLookup extends StrLookup
       Now we want this class to be called for variables with the prefix
       <code>echo</code>. For this purpose the <code>EchoLookup</code> class
       has to be registered at the
-      <code><a href="apidocs/org/apache/commons/configuration/interpol/ConfigurationInterpolator.html">
+      <code><a href="../apidocs/org/apache/commons/configuration/interpol/ConfigurationInterpolator.html">
       ConfigurationInterpolator</a></code> class with the desired prefix.
       <code>ConfigurationInterpolator</code> implements a thin wrapper over the
       <code>StrLookup</code> API defined by Commons Lang. It has a static
diff --git a/xdocs/userguide/howto_beans.xml b/xdocs/userguide/howto_beans.xml
index 665aaf4d..85d55dfd 100644
--- a/xdocs/userguide/howto_beans.xml
+++ b/xdocs/userguide/howto_beans.xml
@@ -74,17 +74,17 @@
         On the Java side three entities are involved in the creation of a bean:
         <ul>
           <li>A <em>bean factory</em>: This is an object that implements the
-          <code><a href="apidocs/org/apache/commons/configuration/beanutils/BeanFactory.html">BeanFactory</a></code>
+          <code><a href="../apidocs/org/apache/commons/configuration/beanutils/BeanFactory.html">BeanFactory</a></code>
           interface and knows how to create an instance of a bean class. In most
           cases calling code does not directly deal with a bean factory.</li>
           <li>An implementation of the
-          <code><a href="apidocs/org/apache/commons/configuration/beanutils/BeanDeclaration.html">BeanDeclaration</a></code>
+          <code><a href="../apidocs/org/apache/commons/configuration/beanutils/BeanDeclaration.html">BeanDeclaration</a></code>
           interface. This object knows how the bean declaration in the configuration
           file is organized and how the needed information can be extracted. So
           the way the bean is declared in the configuration file must match the
           expectations of this object.</li>
           <li>The utility class
-          <code><a href="apidocs/org/apache/commons/configuration/beanutils/BeanHelper.html">BeanHelper</a></code>
+          <code><a href="../apidocs/org/apache/commons/configuration/beanutils/BeanHelper.html">BeanHelper</a></code>
           brings all these together and performs the bean creation operation.
           Usually client code will create a <code>BeanDeclaration</code> object
           from a <code>Configuration</code> implementation and then pass it to
@@ -188,10 +188,10 @@ WindowManager wm = (WindowManager) BeanHelper.createBean(decl);
       <p>
         This fragment loads the configuration file using a <code>XMLConfiguration</code>
         object. Then a bean declaration object is created, in this case an
-        instance of the <code><a href="apidocs/org/apache/commons/configuration/beanutils/XMLBeanDeclaration.html">XMLBeanDeclaration</a></code>
+        instance of the <code><a href="../apidocs/org/apache/commons/configuration/beanutils/XMLBeanDeclaration.html">XMLBeanDeclaration</a></code>
         class, which can deal with bean declarations in XML documents. This
         declaration is passed to the static <code>createBean()</code> method of
-        the <code><a href="apidocs/org/apache/commons/configuration/beanutils/BeanHelper.html">BeanHelper</a></code>
+        the <code><a href="../apidocs/org/apache/commons/configuration/beanutils/BeanHelper.html">BeanHelper</a></code>
         class, which returns the new bean instance.
       </p>
       <p>
@@ -221,7 +221,7 @@ WindowManager wm = (WindowManager) BeanHelper.createBean(decl);
         than the ones supported by the available default implementations. Then it
         is the responsibility of your implementation to parse the configuration
         data and extract the required information to create the bean. Basically
-        your <code><a href="apidocs/org/apache/commons/configuration/beanutils/BeanDeclaration.html">BeanDeclaration</a></code>
+        your <code><a href="../apidocs/org/apache/commons/configuration/beanutils/BeanDeclaration.html">BeanDeclaration</a></code>
         implementation must be able to provide the following data:
         <ul>
           <li>The name of the class for which an instance is to be created.</li>
@@ -248,7 +248,7 @@ WindowManager wm = (WindowManager) BeanHelper.createBean(decl);
         allows you to adapt the format of bean declarations in configuration files,
         you can manipulate the bean creation mechanism itself by creating a
         specialized implementation of the
-        <code><a href="apidocs/org/apache/commons/configuration/beanutils/BeanFactory.html">BeanFactory</a></code>
+        <code><a href="../apidocs/org/apache/commons/configuration/beanutils/BeanFactory.html">BeanFactory</a></code>
         interface. For this purpose the following steps are necessary:
         <ol>
           <li>Create a class implementing the <code>BeanFactory</code> interface.
@@ -270,7 +270,7 @@ WindowManager wm = (WindowManager) BeanHelper.createBean(decl);
       <p>
         We start with the creation of the factory class. The basic idea is that
         the functionality for creating and initializing beans is already provided
-        by the <code><a href="apidocs/org/apache/commons/configuration/beanutils/DefaultBeanFactory.html">DefaultBeanFactory</a></code>
+        by the <code><a href="../apidocs/org/apache/commons/configuration/beanutils/DefaultBeanFactory.html">DefaultBeanFactory</a></code>
         class, so we extend this class. Our implementation only has to deal with
         the singleton stuff: We keep a map that stores already created bean
         instances and can be accessed by the name of their classes. In the
diff --git a/xdocs/userguide/howto_combinedconfiguration.xml b/xdocs/userguide/howto_combinedconfiguration.xml
index 043702f2..d19cac3d 100644
--- a/xdocs/userguide/howto_combinedconfiguration.xml
+++ b/xdocs/userguide/howto_combinedconfiguration.xml
@@ -26,7 +26,7 @@
 <body>
     <section name="Combined Configuration">
     <p>
-      The <code><a href="apidocs/org/apache/commons/configuration/CombinedConfiguration.html">
+      The <code><a href="../apidocs/org/apache/commons/configuration/CombinedConfiguration.html">
       CombinedConfiguration</a></code> class provides an alternative for handling
       multiple configuration sources. Its API is very similar to the
       <code>CompositeConfiguration</code> class, which was discussed in the
@@ -80,14 +80,14 @@
     <subsection name="Node combiners">
     <p>
       A <em>node combiner</em> is an object of a class that inherits from the
-      abstract <code><a href="apidocs/org/apache/commons/configuration/tree/NodeCombiner.html">NodeCombiner</a></code>
+      abstract <code><a href="../apidocs/org/apache/commons/configuration/tree/NodeCombiner.html">NodeCombiner</a></code>
       class. This class defines an abstract <code>combine()</code> method, which
       takes the root nodes of two hierarchical configurations and returns the
       root node of the combined node structure. It is up to a concrete
       implementation how this combined structure will look like. Commons
       Configuration ships with the two concrete implementations
-      <code><a href="apidocs/org/apache/commons/configuration/tree/OverrideCombiner.html">OverrideCombiner</a></code>
-      and <code><a href="apidocs/org/apache/commons/configuration/tree/UnionCombiner.html">UnionCombiner</a></code>,
+      <code><a href="../apidocs/org/apache/commons/configuration/tree/OverrideCombiner.html">OverrideCombiner</a></code>
+      and <code><a href="../apidocs/org/apache/commons/configuration/tree/UnionCombiner.html">UnionCombiner</a></code>,
       which implement an override and a union semantics respective.
     </p>
     <p>
diff --git a/xdocs/userguide/howto_compositeconfiguration.xml b/xdocs/userguide/howto_compositeconfiguration.xml
index b718364c..bd6f83f0 100644
--- a/xdocs/userguide/howto_compositeconfiguration.xml
+++ b/xdocs/userguide/howto_compositeconfiguration.xml
@@ -30,7 +30,7 @@
             There are many use cases when you want to collect the properties
             of several configuration sources and access them like a single
             configuration object. One way to do that is using the
-            <code><a href="apidocs/org/apache/commons/configuration/CompositeConfiguration.html">
+            <code><a href="../apidocs/org/apache/commons/configuration/CompositeConfiguration.html">
             CompositeConfiguration</a></code> class.
         </p>
         <p>
diff --git a/xdocs/userguide/howto_configurationbuilder.xml b/xdocs/userguide/howto_configurationbuilder.xml
index d6d4c8d0..276a2e60 100644
--- a/xdocs/userguide/howto_configurationbuilder.xml
+++ b/xdocs/userguide/howto_configurationbuilder.xml
@@ -44,7 +44,7 @@
     </p>
     <p>
       To work around these limitations the class
-      <code><a href="apidocs/org/apache/commons/configuration/DefaultConfigurationBuilder.html">
+      <code><a href="../apidocs/org/apache/commons/configuration/DefaultConfigurationBuilder.html">
       DefaultConfigurationBuilder</a></code> was introduced.
     </p>
 
@@ -389,7 +389,7 @@
       configuration sources we have to set this flag so that this reloading
       strategy can function properly. More details about this topic can be
       found in the Javadocs for
-      <code><a href="apidocs/org/apache/commons/configuration/CombinedConfiguration.html">
+      <code><a href="../apidocs/org/apache/commons/configuration/CombinedConfiguration.html">
       CombinedConfiguration</a></code>. We also set some properties for the
       configurations to be loaded; for instance we declare that one of the XML
       configurations should be validated.
diff --git a/xdocs/userguide/howto_events.xml b/xdocs/userguide/howto_events.xml
index 21ad4b43..ab8a951b 100644
--- a/xdocs/userguide/howto_events.xml
+++ b/xdocs/userguide/howto_events.xml
@@ -27,7 +27,7 @@
 	<section name="Configuration Events">
     <p>
       All configuration classes derived from
-      <code><a href="apidocs/org/apache/commons/configuration/AbstractConfiguration.html">
+      <code><a href="../apidocs/org/apache/commons/configuration/AbstractConfiguration.html">
       AbstractConfiguration</a></code> allow to register event listeners, which
       are notified whenever the configuration's data is changed. This provides
       an easy means for tracking updates on a configuration.
@@ -37,10 +37,10 @@
 	<p>
       Objects that are interested in update events triggered by configurations
       must implement the
-      <code><a href="apidocs/org/apache/commons/configuration/event/ConfigurationListener.html">
+      <code><a href="../apidocs/org/apache/commons/configuration/event/ConfigurationListener.html">
       ConfigurationListener</a></code> interface. This interface defines a
       single method <code>configurationChanged()</code>, which is passed a
-      <code><a href="apidocs/org/apache/commons/configuration/event/ConfigurationEvent.html">
+      <code><a href="../apidocs/org/apache/commons/configuration/event/ConfigurationEvent.html">
       ConfigurationEvent</a></code> object. The event object contains all
       information available about the modification, including:
       <ul>
@@ -143,7 +143,7 @@ config.addProperty("newProperty", "newValue"); // will fire an event
       Some implementations of the <code>Configuration</code> interface operate
       on underlying storages that can throw exceptions on each property access.
       As an example consider <code>
-      <a href="apidocs/org/apache/commons/configuration/DatabaseConfiguration.html">
+      <a href="../apidocs/org/apache/commons/configuration/DatabaseConfiguration.html">
       DatabaseConfiguration</a></code>: this configuration class issues an SQL
       statement for each accessed property, which can potentially cause a
       <code>SQLException</code>.
@@ -159,11 +159,11 @@ config.addProperty("newProperty", "newValue"); // will fire an event
       A configuration error listener is very similar to a regular configuration
       event listener. Instead of the <code>ConfigurationListener</code>
       interface it has to implement the
-      <code><a href="apidocs/org/apache/commons/configuration/event/ConfigurationErrorListener.html">
+      <code><a href="../apidocs/org/apache/commons/configuration/event/ConfigurationErrorListener.html">
       ConfigurationErrorListener</a></code> interface, which defines a single method
       <code>configurationError()</code>. In case of an internal error this
       method is invoked, and a
-      <code><a href="apidocs/org/apache/commons/configuration/event/ConfigurationErrorEvent.html">
+      <code><a href="../apidocs/org/apache/commons/configuration/event/ConfigurationErrorEvent.html">
       ConfigurationErrorEvent</a></code> with information about that error is
       passed. By inheriting from <code>ConfigurationEvent</code>
       <code>ConfigurationErrorEvent</code> supports all information that is
diff --git a/xdocs/userguide/howto_filebased.xml b/xdocs/userguide/howto_filebased.xml
index 818bdc55..1cd3573b 100644
--- a/xdocs/userguide/howto_filebased.xml
+++ b/xdocs/userguide/howto_filebased.xml
@@ -35,7 +35,7 @@
         </p>
         <p>
           To provide a consistent way of dealing with configuration files in
-          Commons Configuration the <code><a href="apidocs/org/apache/commons/configuration/FileConfiguration.html">FileConfiguration</a></code>
+          Commons Configuration the <code><a href="../apidocs/org/apache/commons/configuration/FileConfiguration.html">FileConfiguration</a></code>
           interface exists. <code>FileConfiguration</code> defines a standard
           API for accessing files and is implemented by many configuration
           implementations, including <code>PropertiesConfiguration</code> and
@@ -178,7 +178,7 @@ config.setProperty("colors.background", "#000000); // the configuration is saved
           concept of so called <em>reloading strategies</em> that can be
           associated with a file-based configuration. Such a strategy monitors
           a configuration file and is able to detect changes. A default reloading
-          strategy is <code><a href="apidocs/org/apache/commons/configuration/reloading/FileChangedReloadingStrategy.html">FileChangedReloadingStrategy</a></code>.
+          strategy is <code><a href="../apidocs/org/apache/commons/configuration/reloading/FileChangedReloadingStrategy.html">FileChangedReloadingStrategy</a></code>.
           It can be set on a file-based configuration as follows:
         </p>
 <source>
diff --git a/xdocs/userguide/howto_properties.xml b/xdocs/userguide/howto_properties.xml
index 03b7605b..bc572f47 100644
--- a/xdocs/userguide/howto_properties.xml
+++ b/xdocs/userguide/howto_properties.xml
@@ -30,14 +30,14 @@
         Properties files are a popular mean of configuring applications. Of course Commons Configuration
         supports this format and enhances significantly the basic <code>java.util.Properties</code> class.
         This section introduces the features of the 
-        <code><a href="apidocs/org/apache/commons/configuration/PropertiesConfiguration.html">PropertiesConfiguration</a></code> class.
+        <code><a href="../apidocs/org/apache/commons/configuration/PropertiesConfiguration.html">PropertiesConfiguration</a></code> class.
         Note that <code>PropertiesConfiguration</code> is a very typical example
         for an implementation of the <code>Configuration</code> interface and
         many of the features described in this section (e.g. list handling or
         interpolation) are supported by other configuration classes as well.
         This is because most configuration implementations that ship with
         Commons Configuration are derived from the common base class
-        <code><a href="apidocs/org/apache/commons/configuration/AbstractConfiguration.html">AbstractConfiguration</a></code>,
+        <code><a href="../apidocs/org/apache/commons/configuration/AbstractConfiguration.html">AbstractConfiguration</a></code>,
         which implementes this features.
       </p>
 
@@ -187,7 +187,7 @@ key = This \n string \t contains \, escaped \\ characters \u0020
       <p>
         Each <code>PropertiesConfiguration</code> object is associated with a
         <em>Layout object</em>, an instance of the class
-        <code><a href="apidocs/org/apache/commons/configuration/PropertiesConfigurationLayout.html">
+        <code><a href="../apidocs/org/apache/commons/configuration/PropertiesConfigurationLayout.html">
         PropertiesConfigurationLayout</a></code>. This layout object is
         responsible for preserving most of the structure of loaded configuration
         files. This means that things like comments or blanc lines in a saved
diff --git a/xdocs/userguide/howto_utilities.xml b/xdocs/userguide/howto_utilities.xml
index 0a63730d..df124b07 100644
--- a/xdocs/userguide/howto_utilities.xml
+++ b/xdocs/userguide/howto_utilities.xml
@@ -37,7 +37,7 @@
 	<p>
       Often it is required to copy the data of one <code>Configuration</code>
       object into another one. For this purpose the
-      <code><a href="apidocs/org/apache/commons/configuration/AbstractConfiguration.html">
+      <code><a href="../apidocs/org/apache/commons/configuration/AbstractConfiguration.html">
       AbstractConfiguration</a></code> class (which serves as the base class for
       most of the configuration implementations shipped with this library)
       provides two methods implementing a basic copy operation:
@@ -64,7 +64,7 @@
         configurations. Most of the configuration implementations provided by
         <em>Commons Configurations</em> support cloning. The
         <code>cloneConfiguration()</code> method of
-        <code><a href="apidocs/org/apache/commons/configuration/ConfigurationUtils.html">
+        <code><a href="../apidocs/org/apache/commons/configuration/ConfigurationUtils.html">
         ConfigurationUtils</a></code> can be used for creating a copy of an
         arbitrary <code>Configuration</code> object. This method checks whether
         the passed in configuration implements the <code>Cloneable</code>
@@ -95,7 +95,7 @@ HierarchicalConfiguration hc =
 ]]></source>
     <p>
       The <code>convertToHierarchical()</code> method of
-      <code><a href="apidocs/org/apache/commons/configuration/ConfigurationUtils.html">
+      <code><a href="../apidocs/org/apache/commons/configuration/ConfigurationUtils.html">
       ConfigurationUtils</a></code> checks whether the passed in object
       is already a hierarchical configuration. If this is the case, it is
       returned unchanged. Otherwise a new <code>HierarchicalConfiguration</code>
@@ -159,7 +159,7 @@ HierarchicalConfiguration hc =
       be the requirement of converting from <code>Properties</code> objects to
       <code>Configuration</code> objects and vice versa. For this purpose an
       utility class can be used:
-      <code><a href="apidocs/org/apache/commons/configuration/ConfigurationConverter.html">
+      <code><a href="../apidocs/org/apache/commons/configuration/ConfigurationConverter.html">
       ConfigurationConverter</a></code>.
     </p>
     <p>
@@ -192,7 +192,7 @@ Properties processConfiguration(Properties props)
 ]]></source>
     <p>
       Please refer to the Javadocs of
-      <code><a href="apidocs/org/apache/commons/configuration/ConfigurationConverter.html">
+      <code><a href="../apidocs/org/apache/commons/configuration/ConfigurationConverter.html">
       ConfigurationConverter</a></code> to learn more about the available
       conversion methods and their limitations.
     </p>
@@ -211,7 +211,7 @@ Properties processConfiguration(Properties props)
       written by <em>Commons Configuration</em>.
     </p>
     <p>
-      <code><a href="apidocs/org/apache/commons/configuration/AbstractConfiguration.html">
+      <code><a href="../apidocs/org/apache/commons/configuration/AbstractConfiguration.html">
       AbstractConfiguration</a></code> provides the method
       <code>interpolatedConfiguration()</code>. This method creates a clone of
       the current configuration and then performs interpolation on all of its
@@ -219,7 +219,7 @@ Properties processConfiguration(Properties props)
       basically the same content as the original configuration, but with all
       variables replaced by their actual values (as far as this was possible).
       The following code fragment shows how a
-      <code><a href="apidocs/org/apache/commons/configuration/PropertiesConfiguration.html">
+      <code><a href="../apidocs/org/apache/commons/configuration/PropertiesConfiguration.html">
       PropertiesConfiguration</a></code> object can be saved in a way that the
       resulting properties file does not contain any variables:
     </p>
@@ -244,11 +244,11 @@ extConfig.save("external_config.properties");
       you do not want to provide a special error handler, but only need to
       propagate the exception that caused the error event, you can make use of
       a convenience method of the
-      <code><a href="apidocs/org/apache/commons/configuration/ConfigurationUtils.html">
+      <code><a href="../apidocs/org/apache/commons/configuration/ConfigurationUtils.html">
       ConfigurationUtils</a></code> class: <code>enableRuntimeExceptions()</code>
       registers a special error listener at the passed in configuration that
       will throw a
-      <code><a href="apidocs/org/apache/commons/configuration/ConfigurationRuntimeException.html">
+      <code><a href="../apidocs/org/apache/commons/configuration/ConfigurationRuntimeException.html">
       ConfigurationRuntimeException</a></code> exception for each received
       error event. The following code fragment shows an example of using this
       method:
@@ -263,7 +263,7 @@ String value = config.getString("myKey");
     <p>
       <code>enableRuntimeExceptions()</code> can be called for all
       <code>Configuration</code> implementations that are derived from
-      <code><a href="apidocs/org/apache/commons/configuration/event/EventSource.html">
+      <code><a href="../apidocs/org/apache/commons/configuration/event/EventSource.html">
       EventSource</a></code> (which is the case for almost all configuration
       classes provided by this library). Of course the affected implementation
       must support the mechanism of error events, otherwise the registered
