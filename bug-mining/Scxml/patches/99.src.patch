diff --git a/src/main/java/org/apache/commons/scxml2/InvokerManager.java b/src/main/java/org/apache/commons/scxml2/InvokerManager.java
deleted file mode 100644
index 1fb05b5a..00000000
--- a/src/main/java/org/apache/commons/scxml2/InvokerManager.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.commons.scxml2;
-
-import org.apache.commons.scxml2.invoke.Invoker;
-import org.apache.commons.scxml2.invoke.InvokerException;
-import org.apache.commons.scxml2.model.Invoke;
-
-/**
- * InvokerManager provides the ability to an Invoke action to
- * create and register an active Invoker instance
- */
-public interface InvokerManager {
-
-    /**
-     * Create a new {@link Invoker}
-     *
-     * @param type The type of the target being invoked.
-     * @return An {@link Invoker} for the specified type, if an
-     *         invoker class is registered against that type,
-     *         <code>null</code> otherwise.
-     * @throws InvokerException When a suitable {@link Invoker} cannot be instantiated.
-     */
-    Invoker newInvoker(final String type) throws InvokerException;
-
-    /**
-     * Registers the active {@link Invoker} for an {@link Invoke}
-     *
-     * @param invoke The Invoke.
-     * @param invoker The Invoker.
-     * @throws InvokerException when the Invoker doesn't have an invokerId
-     */
-    void registerInvoker(final Invoke invoke, final Invoker invoker) throws InvokerException;
-}
diff --git a/src/main/java/org/apache/commons/scxml2/SCXMLExecutionContext.java b/src/main/java/org/apache/commons/scxml2/SCXMLExecutionContext.java
index 7ecd4508..ae84dc09 100644
--- a/src/main/java/org/apache/commons/scxml2/SCXMLExecutionContext.java
+++ b/src/main/java/org/apache/commons/scxml2/SCXMLExecutionContext.java
@@ -29,6 +29,7 @@ import org.apache.commons.scxml2.env.SimpleDispatcher;
 import org.apache.commons.scxml2.env.SimpleErrorReporter;
 import org.apache.commons.scxml2.invoke.Invoker;
 import org.apache.commons.scxml2.invoke.InvokerException;
+import org.apache.commons.scxml2.invoke.SimpleSCXMLInvoker;
 import org.apache.commons.scxml2.model.Invoke;
 import org.apache.commons.scxml2.model.ModelException;
 import org.apache.commons.scxml2.model.SCXML;
@@ -37,7 +38,16 @@ import org.apache.commons.scxml2.model.SCXML;
  * SCXMLExecutionContext provides all the services and internal data used during the interpretation of an SCXML
  * statemachine across micro and macro steps
  */
-public class SCXMLExecutionContext implements SCXMLIOProcessor, InvokerManager {
+public class SCXMLExecutionContext implements SCXMLIOProcessor {
+
+    /**
+     * Default and required supported SCXML Processor Invoker service URI
+     */
+    public static final String SCXML_INVOKER_TYPE_URI = "http://www.w3.org/TR/scxml/";
+    /**
+     * Alias for {@link #SCXML_INVOKER_TYPE_URI}
+     */
+    public static final String SCXML_INVOKER_TYPE = "scxml";
 
     /**
      * SCXML Execution Logger for the application.
@@ -49,6 +59,11 @@ public class SCXMLExecutionContext implements SCXMLIOProcessor, InvokerManager {
      */
     private final ActionExecutionContext actionExecutionContext;
 
+    /**
+     * The SCXMLExecutor of this SCXMLExecutionContext
+     */
+    private final SCXMLExecutor scxmlExecutor;
+
     /**
      * The SCInstance.
      */
@@ -112,14 +127,15 @@ public class SCXMLExecutionContext implements SCXMLIOProcessor, InvokerManager {
     /**
      * Constructor
      *
-     * @param externalIOProcessor The external IO Processor
+     * @param scxmlExecutor The SCXMLExecutor of this SCXMLExecutionContext
      * @param evaluator The evaluator
      * @param eventDispatcher The event dispatcher, if null a SimpleDispatcher instance will be used
      * @param errorReporter The error reporter, if null a SimpleErrorReporter instance will be used
      */
-    protected SCXMLExecutionContext(SCXMLIOProcessor externalIOProcessor, Evaluator evaluator,
+    protected SCXMLExecutionContext(SCXMLExecutor scxmlExecutor, Evaluator evaluator,
                                     EventDispatcher eventDispatcher, ErrorReporter errorReporter) {
-        this.externalIOProcessor = externalIOProcessor;
+        this.scxmlExecutor = scxmlExecutor;
+        this.externalIOProcessor = scxmlExecutor;
         this.evaluator = evaluator;
         this.eventdispatcher = eventDispatcher != null ? eventDispatcher : new SimpleDispatcher();
         this.errorReporter = errorReporter != null ? errorReporter : new SimpleErrorReporter();
@@ -131,7 +147,16 @@ public class SCXMLExecutionContext implements SCXMLIOProcessor, InvokerManager {
         ioProcessors.put(SCXMLIOProcessor.DEFAULT_EVENT_PROCESSOR, getExternalIOProcessor());
         ioProcessors.put(SCXMLIOProcessor.SCXML_EVENT_PROCESSOR, getExternalIOProcessor());
         ioProcessors.put(SCXMLIOProcessor.INTERNAL_EVENT_PROCESSOR, getInternalIOProcessor());
+        if (scxmlExecutor.getParentSCXMLExecutor() != null) {
+            ioProcessors.put(SCXMLIOProcessor.PARENT_EVENT_PROCESSOR, scxmlExecutor.getParentSCXMLExecutor());
+        }
         initializeIOProcessors();
+        registerInvokerClass(SCXML_INVOKER_TYPE_URI, SimpleSCXMLInvoker.class);
+        registerInvokerClass(SCXML_INVOKER_TYPE, SimpleSCXMLInvoker.class);
+    }
+
+    public SCXMLExecutor getSCXMLExecutor() {
+        return scxmlExecutor;
     }
 
     public SCXMLIOProcessor getExternalIOProcessor() {
diff --git a/src/main/java/org/apache/commons/scxml2/SCXMLExecutor.java b/src/main/java/org/apache/commons/scxml2/SCXMLExecutor.java
index 6a268c0c..fae2d586 100644
--- a/src/main/java/org/apache/commons/scxml2/SCXMLExecutor.java
+++ b/src/main/java/org/apache/commons/scxml2/SCXMLExecutor.java
@@ -51,6 +51,11 @@ public class SCXMLExecutor implements SCXMLIOProcessor {
      */
     private Log log = LogFactory.getLog(SCXMLExecutor.class);
 
+    /**
+     * Parent SCXMLExecutor
+     */
+    private SCXMLExecutor parentSCXMLExecutor;
+
     /**
      *  Interpretation semantics.
      */
@@ -100,6 +105,25 @@ public class SCXMLExecutor implements SCXMLIOProcessor {
         this.exctx = new SCXMLExecutionContext(this, expEvaluator, evtDisp, errRep);
     }
 
+    /**
+     * Constructor using a parent SCXMLExecutor
+     *
+     * @param parentSCXMLExecutor the parent SCXMLExecutor
+     */
+    public SCXMLExecutor(final SCXMLExecutor parentSCXMLExecutor) {
+        this.parentSCXMLExecutor = parentSCXMLExecutor;
+        this.semantics = parentSCXMLExecutor.semantics;
+        this.exctx = new SCXMLExecutionContext(this, parentSCXMLExecutor.getEvaluator(),
+                parentSCXMLExecutor.getEventdispatcher(), parentSCXMLExecutor.getErrorReporter());
+    }
+
+    /**
+     * @return the parent SCXMLExecutor (if any)
+     */
+    protected SCXMLExecutor getParentSCXMLExecutor() {
+        return parentSCXMLExecutor;
+    }
+
     /**
      * Get the current state machine instance status.
      *
diff --git a/src/main/java/org/apache/commons/scxml2/SCXMLIOProcessor.java b/src/main/java/org/apache/commons/scxml2/SCXMLIOProcessor.java
index ac818863..db5910ce 100644
--- a/src/main/java/org/apache/commons/scxml2/SCXMLIOProcessor.java
+++ b/src/main/java/org/apache/commons/scxml2/SCXMLIOProcessor.java
@@ -37,6 +37,11 @@ public interface SCXMLIOProcessor {
      */
     String INTERNAL_EVENT_PROCESSOR = "#_internal";
 
+    /**
+     * The name of the parent Event Processor
+     */
+    String PARENT_EVENT_PROCESSOR = "#_parent";
+
     /**
      * Send an event into the SCXML processor queue
      * <p>
diff --git a/src/main/java/org/apache/commons/scxml2/env/SimpleDispatcher.java b/src/main/java/org/apache/commons/scxml2/env/SimpleDispatcher.java
index 04592d60..c3332c9e 100644
--- a/src/main/java/org/apache/commons/scxml2/env/SimpleDispatcher.java
+++ b/src/main/java/org/apache/commons/scxml2/env/SimpleDispatcher.java
@@ -189,6 +189,10 @@ public class SimpleDispatcher implements EventDispatcher, Serializable {
             if (target == null) {
                 ioProcessor = ioProcessors.get(SCXMLIOProcessor.SCXML_EVENT_PROCESSOR);
             }
+            else if (ioProcessors.containsKey(target)) {
+                ioProcessor = ioProcessors.get(target);
+                internal = SCXMLIOProcessor.INTERNAL_EVENT_PROCESSOR.equals(target);
+            }
             else if (SCXMLIOProcessor.INTERNAL_EVENT_PROCESSOR.equals(target)) {
                 ioProcessor = ioProcessors.get(SCXMLIOProcessor.INTERNAL_EVENT_PROCESSOR);
                 internal = true;
diff --git a/src/main/java/org/apache/commons/scxml2/invoke/Invoker.java b/src/main/java/org/apache/commons/scxml2/invoke/Invoker.java
index 8ef80842..67db4851 100644
--- a/src/main/java/org/apache/commons/scxml2/invoke/Invoker.java
+++ b/src/main/java/org/apache/commons/scxml2/invoke/Invoker.java
@@ -18,8 +18,7 @@ package org.apache.commons.scxml2.invoke;
 
 import java.util.Map;
 
-import org.apache.commons.scxml2.Evaluator;
-import org.apache.commons.scxml2.SCXMLIOProcessor;
+import org.apache.commons.scxml2.SCXMLExecutor;
 import org.apache.commons.scxml2.TriggerEvent;
 
 /**
@@ -51,7 +50,7 @@ import org.apache.commons.scxml2.TriggerEvent;
  *   <li>Instantiation via {@link Class#newInstance()}
  *       (Invoker implementation requires accessible constructor).</li>
  *   <li>Configuration (setters for invoke ID and
- *       {@link org.apache.commons.scxml2.SCXMLIOProcessor}).</li>
+ *       {@link org.apache.commons.scxml2.SCXMLExecutor}).</li>
  *   <li>Initiation of invoked activity via invoke() method, passing
  *       the source URI and the map of params.</li>
  *   <li>Zero or more bi-directional event triggering.</li>
@@ -83,18 +82,10 @@ public interface Invoker {
     void setInvokeId(String invokeId);
 
     /**
-     * Set I/O Processor of the parent state machine, which provides the
-     * channel.
-     *
-     * @param parentIOProcessor The I/O Processor of the parent state machine.
-     */
-    void setParentIOProcessor(SCXMLIOProcessor parentIOProcessor);
-
-    /**
-     * Set the Evaluator to be used by the child state machine (to ensure/enforce a compatible data model)
-     * @param evaluator the Evaluator to be used
+     * Sets the parent SCXMLExecutor through which this Invoker is initiated
+     * @param scxmlExecutor the parent SCXMLExecutor
      */
-    void setEvaluator(Evaluator evaluator);
+    void setParentSCXMLExecutor(SCXMLExecutor scxmlExecutor);
 
     /**
      * Begin this invocation.
diff --git a/src/main/java/org/apache/commons/scxml2/invoke/SimpleSCXMLInvoker.java b/src/main/java/org/apache/commons/scxml2/invoke/SimpleSCXMLInvoker.java
index 8b774bcd..102cdd6e 100644
--- a/src/main/java/org/apache/commons/scxml2/invoke/SimpleSCXMLInvoker.java
+++ b/src/main/java/org/apache/commons/scxml2/invoke/SimpleSCXMLInvoker.java
@@ -24,12 +24,8 @@ import java.util.Map;
 import javax.xml.stream.XMLStreamException;
 
 import org.apache.commons.scxml2.Context;
-import org.apache.commons.scxml2.Evaluator;
 import org.apache.commons.scxml2.SCXMLExecutor;
-import org.apache.commons.scxml2.SCXMLIOProcessor;
 import org.apache.commons.scxml2.TriggerEvent;
-import org.apache.commons.scxml2.env.SimpleDispatcher;
-import org.apache.commons.scxml2.env.SimpleErrorReporter;
 import org.apache.commons.scxml2.env.SimpleSCXMLListener;
 import org.apache.commons.scxml2.io.SCXMLReader;
 import org.apache.commons.scxml2.model.ModelException;
@@ -45,10 +41,8 @@ public class SimpleSCXMLInvoker implements Invoker, Serializable {
     private static final long serialVersionUID = 1L;
     /** Parent state ID. */
     private String parentStateId;
-    /** Invoking document's external I/O Processor */
-    private SCXMLIOProcessor parentIOProcessor;
-    /** The Evaluator provided by the parent executor */
-    private Evaluator evaluator;
+    /** Invoking parent SCXMLExecutor */
+    private SCXMLExecutor parentSCXMLExecutor;
     /** The invoked state machine executor. */
     private SCXMLExecutor executor;
     /** Cancellation status. */
@@ -73,15 +67,8 @@ public class SimpleSCXMLInvoker implements Invoker, Serializable {
     /**
      * {@inheritDoc}.
      */
-    public void setParentIOProcessor(SCXMLIOProcessor parentIOProcessor) {
-        this.parentIOProcessor = parentIOProcessor;
-    }
-
-    /**
-     * {@inheritDoc}.
-     */
-    public void setEvaluator(final Evaluator evaluator) {
-        this.evaluator = evaluator;
+    public void setParentSCXMLExecutor(SCXMLExecutor parentSCXMLExecutor) {
+        this.parentSCXMLExecutor = parentSCXMLExecutor;
     }
 
     /**
@@ -99,20 +86,18 @@ public class SimpleSCXMLInvoker implements Invoker, Serializable {
         } catch (XMLStreamException xse) {
             throw new InvokerException(xse.getMessage(), xse.getCause());
         }
-        executor = new SCXMLExecutor(evaluator, new SimpleDispatcher(), new SimpleErrorReporter());
-        Context rootCtx = evaluator.newContext(null);
-        for (Map.Entry<String, Object> entry : params.entrySet()) {
-            rootCtx.setLocal(entry.getKey(), entry.getValue());
-        }
-        executor.setRootContext(rootCtx);
+        executor = new SCXMLExecutor(parentSCXMLExecutor);
         try {
             executor.setStateMachine(scxml);
         }
         catch (ModelException me) {
             throw new InvokerException(me);
         }
+        Context rootCtx = executor.getRootContext();
+        for (Map.Entry<String, Object> entry : params.entrySet()) {
+            rootCtx.setLocal(entry.getKey(), entry.getValue());
+        }
         executor.addListener(scxml, new SimpleSCXMLListener());
-        executor.registerInvokerClass("scxml", this.getClass());
         try {
             executor.go();
         } catch (ModelException me) {
@@ -120,7 +105,7 @@ public class SimpleSCXMLInvoker implements Invoker, Serializable {
         }
         if (executor.getStatus().isFinal()) {
             TriggerEvent te = new TriggerEvent("done.invoke."+parentStateId, TriggerEvent.SIGNAL_EVENT);
-            new AsyncTrigger(parentIOProcessor, te).start();
+            new AsyncTrigger(parentSCXMLExecutor, te).start();
         }
     }
 
@@ -136,7 +121,7 @@ public class SimpleSCXMLInvoker implements Invoker, Serializable {
         executor.addEvent(evt);
         if (!doneBefore && executor.getStatus().isFinal()) {
             TriggerEvent te = new TriggerEvent("done.invoke."+parentStateId,TriggerEvent.SIGNAL_EVENT);
-            new AsyncTrigger(parentIOProcessor, te).start();
+            new AsyncTrigger(parentSCXMLExecutor, te).start();
         }
     }
 
diff --git a/src/main/java/org/apache/commons/scxml2/model/Invoke.java b/src/main/java/org/apache/commons/scxml2/model/Invoke.java
index 37e6a800..8384ef1a 100644
--- a/src/main/java/org/apache/commons/scxml2/model/Invoke.java
+++ b/src/main/java/org/apache/commons/scxml2/model/Invoke.java
@@ -22,10 +22,9 @@ import java.util.Map;
 import org.apache.commons.scxml2.ActionExecutionContext;
 import org.apache.commons.scxml2.Context;
 import org.apache.commons.scxml2.Evaluator;
-import org.apache.commons.scxml2.InvokerManager;
 import org.apache.commons.scxml2.PathResolver;
+import org.apache.commons.scxml2.SCXMLExecutionContext;
 import org.apache.commons.scxml2.SCXMLExpressionException;
-import org.apache.commons.scxml2.SCXMLIOProcessor;
 import org.apache.commons.scxml2.SCXMLSystemContext;
 import org.apache.commons.scxml2.TriggerEvent;
 import org.apache.commons.scxml2.invoke.Invoker;
@@ -46,14 +45,9 @@ public class Invoke extends NamelistHolder implements PathResolverHolder, Conten
     private static final long serialVersionUID = 1L;
 
     /**
-     * The default context variable key under which the InvokerManager is provided
+     * The default context variable key under which the current SCXMLExecutionContext is provided
      */
-    private static final String INVOKER_MANAGER_KEY = "_INVOKER_MANAGER";
-
-    /**
-     * The default target type.
-     */
-    private static final String TYPE_SCXML = "scxml";
+    private static final String CURRENT_EXECUTION_CONTEXT_KEY = "_CURRENT_EXECUTION_CONTEXT";
 
     /**
      * Identifier for this Invoke.
@@ -300,10 +294,10 @@ public class Invoke extends NamelistHolder implements PathResolverHolder, Conten
     }
 
     /**
-     * @return The local context variable name under which the InvokerManager is provided to the Invoke
+     * @return The local context variable name under which the current SCXMLExecutionContext is provided to the Invoke
      */
-    public String getInvokerManagerKey() {
-        return INVOKER_MANAGER_KEY;
+    public String getCurrentSCXMLExecutionContextKey() {
+        return CURRENT_EXECUTION_CONTEXT_KEY;
     }
 
     /**
@@ -337,16 +331,16 @@ public class Invoke extends NamelistHolder implements PathResolverHolder, Conten
 
     @SuppressWarnings("unchecked")
     @Override
-    public void execute(final ActionExecutionContext exctx) throws ModelException {
+    public void execute(final ActionExecutionContext axctx) throws ModelException {
         EnterableState parentState = getParentEnterableState();
-        Context ctx = exctx.getContext(parentState);
-        InvokerManager invokerManager = (InvokerManager)ctx.getVars().get(getInvokerManagerKey());
-        if (invokerManager == null) {
-            throw new ModelException("Missing InvokerManager instance in context under key: "+getInvokerManagerKey());
+        Context ctx = axctx.getContext(parentState);
+        SCXMLExecutionContext exctx = (SCXMLExecutionContext)ctx.getVars().get(getCurrentSCXMLExecutionContextKey());
+        if (exctx == null) {
+            throw new ModelException("Missing current SCXMLExecutionContext instance in context under key: "+ getCurrentSCXMLExecutionContextKey());
         }
         try {
             ctx.setLocal(getNamespacesKey(), getNamespaces());
-            Evaluator eval = exctx.getEvaluator();
+            Evaluator eval = axctx.getEvaluator();
 
             String typeValue = type;
             if (typeValue == null && typeexpr != null) {
@@ -357,9 +351,9 @@ public class Invoke extends NamelistHolder implements PathResolverHolder, Conten
                 }
             }
             if (typeValue == null) {
-                typeValue = TYPE_SCXML;
+                typeValue = SCXMLExecutionContext.SCXML_INVOKER_TYPE;
             }
-            Invoker invoker = invokerManager.newInvoker(typeValue);
+            Invoker invoker = exctx.newInvoker(typeValue);
 
             String invokeId = getId();
             if (invokeId == null) {
@@ -400,25 +394,22 @@ public class Invoke extends NamelistHolder implements PathResolverHolder, Conten
                         ": no src and no content defined");
             }
             Map<String, Object> payloadDataMap = new HashMap<String, Object>();
-            addNamelistDataToPayload(exctx, payloadDataMap);
-            addParamsToPayload(exctx, payloadDataMap);
-            SCXMLIOProcessor ioProcessor = ((Map<String,SCXMLIOProcessor>)ctx.get(SCXMLSystemContext.IOPROCESSORS_KEY)).
-                    get(SCXMLIOProcessor.SCXML_EVENT_PROCESSOR);
-            invoker.setParentIOProcessor(ioProcessor);
-            invoker.setEvaluator(exctx.getEvaluator());
+            addNamelistDataToPayload(axctx, payloadDataMap);
+            addParamsToPayload(axctx, payloadDataMap);
+            invoker.setParentSCXMLExecutor(exctx.getSCXMLExecutor());
             if (src != null) {
                 invoker.invoke(src, payloadDataMap);
             }
             // TODO: } else { invoker.invoke(srcNode, payloadDataMap); }
-            invokerManager.registerInvoker(this, invoker);
+            exctx.registerInvoker(this, invoker);
         }
         catch (InvokerException e) {
-            exctx.getErrorReporter().onError(ErrorConstants.EXECUTION_ERROR, e.getMessage(), this);
-            exctx.getInternalIOProcessor().addEvent(new TriggerEvent(TriggerEvent.ERROR_EXECUTION, TriggerEvent.ERROR_EVENT));
+            axctx.getErrorReporter().onError(ErrorConstants.EXECUTION_ERROR, e.getMessage(), this);
+            axctx.getInternalIOProcessor().addEvent(new TriggerEvent(TriggerEvent.ERROR_EXECUTION, TriggerEvent.ERROR_EVENT));
         }
         catch (SCXMLExpressionException e) {
-            exctx.getInternalIOProcessor().addEvent(new TriggerEvent(TriggerEvent.ERROR_EXECUTION, TriggerEvent.ERROR_EVENT));
-            exctx.getErrorReporter().onError(ErrorConstants.EXPRESSION_ERROR, e.getMessage(), this);
+            axctx.getInternalIOProcessor().addEvent(new TriggerEvent(TriggerEvent.ERROR_EXECUTION, TriggerEvent.ERROR_EVENT));
+            axctx.getErrorReporter().onError(ErrorConstants.EXPRESSION_ERROR, e.getMessage(), this);
         }
         finally {
             ctx.setLocal(getNamespacesKey(), null);
diff --git a/src/main/java/org/apache/commons/scxml2/model/Send.java b/src/main/java/org/apache/commons/scxml2/model/Send.java
index 9cdbccd1..55233b2b 100644
--- a/src/main/java/org/apache/commons/scxml2/model/Send.java
+++ b/src/main/java/org/apache/commons/scxml2/model/Send.java
@@ -39,11 +39,6 @@ public class Send extends NamelistHolder implements ContentContainer {
      */
     private static final long serialVersionUID = 1L;
 
-    /**
-     * The default target type.
-     */
-    private static final String TYPE_SCXML = "scxml";
-
     /**
      * The suffix in the delay string for milliseconds.
      */
@@ -386,9 +381,9 @@ public class Send extends NamelistHolder implements ContentContainer {
         }
         if (typeValue == null) {
             // must default to 'scxml' when unspecified
-            typeValue = TYPE_SCXML;
-        } else if (!TYPE_SCXML.equals(typeValue) && typeValue.trim().equalsIgnoreCase(TYPE_SCXML)) {
-            typeValue = TYPE_SCXML;
+            typeValue = SCXMLIOProcessor.DEFAULT_EVENT_PROCESSOR;
+        } else if (!SCXMLIOProcessor.DEFAULT_EVENT_PROCESSOR.equals(typeValue) && typeValue.trim().equalsIgnoreCase(SCXMLIOProcessor.SCXML_EVENT_PROCESSOR)) {
+            typeValue = SCXMLIOProcessor.DEFAULT_EVENT_PROCESSOR;
         }
         Object payload = null;
         Map<String, Object> payloadDataMap = new HashMap<String, Object>();
@@ -418,9 +413,9 @@ public class Send extends NamelistHolder implements ContentContainer {
         String eventValue = event;
         if (eventValue == null && eventexpr != null) {
             eventValue = (String) getTextContentIfNodeResult(eval.eval(ctx, eventexpr));
-            if ((eventValue == null || eventValue.trim().length() == 0) && exctx.getAppLog().isWarnEnabled()) {
+            if ((eventValue == null)) {
                 throw new SCXMLExpressionException("<send>: event expression \"" + eventexpr
-                        + "\" evaluated to null or empty String");
+                        + "\" evaluated to null");
             }
         }
         Map<String, SCXMLIOProcessor> ioProcessors = (Map<String, SCXMLIOProcessor>) ctx.get(SCXMLSystemContext.IOPROCESSORS_KEY);
diff --git a/src/main/java/org/apache/commons/scxml2/semantics/SCXMLSemanticsImpl.java b/src/main/java/org/apache/commons/scxml2/semantics/SCXMLSemanticsImpl.java
index 3cb9af10..0312423e 100644
--- a/src/main/java/org/apache/commons/scxml2/semantics/SCXMLSemanticsImpl.java
+++ b/src/main/java/org/apache/commons/scxml2/semantics/SCXMLSemanticsImpl.java
@@ -1054,10 +1054,10 @@ public class SCXMLSemanticsImpl implements SCXMLSemantics {
         for (TransitionalState ts : statesToInvoke) {
             for (Invoke invoke : ts.getInvokes()) {
                 Context ctx = aexctx.getContext(invoke.getParentEnterableState());
-                String invokerManagerKey = invoke.getInvokerManagerKey();
-                ctx.setLocal(invokerManagerKey, exctx);
+                String exctxKey = invoke.getCurrentSCXMLExecutionContextKey();
+                ctx.setLocal(exctxKey, exctx);
                 invoke.execute(aexctx);
-                ctx.setLocal(invokerManagerKey, null);
+                ctx.setLocal(exctxKey, null);
             }
         }
     }
diff --git a/src/test/java/org/apache/commons/scxml2/invoke/InvokeParamNameTest.java b/src/test/java/org/apache/commons/scxml2/invoke/InvokeParamNameTest.java
index bb6a9108..c1f3f586 100644
--- a/src/test/java/org/apache/commons/scxml2/invoke/InvokeParamNameTest.java
+++ b/src/test/java/org/apache/commons/scxml2/invoke/InvokeParamNameTest.java
@@ -18,9 +18,7 @@ package org.apache.commons.scxml2.invoke;
 
 import java.util.Map;
 
-import org.apache.commons.scxml2.Evaluator;
 import org.apache.commons.scxml2.SCXMLExecutor;
-import org.apache.commons.scxml2.SCXMLIOProcessor;
 import org.apache.commons.scxml2.SCXMLTestHelper;
 import org.apache.commons.scxml2.TriggerEvent;
 import org.apache.commons.scxml2.model.ModelException;
@@ -114,13 +112,9 @@ public class InvokeParamNameTest {
             this.invokeId = invokeId;
         }
 
-        public void setEvaluator(Evaluator evaluator) {
+        public void setParentSCXMLExecutor(SCXMLExecutor parentSCXMLExecutor) {
             // Not needed
         }
-
-        public void setParentIOProcessor(SCXMLIOProcessor parentIOProcessor) {
-            // Not needed    
-        }
     }
 
 }
diff --git a/src/test/java/org/apache/commons/scxml2/w3c/W3CTests.java b/src/test/java/org/apache/commons/scxml2/w3c/W3CTests.java
index 02621098..2cf6dfd3 100644
--- a/src/test/java/org/apache/commons/scxml2/w3c/W3CTests.java
+++ b/src/test/java/org/apache/commons/scxml2/w3c/W3CTests.java
@@ -40,8 +40,10 @@ import javax.xml.transform.stream.StreamResult;
 import javax.xml.transform.stream.StreamSource;
 
 import org.apache.commons.io.FileUtils;
+import org.apache.commons.scxml2.PathResolver;
 import org.apache.commons.scxml2.SCXMLExecutor;
 import org.apache.commons.scxml2.env.Tracer;
+import org.apache.commons.scxml2.env.URLResolver;
 import org.apache.commons.scxml2.invoke.SimpleSCXMLInvoker;
 import org.apache.commons.scxml2.io.SCXMLReader;
 import org.apache.commons.scxml2.model.Final;
@@ -721,7 +723,9 @@ public class W3CTests {
         try {
             System.out.println("Executing test: "+scxmlFile.getParentFile().getName()+"/"+scxmlFile.getName());
             final Tracer trc = new Tracer();
-            final SCXML doc = SCXMLReader.read(new FileReader(scxmlFile));
+            final PathResolver pathResolver = new URLResolver(scxmlFile.getParentFile().toURI().toURL());
+            final SCXMLReader.Configuration configuration = new SCXMLReader.Configuration(null, pathResolver);
+            final SCXML doc = SCXMLReader.read(new FileReader(scxmlFile), configuration);
             if (doc == null) {
                 System.out.println("                FAIL: the SCXML file " +
                         scxmlFile.getCanonicalPath() + " can not be parsed!");
diff --git a/src/test/java/org/apache/commons/scxml2/w3c/tests.xml b/src/test/java/org/apache/commons/scxml2/w3c/tests.xml
index 1a04cf9b..d41b11ac 100644
--- a/src/test/java/org/apache/commons/scxml2/w3c/tests.xml
+++ b/src/test/java/org/apache/commons/scxml2/w3c/tests.xml
@@ -51,7 +51,7 @@
   <test id="525" mandatory="true"  manual="false" enabled="false"                 ecma="fail"     xpath="pass"/>
   <test id="158" mandatory="true"  manual="false" enabled="true"                  ecma="pass"     xpath="pass"/>
   <test id="159" mandatory="true"  manual="false" enabled="false"                 ecma="fail"     xpath="fail"/>
-  <test id="276" mandatory="true"  manual="false" enabled="false"                 ecma=""         xpath="">Fails to complete</test>
+  <test id="276" mandatory="true"  manual="false" enabled="true"                  ecma="pass"     xpath="fail"/>
   <test id="277" mandatory="true"  manual="false" enabled="false"                 ecma="fail"     xpath="fail"/>
   <test id="279" mandatory="true"  manual="false" enabled="false"                 ecma="fail"     xpath="fail"/>
   <test id="280" mandatory="true"  manual="false" enabled="false"                 ecma="pass"     xpath="fail"/>
