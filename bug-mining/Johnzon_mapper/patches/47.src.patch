diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
index 059bf1e2..ca0244f4 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
@@ -131,6 +131,7 @@ public class MapperBuilder {
     private boolean primitiveConverters;
     private boolean failOnUnknownProperties;
     private SerializeValueFilter serializeValueFilter;
+    private boolean useBigDecimalForFloats;
 
     public Mapper build() {
         if (readerFactory == null || generatorFactory == null) {
@@ -218,7 +219,7 @@ public class MapperBuilder {
                         skipNull, skipEmptyArray,
                         treatByteArrayAsBase64, treatByteArrayAsBase64URL, readAttributeBeforeWrite,
                         accessMode, encoding, attributeOrder, enforceQuoteString, failOnUnknownProperties,
-                        serializeValueFilter),
+                        serializeValueFilter, useBigDecimalForFloats),
                 closeables);
     }
 
@@ -402,4 +403,9 @@ public class MapperBuilder {
         this.serializeValueFilter = serializeValueFilter;
         return this;
     }
+
+    public MapperBuilder setUseBigDecimalForFloats(final boolean useBigDecimalForFloats) {
+        this.useBigDecimalForFloats = useBigDecimalForFloats;
+        return this;
+    }
 }
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
index cbd3437c..5e9cceae 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
@@ -65,6 +65,7 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
     private final boolean enforceQuoteString;
     private final boolean failOnUnknown;
     private final SerializeValueFilter serializeValueFilter;
+    private final boolean useBigDecimalForFloats;
 
     private final Map<Class<?>, ObjectConverter.Writer<?>> objectConverterWriterCache;
     private final Map<Class<?>, ObjectConverter.Reader<?>> objectConverterReaderCache;
@@ -81,7 +82,7 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
                         final AccessMode accessMode, final Charset encoding,
                         final Comparator<String> attributeOrder,
                         final boolean enforceQuoteString, final boolean failOnUnknown,
-                        final SerializeValueFilter serializeValueFilter) {
+                        final SerializeValueFilter serializeValueFilter, boolean useBigDecimalForFloats) {
     //CHECKSTYLE:ON
         this.objectConverterWriters = objectConverterWriters;
         this.objectConverterReaders = objectConverterReaders;
@@ -102,6 +103,7 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
 
         this.objectConverterWriterCache = new HashMap<Class<?>, ObjectConverter.Writer<?>>(objectConverterWriters.size());
         this.objectConverterReaderCache = new HashMap<Class<?>, ObjectConverter.Reader<?>>(objectConverterReaders.size());
+        this.useBigDecimalForFloats = useBigDecimalForFloats;
     }
 
     public SerializeValueFilter getSerializeValueFilter() {
@@ -294,4 +296,8 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
     public boolean isEnforceQuoteString() {
         return enforceQuoteString;
     }
+
+    public boolean isUseBigDecimalForFloats() {
+        return useBigDecimalForFloats;
+    }
 }
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
index 4810f9d4..a97427f6 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
@@ -18,7 +18,6 @@
  */
 package org.apache.johnzon.mapper;
 
-import org.apache.johnzon.core.JsonLongImpl;
 import org.apache.johnzon.mapper.access.AccessMode;
 import org.apache.johnzon.mapper.converter.CharacterConverter;
 import org.apache.johnzon.mapper.converter.EnumConverter;
@@ -247,18 +246,7 @@ public class MappingParserImpl implements MappingParser {
                         for (final Map.Entry<String, JsonValue> value : object.entrySet()) {
                             final JsonValue jsonValue = value.getValue();
                             if (JsonNumber.class.isInstance(jsonValue) && any) {
-                                final JsonNumber number = JsonNumber.class.cast(jsonValue);
-                                if (JsonLongImpl.class.isInstance(number)) {
-                                    final int integer = number.intValue();
-                                    final long asLong = number.longValue();
-                                    if (integer == asLong) {
-                                        map.put(value.getKey(), integer);
-                                    } else {
-                                        map.put(value.getKey(), asLong);
-                                    }
-                                } else {
-                                    map.put(value.getKey(), !number.isIntegral() ? number.bigDecimalValue() : number.intValue());
-                                }
+                                map.put(value.getKey(), toNumberValue(JsonNumber.class.cast(jsonValue)));
                             } else if (JsonString.class.isInstance(jsonValue) && any) {
                                 map.put(value.getKey(), JsonString.class.cast(jsonValue).getString());
                             } else {
@@ -353,6 +341,24 @@ public class MappingParserImpl implements MappingParser {
         return t;
     }
 
+    private Number toNumberValue(JsonNumber jsonNumber) {
+        if (jsonNumber.isIntegral()) {
+            final int intValue = jsonNumber.intValue();
+            final long longValue = jsonNumber.longValue();
+            if (intValue == longValue) {
+                return intValue;
+            } else {
+                return longValue;
+            }
+        } else {
+            if (config.isUseBigDecimalForFloats()) {
+                return jsonNumber.bigDecimalValue();
+            } else {
+                return jsonNumber.doubleValue();
+            }
+        }
+    }
+
     private Object convertTo(final Adapter converter, final JsonValue jsonValue) {
         if (jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
 
@@ -462,11 +468,7 @@ public class MappingParserImpl implements MappingParser {
                 return false;
             }
             if (JsonNumber.class.isInstance(jsonValue)) {
-                final JsonNumber jsonNumber = JsonNumber.class.cast(jsonValue);
-                if (jsonNumber.isIntegral()) {
-                    return jsonNumber.intValue();
-                }
-                return jsonNumber.doubleValue();
+                return toNumberValue(JsonNumber.class.cast(jsonValue));
             }
         }
 
diff --git a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/LiteralTest.java b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/LiteralTest.java
index dc74f24a..830779ee 100644
--- a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/LiteralTest.java
+++ b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/LiteralTest.java
@@ -85,6 +85,16 @@ public class LiteralTest {
 
     }
 
+    @Test
+    public void readWhenUseBigDecimalForFloats() throws Exception {
+        final String json = "[1.5]";
+        final List<Object> expected = new ArrayList<Object>();
+        expected.add(new BigDecimal(1.5d));
+        final Collection<Object> read = new MapperBuilder().setUseBigDecimalForFloats(true).build()
+                .readCollection(new StringReader(json), new JohnzonParameterizedType(List.class, Object.class));
+        assertEquals(expected, read);
+    }
+
     @Test(expected = NumberFormatException.class)
     public void writeReadNumbersInf() {
         final NumberClass nc = new NumberClass();
diff --git a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java
index 949b2300..a84a1cd1 100644
--- a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java
+++ b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java
@@ -166,7 +166,7 @@ public class MapperConfigTest {
                                 new FieldAccessMode(true, true),
                                 Charset.forName("UTF-8"),
                                 null,
-                                false, false, null);
+                                false, false, null, false);
     }
 
 
diff --git a/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java b/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java
index 1960d4e4..6c0c3ded 100644
--- a/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java
+++ b/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java
@@ -71,7 +71,7 @@ public class ExtendMappingTest {
                         public int compare(final String o1, final String o2) {
                             return o1.compareTo(o2);
                         }
-                    }, false, false, null));
+                    }, false, false, null, false));
         }
 
         @Override
