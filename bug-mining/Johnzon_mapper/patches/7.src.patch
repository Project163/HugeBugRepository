diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
index bba8ab38..1a16a8ea 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
@@ -225,21 +225,27 @@ public class Mapper {
     public <T> void writeArray(final Collection<T> object, final Writer stream) {
         JsonGenerator generator = generatorFactory.createGenerator(stream);
         try {
-            if (object == null) {
-                generator = generator.writeStartArray().writeEnd();
-            } else {
-                generator = generator.writeStartArray();
-                for (final T t : object) {
-                    generator = writeItem(generator, t);
-                }
-                generator = generator.writeEnd();
-            }
+            generator = doWriteArray(object, generator);
         } finally {
             doCloseOrFlush(generator);
         }
     }
 
-    private void doCloseOrFlush(JsonGenerator generator) {
+    private <T> JsonGenerator doWriteArray(final Collection<T> object, final JsonGenerator inGenerator) {
+        JsonGenerator generator = inGenerator;
+        if (object == null) {
+            generator = generator.writeStartArray().writeEnd();
+        } else {
+            generator = generator.writeStartArray();
+            for (final T t : object) {
+                generator = writeItem(generator, t);
+            }
+            generator = generator.writeEnd();
+        }
+        return generator;
+    }
+
+    private void doCloseOrFlush(final JsonGenerator generator) {
         if (close) {
             generator.close();
         } else {
@@ -428,9 +434,22 @@ public class Mapper {
     }
 
     private JsonGenerator writeItem(final JsonGenerator generator, final Object o) {
-        final JsonGenerator newGen = writePrimitives(generator, o);
+        JsonGenerator newGen = writePrimitives(generator, o);
         if (newGen == null) {
-            return doWriteObject(generator, o);
+            if (Collection.class.isInstance(o)) {
+                newGen = doWriteArray(Collection.class.cast(o), generator);
+            } else if (o != null && o.getClass().isArray()) {
+                final int length = Array.getLength(o);
+                if (length > 0 || !skipEmptyArray) {
+                    newGen = generator.writeStartArray();
+                    for (int i = 0; i < length; i++) {
+                        newGen = writeItem(newGen, Array.get(o, i));
+                    }
+                    newGen = newGen.writeEnd();
+                }
+            } else {
+                newGen = doWriteObject(generator, o);
+            }
         }
         return newGen;
     }
diff --git a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java
index 7f6e10cc..55cc9260 100644
--- a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java
+++ b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java
@@ -29,6 +29,7 @@ import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.StringReader;
 import java.io.StringWriter;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Comparator;
@@ -78,7 +79,8 @@ public class MapperTest {
         assertEquals(1, object.size());
         final Collection<TheObject> object2 = new MapperBuilder().build()
                 .readJohnzonCollection(new ByteArrayInputStream("[{}]".getBytes()),
-                        new JohnzonCollectionType<List<TheObject>>() {});
+                        new JohnzonCollectionType<List<TheObject>>() {
+                        });
         assertNotNull(object2);
         assertEquals(1, object2.size());
     }
@@ -117,6 +119,23 @@ public class MapperTest {
         assertEquals("{\"a\":1,\"b\":2}", new String(baos.toByteArray()));
     }
 
+    @Test
+    public void writeArrayOfArray() {
+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        new MapperBuilder().build().writeArray(new String[][]{new String[]{"a", "b"}, new String[]{"c", "d"}}, baos);
+        assertEquals("[[\"a\",\"b\"],[\"c\",\"d\"]]", new String(baos.toByteArray()));
+    }
+
+    @Test
+    public void writeListOfList() {
+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        new MapperBuilder().build().writeArray(new ArrayList<List<String>>(){{
+            add(new ArrayList<String>(){{ add("a");add("b"); }});
+            add(new ArrayList<String>(){{ add("c");add("d"); }});
+        }}, baos);
+        assertEquals("[[\"a\",\"b\"],[\"c\",\"d\"]]", new String(baos.toByteArray()));
+    }
+
     @Test
     public void writeObject() {
         final TheObject instance = new MapperBuilder().build().readObject(new ByteArrayInputStream(BIG_OBJECT_STR.getBytes()),
