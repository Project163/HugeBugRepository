diff --git a/src/java/org/apache/commons/configuration/CompositeConfiguration.java b/src/java/org/apache/commons/configuration/CompositeConfiguration.java
index 872d6205..297475ea 100644
--- a/src/java/org/apache/commons/configuration/CompositeConfiguration.java
+++ b/src/java/org/apache/commons/configuration/CompositeConfiguration.java
@@ -294,12 +294,12 @@ implements Cloneable
             Configuration config = (Configuration) it.next();
             if (config != inMemoryConfiguration && config.containsKey(key))
             {
-                list.addAll(config.getList(key));
+                appendListProperty(list, config, key);
             }
         }
 
         // add all elements from the in memory configuration
-        list.addAll(inMemoryConfiguration.getList(key));
+        appendListProperty(list, inMemoryConfiguration, key);
 
         if (list.isEmpty())
         {
@@ -319,12 +319,12 @@ implements Cloneable
     {
         List list = getList(key);
 
-        // interpolate the strings
+        // transform property values into strings
         String[] tokens = new String[list.size()];
 
         for (int i = 0; i < tokens.length; i++)
         {
-            tokens[i] = interpolate(String.valueOf(list.get(i)));
+            tokens[i] = String.valueOf(list.get(i));
         }
 
         return tokens;
@@ -469,4 +469,30 @@ implements Cloneable
 
         return source;
     }
+
+    /**
+     * Adds the value of a property to the given list. This method is used by
+     * <code>getList()</code> for gathering property values from the child
+     * configurations.
+     *
+     * @param dest the list for collecting the data
+     * @param config the configuration to query
+     * @param key the key of the property
+     */
+    private static void appendListProperty(List dest, Configuration config,
+            String key)
+    {
+        Object value = config.getProperty(key);
+        if (value != null)
+        {
+            if (value instanceof Collection)
+            {
+                dest.addAll((Collection) value);
+            }
+            else
+            {
+                dest.add(value);
+            }
+        }
+    }
 }
diff --git a/src/test/org/apache/commons/configuration/TestCompositeConfiguration.java b/src/test/org/apache/commons/configuration/TestCompositeConfiguration.java
index 763293ad..80a8cfc7 100644
--- a/src/test/org/apache/commons/configuration/TestCompositeConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestCompositeConfiguration.java
@@ -22,17 +22,17 @@ import java.io.FileWriter;
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.NoSuchElementException;
-import java.util.Collection;
+
+import junit.framework.TestCase;
 
 import org.apache.commons.configuration.event.ConfigurationEvent;
 import org.apache.commons.configuration.event.ConfigurationListener;
 import org.apache.commons.configuration.reloading.FileAlwaysReloadingStrategy;
 
-import junit.framework.TestCase;
-
 /**
  * Test loading multiple configurations.
  *
@@ -765,6 +765,46 @@ public class TestCompositeConfiguration extends TestCase
         }
     }
 
+    /**
+     * Prepares a test for interpolation with multiple configurations and
+     * similar properties.
+     */
+    private void prepareInterpolationTest()
+    {
+        PropertiesConfiguration p = new PropertiesConfiguration();
+        p.addProperty("foo", "initial");
+        p.addProperty("bar", "${foo}");
+        p.addProperty("prefix.foo", "override");
+
+        cc.addConfiguration(p.subset("prefix"));
+        cc.addConfiguration(p);
+        assertEquals("Wrong value on direct access", "override", cc
+                .getString("bar"));
+    }
+
+    /**
+     * Tests querying a list when a tricky interpolation is involved. This is
+     * related to CONFIGURATION-339.
+     */
+    public void testGetListWithInterpolation()
+    {
+        prepareInterpolationTest();
+        List lst = cc.getList("bar");
+        assertEquals("Wrong number of values", 1, lst.size());
+        assertEquals("Wrong value in list", "override", lst.get(0));
+    }
+
+    /**
+     * Tests querying a string array when a tricky interpolation is involved.
+     */
+    public void testGetStringArrayWithInterpolation()
+    {
+        prepareInterpolationTest();
+        String[] values = cc.getStringArray("bar");
+        assertEquals("Wrong number of values", 1, values.length);
+        assertEquals("Wrong value in array", "override", values[0]);
+    }
+
     /**
      * A test configuration event listener that counts the number of received
      * events. Used for testing the event facilities.
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index d318efa4..6e7773bd 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,13 @@
 
   <body>
     <release version="1.6" date="in SVN" description="">
+      <action dev="oheger" type="fix" issue="CONFIGURATION-339">
+        When performing interpolation the methods getList() and getStringArray()
+        of CompositeConfiguration did not take the order of child configurations
+        into account. This could lead to wrong interpolated values when the key
+        was contained in multiple child configuration. Interpolation is now
+        always done in the correct order.
+      </action>
       <action dev="oheger" type="add" issue="CONFIGURATION-338" due-to="David Donn">
         PropertiesConfiguration now also performs interpolation when searching
         for include files. This means that the name of a file to include can be
