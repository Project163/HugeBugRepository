diff --git a/src/java/org/apache/commons/jexl/Interpreter.java b/src/java/org/apache/commons/jexl/Interpreter.java
index 0585317b..7d514a69 100644
--- a/src/java/org/apache/commons/jexl/Interpreter.java
+++ b/src/java/org/apache/commons/jexl/Interpreter.java
@@ -279,6 +279,7 @@ public class Interpreter implements ParserVisitor {
         JexlNode propertyNode = null;
         Object property = null;
         boolean isVariable = true;
+        int v = 0;
         StringBuilder variableName = null;
         // 1: follow children till penultimate
         int last = left.jjtGetNumChildren() - 1;
@@ -293,9 +294,11 @@ public class Interpreter implements ParserVisitor {
             // if we get null back as a result, check for an ant variable
             if (isVariable) {
                 String name = ((ASTIdentifier) objectNode).image;
-                if (c == 0) {
+                if (v == 0) {
                     variableName = new StringBuilder(name);
-                } else {
+                    v = 1;
+                }
+                for(; v <= c; ++v) {
                     variableName.append('.');
                     variableName.append(name);
                 }
@@ -958,6 +961,7 @@ public class Interpreter implements ParserVisitor {
         StringBuilder variableName = null;
         Map<String, ?> vars = context.getVars();
         boolean isVariable = true;
+        int v = 0;
         for (int i = 0; i < numChildren; i++) {
             JexlNode theNode = node.jjtGetChild(i);
             isVariable &= (theNode instanceof ASTIdentifier);
@@ -965,9 +969,11 @@ public class Interpreter implements ParserVisitor {
             // if we get null back a result, check for an ant variable
             if (result == null && isVariable) {
                 String name = ((ASTIdentifier) theNode).image;
-                if (i == 0) {
+                if (v == 0) {
                     variableName = new StringBuilder(name);
-                } else {
+                    v = 1;
+                }
+                for(; v <= i; ++v) {
                     variableName.append('.');
                     variableName.append(name);
                 }
diff --git a/src/test/org/apache/commons/jexl/IssuesTest.java b/src/test/org/apache/commons/jexl/IssuesTest.java
index 11a2f2ef..25f946ff 100644
--- a/src/test/org/apache/commons/jexl/IssuesTest.java
+++ b/src/test/org/apache/commons/jexl/IssuesTest.java
@@ -183,4 +183,35 @@ public class IssuesTest  extends JexlTestCase {
         }
     }
 
+    // JEXL-62
+    public void test62() throws Exception {
+        JexlContext ctxt;
+        JexlEngine jexl = new JexlEngine();
+        jexl.setSilent(true); // to avoid throwing JexlException on null method call
+        
+        Script jscript;
+
+        ctxt = JexlHelper.createContext();
+        jscript = jexl.createScript("dummy.hashCode()");
+        assertEquals(jscript.getText(), null, jscript.execute(ctxt)); // OK
+
+        ctxt.getVars().put("dummy", "abcd");
+        assertEquals(jscript.getText(), Integer.valueOf("abcd".hashCode()), jscript.execute(ctxt)); // OK
+        
+        jscript = jexl.createScript("dummy.hashCode");
+        assertEquals(jscript.getText(), null, jscript.execute(ctxt)); // OK
+
+        Expression jexpr;
+
+        ctxt = JexlHelper.createContext();
+        jexpr = jexl.createExpression("dummy.hashCode()");
+        assertEquals(jexpr.getExpression(), null, jexpr.evaluate(ctxt)); // OK
+
+        ctxt.getVars().put("dummy", "abcd");
+        assertEquals(jexpr.getExpression(), Integer.valueOf("abcd".hashCode()), jexpr.evaluate(ctxt)); // OK
+
+        jexpr = jexl.createExpression("dummy.hashCode");
+        assertEquals(jexpr.getExpression(), null, jexpr.evaluate(ctxt)); // OK
+    }
+
 }
\ No newline at end of file
