diff --git a/xbean-naming/src/main/java/org/apache/xbean/naming/context/AbstractContext.java b/xbean-naming/src/main/java/org/apache/xbean/naming/context/AbstractContext.java
index 9b47419e..dde0d6ea 100644
--- a/xbean-naming/src/main/java/org/apache/xbean/naming/context/AbstractContext.java
+++ b/xbean-naming/src/main/java/org/apache/xbean/naming/context/AbstractContext.java
@@ -113,7 +113,7 @@ public abstract class AbstractContext implements Context, NestedContextFactory,
         // try to look up the name directly (this is the fastest path)
         Object directLookup = getDeepBinding(stringName);
         if (directLookup != null) {
-            return ContextUtil.resolve(stringName, directLookup);
+            return ContextUtil.resolve(directLookup, stringName, parsedName, this);
         }
 
         // if the parsed name has no parts, they are asking for the current context
@@ -137,7 +137,7 @@ public abstract class AbstractContext implements Context, NestedContextFactory,
 
             // if the name only had one part, we've looked up everything
             if (parsedName.size() == 1) {
-                localValue = ContextUtil.resolve(stringName, localValue);
+                localValue = ContextUtil.resolve(localValue, stringName, parsedName, this);
                 return localValue;
             }
 
@@ -719,7 +719,7 @@ public abstract class AbstractContext implements Context, NestedContextFactory,
 
     protected NamingEnumeration<Binding> listBindings() throws NamingException {
         Map<String, Object> bindings = getBindings();
-        return new ContextUtil.ListBindingEnumeration(bindings);
+        return new ContextUtil.ListBindingEnumeration(bindings, this);
     }
 
     public NamingEnumeration<NameClassPair> list(String name) throws NamingException {
diff --git a/xbean-naming/src/main/java/org/apache/xbean/naming/context/ContextUtil.java b/xbean-naming/src/main/java/org/apache/xbean/naming/context/ContextUtil.java
index 1381072e..e4730a8a 100644
--- a/xbean-naming/src/main/java/org/apache/xbean/naming/context/ContextUtil.java
+++ b/xbean-naming/src/main/java/org/apache/xbean/naming/context/ContextUtil.java
@@ -48,7 +48,7 @@ public final class ContextUtil {
         return NAME_PARSER.parse(name);
     }
 
-    public static Object resolve(String name, Object value) throws NamingException {
+    public static Object resolve(Object value, String stringName, Name parsedName, Context nameCtx) throws NamingException {
         if (!(value instanceof Reference)) {
             return value;
         }
@@ -62,17 +62,20 @@ public final class ContextUtil {
             } catch (NamingException e) {
                 throw e;
             } catch (Exception e) {
-                throw (NamingException) new NamingException("Could not look up : " + name).initCause(e);
+                throw (NamingException) new NamingException("Could not look up : " + stringName == null? parsedName.toString(): stringName).initCause(e);
             }
         }
 
         // for normal References we have to do it the slow way
         try {
-            return NamingManager.getObjectInstance(reference, null, null, new Hashtable());
+            if (parsedName == null) {
+                parsedName = NAME_PARSER.parse(stringName);
+            }
+            return NamingManager.getObjectInstance(reference, parsedName, nameCtx, new Hashtable());
         } catch (NamingException e) {
             throw e;
         } catch (Exception e) {
-            throw (NamingException) new NamingException("Could not look up : " + name).initCause(e);
+            throw (NamingException) new NamingException("Could not look up : " + stringName == null? parsedName.toString(): stringName).initCause(e);
         }
     }
 
@@ -135,9 +138,11 @@ public final class ContextUtil {
 
     public static final class ListBindingEnumeration implements NamingEnumeration<Binding> {
         private final Iterator iterator;
+        private final Context context;
 
-        public ListBindingEnumeration(Map localBindings) {
+        public ListBindingEnumeration(Map localBindings, Context context) {
             this.iterator = localBindings.entrySet().iterator();
+            this.context = context;
         }
 
         public boolean hasMore() {
@@ -156,7 +161,7 @@ public final class ContextUtil {
             Map.Entry entry = (Map.Entry) iterator.next();
             String name = (String) entry.getKey();
             Object value = entry.getValue();
-            return new ReadOnlyBinding(name, value);
+            return new ReadOnlyBinding(name, value, context);
         }
 
         public void close() {
@@ -165,10 +170,12 @@ public final class ContextUtil {
 
     public static final class ReadOnlyBinding extends Binding {
         private final Object value;
+        private final Context context;
 
-        public ReadOnlyBinding(String name, Object value) {
+        public ReadOnlyBinding(String name, Object value, Context context) {
             super(name, value);
             this.value = value;
+            this.context = context;
         }
 
         public void setName(String name) {
@@ -189,7 +196,7 @@ public final class ContextUtil {
 
         public Object getObject() {
             try {
-                return resolve(getName(), value);
+                return resolve(value, getName(), null, context);
             } catch (NamingException e) {
                 throw new RuntimeException(e);
             }
diff --git a/xbean-naming/src/main/java/org/apache/xbean/naming/context/ImmutableContext.java b/xbean-naming/src/main/java/org/apache/xbean/naming/context/ImmutableContext.java
index 2a89b9d8..116668fc 100644
--- a/xbean-naming/src/main/java/org/apache/xbean/naming/context/ImmutableContext.java
+++ b/xbean-naming/src/main/java/org/apache/xbean/naming/context/ImmutableContext.java
@@ -47,7 +47,7 @@ public class ImmutableContext extends AbstractContext {
         super(nameInNamespace, ContextAccess.UNMODIFIABLE);
 
         if (cacheReferences) {
-            bindings = CachingReference.wrapReferences(bindings);
+            bindings = CachingReference.wrapReferences(bindings, this);
         }
 
         Map<String, Object> localBindings = ContextUtil.createBindings(bindings, this);
diff --git a/xbean-naming/src/main/java/org/apache/xbean/naming/context/WritableContext.java b/xbean-naming/src/main/java/org/apache/xbean/naming/context/WritableContext.java
index 320eea55..0af122b3 100644
--- a/xbean-naming/src/main/java/org/apache/xbean/naming/context/WritableContext.java
+++ b/xbean-naming/src/main/java/org/apache/xbean/naming/context/WritableContext.java
@@ -71,7 +71,7 @@ public class WritableContext extends AbstractFederatedContext {
 
         this.cacheReferences = cacheReferences;
         if (this.cacheReferences) {
-            bindings = CachingReference.wrapReferences(bindings);
+            bindings = CachingReference.wrapReferences(bindings, this);
         }
 
         Map<String, Object> localBindings = ContextUtil.createBindings(bindings, this);
@@ -111,7 +111,7 @@ public class WritableContext extends AbstractFederatedContext {
 
         }
         if (cacheReferences) {
-            value = CachingReference.wrapReference(getNameInNamespace(name), value);
+            value = CachingReference.wrapReference(name, value, this);
         }
 
         writeLock.lock();
diff --git a/xbean-naming/src/main/java/org/apache/xbean/naming/reference/CachingReference.java b/xbean-naming/src/main/java/org/apache/xbean/naming/reference/CachingReference.java
index 277387a9..c4e0bd7f 100644
--- a/xbean-naming/src/main/java/org/apache/xbean/naming/reference/CachingReference.java
+++ b/xbean-naming/src/main/java/org/apache/xbean/naming/reference/CachingReference.java
@@ -21,6 +21,7 @@ import java.util.Map;
 
 import javax.naming.NamingException;
 import javax.naming.Reference;
+import javax.naming.Context;
 
 import org.apache.xbean.naming.context.ContextUtil;
 
@@ -28,41 +29,44 @@ import org.apache.xbean.naming.context.ContextUtil;
  * @version $Rev: 355877 $ $Date: 2005-12-10 18:48:27 -0800 (Sat, 10 Dec 2005) $
  */
 public class CachingReference extends SimpleReference {
-    public static Object wrapReference(String fullName, Object value) {
+
+    public static Object wrapReference(String fullName, Object value, Context context) {
         if (value instanceof Reference && !(value instanceof CachingReference)) {
-            return new CachingReference(fullName, (Reference)value);
+            return new CachingReference(fullName, (Reference)value, context);
         }
         return value;
     }
 
-    public static Map<String, Object> wrapReferences(Map<String, Object> bindings) {
+    public static Map<String, Object> wrapReferences(Map<String, Object> bindings, Context context) {
         LinkedHashMap<String, Object> newBindings = new LinkedHashMap<String, Object>(bindings);
         for (Map.Entry<String, Object> entry : bindings.entrySet()) {
             String name = entry.getKey();
             Object value = entry.getValue();
             if (value instanceof Reference && !(value instanceof CachingReference)) {
-                newBindings.put(name, new CachingReference(name, (Reference) value));
+                newBindings.put(name, new CachingReference(name, (Reference) value, context));
             }
         }
         return newBindings;
     }
 
     private final Object lock = new Object();
-    private final String fullName;
+    private final String stringName;
+    private final Context context;
     private final Reference reference;
     private final String className;
     private Object value;
 
-    public CachingReference(String fullName, Reference reference) {
-        this.fullName = fullName;
+    public CachingReference(String fullName, Reference reference, Context context) {
+        this.stringName = fullName;
         this.reference = reference;
         className = reference.getClassName();
+        this.context = context;
     }
 
     public Object getContent() throws NamingException {
         synchronized(lock) {
             if (value == null) {
-                value = ContextUtil.resolve(fullName, reference);
+                value = ContextUtil.resolve(reference, stringName, null, context);
             }
             return value;
         }
