diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/AddDeliveredToHeaderTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/AddDeliveredToHeaderTest.java
index 76a33202fd..f36dad26b1 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/AddDeliveredToHeaderTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/AddDeliveredToHeaderTest.java
@@ -44,7 +44,7 @@ public class AddDeliveredToHeaderTest {
 
     @Test
     public void serviceShouldHandleMailWithoutRecipient() throws Exception {
-        FakeMail mail = FakeMail.builder().build();
+        FakeMail mail = FakeMail.builder().name("mail").build();
 
         testee.service(mail);
 
@@ -55,6 +55,7 @@ public class AddDeliveredToHeaderTest {
     @Test
     public void serviceShouldAddPerRecipientDeliveredToSpecificHeader() throws Exception {
         FakeMail mail = FakeMail.builder()
+            .name("mail")
             .recipients(MailAddressFixture.ANY_AT_JAMES, MailAddressFixture.OTHER_AT_JAMES)
             .build();
 
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/ContactExtractorTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/ContactExtractorTest.java
index fdfe43793e..c4bcf88e9e 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/ContactExtractorTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/ContactExtractorTest.java
@@ -88,7 +88,9 @@ public class ContactExtractorTest {
 
     @Test
     public void serviceShouldNotThrowWhenJsonProcessingFails() throws Exception {
-        FakeMail mail = FakeMail.builder().mimeMessage(MimeMessageUtil.defaultMimeMessage())
+        FakeMail mail = FakeMail.builder()
+                .name("mail")
+                .mimeMessage(MimeMessageUtil.defaultMimeMessage())
                 .sender(SENDER)
                 .recipient(TO)
                 .build();
@@ -111,7 +113,9 @@ public class ContactExtractorTest {
                 .addToRecipient(TO)
                 .setSubject("Contact collection Rocks")
                 .setText("This is my email");
-        FakeMail mail = FakeMail.builder().mimeMessage(message)
+        FakeMail mail = FakeMail.builder()
+            .name("mail")
+            .mimeMessage(message)
             .sender(SENDER)
             .recipient(TO)
             .build();
@@ -131,7 +135,9 @@ public class ContactExtractorTest {
             .addToRecipient("To <" + TO + ">")
             .setSubject("Contact collection Rocks")
             .setText("This is my email");
-        FakeMail mail = FakeMail.builder().mimeMessage(message)
+        FakeMail mail = FakeMail.builder()
+            .name("mail")
+            .mimeMessage(message)
             .sender(SENDER)
             .recipient(TO)
             .build();
@@ -151,7 +157,9 @@ public class ContactExtractorTest {
             .addToRecipient("=?ISO-8859-1?Q?Beno=EEt_TELLIER?= <tellier@linagora.com>")
             .setSubject("Contact collection Rocks")
             .setText("This is my email");
-        FakeMail mail = FakeMail.builder().mimeMessage(message)
+        FakeMail mail = FakeMail.builder()
+            .name("mail")
+            .mimeMessage(message)
             .sender(SENDER)
             .recipient(TO)
             .build();
@@ -172,7 +180,9 @@ public class ContactExtractorTest {
             + "\r\n"
             + "Please!";
         MimeMessage message = MimeMessageUtil.mimeMessageFromString(rawMessage);
-        FakeMail mail = FakeMail.builder().mimeMessage(message)
+        FakeMail mail = FakeMail.builder()
+            .name("mail")
+            .mimeMessage(message)
             .sender(SENDER)
             .recipient("recipient@example.com")
             .build();
@@ -193,7 +203,9 @@ public class ContactExtractorTest {
             + "\r\n"
             + "Please!";
         MimeMessage message = MimeMessageUtil.mimeMessageFromString(rawMessage);
-        FakeMail mail = FakeMail.builder().mimeMessage(message)
+        FakeMail mail = FakeMail.builder()
+            .name("mail")
+            .mimeMessage(message)
             .sender(SENDER)
             .recipient("recipient@example.com")
             .build();
@@ -214,7 +226,9 @@ public class ContactExtractorTest {
             + "\r\n"
             + "Please!";
         MimeMessage message = MimeMessageUtil.mimeMessageFromString(rawMessage);
-        FakeMail mail = FakeMail.builder().mimeMessage(message)
+        FakeMail mail = FakeMail.builder()
+            .name("mail")
+            .mimeMessage(message)
             .sender(SENDER)
             .recipient("recipient@example.com")
             .build();
@@ -234,7 +248,8 @@ public class ContactExtractorTest {
             .addToRecipient("To <" + TO + ">")
             .setSubject("Contact collection Rocks")
             .setText("This is my email");
-        FakeMail mail = FakeMail.builder().mimeMessage(message)
+        FakeMail mail = FakeMail.builder()
+            .name("mail").mimeMessage(message)
             .sender(SENDER)
             .recipient(TO)
             .build();
@@ -254,7 +269,9 @@ public class ContactExtractorTest {
             .addToRecipient("To <" + TO + ">")
             .setSubject("Contact collection Rocks")
             .setText("This is my email");
-        FakeMail mail = FakeMail.builder().mimeMessage(message)
+        FakeMail mail = FakeMail.builder()
+            .name("mail")
+            .mimeMessage(message)
             .sender(SENDER)
             .recipient(TO)
             .build();
@@ -273,7 +290,9 @@ public class ContactExtractorTest {
             .addToRecipient("To <" + TO + ">")
             .setSubject("Contact collection Rocks")
             .setText("This is my email");
-        FakeMail mail = FakeMail.builder().mimeMessage(message)
+        FakeMail mail = FakeMail.builder()
+            .name("mail")
+            .mimeMessage(message)
             .recipient(TO)
             .build();
         mailet.init(mailetConfig);
@@ -290,7 +309,9 @@ public class ContactExtractorTest {
                 .setSender(SENDER)
                 .setSubject("Contact collection Rocks")
                 .setText("This is my email");
-        FakeMail mail = FakeMail.builder().mimeMessage(message)
+        FakeMail mail = FakeMail.builder()
+            .name("mail")
+            .mimeMessage(message)
             .sender(SENDER)
             .build();
         mailet.init(mailetConfig);
@@ -307,7 +328,9 @@ public class ContactExtractorTest {
                 .setSender(SENDER)
                 .setSubject("Contact collection Rocks")
                 .setText("This is my email");
-        FakeMail mail = FakeMail.builder().mimeMessage(message)
+        FakeMail mail = FakeMail.builder()
+            .name("mail")
+            .mimeMessage(message)
             .sender(SENDER)
             .build();
 
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/LogMessageTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/LogMessageTest.java
index 7857dc9a47..8f64af8440 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/LogMessageTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/LogMessageTest.java
@@ -82,6 +82,7 @@ class LogMessageTest {
         mailet.init(mailetConfig);
 
         mailet.service(FakeMail.builder()
+            .name("mail")
             .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                 .addHeader("Date", "Tue, 16 Jan 2018 10:23:03 +0100")
                 .setSubject("subject")
@@ -247,8 +248,8 @@ class LogMessageTest {
                 "\r\n" +
                 "This is a fake mail");
         return FakeMail.builder()
-                .mimeMessage(message)
                 .name("name")
+                .mimeMessage(message)
                 .state(Mail.DEFAULT)
                 .recipient("receiver@domain.com")
                 .sender("sender@any.com")
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/MailAttributesListToMimeHeadersTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/MailAttributesListToMimeHeadersTest.java
index ddb4d127b8..2380666164 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/MailAttributesListToMimeHeadersTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/MailAttributesListToMimeHeadersTest.java
@@ -95,6 +95,7 @@ class MailAttributesListToMimeHeadersTest {
         mailet.init(mailetConfig);
 
         FakeMail mail = FakeMail.builder()
+            .name("mail")
             .mimeMessage(MailUtil.createMimeMessage())
             .attribute(MAIL_ATTRIBUTE1)
             .attribute(MAIL_ATTRIBUTE2)
@@ -115,6 +116,7 @@ class MailAttributesListToMimeHeadersTest {
         mailet.init(mailetConfig);
 
         FakeMail mail = FakeMail.builder()
+            .name("mail")
             .mimeMessage(MailUtil.createMimeMessage())
             .attribute(MAIL_ATTRIBUTE1)
             .build();
@@ -140,6 +142,7 @@ class MailAttributesListToMimeHeadersTest {
         listWithNull.add(null);
         listWithNull.add("2");
         FakeMail mail = FakeMail.builder()
+            .name("mail")
             .mimeMessage(MailUtil.createMimeMessage())
             .attribute(Attribute.convertToAttribute(MAIL_ATTRIBUTE_NAME1, listWithNull))
             .build();
@@ -162,6 +165,7 @@ class MailAttributesListToMimeHeadersTest {
         mailet.init(mailetConfig);
 
         FakeMail mail = FakeMail.builder()
+            .name("mail")
             .mimeMessage(MailUtil.createMimeMessage())
             .attribute(MAIL_ATTRIBUTE1)
             .attribute(MAIL_ATTRIBUTE2)
@@ -187,6 +191,7 @@ class MailAttributesListToMimeHeadersTest {
 
         String firstValue = "first value";
         FakeMail mail = FakeMail.builder()
+            .name("mail")
             .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                 .addHeader(HEADER_NAME1, firstValue))
             .attribute(MAIL_ATTRIBUTE1)
@@ -209,6 +214,7 @@ class MailAttributesListToMimeHeadersTest {
         mailet.init(mailetConfig);
 
         FakeMail mail = FakeMail.builder()
+            .name("mail")
             .mimeMessage(MimeMessageBuilder.mimeMessageBuilder())
             .attribute(Attribute.convertToAttribute(MAIL_ATTRIBUTE_NAME1, 3L))
             .attribute(MAIL_ATTRIBUTE2)
@@ -232,6 +238,7 @@ class MailAttributesListToMimeHeadersTest {
 
         String value = "value";
         FakeMail mail = FakeMail.builder()
+            .name("mail")
             .mimeMessage(MimeMessageBuilder.mimeMessageBuilder())
             .attribute(Attribute.convertToAttribute(MAIL_ATTRIBUTE_NAME1, ImmutableList.of(3L, value)))
             .build();
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/NullTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/NullTest.java
index 270000d577..5ff8ccbea0 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/NullTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/NullTest.java
@@ -40,7 +40,7 @@ public class NullTest {
 
     @Test
     public void shouldChangeStateToGhost() throws MessagingException {
-        FakeMail mail = FakeMail.builder().build();
+        FakeMail mail = FakeMail.builder().name("mail").build();
         
         mailet.service(mail);
 
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/OnlyTextTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/OnlyTextTest.java
index 24adad7431..db7952998b 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/OnlyTextTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/OnlyTextTest.java
@@ -67,6 +67,7 @@ class OnlyTextTest {
         message.saveChanges();
 
         mail = FakeMail.builder()
+                .name("mail")
                 .mimeMessage(message)
                 .build();
         mailet.service(mail);
@@ -94,6 +95,7 @@ class OnlyTextTest {
         message.saveChanges();
 
         mail = FakeMail.builder()
+                .name("mail")
                 .mimeMessage(message)
                 .build();
         mailet.service(mail);
@@ -127,6 +129,7 @@ class OnlyTextTest {
         message.saveChanges();
 
         mail = FakeMail.builder()
+                .name("mail")
                 .mimeMessage(message)
                 .build();
         mailet.service(mail);
@@ -144,6 +147,7 @@ class OnlyTextTest {
         message.saveChanges();
 
         mail = FakeMail.builder()
+                .name("mail")
                 .mimeMessage(message)
                 .build();
         mailet.service(mail);
@@ -169,6 +173,7 @@ class OnlyTextTest {
         message.saveChanges();
 
         mail = FakeMail.builder()
+                .name("mail")
                 .mimeMessage(message)
                 .build();
         mailet.service(mail);
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/PostmasterAliasTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/PostmasterAliasTest.java
index 56ac5a1de7..0f93592d07 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/PostmasterAliasTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/PostmasterAliasTest.java
@@ -48,7 +48,7 @@ public class PostmasterAliasTest {
 
     @Test
     public void serviceShouldAcceptMailsWithNoRecipients() throws Exception {
-        Mail mail = FakeMail.builder().build();
+        Mail mail = FakeMail.builder().name("mail").build();
 
         testee.service(mail);
 
@@ -58,6 +58,7 @@ public class PostmasterAliasTest {
     @Test
     public void serviceShouldNotAlterMailsForPostmaster() throws Exception {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipient(postmaster)
             .build();
 
@@ -69,6 +70,7 @@ public class PostmasterAliasTest {
     @Test
     public void serviceShouldNotAlterMailForOtherUsers() throws Exception {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipient(MailAddressFixture.ANY_AT_JAMES)
             .build();
 
@@ -81,6 +83,7 @@ public class PostmasterAliasTest {
     public void serviceShouldNotAlterPostmasterAliasWhenForOtherDomains() throws Exception {
         MailAddress otherDomainPostmaster = new MailAddress("postmaster@otherDomain");
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipient(otherDomainPostmaster)
             .build();
 
@@ -92,6 +95,7 @@ public class PostmasterAliasTest {
     @Test
     public void serviceShouldRewritePostmasterAlias() throws Exception {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipient(postmasterAlias)
             .build();
 
@@ -103,6 +107,7 @@ public class PostmasterAliasTest {
     @Test
     public void serviceShouldNotAlterOtherRecipientsWhenRewritingPostmaster() throws Exception {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipients(postmasterAlias, MailAddressFixture.ANY_AT_JAMES)
             .build();
 
@@ -114,6 +119,7 @@ public class PostmasterAliasTest {
     @Test
     public void serviceShouldNotDuplicatePostmaster() throws Exception {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipients(postmasterAlias, postmaster)
             .build();
 
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/RecipientToLowerCaseTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/RecipientToLowerCaseTest.java
index f59761f8af..7489b04ff9 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/RecipientToLowerCaseTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/RecipientToLowerCaseTest.java
@@ -40,6 +40,7 @@ public class RecipientToLowerCaseTest {
     @Test
     public void serviceShouldPutRecipientToLowerCase() throws Exception {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient("THienan1234@gmail.com")
             .build();
 
@@ -55,6 +56,7 @@ public class RecipientToLowerCaseTest {
     @Test
     public void serviceShouldHaveNoEffectWhenNoRecipient() throws Exception {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .build();
 
         testee.service(fakeMail);
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/RemoveMailAttributeTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/RemoveMailAttributeTest.java
index 85a0dd38b7..f1f70d04b4 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/RemoveMailAttributeTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/RemoveMailAttributeTest.java
@@ -77,7 +77,7 @@ class RemoveMailAttributeTest {
                 .build();
         removeMailet.init(mailetConfig);
 
-        Mail mail = FakeMail.builder().build();
+        Mail mail = FakeMail.builder().name("mail").build();
         removeMailet.service(mail);
 
         assertThat(mail.attributes()).isEmpty();
@@ -92,6 +92,7 @@ class RemoveMailAttributeTest {
         removeMailet.init(mailetConfig);
 
         Mail mail = FakeMail.builder()
+            .name("mail")
             .attribute(VALUE_3)
             .build();
         removeMailet.service(mail);
@@ -108,6 +109,7 @@ class RemoveMailAttributeTest {
         removeMailet.init(mailetConfig);
 
         Mail mail = FakeMail.builder()
+            .name("mail")
             .attribute(VALUE_1)
             .attribute(VALUE_2)
             .attribute(VALUE_3)
@@ -126,6 +128,7 @@ class RemoveMailAttributeTest {
         removeMailet.init(mailetConfig);
 
         Mail mail = FakeMail.builder()
+            .name("mail")
             .attribute(VALUE_1)
             .attribute(VALUE_2)
             .attribute(VALUE_3)
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/ReplaceContentTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/ReplaceContentTest.java
index 7631b33f48..b3315bdc6d 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/ReplaceContentTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/ReplaceContentTest.java
@@ -58,6 +58,7 @@ public class ReplaceContentTest {
         mailet.init(mailetConfig);
 
         Mail mail = FakeMail.builder()
+                .name("mail")
                 .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                     .setSubject("one test"))
                 .build();
@@ -84,6 +85,7 @@ public class ReplaceContentTest {
         message.setText("This is one simple test/ è one simple test.\n"
             + "Blo blo blo blo.\n");
         Mail mail = FakeMail.builder()
+                .name("mail")
                 .mimeMessage(message)
                 .build();
         mailet.service(mail);
@@ -101,6 +103,7 @@ public class ReplaceContentTest {
         mailet.init(mailetConfig);
 
         Mail mail = FakeMail.builder()
+                .name("mail")
                 .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                     .setText("aaa"))
                 .build();
@@ -118,6 +121,7 @@ public class ReplaceContentTest {
         mailet.init(mailetConfig);
 
         Mail mail = FakeMail.builder()
+                .name("mail")
                 .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                     .setSubject("re: r:ri:one test"))
                 .build();
@@ -137,6 +141,7 @@ public class ReplaceContentTest {
         mailet.init(mailetConfig);
 
         Mail mail = FakeMail.builder()
+                .name("mail")
                 .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                     .setText("Test.\r\n" + "\r\n" + "--original message--\r\n"
                         + "part of\r\n" + "message\\ that\\0 must0 be\r\n"
@@ -159,6 +164,7 @@ public class ReplaceContentTest {
         mailet.init(mailetConfig);
 
         Mail mail = FakeMail.builder()
+                .name("mail")
                 .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                     .setSubject("one test")
                     .setText("Replacement … one test …"))
@@ -187,6 +193,7 @@ public class ReplaceContentTest {
         MimeMessage message = MimeMessageUtil.mimeMessageFromString(messageSource);
 
         Mail mail = FakeMail.builder()
+                .name("mail")
                 .mimeMessage(message)
                 .build();
         mailet.service(mail);
@@ -204,6 +211,7 @@ public class ReplaceContentTest {
         mailet.init(mailetConfig);
 
         Mail mail = FakeMail.builder()
+                .name("mail")
                 .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                     .setSubject("one test")
                     .setText("This is one simple test/ è one simple test.\n"
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/StripAttachmentTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/StripAttachmentTest.java
index 4abcde252e..4d244c5b60 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/StripAttachmentTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/StripAttachmentTest.java
@@ -610,7 +610,7 @@ class StripAttachmentTest {
                     .filename("removeMe.tmp"))
             .build();
 
-        Mail mail = FakeMail.builder().build();
+        Mail mail = FakeMail.builder().name("mail").build();
         //When
         boolean actual = mailet.processMultipartPartMessage(mimeMessage, mail);
         //Then
@@ -645,7 +645,7 @@ class StripAttachmentTest {
                     .filename("removeMe2.tmp"))
             .build();
         
-        Mail mail = FakeMail.builder().build();
+        Mail mail = FakeMail.builder().name("mail").build();
         
         //When
         boolean actual = mailet.processMultipartPartMessage(mimeMessage, mail);
@@ -758,7 +758,7 @@ class StripAttachmentTest {
                     .build())
             .build();
 
-        Mail mail = FakeMail.builder().build();
+        Mail mail = FakeMail.builder().name("mail").build();
         //When
         boolean actual = mailet.processMultipartPartMessage(mimeMessage, mail);
         //Then
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/ToProcessorTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/ToProcessorTest.java
index 0ef692d91a..0179ace1e0 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/ToProcessorTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/ToProcessorTest.java
@@ -76,6 +76,7 @@ class ToProcessorTest {
         mailet.init(mailetConfig);
 
         Mail mail = FakeMail.builder()
+                .name("mail")
                 .recipients(new MailAddress("test@james.apache.org"), new MailAddress("test2@james.apache.org"))
                 .build();
         mailet.service(mail);
@@ -96,6 +97,7 @@ class ToProcessorTest {
         mailet.init(mailetConfig);
 
         Mail mail = FakeMail.builder()
+                .name("mail")
                 .recipients(new MailAddress("test@james.apache.org"), new MailAddress("test2@james.apache.org"))
                 .build();
         mailet.service(mail);
@@ -116,6 +118,7 @@ class ToProcessorTest {
         mailet.init(mailetConfig);
 
         Mail mail = FakeMail.builder()
+                .name("mail")
                 .recipients(new MailAddress("test@james.apache.org"), new MailAddress("test2@james.apache.org"))
                 .build();
         String initialErrorMessage = "first";
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/UseHeaderRecipientsTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/UseHeaderRecipientsTest.java
index d5b294c3b6..44120b8e47 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/UseHeaderRecipientsTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/UseHeaderRecipientsTest.java
@@ -58,6 +58,7 @@ class UseHeaderRecipientsTest {
     @Test
     void serviceShouldSetMimeMessageRecipients() throws Exception {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(MailAddressFixture.ANY_AT_JAMES, MailAddressFixture.ANY_AT_JAMES2)
             .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                 .addToRecipient(RECIPIENT1, RECIPIENT2))
@@ -72,6 +73,7 @@ class UseHeaderRecipientsTest {
     @Test
     void serviceShouldSetToCcAndBccSpecifiedInTheMimeMessage() throws Exception {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(MailAddressFixture.ANY_AT_JAMES)
             .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                 .addToRecipient(RECIPIENT1)
@@ -89,6 +91,7 @@ class UseHeaderRecipientsTest {
     void serviceShouldSetEmptyRecipientWhenNoRecipientsInTheMimeMessage() throws Exception {
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(MailAddressFixture.ANY_AT_JAMES)
             .mimeMessage(MimeMessageUtil.defaultMimeMessage())
             .build();
@@ -102,6 +105,7 @@ class UseHeaderRecipientsTest {
     @Test
     void serviceShouldGhostEmail() throws Exception {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(MailAddressFixture.ANY_AT_JAMES)
             .mimeMessage(MimeMessageUtil.defaultMimeMessage())
             .build();
@@ -115,6 +119,7 @@ class UseHeaderRecipientsTest {
     @Test
     void serviceShouldResendTheEmail() throws Exception {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(MailAddressFixture.ANY_AT_JAMES)
             .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                 .addToRecipient(RECIPIENT1)
@@ -134,6 +139,7 @@ class UseHeaderRecipientsTest {
     @Test
     void serviceShouldThrowOnInvalidMailAddress() throws Exception {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(mailAddress1)
             .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                 .addToRecipient("invalid"))
@@ -145,6 +151,7 @@ class UseHeaderRecipientsTest {
     @Test
     void serviceShouldSupportAddressList() throws Exception {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients()
             .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                 .addToRecipient(RECIPIENT1, RECIPIENT2))
@@ -159,6 +166,7 @@ class UseHeaderRecipientsTest {
     @Test
     void serviceShouldSupportMailboxes() throws Exception {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients()
             .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                 .addToRecipient("APACHE" + "<" + UseHeaderRecipientsTest.RECIPIENT1 + ">"))
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/AllTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/AllTest.java
index 63572b8867..fbefd79a27 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/AllTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/AllTest.java
@@ -50,6 +50,7 @@ public class AllTest {
     @Test
     public void testAllRecipientsReturned() throws MessagingException {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipients(ANY_AT_JAMES, OTHER_AT_JAMES)
             .build();
 
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/FetchedFromTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/FetchedFromTest.java
index 1103040f89..66905f5c11 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/FetchedFromTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/FetchedFromTest.java
@@ -52,6 +52,7 @@ public class FetchedFromTest {
     @Test
     public void matchShouldReturnMatchWhenFetchFromHeaderHoldsRightValue() throws MessagingException {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(ANY_AT_JAMES, OTHER_AT_JAMES)
             .mimeMessage(MailUtil.createMimeMessage(FetchedFrom.X_FETCHED_FROM, EXPECTED_HEADER_VALUE))
             .build();
@@ -62,6 +63,7 @@ public class FetchedFromTest {
     @Test
     public void matchShouldReturnNotMatchWhenFetchFromHeaderHoldsWrongValue() throws MessagingException {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(ANY_AT_JAMES, OTHER_AT_JAMES)
             .mimeMessage(MailUtil.createMimeMessage(FetchedFrom.X_FETCHED_FROM, WRONG_HEADER_VALUE))
             .build();
@@ -72,6 +74,7 @@ public class FetchedFromTest {
     @Test
     public void matchShouldRemoveMatchingHeaders() throws MessagingException {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(ANY_AT_JAMES, OTHER_AT_JAMES)
             .mimeMessage(MailUtil.createMimeMessage(FetchedFrom.X_FETCHED_FROM, EXPECTED_HEADER_VALUE))
             .build();
@@ -84,6 +87,7 @@ public class FetchedFromTest {
     @Test
     public void matchShouldNotRemoveNonMatchingHeaders() throws MessagingException {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(ANY_AT_JAMES, OTHER_AT_JAMES)
             .mimeMessage(MailUtil.createMimeMessage(FetchedFrom.X_FETCHED_FROM, WRONG_HEADER_VALUE))
             .build();
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/HasAttachmentTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/HasAttachmentTest.java
index 56f9fc655a..8fffd03c36 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/HasAttachmentTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/HasAttachmentTest.java
@@ -46,6 +46,7 @@ public class HasAttachmentTest {
 
         mimeMessage = MimeMessageUtil.defaultMimeMessage();
         mail = FakeMail.builder()
+            .name("mail")
             .recipient(ANY_AT_JAMES)
             .mimeMessage(mimeMessage)
             .build();
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/HasHeaderWithPrefixTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/HasHeaderWithPrefixTest.java
index 1e85bfc1f2..acc48464e5 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/HasHeaderWithPrefixTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/HasHeaderWithPrefixTest.java
@@ -56,6 +56,7 @@ class HasHeaderWithPrefixTest {
         matcher.init(matcherConfig);
 
         Mail mail = FakeMail.builder()
+            .name("mail")
             .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                 .addHeader(HEADER_NAME_PREFIX_1, "true"))
             .recipients(MailAddressFixture.ANY_AT_JAMES, MailAddressFixture.OTHER_AT_JAMES2)
@@ -74,6 +75,7 @@ class HasHeaderWithPrefixTest {
         matcher.init(matcherConfig);
 
         Mail mail = FakeMail.builder()
+            .name("mail")
             .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                 .addHeader(PREFIX, "true"))
             .recipients(MailAddressFixture.ANY_AT_JAMES, MailAddressFixture.OTHER_AT_JAMES2)
@@ -92,6 +94,7 @@ class HasHeaderWithPrefixTest {
         matcher.init(matcherConfig);
 
         Mail mail = FakeMail.builder()
+            .name("mail")
             .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                 .addHeader(HEADER_NAME_NO_PREFIX, "true"))
             .recipients(MailAddressFixture.ANY_AT_JAMES, MailAddressFixture.OTHER_AT_JAMES2)
@@ -110,6 +113,7 @@ class HasHeaderWithPrefixTest {
         matcher.init(matcherConfig);
 
         Mail mail = FakeMail.builder()
+            .name("mail")
             .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                 .addHeader(HEADER_NAME_PREFIX_1, "true")
                 .addHeader(HEADER_NAME_NO_PREFIX, "true"))
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/HasMimeTypeParameterTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/HasMimeTypeParameterTest.java
index 3817f444f0..cf01c925cb 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/HasMimeTypeParameterTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/HasMimeTypeParameterTest.java
@@ -45,6 +45,7 @@ class HasMimeTypeParameterTest {
     void setUp() throws MessagingException {
         matcher = new HasMimeTypeParameter();
         sampleMail = FakeMail.builder()
+            .name("mail")
             .mimeMessage(MimeMessageBuilder
                 .mimeMessageBuilder()
                 .setSubject("Mail read")
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/HasMimeTypeTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/HasMimeTypeTest.java
index a12f187883..46399b4c14 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/HasMimeTypeTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/HasMimeTypeTest.java
@@ -64,6 +64,7 @@ public class HasMimeTypeTest {
             .setSubject("test");
 
         Mail mail = FakeMail.builder()
+            .name("mail")
             .mimeMessage(message)
             .sender(FROM)
             .recipient(RECIPIENT)
@@ -94,6 +95,7 @@ public class HasMimeTypeTest {
             .setSubject("test");
 
         Mail mail = FakeMail.builder()
+            .name("mail")
             .mimeMessage(message)
             .sender(FROM)
             .recipient(RECIPIENT)
@@ -114,6 +116,7 @@ public class HasMimeTypeTest {
             .setSubject("test");
 
         Mail mail = FakeMail.builder()
+            .name("mail")
             .mimeMessage(message)
             .sender(FROM)
             .recipient(RECIPIENT)
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/HostIsLocalTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/HostIsLocalTest.java
index 2bb64cf4bf..8d30c7ec14 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/HostIsLocalTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/HostIsLocalTest.java
@@ -63,6 +63,7 @@ public class HostIsLocalTest {
     @Test
     public void shouldMatchAddressesFromLocalDomain() throws MessagingException {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipients(ANY_AT_JAMES, OTHER_AT_JAMES)
             .build();
 
@@ -72,6 +73,7 @@ public class HostIsLocalTest {
     @Test
     public void shouldMatchOnlyAddressesFromLocalDomain() throws MessagingException {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipients(ANY_AT_JAMES, ANY_AT_JAMES2)
             .build();
 
@@ -81,6 +83,7 @@ public class HostIsLocalTest {
     @Test
     public void shouldNotMatchAddressesFromDistantDomains() throws MessagingException {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipients(ANY_AT_JAMES2, OTHER_AT_JAMES2)
             .build();
 
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/HostIsTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/HostIsTest.java
index af342e8c16..987f9bf6da 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/HostIsTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/HostIsTest.java
@@ -53,6 +53,7 @@ public class HostIsTest {
     @Test
     public void shouldMatchWhenRightDomain() throws MessagingException {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipients(ANY_AT_JAMES, OTHER_AT_JAMES)
             .build();
 
@@ -62,6 +63,7 @@ public class HostIsTest {
     @Test
     public void shouldMatchOnlyWhenRightDomain() throws MessagingException {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipients(ANY_AT_JAMES, ANY_AT_JAMES2)
             .build();
 
@@ -71,6 +73,7 @@ public class HostIsTest {
     @Test
     public void shouldNotMatchWhenWrongDomain() throws MessagingException {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipients(ANY_AT_JAMES2, OTHER_AT_JAMES2)
             .build();
 
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/IsSingleRecipientTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/IsSingleRecipientTest.java
index 87cebd545c..ffcaf44692 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/IsSingleRecipientTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/IsSingleRecipientTest.java
@@ -47,14 +47,14 @@ public class IsSingleRecipientTest {
 
     @Test
     public void matchShouldMatchOneRecipientsEmails() throws MessagingException {
-        FakeMail fakeMail = FakeMail.builder().recipient(ANY_AT_JAMES).build();
+        FakeMail fakeMail = FakeMail.builder().name("mail").recipient(ANY_AT_JAMES).build();
 
         assertThat(matcher.match(fakeMail)).containsExactly(ANY_AT_JAMES);
     }
 
     @Test
     public void matchShouldNotMatchMultiRecipientsEMail() throws MessagingException {
-        FakeMail fakeMail = FakeMail.builder().recipients(ANY_AT_JAMES, OTHER_AT_JAMES).build();
+        FakeMail fakeMail = FakeMail.builder().name("mail").recipients(ANY_AT_JAMES, OTHER_AT_JAMES).build();
 
         assertThat(matcher.match(fakeMail)).isNull();
     }
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/RecipientDomainIsTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/RecipientDomainIsTest.java
index 9bd82cbdd7..eafe7d8727 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/RecipientDomainIsTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/RecipientDomainIsTest.java
@@ -49,6 +49,7 @@ class RecipientDomainIsTest {
                 .condition("james.apache.org")
                 .build());
         FakeMail fakeMail = FakeMail.builder()
+                .name("mail")
                 .recipient(ANY_AT_JAMES)
                 .build();
         assertThat(matcher.match(fakeMail)).containsOnly(ANY_AT_JAMES);
@@ -63,6 +64,7 @@ class RecipientDomainIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+                .name("mail")
                 .recipients(ANY_AT_JAMES, ANY_AT_JAMES2)
                 .build();
 
@@ -78,6 +80,7 @@ class RecipientDomainIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+                .name("mail")
                 .recipients(OTHER_AT_JAMES2, ANY_AT_JAMES2)
                 .build();
 
@@ -103,6 +106,7 @@ class RecipientDomainIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+                .name("mail")
                 .recipients(ANY_AT_JAMES, OTHER_AT_JAMES2, ANY_AT_JAMES2)
                 .build();
 
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/RecipientIsLocalTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/RecipientIsLocalTest.java
index b45ac0a615..eb459f730b 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/RecipientIsLocalTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/RecipientIsLocalTest.java
@@ -52,6 +52,7 @@ public class RecipientIsLocalTest {
         mailAddress1 = new MailAddress("mail1@domain.com");
         mailAddress2 = new MailAddress("mail2@domain.com");
         mail = FakeMail.builder()
+                .name("mail")
                 .recipients(mailAddress1, mailAddress2)
                 .build();
     }
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/RecipientIsRegexTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/RecipientIsRegexTest.java
index e0710d9017..d9576c33ca 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/RecipientIsRegexTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/RecipientIsRegexTest.java
@@ -49,6 +49,7 @@ class RecipientIsRegexTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(ANY_AT_JAMES)
             .build();
 
@@ -63,6 +64,7 @@ class RecipientIsRegexTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(ANY_AT_JAMES)
             .build();
 
@@ -77,6 +79,7 @@ class RecipientIsRegexTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(ANY_AT_JAMES, OTHER_AT_JAMES)
             .build();
 
@@ -91,6 +94,7 @@ class RecipientIsRegexTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(ANY_AT_JAMES, OTHER_AT_JAMES)
             .build();
 
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/RecipientIsTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/RecipientIsTest.java
index 95f47814af..0e73d9b0f5 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/RecipientIsTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/RecipientIsTest.java
@@ -50,6 +50,7 @@ class RecipientIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(ANY_AT_JAMES)
             .build();
 
@@ -64,6 +65,7 @@ class RecipientIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(ANY_AT_JAMES, OTHER_AT_JAMES)
             .build();
 
@@ -78,6 +80,7 @@ class RecipientIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(OTHER_AT_JAMES, ANY_AT_JAMES2)
             .build();
 
@@ -110,6 +113,7 @@ class RecipientIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(ANY_AT_JAMES, OTHER_AT_JAMES, ANY_AT_JAMES2)
             .build();
 
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/RelayLimitTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/RelayLimitTest.java
index 4025c1243b..dc0f7ef188 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/RelayLimitTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/RelayLimitTest.java
@@ -45,6 +45,7 @@ class RelayLimitTest {
         testee = new RelayLimit();
         mimeMessage = MimeMessageUtil.defaultMimeMessage();
         mail = FakeMail.builder()
+                .name("mail")
                 .recipient(ANY_AT_JAMES)
                 .mimeMessage(mimeMessage)
                 .build();
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SMTPAuthSuccessfulTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SMTPAuthSuccessfulTest.java
index 7a36347d6c..f4ed46d8f7 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SMTPAuthSuccessfulTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SMTPAuthSuccessfulTest.java
@@ -50,6 +50,7 @@ public class SMTPAuthSuccessfulTest {
     public void matchShouldReturnRecipientsWhenAuthUserAttributeIsPresent() throws Exception {
         MailAddress recipient = MailAddressFixture.OTHER_AT_JAMES;
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(recipient)
             .attribute(new Attribute(Mail.SMTP_AUTH_USER, AttributeValue.of("other")))
             .build();
@@ -62,6 +63,7 @@ public class SMTPAuthSuccessfulTest {
     @Test
     public void matchShouldNotReturnRecipientsWhenAuthUserAttributeIsAbsent() throws Exception {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(MailAddressFixture.OTHER_AT_JAMES)
             .build();
 
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SMTPIsAuthNetworkTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SMTPIsAuthNetworkTest.java
index 30b68a4371..ef0994bd76 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SMTPIsAuthNetworkTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SMTPIsAuthNetworkTest.java
@@ -41,6 +41,7 @@ public class SMTPIsAuthNetworkTest {
     @Test
     public void matchShouldReturnEmptyWhenNoSmtpInformation() throws Exception {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipient(recipient)
             .build();
 
@@ -51,6 +52,7 @@ public class SMTPIsAuthNetworkTest {
     @Test
     public void matchShouldReturnAddressesWhenAuthorizedNetwork() throws Exception {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipient(recipient)
             .attribute(SMTPIsAuthNetwork.makeAttribute(true))
             .build();
@@ -62,6 +64,7 @@ public class SMTPIsAuthNetworkTest {
     @Test
     public void matchShouldReturnEmptyWhenNonAuthorizedNetwork() throws Exception {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipient(recipient)
             .attribute(SMTPIsAuthNetwork.makeAttribute(false))
             .build();
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderDomainIsTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderDomainIsTest.java
index c74a7415e1..ee8bc5c3cc 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderDomainIsTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderDomainIsTest.java
@@ -50,6 +50,7 @@ class SenderDomainIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+                .name("mail")
                 .sender(SENDER_NAME)
                 .recipient(recipient)
                 .build();
@@ -67,6 +68,7 @@ class SenderDomainIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+                .name("mail")
                 .recipient(recipient)
                 .sender("other@james7.apache.org")
                 .build();
@@ -84,6 +86,7 @@ class SenderDomainIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+                .name("mail")
                 .recipient(recipient)
                 .build();
 
@@ -100,6 +103,7 @@ class SenderDomainIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+                .name("mail")
                 .sender(MailAddress.nullSender())
                 .recipient(recipient)
                 .build();
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderHostIsLocalTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderHostIsLocalTest.java
index 53cdb6fb37..24864f666b 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderHostIsLocalTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderHostIsLocalTest.java
@@ -65,6 +65,7 @@ public class SenderHostIsLocalTest {
     public void shouldMatchWhenSenderHostIsLocal() throws MessagingException {
         //Given
         Mail mail = FakeMail.builder()
+            .name("mail")
             .sender(ANY_AT_JAMES)
             .recipient(ANY_AT_JAMES2)
             .build();
@@ -78,6 +79,7 @@ public class SenderHostIsLocalTest {
     public void shouldNotMatchWhenSenderHostIsNotLocal() throws MessagingException {
         //Given
         Mail mail = FakeMail.builder()
+            .name("mail")
             .sender(ANY_AT_JAMES2)
             .recipient(ANY_AT_JAMES)
             .build();
@@ -91,6 +93,7 @@ public class SenderHostIsLocalTest {
     public void shouldNotMatchWhenNullSender() throws MessagingException {
         //Given
         Mail mail = FakeMail.builder()
+            .name("mail")
             .sender(MailAddress.nullSender())
             .recipient(ANY_AT_JAMES)
             .build();
@@ -104,6 +107,7 @@ public class SenderHostIsLocalTest {
     public void shouldNotMatchWhenNoSender() throws MessagingException {
         //Given
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipient(ANY_AT_JAMES)
             .build();
         //When
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderHostIsTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderHostIsTest.java
index 8089e25444..10cfd970b1 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderHostIsTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderHostIsTest.java
@@ -62,6 +62,7 @@ public class SenderHostIsTest {
         matcher.init(mci);
 
         Mail mail = FakeMail.builder()
+                .name("mail")
                 .sender(ANY_AT_JAMES2)
                 .recipient(ANY_AT_JAMES2)
                 .build();
@@ -81,6 +82,7 @@ public class SenderHostIsTest {
                 .build());
 
         Mail mail = FakeMail.builder()
+                .name("mail")
                 .sender(ANY_AT_JAMES2)
                 .recipient(ANY_AT_JAMES2)
                 .build();
@@ -101,6 +103,7 @@ public class SenderHostIsTest {
                 .build());
 
         Mail mail = FakeMail.builder()
+                .name("mail")
                 .sender(ANY_AT_JAMES2)
                 .recipient(ANY_AT_JAMES2)
                 .build();
@@ -120,6 +123,7 @@ public class SenderHostIsTest {
                 .build());
 
         Mail mail = FakeMail.builder()
+                .name("mail")
                 .sender(ANY_AT_JAMES2)
                 .recipient(ANY_AT_JAMES2)
                 .build();
@@ -139,6 +143,7 @@ public class SenderHostIsTest {
                 .build());
 
         Mail mail = FakeMail.builder()
+                .name("mail")
                 .recipient(ANY_AT_JAMES2)
                 .build();
         //When
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsLocalTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsLocalTest.java
index 1736ce3b08..a9023aa0a2 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsLocalTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsLocalTest.java
@@ -63,6 +63,7 @@ public class SenderIsLocalTest {
     public void shouldMatchWhenLocalSender() throws MessagingException {
         //Given
         Mail mail = FakeMail.builder()
+            .name("mail")
             .sender(ANY_AT_JAMES)
             .recipient(ANY_AT_JAMES2)
             .build();
@@ -76,6 +77,7 @@ public class SenderIsLocalTest {
     public void shouldNotMatchWhenSenderIsUnknown() throws MessagingException {
         //Given
         Mail mail = FakeMail.builder()
+            .name("mail")
             .sender(OTHER_AT_JAMES)
             .recipient(ANY_AT_JAMES2)
             .build();
@@ -89,6 +91,7 @@ public class SenderIsLocalTest {
     public void shouldNotMatchWhenHostIsNotLocal() throws MessagingException {
         //Given
         Mail mail = FakeMail.builder()
+            .name("mail")
             .sender(ANY_AT_JAMES2)
             .recipient(ANY_AT_JAMES)
             .build();
@@ -102,6 +105,7 @@ public class SenderIsLocalTest {
     public void shouldNotMatchWhenNullSender() throws MessagingException {
         //Given
         Mail mail = FakeMail.builder()
+            .name("mail")
             .sender(MailAddress.nullSender())
             .recipient(ANY_AT_JAMES)
             .build();
@@ -115,6 +119,7 @@ public class SenderIsLocalTest {
     public void shouldNotMatchWhenNoSender() throws MessagingException {
         //Given
         Mail mail = FakeMail.builder()
+            .name("mail")
             .recipient(ANY_AT_JAMES)
             .build();
         //When
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsNullTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsNullTest.java
index 78d898a725..a2d61657e9 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsNullTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsNullTest.java
@@ -44,6 +44,7 @@ class SenderIsNullTest {
     @Test
     void shouldMatchWhenNoSender() throws Exception {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(ANY_AT_JAMES)
             .build();
 
@@ -53,6 +54,7 @@ class SenderIsNullTest {
     @Test
     void shouldMatchWhenNullSender() throws Exception {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(ANY_AT_JAMES)
             .sender(MailAddress.nullSender())
             .build();
@@ -63,6 +65,7 @@ class SenderIsNullTest {
     @Test
     void shouldNotMatchWhenSenderIsPresent() throws Exception {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(ANY_AT_JAMES)
             .sender("other@james.apache.org")
             .build();
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsRegexTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsRegexTest.java
index d1249e8789..cde39f4f98 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsRegexTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsRegexTest.java
@@ -51,6 +51,7 @@ class SenderIsRegexTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .sender(SENDER_NAME)
             .recipient(recipient)
             .build();
@@ -66,6 +67,7 @@ class SenderIsRegexTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .sender(SENDER_NAME)
             .recipient(recipient)
             .build();
@@ -81,6 +83,7 @@ class SenderIsRegexTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(recipient)
             .build();
 
@@ -95,6 +98,7 @@ class SenderIsRegexTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(recipient)
             .sender(MailAddress.nullSender())
             .build();
@@ -110,6 +114,7 @@ class SenderIsRegexTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(recipient)
             .sender(MailAddress.nullSender())
             .build();
@@ -125,6 +130,7 @@ class SenderIsRegexTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .sender(SENDER_NAME)
             .recipient(recipient)
             .build();
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsTest.java
index 385bd688f7..6dc17d20c2 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SenderIsTest.java
@@ -54,6 +54,7 @@ class SenderIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(recipient)
             .sender(SENDER_NAME)
             .build();
@@ -69,6 +70,7 @@ class SenderIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(recipient)
             .sender(MailAddress.nullSender())
             .build();
@@ -84,6 +86,7 @@ class SenderIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(recipient)
             .build();
 
@@ -98,6 +101,7 @@ class SenderIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(recipient)
             .sender(MailAddress.nullSender())
             .build();
@@ -113,6 +117,7 @@ class SenderIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(recipient)
             .build();
 
@@ -127,6 +132,7 @@ class SenderIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(recipient)
             .sender("other@james.apache.org")
             .build();
@@ -142,6 +148,7 @@ class SenderIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(recipient)
             .build();
 
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SentByMailetTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SentByMailetTest.java
index a89754a7c4..19d0015f28 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SentByMailetTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SentByMailetTest.java
@@ -50,6 +50,7 @@ public class SentByMailetTest {
     public void matchShouldReturnRecipientsWhenAuthUserAttributeIsPresent() throws Exception {
         MailAddress recipient = MailAddressFixture.ANY_AT_JAMES;
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(recipient)
             .attribute(Mail.SENT_BY_MAILET_ATTRIBUTE)
             .build();
@@ -62,6 +63,7 @@ public class SentByMailetTest {
     @Test
     public void matchShouldReturnEmptyCollectionWhenAuthUserAttributeIsAbsent() throws Exception {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(MailAddressFixture.ANY_AT_JAMES)
             .build();
 
@@ -73,6 +75,7 @@ public class SentByMailetTest {
     @Test
     public void matchShouldReturnEmptyCollectionWhenAuthUserAttributeIsAbsentAndThereIsNoRecipient() throws Exception {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients()
             .build();
 
@@ -84,6 +87,7 @@ public class SentByMailetTest {
     @Test
     public void matchShouldReturnEmptyCollectionWhenAuthUserAttributeIsPresentAndThereIsNoRecipient() throws Exception {
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients()
             .attribute(Mail.SENT_BY_MAILET_ATTRIBUTE)
             .build();
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SizeGreaterThanTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SizeGreaterThanTest.java
index 2ef630f48a..179baaa538 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SizeGreaterThanTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SizeGreaterThanTest.java
@@ -44,6 +44,7 @@ class SizeGreaterThanTest {
     @Test
     void matchShouldMatchWhenMailAboveSize() throws MessagingException {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .size(2000000)
             .recipient(ANY_AT_JAMES)
             .build();
@@ -61,6 +62,7 @@ class SizeGreaterThanTest {
     @Test
     void matchShouldNotMatchWhenMailUnderSize() throws MessagingException {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .size(200000)
             .recipient(ANY_AT_JAMES)
             .build();
@@ -78,6 +80,7 @@ class SizeGreaterThanTest {
     @Test
     void matchShouldNotMatchMailsWithSpecifiedSize() throws MessagingException {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .size(1024)
             .recipient(ANY_AT_JAMES)
             .build();
@@ -95,6 +98,7 @@ class SizeGreaterThanTest {
     @Test
     void matchShouldMatchMailsWithSizeSuperiorToSpecifiedSize() throws MessagingException {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .size(1025)
             .recipient(ANY_AT_JAMES)
             .build();
@@ -112,6 +116,7 @@ class SizeGreaterThanTest {
     @Test
     void matchShouldReturnNullWhenUnderLimitNoUnit() throws MessagingException {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .size(4)
             .recipient(ANY_AT_JAMES)
             .build();
@@ -129,6 +134,7 @@ class SizeGreaterThanTest {
     @Test
     void matchShouldMatchOverLimitWhenNoUnit() throws MessagingException {
         Mail mail = FakeMail.builder()
+            .name("mail")
             .size(5)
             .recipient(ANY_AT_JAMES)
             .build();
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SubjectIsTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SubjectIsTest.java
index 22f5c75510..a0e1164772 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SubjectIsTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SubjectIsTest.java
@@ -46,6 +46,7 @@ public class SubjectIsTest {
     @Test
     public void shouldMatchWhenSubjectEqualsConfiguredValue() throws MessagingException {
         FakeMail mail = FakeMail.builder()
+                .name("mail")
                 .mimeMessage(MailUtil.createMimeMessageWithSubject("test"))
                 .recipients(roger)
                 .build();
@@ -63,6 +64,7 @@ public class SubjectIsTest {
     @Test
     public void shouldNotMatchWhenSubjectDoesntEqualsConfiguredValue() throws MessagingException {
         FakeMail mail = FakeMail.builder()
+                .name("mail")
                 .mimeMessage(MailUtil.createMimeMessageWithSubject("foobar"))
                 .recipients(roger)
                 .build();
@@ -80,6 +82,7 @@ public class SubjectIsTest {
     @Test
     public void shouldNotMatchWhenNoSubject() throws MessagingException {
         FakeMail mail = FakeMail.builder()
+                .name("mail")
                 .mimeMessage(MailUtil.createMimeMessageWithSubject(null))
                 .recipients(roger)
                 .build();
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SubjectStartsWithTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SubjectStartsWithTest.java
index a590b9bddd..a9006f8b9d 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/SubjectStartsWithTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/SubjectStartsWithTest.java
@@ -46,6 +46,7 @@ public class SubjectStartsWithTest {
     @Test
     public void shouldMatchWhenSubjectStartsWithConfiguredValue() throws MessagingException {
         FakeMail mail = FakeMail.builder()
+                .name("mail")
                 .recipients(roger)
                 .mimeMessage(MailUtil.createMimeMessageWithSubject("testSubject"))
                 .build();
@@ -63,6 +64,7 @@ public class SubjectStartsWithTest {
     @Test
     public void shouldNotMatchWhenSubjectDoesntStartWithConfiguredValue() throws MessagingException {
         FakeMail mail = FakeMail.builder()
+                .name("mail")
                 .recipients(roger)
                 .mimeMessage(MailUtil.createMimeMessageWithSubject("foobar"))
                 .build();
@@ -81,6 +83,7 @@ public class SubjectStartsWithTest {
     @Test
     public void shouldNotMatchWhenNoSubject() throws MessagingException {
         FakeMail mail = FakeMail.builder()
+                .name("mail")
                 .recipients(roger)
                 .mimeMessage(MailUtil.createMimeMessageWithSubject(null))
                 .build();
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/TooManyLinesTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/TooManyLinesTest.java
index 29a84952e7..3de804aab0 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/TooManyLinesTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/TooManyLinesTest.java
@@ -97,7 +97,7 @@ class TooManyLinesTest {
             .matcherName("name")
             .build());
 
-        Collection<MailAddress> result = testee.match(FakeMail.builder().build());
+        Collection<MailAddress> result = testee.match(FakeMail.builder().name("mail").build());
 
         assertThat(result).isEmpty();
 
@@ -111,6 +111,7 @@ class TooManyLinesTest {
             .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                 .setMultipartWithBodyParts(MimeMessageBuilder.bodyPartBuilder()
                     .data("content")))
@@ -126,6 +127,7 @@ class TooManyLinesTest {
         testee.init(FakeMatcherConfig.builder().condition("10").matcherName("name").build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
                 .setMultipartWithBodyParts(
                     MimeMessageBuilder.bodyPartBuilder()
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/TooManyRecipientsTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/TooManyRecipientsTest.java
index 1aa47b88c5..de9b810139 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/TooManyRecipientsTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/TooManyRecipientsTest.java
@@ -99,7 +99,7 @@ class TooManyRecipientsTest {
             .matcherName("matcherName")
             .build());
 
-        Collection<MailAddress> result = testee.match(FakeMail.builder().build());
+        Collection<MailAddress> result = testee.match(FakeMail.builder().name("mail").build());
 
         assertThat(result).isEmpty();
     }
@@ -112,6 +112,7 @@ class TooManyRecipientsTest {
             .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient("cuong.tran@gmail.com")
             .build();
 
@@ -129,6 +130,7 @@ class TooManyRecipientsTest {
             .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients("cuong.tran@gmail.com", "suu.tran@gmail.com", "tuan.tran@gmail.com")
             .build();
 
@@ -152,6 +154,7 @@ class TooManyRecipientsTest {
 
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(mailAddresses)
             .build();
 
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/matchers/UserIsTest.java b/mailet/standard/src/test/java/org/apache/james/transport/matchers/UserIsTest.java
index 2b89b4581b..63caa07bad 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/matchers/UserIsTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/matchers/UserIsTest.java
@@ -50,6 +50,7 @@ class UserIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipient(ANY_AT_JAMES)
             .build();
 
@@ -64,6 +65,7 @@ class UserIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(ANY_AT_JAMES, ANY_AT_JAMES2)
             .build();
 
@@ -78,6 +80,7 @@ class UserIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(ANY_AT_JAMES, OTHER_AT_JAMES)
             .build();
 
@@ -92,6 +95,7 @@ class UserIsTest {
                 .build());
 
         FakeMail fakeMail = FakeMail.builder()
+            .name("mail")
             .recipients(OTHER_AT_JAMES)
             .build();
 
