diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonStreamParserImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonStreamParserImpl.java
index 4d0571a4..cd6022e1 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonStreamParserImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonStreamParserImpl.java
@@ -198,13 +198,17 @@ public class JsonStreamParserImpl extends JohnzonJsonParserImpl implements JsonC
 
     @Override
     public final boolean hasNext() {
-
-        if (currentStructureElement != null ||
-                (previousEvent != END_ARRAY && previousEvent != END_OBJECT &&
-                        previousEvent != VALUE_STRING && previousEvent != VALUE_FALSE && previousEvent != VALUE_TRUE &&
-                        previousEvent != VALUE_NULL && previousEvent != VALUE_NUMBER) ||
-                previousEvent == 0) {
-
+        if (currentStructureElement != null || previousEvent == 0) {
+            return true;
+        }
+        if (previousEvent != END_ARRAY && previousEvent != END_OBJECT &&
+                previousEvent != VALUE_STRING && previousEvent != VALUE_FALSE && previousEvent != VALUE_TRUE &&
+                previousEvent != VALUE_NULL && previousEvent != VALUE_NUMBER) {
+            if (bufferPos == Integer.MIN_VALUE) { // check we don't have an empty string to parse
+                final char c = readNextChar();
+                bufferPos--;
+                return c != EOF;
+            }
             return true;
         }
 
@@ -357,6 +361,11 @@ public class JsonStreamParserImpl extends JohnzonJsonParserImpl implements JsonC
         //main entry, make decision how to handle the current character in the stream
 
         if (!hasNext()) {
+            final char c = readNextChar();
+            bufferPos--;
+            if (c != EOF) {
+                throw uexc("No available event");
+            }
             throw new NoSuchElementException();
         }
 
diff --git a/johnzon-core/src/test/java/org/apache/johnzon/core/JsonParserTest.java b/johnzon-core/src/test/java/org/apache/johnzon/core/JsonParserTest.java
index 9436e5a0..fb84307f 100644
--- a/johnzon-core/src/test/java/org/apache/johnzon/core/JsonParserTest.java
+++ b/johnzon-core/src/test/java/org/apache/johnzon/core/JsonParserTest.java
@@ -66,6 +66,13 @@ public class JsonParserTest {
         }
     }
 
+    @Test
+    public void emptyObject() {
+        final JsonParser parser = Json.createParser(new StringReader(""));
+        assertFalse(parser.hasNext());
+        parser.close();
+    }
+
     @Test
     public void testParseGetObject() throws Exception {
         String json = "{\"a\":1,\"b\":2 }";
@@ -991,14 +998,14 @@ public class JsonParserTest {
         Json.createReader(new ByteArrayInputStream("{\"z\":nulll}".getBytes())).read();
     }
     
-    @Test(expected = JsonException.class)
+    @Test(expected = IllegalStateException.class)
     public void zeroByteInput() {
         // using a reader as wrapper of parser
   
         Json.createReader(new ByteArrayInputStream(new byte[]{})).read();
     }
     
-    @Test(expected = JsonParsingException.class)
+    @Test(expected = IllegalStateException.class)
     public void zeroCharInput() {
         // using a reader as wrapper of parser
   
@@ -1142,13 +1149,13 @@ public class JsonParserTest {
         try {
             parser.next();
             fail();
-        } catch (JsonParsingException e) {
+        } catch (NoSuchElementException e) {
             //expected
         }
        
     }
     
-    @Test(expected=JsonParsingException.class)
+    @Test(expected=NoSuchElementException.class)
     public void testBinaryNullStream() {
         ByteArrayInputStream bin = new ByteArrayInputStream("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0".getBytes(UTF_8));
         JsonParser parser = Json.createParser(bin);
@@ -1327,7 +1334,7 @@ public class JsonParserTest {
        JsonParser parser = Json.createParser(new ByteArrayInputStream("[]".getBytes()));
         assertEquals(Event.START_ARRAY, parser.next());
         assertEquals(Event.END_ARRAY, parser.next());
-        assertEquals(false, parser.hasNext());
+        assertFalse(parser.hasNext());
         try {
             parser.next();
             fail("Should have thrown a NoSuchElementException");
