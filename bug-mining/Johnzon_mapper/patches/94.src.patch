diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
index d17468ec..b05667c9 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
@@ -145,6 +145,7 @@ public class MapperBuilder {
     private Boolean deduplicateObjects = null;
     private boolean useJsRange;
     private boolean useBigDecimalForObjectNumbers;
+    private boolean supportEnumContainerDeserialization = true;
 
     public Mapper build() {
         if (readerFactory == null || generatorFactory == null) {
@@ -256,7 +257,8 @@ public class MapperBuilder {
                         treatByteArrayAsBase64, treatByteArrayAsBase64URL, readAttributeBeforeWrite,
                         accessMode, encoding, attributeOrder, enforceQuoteString, failOnUnknownProperties,
                         serializeValueFilter, useBigDecimalForFloats, deduplicateObjects,
-                        interfaceImplementationMapping, useJsRange, useBigDecimalForObjectNumbers),
+                        interfaceImplementationMapping, useJsRange, useBigDecimalForObjectNumbers,
+                        supportEnumContainerDeserialization),
                 closeables);
     }
 
@@ -528,4 +530,9 @@ public class MapperBuilder {
         this.useBigDecimalForObjectNumbers = value;
         return this;
     }
+
+    public MapperBuilder setSupportEnumContainerDeserialization(final boolean supportEnumContainerDeserialization) {
+        this.supportEnumContainerDeserialization = supportEnumContainerDeserialization;
+        return this;
+    }
 }
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
index 18184d05..1f3eafba 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
@@ -58,6 +58,7 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
     private final boolean treatByteArrayAsBase64;
     private final boolean treatByteArrayAsBase64URL;
     private final boolean readAttributeBeforeWrite;
+    private final boolean supportEnumMapDeserialization; // for tck
     private final AccessMode accessMode;
     private final Charset encoding;
     private final ConcurrentMap<AdapterKey, Adapter<?, ?>> adapters;
@@ -94,7 +95,8 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
                         final Boolean deduplicateObjects,
                         final Map<Class<?>, Class<?>> interfaceImplementationMapping,
                         final boolean useJsRange,
-                        final boolean useBigDecimalForObjectNumbers) {
+                        final boolean useBigDecimalForObjectNumbers,
+                        final boolean supportEnumMapDeserialization) {
     //CHECKSTYLE:ON
         this.objectConverterWriters = objectConverterWriters;
         this.objectConverterReaders = objectConverterReaders;
@@ -109,6 +111,7 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
         this.encoding = encoding;
         this.useJsRange = useJsRange;
         this.useBigDecimalForObjectNumbers = useBigDecimalForObjectNumbers;
+        this.supportEnumMapDeserialization = supportEnumMapDeserialization;
 
         // handle Adapters
         this.adapters = adapters;
@@ -342,4 +345,8 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
     public Boolean isDeduplicateObjects() {
         return deduplicateObjects;
     }
+
+    public boolean isSupportEnumContainerDeserialization() {
+        return supportEnumMapDeserialization;
+    }
 }
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
index 76b53294..a182a5a4 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingParserImpl.java
@@ -55,6 +55,7 @@ import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.NavigableMap;
@@ -264,13 +265,15 @@ public class MappingParserImpl implements MappingParser {
                     final Class<?> raw = Class.class.cast(aType.getRawType());
 
                     final Map map;
-                    if (LinkedHashMap.class == raw) {
-                        map = new LinkedHashMap();
-                    } else if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {
+                    if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {
                         map = config.getAttributeOrder() == null ? new TreeMap() : new TreeMap(config.getAttributeOrder());
                     } else if (ConcurrentMap.class.isAssignableFrom(raw)) {
                         map = new ConcurrentHashMap(object.size());
                     } else if (EnumMap.class.isAssignableFrom(raw)) {
+                        if (!config.isSupportEnumContainerDeserialization()) {
+                            throw new MapperException("JSON-B forbids EnumMap deserialization, " +
+                                    "set supportEnumMapDeserialization=true to disable that arbitrary limitation");
+                        }
                         map = new EnumMap(Class.class.cast(fieldArgTypes[0]));
                     } else if (Map.class.isAssignableFrom(raw)) {
                         map = new LinkedHashMap(object.size()); // todo: configurable from config.getNewDefaultMap()?
@@ -303,7 +306,7 @@ public class MappingParserImpl implements MappingParser {
                     }
                 }
             } else if (Map.class == type || HashMap.class == type || LinkedHashMap.class == type) {
-                final LinkedHashMap<String, Object> map = new LinkedHashMap<String, Object>();
+                final Map<String, Object> map = new LinkedHashMap<String, Object>();
                 for (final Map.Entry<String, JsonValue> value : object.entrySet()) {
                     map.put(value.getKey(), toObject(null, value.getValue(), Object.class, null, jsonPointer, Object.class));
                 }
@@ -923,9 +926,11 @@ public class MappingParserImpl implements MappingParser {
             collection = new ArrayList<T>(jsonArray.size());
         } else if (LinkedHashSet.class == mapping.raw) {
             collection = new LinkedHashSet<T>(jsonArray.size());
+        } else if (LinkedList.class == mapping.raw) {
+            collection = new LinkedList<T>();
         } else if (Deque.class == mapping.raw || ArrayDeque.class == mapping.raw) {
             collection = new ArrayDeque(jsonArray.size());
-        } else if (Queue.class == mapping.raw || PriorityQueue.class == mapping.raw) {
+        } else if (PriorityQueue.class == mapping.raw) {
             collection = new PriorityQueue(jsonArray.size());
         } else {
             throw new IllegalStateException("not supported collection type: " + mapping.raw.getName());
@@ -941,6 +946,10 @@ public class MappingParserImpl implements MappingParser {
         }
 
         if (EnumSet.class == mapping.raw) {
+            if (!config.isSupportEnumContainerDeserialization()) {
+                throw new MapperException("Enum container deserialization disabled, " +
+                        "set supportEnumContainerDeserialization=true to enable it");
+            }
             if (collection.isEmpty()) {
                 return EnumSet.noneOf(Class.class.cast(mapping.arg));
             } else if (collection.size() == 1) {
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mappings.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mappings.java
index e60e8f85..1e7ea181 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mappings.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mappings.java
@@ -42,13 +42,16 @@ import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.PriorityQueue;
 import java.util.Queue;
 import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeMap;
+import java.util.TreeSet;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
@@ -295,7 +298,15 @@ public class Mappings {
         if (fieldArgTypes.length == 1 && Class.class.isInstance(raw)) {
             final Class<?> r = Class.class.cast(raw);
             final Class<?> collectionType;
-            if (List.class.isAssignableFrom(r)) {
+            if (PriorityQueue.class.isAssignableFrom(r)) {
+                collectionType = PriorityQueue.class;
+            } else if (LinkedHashSet.class.isAssignableFrom(r)) {
+                collectionType = LinkedHashSet.class;
+            } else if (LinkedList.class.isAssignableFrom(r)) {
+                collectionType = LinkedList.class;
+            } else if (TreeSet.class.isAssignableFrom(r)) {
+                collectionType = TreeSet.class;
+            } else if (List.class.isAssignableFrom(r)) {
                 collectionType = List.class;
             } else if (SortedSet.class.isAssignableFrom(r)) {
                 collectionType = SortedSet.class;
diff --git a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java
index e770b7d8..3becb92b 100644
--- a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java
+++ b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java
@@ -169,7 +169,7 @@ public class MapperConfigTest {
                                 new FieldAccessMode(true, true),
                                 Charset.forName("UTF-8"),
                                 null,
-                                false, false, null, false, false, emptyMap(), true, false);
+                                false, false, null, false, false, emptyMap(), true, false, true);
     }
 
 
diff --git a/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java b/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java
index bbfdc318..559302ac 100644
--- a/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java
+++ b/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java
@@ -66,7 +66,7 @@ public class ExtendMappingTest {
                     -1, true, true, true, false, false, false,
                     new FieldAccessMode(false, false),
                     Charset.forName("UTF-8"), String::compareTo, false, false, null, false, false,
-                    emptyMap(), true, false));
+                    emptyMap(), true, false, true));
         }
 
         @Override
