diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-apple-module/src/main/java/org/apache/tika/parser/iwork/iwana/IWork13PackageParser.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-apple-module/src/main/java/org/apache/tika/parser/iwork/iwana/IWork13PackageParser.java
index 9b3f3a55f..2816efac1 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-apple-module/src/main/java/org/apache/tika/parser/iwork/iwana/IWork13PackageParser.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-apple-module/src/main/java/org/apache/tika/parser/iwork/iwana/IWork13PackageParser.java
@@ -91,7 +91,7 @@ public class IWork13PackageParser implements Parser {
             if (container instanceof ZipFile) {
                 zipFile = (ZipFile) container;
             } else if (tis.hasFile()) {
-                zipFile = new ZipFile(tis.getFile());
+                zipFile = ZipFile.builder().setFile(tis.getFile()).get();
             } else {
                 zipStream = new ZipInputStream(stream);
             }
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-apple-module/src/main/java/org/apache/tika/parser/iwork/iwana/IWork18PackageParser.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-apple-module/src/main/java/org/apache/tika/parser/iwork/iwana/IWork18PackageParser.java
index ea99e8f46..28a699039 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-apple-module/src/main/java/org/apache/tika/parser/iwork/iwana/IWork18PackageParser.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-apple-module/src/main/java/org/apache/tika/parser/iwork/iwana/IWork18PackageParser.java
@@ -67,7 +67,7 @@ public class IWork18PackageParser implements Parser {
             if (container instanceof ZipFile) {
                 zipFile = (ZipFile) container;
             } else if (tis.hasFile()) {
-                zipFile = new ZipFile(tis.getFile());
+                zipFile = ZipFile.builder().setFile(tis.getFile()).get();
             } else {
                 zipStream = new ZipInputStream(stream);
             }
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-apple-module/src/test/java/org/apache/tika/detect/apple/IWorkDetectorTest.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-apple-module/src/test/java/org/apache/tika/detect/apple/IWorkDetectorTest.java
index 42abe634c..c1d174290 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-apple-module/src/test/java/org/apache/tika/detect/apple/IWorkDetectorTest.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-apple-module/src/test/java/org/apache/tika/detect/apple/IWorkDetectorTest.java
@@ -34,7 +34,7 @@ public class IWorkDetectorTest extends TikaTest {
         String testFile = "/test-documents/testKeynote2013.detect";
         IWorkDetector detector = new IWorkDetector();
         try (TikaInputStream tis = TikaInputStream.get(getResourceAsStream(testFile));
-                ZipFile zipFile = new ZipFile(tis.getFile())) {
+                 ZipFile zipFile = ZipFile.builder().setFile(tis.getFile()).get()) {
             MediaType result = detector.detect(zipFile, tis);
             assertEquals(IWork13DocumentType.KEYNOTE13.getType(), result);
         }
@@ -45,7 +45,7 @@ public class IWorkDetectorTest extends TikaTest {
         String testFile = "/test-documents/testKeynote2018.key";
         IWorkDetector detector = new IWorkDetector();
         try (TikaInputStream tis = TikaInputStream.get(getResourceAsStream(testFile));
-                ZipFile zipFile = new ZipFile(tis.getFile())) {
+                 ZipFile zipFile = ZipFile.builder().setFile(tis.getFile()).get()) {
             MediaType result = detector.detect(zipFile, tis);
             assertEquals(IWork18DocumentType.KEYNOTE18.getType(), result);
         }
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/test/java/org/apache/tika/parser/microsoft/ooxml/TruncatedOOXMLTest.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/test/java/org/apache/tika/parser/microsoft/ooxml/TruncatedOOXMLTest.java
index 86de20d79..179f3106f 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/test/java/org/apache/tika/parser/microsoft/ooxml/TruncatedOOXMLTest.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/test/java/org/apache/tika/parser/microsoft/ooxml/TruncatedOOXMLTest.java
@@ -69,7 +69,7 @@ public class TruncatedOOXMLTest extends TikaTest {
             assertEquals(targetLength, bos.toByteArray().length);
         }
         try {
-            InputStream is = truncate("testWORD_various.docx", length + 1);
+            truncate("testWORD_various.docx", length + 1);
             fail("should have thrown EOF");
         } catch (EOFException e) {
             //swallow
@@ -93,7 +93,7 @@ public class TruncatedOOXMLTest extends TikaTest {
             }
             try (InputStream is = new FileInputStream(f)) {
                 ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(is);
-                ZipArchiveEntry zae = zipArchiveInputStream.getNextZipEntry();
+                ZipArchiveEntry zae = zipArchiveInputStream.getNextEntry();
                 int cnt = 0;
                 while (zae != null && !zae.isDirectory() && ++cnt <= 10) {
                     System.out.println(f.getName() + " : " + zae.getName());
@@ -102,7 +102,7 @@ public class TruncatedOOXMLTest extends TikaTest {
                         IOUtils.copy(zipArchiveInputStream, bos);
                         System.out.println(new String(bos.toByteArray(), StandardCharsets.UTF_8));
                     }
-                    zae = zipArchiveInputStream.getNextZipEntry();
+                    zae = zipArchiveInputStream.getNextEntry();
                 }
             } catch (Exception e) {
                 System.out.println(f.getName() + " : " + e.getMessage());
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-miscoffice-module/src/main/java/org/apache/tika/parser/epub/EpubParser.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-miscoffice-module/src/main/java/org/apache/tika/parser/epub/EpubParser.java
index 56ff532d9..e6d7e73b8 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-miscoffice-module/src/main/java/org/apache/tika/parser/epub/EpubParser.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-miscoffice-module/src/main/java/org/apache/tika/parser/epub/EpubParser.java
@@ -215,7 +215,7 @@ public class EpubParser implements Parser {
         }
         ZipFile zipFile = null;
         try {
-            zipFile = new ZipFile(tis.getPath().toFile());
+            zipFile = zipFile = ZipFile.builder().setFile(tis.getPath().toFile()).get();
         } catch (IOException e) {
             ParserUtils.recordParserFailure(this, e, metadata);
             return trySalvage(tis.getPath(), bodyHandler, xhtml, metadata, context);
@@ -240,7 +240,7 @@ public class EpubParser implements Parser {
             Path salvaged =
                     resources.createTempFile(FilenameUtils.getSuffixFromPath(brokenZip.getFileName().toString()));
             ZipSalvager.salvageCopy(brokenZip.toFile(), salvaged.toFile());
-            try (ZipFile zipFile = new ZipFile(salvaged.toFile())) {
+            try (ZipFile zipFile = ZipFile.builder().setFile(salvaged.toFile()).get()) {
                 return bufferedParseZipFile(zipFile, bodyHandler, xhtml, metadata, context, false);
             } catch (EpubZipException e) {
                 try (InputStream is = TikaInputStream.get(salvaged)) {
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-webarchive-module/src/main/java/org/apache/tika/parser/wacz/WACZParser.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-webarchive-module/src/main/java/org/apache/tika/parser/wacz/WACZParser.java
index 106ed3350..4f1922314 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-webarchive-module/src/main/java/org/apache/tika/parser/wacz/WACZParser.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-webarchive-module/src/main/java/org/apache/tika/parser/wacz/WACZParser.java
@@ -66,7 +66,7 @@ public class WACZParser implements Parser {
         if (stream instanceof TikaInputStream) {
             ZipFile zip = (ZipFile) ((TikaInputStream) stream).getOpenContainer();
             if (zip == null && ((TikaInputStream)stream).hasFile()) {
-                zip = new ZipFile(((TikaInputStream)stream).getFile());
+                zip = ZipFile.builder().setFile(((TikaInputStream) stream).getFile()).get();
             }
             if (zip != null) {
                 try {
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/DefaultZipContainerDetector.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/DefaultZipContainerDetector.java
index f5d063566..fb6ddf6fd 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/DefaultZipContainerDetector.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/DefaultZipContainerDetector.java
@@ -206,7 +206,7 @@ public class DefaultZipContainerDetector implements Detector {
     private MediaType detectZipFormatOnFile(TikaInputStream tis, Metadata metadata) {
         ZipFile zip = null;
         try {
-            zip = new ZipFile(tis.getFile()); // TODO: hasFile()?
+            zip = ZipFile.builder().setFile(tis.getFile()).get(); // TODO: hasFile()?
 
             for (ZipContainerDetector zipDetector : getDetectors()) {
                 MediaType type = zipDetector.detect(zip, tis);
@@ -267,13 +267,13 @@ public class DefaultZipContainerDetector implements Detector {
         StreamingDetectContext detectContext = new StreamingDetectContext();
         try (ZipArchiveInputStream zis = new ZipArchiveInputStream(
                 CloseShieldInputStream.wrap(input), "UTF8", false, allowStoredEntries)) {
-            ZipArchiveEntry zae = zis.getNextZipEntry();
+            ZipArchiveEntry zae = zis.getNextEntry();
             while (zae != null) {
                 MediaType mt = detect(zae, zis, detectContext);
                 if (mt != null) {
                     return mt;
                 }
-                zae = zis.getNextZipEntry();
+                zae = zis.getNextEntry();
             }
         } catch (UnsupportedZipFeatureException zfe) {
             if (allowStoredEntries == false &&
@@ -318,7 +318,7 @@ public class DefaultZipContainerDetector implements Detector {
         if (loader != null && loader.isDynamic()) {
             List<ZipContainerDetector> dynamicDetectors =
                     loader.loadDynamicServiceProviders(ZipContainerDetector.class);
-            if (dynamicDetectors.size() > 0) {
+            if (!dynamicDetectors.isEmpty()) {
                 List<ZipContainerDetector> zipDetectors = new ArrayList<>(staticZipDetectors);
                 zipDetectors.addAll(dynamicDetectors);
                 return zipDetectors;
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/zip/utils/ZipSalvager.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/zip/utils/ZipSalvager.java
index 4b36d5455..a65a85150 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/zip/utils/ZipSalvager.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/zip/utils/ZipSalvager.java
@@ -49,6 +49,8 @@ public class ZipSalvager {
      *
      * @param brokenZip
      * @param salvagedZip
+     * @param allowStoredEntries
+     * @throws java.io.IOException
      */
     public static void salvageCopy(InputStream brokenZip, File salvagedZip,
                                    boolean allowStoredEntries) throws IOException {
@@ -62,7 +64,7 @@ public class ZipSalvager {
                     ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(
                             CloseShieldInputStream.wrap(brokenZip), "UTF8", false,
                             allowStoredEntries)) {
-                ZipArchiveEntry zae = zipArchiveInputStream.getNextZipEntry();
+                ZipArchiveEntry zae = zipArchiveInputStream.getNextEntry();
                 try {
                     processZAE(zae, zipArchiveInputStream, outputStream);
                 } catch (UnsupportedZipFeatureException uzfe) {
@@ -118,7 +120,7 @@ public class ZipSalvager {
                     break;
                 }
             }
-            zae = zipArchiveInputStream.getNextZipEntry();
+            zae = zipArchiveInputStream.getNextEntry();
         }
     }
 
