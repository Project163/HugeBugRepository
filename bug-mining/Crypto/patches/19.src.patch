diff --git a/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java b/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java
index 9b2e58e8..9e59cffa 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java
@@ -36,6 +36,9 @@ public class CryptoCipherFactory {
     private final static Logger LOG = LoggerFactory
             .getLogger(CryptoCipherFactory.class);
 
+    /**
+     * The private Constructor of {@link CryptoCipherFactory}.
+     */
     private CryptoCipherFactory() {
     }
 
@@ -88,7 +91,12 @@ public static CryptoCipher getInstance(CipherTransformation transformation)
         return getInstance(transformation, new Properties());
     }
 
-    // Return OpenSSLCipher if Properties is null or empty by default
+    /**
+     * Returns OpenSSLCipher if Properties is null or empty by default.
+     *
+     * @param props the configuration properties.
+     * @return the OpenSSLCipher instance.
+     */
     private static List<Class<? extends CryptoCipher>> getCipherClasses(
             Properties props) {
         List<Class<? extends CryptoCipher>> result = new ArrayList<Class<? extends CryptoCipher>>();
diff --git a/src/main/java/org/apache/commons/crypto/cipher/Openssl.java b/src/main/java/org/apache/commons/crypto/cipher/Openssl.java
index de8856c2..1d0e441d 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/Openssl.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/Openssl.java
@@ -47,6 +47,14 @@ public final class Openssl {
     private static enum AlgorithmMode {
         AES_CTR, AES_CBC;
 
+        /**
+         * Gets the mode.
+         *
+         * @param algorithm the algorithm.
+         * @param mode the mode.
+         * @return the Algorithm mode.
+         * @throws NoSuchAlgorithmException if the algorithm is not available.
+         */
         static int get(String algorithm, String mode)
                 throws NoSuchAlgorithmException {
             try {
@@ -62,6 +70,13 @@ static int get(String algorithm, String mode)
     private static enum Padding {
         NoPadding, PKCS5Padding;
 
+        /**
+         * Gets the Padding instance.
+         *
+         * @param padding the padding.
+         * @return the value of Padding.
+         * @throws NoSuchPaddingException if the padding is not available.
+         */
         static int get(String padding) throws NoSuchPaddingException {
             try {
                 return Padding.valueOf(padding).ordinal();
@@ -101,6 +116,13 @@ public static String getLoadingFailureReason() {
         return loadingFailureReason;
     }
 
+    /**
+     * Constructs a {@Link Openssl} instance based on context, algorithm and padding.
+     *
+     * @param context the context.
+     * @param algorithm the algorithm.
+     * @param padding the padding.
+     */
     private Openssl(long context, int algorithm, int padding) {
         this.context = context;
         this.algorithm = algorithm;
@@ -136,6 +158,13 @@ private static class Transform {
         final String mode;
         final String padding;
 
+        /**
+         * Constructs a {@Link Transform} based on the algorithm, mode and padding.
+         *
+         * @param algorithm the algorithm
+         * @param mode the mode.
+         * @param padding the padding.
+         */
         public Transform(String algorithm, String mode, String padding) {
             this.algorithm = algorithm;
             this.mode = mode;
@@ -143,6 +172,13 @@ public Transform(String algorithm, String mode, String padding) {
         }
     }
 
+    /**
+     * Gets the tokens of transformation.
+     *
+     * @param transformation the transformation.
+     * @return the {@Link Transform} instance.
+     * @throws NoSuchAlgorithmException if the transformation is null.
+     */
     private static Transform tokenizeTransformation(String transformation)
             throws NoSuchAlgorithmException {
         if (transformation == null) {
diff --git a/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java b/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java
index 99930982..7b4f5a56 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java
@@ -25,6 +25,9 @@
  */
 public class OpensslNative {
 
+  /**
+   * The private constructor of {@Link OpensslNative}.
+   */
     private OpensslNative() {
     }
 
diff --git a/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java b/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
index 30edb1b9..04d89b20 100644
--- a/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
+++ b/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
@@ -130,6 +130,9 @@ public class ConfigurationKeys {
     public static final String COMMONS_CRYPTO_LIB_TEMPDIR_KEY = CONF_PREFIX
             + "lib.tempdir";
 
+  /**
+   * The private constructor of {@Link ConfigurationKeys}.
+   */
     private ConfigurationKeys() {
     }
 }
diff --git a/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java b/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
index b2993531..eb536ef9 100644
--- a/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
+++ b/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
@@ -35,6 +35,9 @@ public class CryptoRandomFactory {
     public final static Logger LOG = LoggerFactory
             .getLogger(CryptoRandomFactory.class);
 
+  /**
+   * The private constructor of {@Link CryptoRandomFactory}.
+   */
     private CryptoRandomFactory() {
     }
 
diff --git a/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandomNative.java b/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandomNative.java
index 65078c35..8301873b 100644
--- a/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandomNative.java
+++ b/src/main/java/org/apache/commons/crypto/random/OpensslCryptoRandomNative.java
@@ -22,7 +22,9 @@
  * this class is defined in OpensslCryptoRandomNative.h(genereted by javah).
  */
 public class OpensslCryptoRandomNative {
-
+    /**
+     * The private constructor of {@Link OpensslCryptoRandomNative}.
+     */
     private OpensslCryptoRandomNative() {
     }
 
diff --git a/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java b/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java
index eca62d26..2e6fd000 100644
--- a/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java
+++ b/src/main/java/org/apache/commons/crypto/random/OsCryptoRandom.java
@@ -47,6 +47,11 @@ public class OsCryptoRandom extends Random implements CryptoRandom {
 
     private int pos = reservoir.length;
 
+    /**
+     * Fills the reservoir.
+     *
+     * @param min the length.
+     */
     private void fillReservoir(int min) {
         if (pos >= reservoir.length - min) {
             try {
diff --git a/src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java b/src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java
index f2df8024..bfdd6fb4 100644
--- a/src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/CTRCryptoInputStream.java
@@ -368,6 +368,11 @@ protected long getStreamOffset() {
         return streamOffset;
     }
 
+    /**
+     * Sets the offset of stream.
+     *
+     * @param streamOffset the stream offset.
+     */
     protected void setStreamOffset(long streamOffset) {
         this.streamOffset = streamOffset;
     }
diff --git a/src/main/java/org/apache/commons/crypto/stream/CryptoOutputStream.java b/src/main/java/org/apache/commons/crypto/stream/CryptoOutputStream.java
index 2cce8274..f5f9d973 100644
--- a/src/main/java/org/apache/commons/crypto/stream/CryptoOutputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/CryptoOutputStream.java
@@ -384,6 +384,11 @@ protected void encryptFinal() throws IOException {
         output.write(outBuffer);
     }
 
+    /**
+     * Checks whether the stream is closed.
+     *
+     * @throws IOException if an I/O error occurs.
+     */
     protected void checkStream() throws IOException {
         if (closed) {
             throw new IOException("Stream closed");
diff --git a/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java b/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java
index a9622156..c7399dd1 100644
--- a/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java
+++ b/src/main/java/org/apache/commons/crypto/stream/PositionedCryptoInputStream.java
@@ -192,7 +192,13 @@ protected void decrypt(long position, byte[] buffer, int offset, int length)
     /**
      * Does the decryption using inBuffer as input and outBuffer as output. Upon
      * return, inBuffer is cleared; the decrypted data starts at
-     * outBuffer.position() and ends at outBuffer.limit()
+     * outBuffer.position() and ends at outBuffer.limit().
+     *
+     * @param state the CipherState instance.
+     * @param inBuffer the input buffer.
+     * @param outBuffer the output buffer.
+     * @param padding the padding.
+     * @throws IOException if an I/O error occurs.
      */
     private void decrypt(CipherState state, ByteBuffer inBuffer,
             ByteBuffer outBuffer, byte padding) throws IOException {
@@ -215,6 +221,14 @@ private void decrypt(CipherState state, ByteBuffer inBuffer,
         }
     }
 
+    /**
+     * Does the decryption using inBuffer as input and outBuffer as output.
+     *
+     * @param state the CipherState instance.
+     * @param inBuffer the input buffer.
+     * @param outBuffer the output buffer.
+     * @throws IOException if an I/O error occurs.
+     */
     private void decryptBuffer(CipherState state, ByteBuffer inBuffer,
             ByteBuffer outBuffer) throws IOException {
         int inputSize = inBuffer.remaining();
@@ -241,6 +255,13 @@ private void decryptBuffer(CipherState state, ByteBuffer inBuffer,
     /**
      * This method is executed immediately after decryption. Check whether
      * cipher should be updated and recalculate padding if needed.
+     *
+     * @param state the CipherState instance.
+     * @param inBuffer the input buffer.
+     * @param position the offset from the start of the stream.
+     * @param iv the iv.
+     * @return the padding.
+     * @throws IOException if an I/O error occurs.
      */
     private byte postDecryption(CipherState state, ByteBuffer inBuffer,
             long position, byte[] iv) throws IOException {
@@ -259,7 +280,14 @@ private byte postDecryption(CipherState state, ByteBuffer inBuffer,
         return padding;
     }
 
-    /** Calculate the counter and iv, reset the cipher. */
+    /**
+     * Calculates the counter and iv, reset the cipher.
+     *
+     * @param state the CipherState instance.
+     * @param position the offset from the start of the stream.
+     * @param iv the iv.
+     * @throws IOException if an I/O error occurs.
+     */
     private void resetCipher(CipherState state, long position, byte[] iv)
             throws IOException {
         final long counter = getCounter(position);
@@ -275,7 +303,12 @@ private void resetCipher(CipherState state, long position, byte[] iv)
         state.reset(false);
     }
 
-    /** Get CryptoCipher from pool */
+    /**
+     * Gets CryptoCipher from pool.
+     *
+     * @return the CipherState instance.
+     * @throws IOException if an I/O error occurs.
+     */
     private CipherState getCipherState() throws IOException {
         CipherState state = cipherPool.poll();
         if (state == null) {
@@ -292,14 +325,22 @@ private CipherState getCipherState() throws IOException {
         return state;
     }
 
-    /** Return CryptoCipher to pool */
+    /**
+     * Returns CryptoCipher to pool.
+     *
+     * @param state the CipherState instance.
+     */
     private void returnCipherState(CipherState state) {
         if (state != null) {
             cipherPool.add(state);
         }
     }
 
-    /** Get direct buffer from pool */
+    /**
+     * Gets direct buffer from pool.
+     *
+     * @return the buffer.
+     */
     private ByteBuffer getBuffer() {
         ByteBuffer buffer = bufferPool.poll();
         if (buffer == null) {
@@ -309,7 +350,11 @@ private ByteBuffer getBuffer() {
         return buffer;
     }
 
-    /** Return direct buffer to pool */
+    /**
+     * Returns direct buffer to pool.
+     *
+     * @param buf the buffer.
+     */
     private void returnBuffer(ByteBuffer buf) {
         if (buf != null) {
             buf.clear();
@@ -345,19 +390,39 @@ private class CipherState {
         private CryptoCipher cipher;
         private boolean reset;
 
+        /**
+         * The constructor of {@Link CipherState}.
+         *
+         * @param cipher the CryptoCipher instance.
+         */
         public CipherState(CryptoCipher cipher) {
             this.cipher = cipher;
             this.reset = false;
         }
 
+        /**
+         * Gets the CryptoCipher instance.
+         *
+         * @return the cipher.
+         */
         public CryptoCipher getCipher() {
             return cipher;
         }
 
+        /**
+         * Gets the reset.
+         *
+         * @return the value of reset.
+         */
         public boolean isReset() {
             return reset;
         }
 
+        /**
+         * Sets the value of reset.
+         *
+         * @param reset the reset.
+         */
         public void reset(boolean reset) {
             this.reset = reset;
         }
diff --git a/src/main/java/org/apache/commons/crypto/stream/input/ChannelInput.java b/src/main/java/org/apache/commons/crypto/stream/input/ChannelInput.java
index dbcba57a..d85dba17 100644
--- a/src/main/java/org/apache/commons/crypto/stream/input/ChannelInput.java
+++ b/src/main/java/org/apache/commons/crypto/stream/input/ChannelInput.java
@@ -161,6 +161,11 @@ public void close() throws IOException {
         channel.close();
     }
 
+    /**
+     * Gets the skip buffer.
+     *
+     * @return the buffer.
+     */
     private ByteBuffer getSkipBuf() {
         if (buf == null) {
             buf = ByteBuffer.allocate(SKIP_BUFFER_SIZE);
diff --git a/src/main/java/org/apache/commons/crypto/stream/output/StreamOutput.java b/src/main/java/org/apache/commons/crypto/stream/output/StreamOutput.java
index 78c9bab2..e76c11c7 100644
--- a/src/main/java/org/apache/commons/crypto/stream/output/StreamOutput.java
+++ b/src/main/java/org/apache/commons/crypto/stream/output/StreamOutput.java
@@ -92,6 +92,11 @@ public void close() throws IOException {
         out.close();
     }
 
+    /**
+     * Gets the output stream.
+     *
+     * @return the output stream.
+     */
     protected OutputStream getOut() {
         return out;
     }
diff --git a/src/main/java/org/apache/commons/crypto/utils/IOUtils.java b/src/main/java/org/apache/commons/crypto/utils/IOUtils.java
index d4147168..a7666138 100644
--- a/src/main/java/org/apache/commons/crypto/utils/IOUtils.java
+++ b/src/main/java/org/apache/commons/crypto/utils/IOUtils.java
@@ -28,6 +28,9 @@
  */
 public final class IOUtils {
 
+    /**
+     * Teh private constructor of {@Link IOUtils}.
+     */
     private IOUtils() {
     }
 
diff --git a/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java b/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java
index 18137453..20688285 100644
--- a/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java
+++ b/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java
@@ -40,7 +40,9 @@ public final class NativeCodeLoader {
     private static final Log LOG = LogFactory.getLog(NativeCodeLoader.class);
 
     private final static boolean nativeCodeLoaded;
-
+    /**
+     * The private constructor of {@Link NativeCodeLoader}.
+     */
     private NativeCodeLoader() {
     }
 
@@ -78,6 +80,11 @@ private NativeCodeLoader() {
         }
     }
 
+    /**
+     * Finds the native library.
+     *
+     * @return the jar file.
+     */
     static File findNativeLibrary() {
         // Try to load the library in commons-crypto.lib.path */
         String nativeLibraryPath = Utils.getLibPath();
@@ -248,6 +255,14 @@ public static String getVersion() {
         return version;
     }
 
+    /**
+     * Checks whether in1 and in2 is equal.
+     *
+     * @param in1 the input1.
+     * @param in2 the input2.
+     * @return true if in1 and in2 is equal, else false.
+     * @throws IOException if an I/O error occurs.
+     */
     private static boolean contentsEquals(InputStream in1, InputStream in2)
             throws IOException {
         if (!(in1 instanceof BufferedInputStream)) {
@@ -269,6 +284,12 @@ private static boolean contentsEquals(InputStream in1, InputStream in2)
         return ch2 == -1;
     }
 
+    /**
+     * Checks whether the given path has resource.
+     *
+     * @param path the path.
+     * @return the boolean.
+     */
     private static boolean hasResource(String path) {
         return NativeCodeLoader.class.getResource(path) != null;
     }
diff --git a/src/main/java/org/apache/commons/crypto/utils/OSInfo.java b/src/main/java/org/apache/commons/crypto/utils/OSInfo.java
index 21f2fe32..f4c31fb6 100644
--- a/src/main/java/org/apache/commons/crypto/utils/OSInfo.java
+++ b/src/main/java/org/apache/commons/crypto/utils/OSInfo.java
@@ -63,6 +63,9 @@ public class OSInfo {
      */
     public static final String PPC64 = "ppc64";
 
+    /**
+     * The private constructor of {@Link OSInfo}.
+     */
     private OSInfo() {
     }
 
@@ -104,6 +107,11 @@ private OSInfo() {
         archMapping.put("power_rs64", PPC64);
     }
 
+    /**
+     * The main method.
+     *
+     * @param args the argv.
+     */
     public static void main(String[] args) {
         if (args.length >= 1) {
             if ("--os".equals(args[0])) {
diff --git a/src/main/java/org/apache/commons/crypto/utils/ReflectionUtils.java b/src/main/java/org/apache/commons/crypto/utils/ReflectionUtils.java
index 81e0aa68..014e7b1a 100644
--- a/src/main/java/org/apache/commons/crypto/utils/ReflectionUtils.java
+++ b/src/main/java/org/apache/commons/crypto/utils/ReflectionUtils.java
@@ -46,6 +46,9 @@ public final class ReflectionUtils {
      */
     private static final Class<?> NEGATIVE_CACHE_SENTINEL = NegativeCacheSentinel.class;
 
+    /**
+     * The private constructor of {@Link ReflectionUtils}.
+     */
     private ReflectionUtils() {
     }
 
diff --git a/src/main/java/org/apache/commons/crypto/utils/Utils.java b/src/main/java/org/apache/commons/crypto/utils/Utils.java
index f3a82e91..a36f215e 100644
--- a/src/main/java/org/apache/commons/crypto/utils/Utils.java
+++ b/src/main/java/org/apache/commons/crypto/utils/Utils.java
@@ -59,6 +59,9 @@ public final class Utils {
     private static final int AES_BLOCK_SIZE = CipherTransformation.AES_CTR_NOPADDING
             .getAlgorithmBlockSize();
 
+    /**
+     * The private constructor of {@Link Utils}.
+     */
     private Utils() {
     }
 
