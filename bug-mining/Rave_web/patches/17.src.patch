diff --git a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/NewAccountController.java b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/NewAccountController.java
index a15cbf71..60509394 100644
--- a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/NewAccountController.java
+++ b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/NewAccountController.java
@@ -19,6 +19,9 @@
 
 package org.apache.rave.portal.web.controller;
 
+import javax.servlet.http.HttpServletRequest;
+
+import org.apache.rave.portal.model.User;
 import org.apache.rave.portal.model.impl.UserImpl;
 import org.apache.rave.portal.service.CaptchaService;
 import org.apache.rave.portal.service.NewAccountService;
@@ -40,8 +43,6 @@ import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.servlet.mvc.support.RedirectAttributes;
 
-import javax.servlet.http.HttpServletRequest;
-
 @Controller
 public class NewAccountController {
     private final Logger logger = LoggerFactory.getLogger(getClass());
@@ -53,7 +54,6 @@ public class NewAccountController {
     @Value("#{messages['page.newaccount.message.created']}")
     private String messageSuccess;
 
-
     @Autowired
     public NewAccountController(NewAccountService newAccountService, NewAccountValidator newAccountValidator, CaptchaService captchaService) {
         this.newAccountService = newAccountService;
@@ -68,7 +68,7 @@ public class NewAccountController {
         model.addAttribute(ModelKeys.NEW_USER, new UserImpl());
         return ViewNames.NEW_ACCOUNT;
     }
-
+    
     @RequestMapping(value = {"/newaccount", "/newaccount/*"}, method = RequestMethod.POST)
     public String create(@ModelAttribute(value = "newUser") UserForm newUser, BindingResult results, Model model, HttpServletRequest request,  RedirectAttributes redirectAttributes) {
         logger.debug("Creating a new user account");
@@ -116,6 +116,15 @@ public class NewAccountController {
 
     }
 
+    @RequestMapping(value = "/openidregister", method = RequestMethod.GET)
+    public String setUpOpenIdForm(ModelMap model, HttpServletRequest request) {
+        logger.debug("Initializing account creation form");
+        User user = (User) request.getSession(false).getAttribute(ModelKeys.NEW_USER);
+        model.addAttribute(ModelKeys.CAPTCHA_HTML, captchaService.createHtml(request));
+        model.addAttribute(ModelKeys.NEW_USER, user);
+        return ViewNames.NEW_ACCOUNT;
+    }
+
     private void initializeCaptcha(Model model, HttpServletRequest request) {
         model.addAttribute(ModelKeys.CAPTCHA_HTML, captchaService.createHtml(request));
     }
diff --git a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/handler/OpenIDAuthenticationFailureHandler.java b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/handler/OpenIDAuthenticationFailureHandler.java
new file mode 100644
index 00000000..48c0a679
--- /dev/null
+++ b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/handler/OpenIDAuthenticationFailureHandler.java
@@ -0,0 +1,116 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.rave.portal.web.controller.handler;
+
+import java.io.IOException;
+import java.util.List;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.rave.portal.model.User;
+import org.apache.rave.portal.model.impl.UserImpl;
+import org.apache.rave.portal.web.util.ModelKeys;
+import org.apache.rave.portal.web.util.ViewNames;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.security.core.AuthenticationException;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.security.openid.OpenIDAttribute;
+import org.springframework.security.openid.OpenIDAuthenticationStatus;
+import org.springframework.security.openid.OpenIDAuthenticationToken;
+import org.springframework.security.web.DefaultRedirectStrategy;
+import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;
+import org.springframework.stereotype.Controller;
+
+/**
+ * Controller which processes openid authentication failure. If the user record for particular
+ * openid user is not found in the DB, it redirects to the account creation page. Otherwise
+ * it redirects to the default authentication failure page.
+ * 
+ */
+@Controller
+public class OpenIDAuthenticationFailureHandler extends	SimpleUrlAuthenticationFailureHandler {
+
+	private static Logger log = LoggerFactory.getLogger(OpenIDAuthenticationFailureHandler.class);
+
+	@Override
+    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException {
+		if(exception instanceof UsernameNotFoundException
+			&& exception.getAuthentication() instanceof OpenIDAuthenticationToken
+            && ((OpenIDAuthenticationToken)exception.getAuthentication()).getStatus().equals(OpenIDAuthenticationStatus.SUCCESS)) {
+			
+			OpenIDAuthenticationToken token = (OpenIDAuthenticationToken)exception.getAuthentication();
+			String url = token.getIdentityUrl();
+			User user = createTemporaryUser(token, url);
+			request.getSession(true).setAttribute(ModelKeys.NEW_USER, user);
+
+			DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy();
+			log.info("Redirecting to new user account creation page");
+			super.setRedirectStrategy(redirectStrategy);
+			redirectStrategy.sendRedirect(request, response, "/"+ViewNames.CREATE_ACCOUNT_PAGE);
+			return;
+		} else {
+			super.onAuthenticationFailure(request, response, exception);
+		}
+	}
+
+	private User createTemporaryUser(OpenIDAuthenticationToken token,
+			final String openId) {
+		final List<OpenIDAttribute> attributes = token.getAttributes();
+		String email = null;
+		String firstName = null;
+		String lastName = null;
+		String displayName = null;
+		for (OpenIDAttribute attribute : attributes) {
+			if ("email".equals(attribute.getName())
+					&& !attribute.getValues().isEmpty()) {
+				email = attribute.getValues().get(0);
+			} else if ("firstname".equals(attribute.getName())
+					&& !attribute.getValues().isEmpty()) {
+				firstName = attribute.getValues().get(0);
+			} else if ("lastname".equals(attribute.getName())
+					&& !attribute.getValues().isEmpty()) {
+				lastName = attribute.getValues().get(0);
+			} else if ("fullname".equals(attribute.getName())
+					&& !attribute.getValues().isEmpty()) {
+				displayName = attribute.getValues().get(0);
+			}
+		}
+		User user = new UserImpl();
+		String username = StringUtils.substringAfter(openId, "://").replace("/", "");
+		if (username.length() > 35) {
+			username = username.substring(0, 35);
+		}
+		if (displayName == null && firstName != null && lastName != null) {
+			displayName = firstName + " " + lastName;
+		}
+		user.setUsername(username);
+		user.setEmail(email);
+		user.setGivenName(firstName);
+		user.setFamilyName(lastName);
+		user.setDisplayName(displayName);
+		user.setOpenId(openId);
+
+		return user;
+	}
+}
diff --git a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/util/ViewNames.java b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/util/ViewNames.java
index 0466a915..bd8ae3bd 100644
--- a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/util/ViewNames.java
+++ b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/util/ViewNames.java
@@ -62,6 +62,7 @@ public final class ViewNames {
     public static final String REDIRECT = "redirect:/";
 
     public static final String LOGIN_PAGE = "login";
+    public static final String CREATE_ACCOUNT_PAGE = "app/openidregister";
     public static final String REDIRECT_LOGIN = REDIRECT +LOGIN_PAGE;
 
     public static final String POSTS_TAG_PAGE = "postsTagPage";
diff --git a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/NewAccountControllerTest.java b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/NewAccountControllerTest.java
index c341fa76..ca663c79 100644
--- a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/NewAccountControllerTest.java
+++ b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/NewAccountControllerTest.java
@@ -19,6 +19,14 @@
 
 package org.apache.rave.portal.web.controller;
 
+import static org.easymock.EasyMock.createNiceMock;
+import static org.easymock.EasyMock.expect;
+import static org.easymock.EasyMock.replay;
+import static org.junit.Assert.assertThat;
+
+import java.util.ArrayList;
+import java.util.List;
+
 import org.apache.rave.portal.model.User;
 import org.apache.rave.portal.model.impl.UserImpl;
 import org.apache.rave.portal.service.CaptchaService;
@@ -39,12 +47,6 @@ import org.springframework.validation.BindingResult;
 import org.springframework.validation.ObjectError;
 import org.springframework.web.servlet.mvc.support.RedirectAttributes;
 
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.easymock.EasyMock.*;
-import static org.junit.Assert.assertThat;
-
 
 /**
  * This is a test class for NewAccountController, which is used to make new user accounts through
diff --git a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/handler/OpenIDAuthenticationFailureHandlerTest.java b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/handler/OpenIDAuthenticationFailureHandlerTest.java
new file mode 100644
index 00000000..dab5724a
--- /dev/null
+++ b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/handler/OpenIDAuthenticationFailureHandlerTest.java
@@ -0,0 +1,83 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.rave.portal.web.controller.handler;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+import javax.servlet.ServletException;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.mock.web.MockHttpServletRequest;
+import org.springframework.mock.web.MockHttpServletResponse;
+import org.springframework.security.core.AuthenticationException;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.security.openid.OpenIDAttribute;
+import org.springframework.security.openid.OpenIDAuthenticationStatus;
+import org.springframework.security.openid.OpenIDAuthenticationToken;
+
+public class OpenIDAuthenticationFailureHandlerTest {
+    private MockHttpServletRequest request;
+    private MockHttpServletResponse response;
+    private OpenIDAuthenticationFailureHandler handler;
+    private OpenIDAuthenticationToken postAuthToken;
+    private AuthenticationException authException;
+
+    private final String MESSAGE = "Successfully authenticated";
+    private final String NON_REGISTERED_OPENID_USER = "http://someone.myopenid.com/";
+    private final String REDIRECT_URL = "/app/openidregister";
+    
+    private final Logger logger = LoggerFactory.getLogger(OpenIDAuthenticationFailureHandlerTest.class);
+    
+
+    @Before
+    public void setup() {        
+        request = new MockHttpServletRequest();
+        response = new MockHttpServletResponse();
+        handler = new OpenIDAuthenticationFailureHandler();
+        postAuthToken = new OpenIDAuthenticationToken(OpenIDAuthenticationStatus.SUCCESS,NON_REGISTERED_OPENID_USER, 
+        		MESSAGE, new ArrayList<OpenIDAttribute>());
+        authException = new UsernameNotFoundException("");
+}
+
+    
+    @SuppressWarnings("deprecation")
+	@Test
+    public void authenticationFailureRedirectTest() {        
+        try {
+        	authException.setAuthentication(postAuthToken);
+			handler.onAuthenticationFailure(request, response, authException);
+		} catch (IOException e) {
+			logger.debug("IOException on Authentication Failure");
+		} catch (ServletException e) {
+			logger.debug("ServletException on Authentication Failure");
+		}
+        assertTrue(authException.getAuthentication() instanceof OpenIDAuthenticationToken);
+        assertTrue(((OpenIDAuthenticationToken)authException.getAuthentication()).getStatus().equals(OpenIDAuthenticationStatus.SUCCESS));
+        assertEquals(((OpenIDAuthenticationToken)authException.getAuthentication()).getMessage(), MESSAGE);
+        assertEquals(response.getRedirectedUrl(),REDIRECT_URL);
+    }
+}
\ No newline at end of file
