diff --git a/commons-vfs2-jackrabbit2/src/main/java/org/apache/commons/vfs2/provider/webdav4/Webdav4FileObject.java b/commons-vfs2-jackrabbit2/src/main/java/org/apache/commons/vfs2/provider/webdav4/Webdav4FileObject.java
index 3e86f44e..51cdbc07 100644
--- a/commons-vfs2-jackrabbit2/src/main/java/org/apache/commons/vfs2/provider/webdav4/Webdav4FileObject.java
+++ b/commons-vfs2-jackrabbit2/src/main/java/org/apache/commons/vfs2/provider/webdav4/Webdav4FileObject.java
@@ -20,7 +20,6 @@ import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.HttpURLConnection;
-import java.net.URI;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -486,12 +485,6 @@ public class Webdav4FileObject extends Http4FileObject<Webdav4FileSystem> {
         return new Webdav4FileContentInfoFactory();
     }
 
-    // Just for the unit test in the same package (package-private) to access this during validation.
-    @Override
-    protected URI getInternalURI() throws FileSystemException {
-        return super.getInternalURI();
-    }
-
     DavPropertySet getProperties(final GenericURLFileName name) throws FileSystemException {
         return getProperties(name, DavConstants.PROPFIND_ALL_PROP, new DavPropertyNameSet(), false);
     }
@@ -603,12 +596,18 @@ public class Webdav4FileObject extends Http4FileObject<Webdav4FileSystem> {
         request.addHeader("Expires", "0");
     }
 
-    private String toUrlString(final GenericURLFileName name) {
+    /**
+     * Converts the given URLFileName to an encoded URL String to internally use in real DAV operations.
+     *
+     * @param name The FileName.
+     * @return The encoded URL String.
+     */
+    String toUrlString(final GenericURLFileName name) {
         return toUrlString(name, true);
     }
 
     /**
-     * Converts the given URLFileName to an encoded URL String.
+     * Converts the given URLFileName to an encoded URL String to internally use in real DAV operations.
      *
      * @param name The FileName.
      * @param includeUserInfo true if user information should be included.
diff --git a/commons-vfs2-jackrabbit2/src/test/java/org/apache/commons/vfs2/provider/webdav4/Webdav4FileObjectTest.java b/commons-vfs2-jackrabbit2/src/test/java/org/apache/commons/vfs2/provider/webdav4/Webdav4FileObjectTest.java
index c46b0afe..890155c9 100644
--- a/commons-vfs2-jackrabbit2/src/test/java/org/apache/commons/vfs2/provider/webdav4/Webdav4FileObjectTest.java
+++ b/commons-vfs2-jackrabbit2/src/test/java/org/apache/commons/vfs2/provider/webdav4/Webdav4FileObjectTest.java
@@ -19,12 +19,11 @@ package org.apache.commons.vfs2.provider.webdav4;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
-import java.net.URI;
-
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemManager;
 import org.apache.commons.vfs2.VFS;
+import org.apache.commons.vfs2.provider.GenericURLFileName;
 import org.junit.Test;
 
 public class Webdav4FileObjectTest {
@@ -38,26 +37,26 @@ public class Webdav4FileObjectTest {
     @Test
     public void testWebdav4FileObjectURLs() throws FileSystemException {
         final FileSystemManager fsm = VFS.getManager();
-        try (final FileObject file = fsm.resolveFile(WEBDAV4_URL)) {
 
+        try (final FileObject file = fsm.resolveFile(WEBDAV4_URL)) {
             assertEquals(WEBDAV4_URL, file.getURL().toString());
             assertTrue(file instanceof Webdav4FileObject);
 
             final Webdav4FileObject webdav4File = (Webdav4FileObject) file;
-            assertEquals(URI.create(INTERNAL_WEBDAV4_URL), webdav4File.getInternalURI());
+            assertEquals(INTERNAL_WEBDAV4_URL, webdav4File.toUrlString((GenericURLFileName) webdav4File.getName()));
         }
     }
 
     @Test
     public void testWebdav4sFileObjectURLs() throws FileSystemException {
         final FileSystemManager fsm = VFS.getManager();
-        try (final FileObject file = fsm.resolveFile(WEBDAV4S_URL)) {
 
+        try (final FileObject file = fsm.resolveFile(WEBDAV4S_URL)) {
             assertEquals(WEBDAV4S_URL, file.getURL().toString());
             assertTrue(file instanceof Webdav4FileObject);
 
             final Webdav4FileObject webdav4File = (Webdav4FileObject) file;
-            assertEquals(URI.create(INTERNAL_WEBDAV4S_URL), webdav4File.getInternalURI());
+            assertEquals(INTERNAL_WEBDAV4S_URL, webdav4File.toUrlString((GenericURLFileName) webdav4File.getName()));
         }
     }
 }
