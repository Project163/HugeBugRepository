diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonArrayBuilderImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonArrayBuilderImpl.java
index 5dfd8390..ea46072a 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonArrayBuilderImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonArrayBuilderImpl.java
@@ -18,6 +18,10 @@
  */
 package org.apache.johnzon.core;
 
+import javax.json.JsonArray;
+import javax.json.JsonArrayBuilder;
+import javax.json.JsonObjectBuilder;
+import javax.json.JsonValue;
 import java.io.Serializable;
 import java.math.BigDecimal;
 import java.math.BigInteger;
@@ -25,11 +29,6 @@ import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-import javax.json.JsonArray;
-import javax.json.JsonArrayBuilder;
-import javax.json.JsonObjectBuilder;
-import javax.json.JsonValue;
-
 class JsonArrayBuilderImpl implements JsonArrayBuilder, Serializable {
     private List<JsonValue> tmpList;
 
@@ -77,7 +76,7 @@ class JsonArrayBuilderImpl implements JsonArrayBuilder, Serializable {
 
     @Override
     public JsonArrayBuilder add(final boolean value) {
-        addValue(value ? JsonValue.TRUE : JsonValue.FALSE);
+        addValue(value ? SerializablePrimitives.TRUE : SerializablePrimitives.FALSE);
         return this;
     }
 
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonArrayImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonArrayImpl.java
index fee44ce0..6906645b 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonArrayImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonArrayImpl.java
@@ -18,16 +18,15 @@
  */
 package org.apache.johnzon.core;
 
-import java.io.Serializable;
-import java.util.AbstractList;
-import java.util.Iterator;
-import java.util.List;
-
 import javax.json.JsonArray;
 import javax.json.JsonNumber;
 import javax.json.JsonObject;
 import javax.json.JsonString;
 import javax.json.JsonValue;
+import java.io.Serializable;
+import java.util.AbstractList;
+import java.util.Iterator;
+import java.util.List;
 
 class JsonArrayImpl extends AbstractList<JsonValue> implements JsonArray, Serializable {
     private Integer hashCode = null;
@@ -119,9 +118,9 @@ class JsonArrayImpl extends AbstractList<JsonValue> implements JsonArray, Serial
     public boolean getBoolean(final int index) {
         final JsonValue val = value(index, JsonValue.class);
 
-        if (val == JsonValue.TRUE) {
+        if (SerializablePrimitives.TRUE.equals(val)) {
             return true;
-        } else if (val == JsonValue.FALSE) {
+        } else if (SerializablePrimitives.FALSE.equals(val)) {
             return false;
         } else {
             throw new ClassCastException();
@@ -144,20 +143,12 @@ class JsonArrayImpl extends AbstractList<JsonValue> implements JsonArray, Serial
         }
 
         final JsonValue val = get(index);
-
-        if (val == JsonValue.TRUE) {
-            return true;
-        } else if (val == JsonValue.FALSE) {
-            return false;
-        } else {
-            return defaultValue;
-        }
-
+        return SerializablePrimitives.TRUE.equals(val) || !SerializablePrimitives.FALSE.equals(val) && defaultValue;
     }
 
     @Override
     public boolean isNull(final int index) {
-        return value(index, JsonValue.class) == JsonValue.NULL;
+        return JsonValue.NULL.equals(value(index, JsonValue.class));
     }
 
     @Override
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonDoubleImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonDoubleImpl.java
index bb51b36f..cff63c01 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonDoubleImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonDoubleImpl.java
@@ -18,12 +18,12 @@
  */
 package org.apache.johnzon.core;
 
+import javax.json.JsonNumber;
+import java.io.Serializable;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
-import javax.json.JsonNumber;
-
-final class JsonDoubleImpl implements JsonNumber {
+final class JsonDoubleImpl implements JsonNumber, Serializable {
     private final double value;
 
     JsonDoubleImpl(final double value) {
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonLongImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonLongImpl.java
index 1a85b0b8..4068d9b4 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonLongImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonLongImpl.java
@@ -18,12 +18,12 @@
  */
 package org.apache.johnzon.core;
 
+import javax.json.JsonNumber;
+import java.io.Serializable;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
-import javax.json.JsonNumber;
-
-public final class JsonLongImpl implements JsonNumber {
+public final class JsonLongImpl implements JsonNumber, Serializable {
     private final long value;
 
     JsonLongImpl(final long value) {
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonNumberImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonNumberImpl.java
index 8b560ed7..9ad77523 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonNumberImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonNumberImpl.java
@@ -18,14 +18,14 @@
  */
 package org.apache.johnzon.core;
 
+import javax.json.JsonNumber;
+import java.io.Serializable;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
-import javax.json.JsonNumber;
-
-final class JsonNumberImpl implements JsonNumber {
+final class JsonNumberImpl implements JsonNumber, Serializable {
     private final BigDecimal value;
-    private Integer hashCode = null;
+    private transient Integer hashCode = null;
 
     JsonNumberImpl(final BigDecimal decimal) {
         if(decimal == null) {
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectBuilderImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectBuilderImpl.java
index ea15a177..2a260f30 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectBuilderImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectBuilderImpl.java
@@ -77,13 +77,13 @@ class JsonObjectBuilderImpl implements JsonObjectBuilder, Serializable {
 
     @Override
     public JsonObjectBuilder add(final String name, final boolean value) {
-        putValue(name, value ? JsonValue.TRUE : JsonValue.FALSE);
+        putValue(name, value ? SerializablePrimitives.TRUE : SerializablePrimitives.FALSE);
         return this;
     }
 
     @Override
     public JsonObjectBuilder addNull(final String name) {
-        putValue(name, JsonValue.NULL);
+        putValue(name, SerializablePrimitives.NULL);
         return this;
     }
 
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectImpl.java
index d7912cbe..ef8b84d5 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectImpl.java
@@ -18,21 +18,20 @@
  */
 package org.apache.johnzon.core;
 
-import java.io.Serializable;
-import java.util.AbstractMap;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Set;
-
 import javax.json.JsonArray;
 import javax.json.JsonNumber;
 import javax.json.JsonObject;
 import javax.json.JsonString;
 import javax.json.JsonValue;
+import java.io.Serializable;
+import java.util.AbstractMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Set;
 
 
 final class JsonObjectImpl extends AbstractMap<String, JsonValue> implements JsonObject, Serializable {
-    private Integer hashCode = null;
+    private transient Integer hashCode = null;
     private final Map<String, JsonValue> unmodifieableBackingMap;
 
     private <T> T value(final String name, final Class<T> clazz) {
@@ -109,20 +108,14 @@ final class JsonObjectImpl extends AbstractMap<String, JsonValue> implements Jso
 
     @Override
     public boolean getBoolean(final String name) {
-        return value(name, JsonValue.class) == JsonValue.TRUE;
+        return SerializablePrimitives.TRUE.equals(value(name, JsonValue.class));
     }
 
     @Override
     public boolean getBoolean(final String name, final boolean defaultValue) {
         final Object v = unmodifieableBackingMap.get(name);
         if (v != null) {
-            if (v == JsonValue.TRUE) {
-                return true;
-            } else if (v == JsonValue.FALSE) {
-                return false;
-            } else {
-                return defaultValue;
-            }
+            return SerializablePrimitives.TRUE.equals(v) || !SerializablePrimitives.FALSE.equals(v) && defaultValue;
         } else {
             return defaultValue;
         }
@@ -130,7 +123,7 @@ final class JsonObjectImpl extends AbstractMap<String, JsonValue> implements Jso
 
     @Override
     public boolean isNull(final String name) {
-        return value(name, JsonValue.class) == JsonValue.NULL;
+        return JsonValue.NULL.equals(value(name, JsonValue.class));
     }
 
     @Override
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonReaderImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonReaderImpl.java
index b0107ee0..2632c9a6 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonReaderImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonReaderImpl.java
@@ -79,19 +79,19 @@ public class JsonReaderImpl implements JsonReader {
                     throw new JsonParsingException("Expected end of file", parser.getLocation());
                 }
                 close();
-                return JsonValue.FALSE;
+                return SerializablePrimitives.FALSE;
             case VALUE_TRUE:
                 if (parser.hasNext()) {
                     throw new JsonParsingException("Expected end of file", parser.getLocation());
                 }
                 close();
-                return JsonValue.TRUE;
+                return SerializablePrimitives.TRUE;
             case VALUE_NULL:
                 if (parser.hasNext()) {
                     throw new JsonParsingException("Expected end of file", parser.getLocation());
                 }
                 close();
-                return JsonValue.NULL;
+                return SerializablePrimitives.NULL;
             case VALUE_NUMBER:
                 if (parser.hasNext()) {
                     throw new JsonParsingException("Expected end of file", parser.getLocation());
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonStringImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonStringImpl.java
index a7e8f298..5ec8a36b 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonStringImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonStringImpl.java
@@ -19,11 +19,12 @@
 package org.apache.johnzon.core;
 
 import javax.json.JsonString;
+import java.io.Serializable;
 
-final class JsonStringImpl implements JsonString {
+final class JsonStringImpl implements JsonString, Serializable {
     private final String value;
     private String escape;
-    private Integer hashCode = null;
+    private transient Integer hashCode = null;
 
 
     JsonStringImpl(final String value) {
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/SerializablePrimitives.java b/johnzon-core/src/main/java/org/apache/johnzon/core/SerializablePrimitives.java
new file mode 100644
index 00000000..c046f853
--- /dev/null
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/SerializablePrimitives.java
@@ -0,0 +1,97 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.johnzon.core;
+
+import javax.json.JsonValue;
+import java.io.InvalidObjectException;
+import java.io.ObjectStreamException;
+import java.io.Serializable;
+
+public final class SerializablePrimitives {
+    private SerializablePrimitives() {
+        // no-op
+    }
+
+    public static final JsonValue NULL = new SerializableJsonValue(JsonValue.NULL);
+    public static final JsonValue TRUE = new SerializableJsonValue(JsonValue.TRUE);
+    public static final JsonValue FALSE = new SerializableJsonValue(JsonValue.FALSE);
+
+    private static final class SerializableJsonValue implements JsonValue, Serializable {
+        private final JsonValue delegate;
+
+        SerializableJsonValue(final JsonValue value) {
+            delegate = value;
+        }
+
+        @Override
+        public ValueType getValueType() {
+            return delegate.getValueType();
+        }
+
+        @Override
+        public String toString() {
+            return delegate.toString();
+        }
+
+        @Override
+        public boolean equals(final Object o) {
+            if (this == o || o == delegate) {
+                return true;
+            }
+            if (o == null) {
+                return false;
+            }
+            if (SerializableJsonValue.class.isInstance(o)) {
+                return SerializableJsonValue.class.cast(o).delegate.equals(delegate);
+            }
+            return JsonValue.class.isInstance(o) && o.equals(delegate);
+
+        }
+
+        @Override
+        public int hashCode() {
+            return delegate.hashCode();
+        }
+
+        private Object writeReplace() throws ObjectStreamException {
+            return new SerializationReplacement(delegate.toString());
+        }
+    }
+
+    private static final class SerializationReplacement implements Serializable {
+        private final String value;
+
+        private SerializationReplacement(final String value) {
+            this.value = value;
+        }
+
+        private Object readResolve() throws ObjectStreamException {
+            if ("null".equals(value)) {
+                return NULL;
+            }
+            if ("true".equals(value)) {
+                return TRUE;
+            }
+            if ("false".equals(value)) {
+                return FALSE;
+            }
+            throw new InvalidObjectException("Unknown " + value);
+        }
+    }
+}
diff --git a/johnzon-core/src/test/java/org/apache/johnzon/core/SerializationTest.java b/johnzon-core/src/test/java/org/apache/johnzon/core/SerializationTest.java
new file mode 100644
index 00000000..b80aae72
--- /dev/null
+++ b/johnzon-core/src/test/java/org/apache/johnzon/core/SerializationTest.java
@@ -0,0 +1,130 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ */
+package org.apache.johnzon.core;
+
+import org.junit.Test;
+
+import javax.json.JsonArray;
+import javax.json.JsonNumber;
+import javax.json.JsonObject;
+import javax.json.JsonString;
+import javax.json.JsonValue;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.math.BigDecimal;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+import static java.util.Arrays.asList;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotSame;
+import static org.junit.Assert.assertTrue;
+
+public class SerializationTest {
+    @Test
+    public void jsonString() throws IOException, ClassNotFoundException {
+        final JsonString source = new JsonStringImpl("test");
+        final JsonString string = serialDeser(source);
+        assertNotSame(source, string);
+        assertEquals("test", string.getString());
+        assertEquals("\"test\"", string.toString());
+    }
+
+    @Test
+    public void jsonNumber() throws IOException, ClassNotFoundException {
+        final JsonNumber source = new JsonNumberImpl(new BigDecimal("1.0"));
+        final JsonNumber deserialized = serialDeser(source);
+        assertNotSame(source, deserialized);
+        assertEquals(1.0, deserialized.doubleValue(), 0.);
+        assertEquals("1.0", deserialized.toString());
+    }
+
+    @Test
+    public void jsonLong() throws IOException, ClassNotFoundException {
+        final JsonNumber source = new JsonLongImpl(1);
+        final JsonNumber string = serialDeser(source);
+        assertNotSame(source, string);
+        assertEquals(1, string.longValue());
+        assertEquals("1", string.toString());
+    }
+
+    @Test
+    public void jsonDouble() throws IOException, ClassNotFoundException {
+        final JsonNumber source = new JsonDoubleImpl(1.5);
+        final JsonNumber string = serialDeser(source);
+        assertNotSame(source, string);
+        assertEquals(1.5, string.doubleValue(), 0.);
+        assertEquals("1.5", string.toString());
+    }
+
+    @Test
+    public void jsonObject() throws IOException, ClassNotFoundException {
+        final Map<String, JsonValue> map = new LinkedHashMap<String, JsonValue>();
+        map.put("test", new JsonStringImpl("val"));
+        final JsonObject source = new JsonObjectImpl(Collections.unmodifiableMap(map));
+        final JsonObject serialization = serialDeser(source);
+        assertNotSame(source, serialization);
+        assertTrue(serialization.containsKey("test"));
+        assertEquals("val", serialization.getString("test"));
+        assertEquals(1, serialization.size());
+    }
+
+    @Test
+    public void jsonArray() throws IOException, ClassNotFoundException {
+        final List<JsonValue> list = new ArrayList<JsonValue>();
+        list.add(new JsonStringImpl("test"));
+        final JsonArray source = new JsonArrayImpl(Collections.unmodifiableList(list));
+        final JsonArray serialization = serialDeser(source);
+        assertNotSame(source, serialization);
+        assertEquals(1, serialization.size());
+        assertEquals("test", JsonString.class.cast(serialization.iterator().next()).getString());
+    }
+
+    @Test
+    public void jsonPrimitives() throws IOException, ClassNotFoundException { // NOTE: spec jar primitives are not serializable
+        for (final JsonValue v : asList(SerializablePrimitives.FALSE, SerializablePrimitives.TRUE, SerializablePrimitives.NULL)) {
+            assertEquals(v, serialDeser(v));
+        }
+    }
+
+    @Test
+    public void primitiveInObject() throws IOException, ClassNotFoundException {
+        assertTrue(serialDeser(JsonProviderImpl.provider().createObjectBuilder()
+                .add("bool", true)
+                .build()
+                .getBoolean("bool")));
+    }
+
+    private static <T> T serialDeser(final T instance) throws IOException, ClassNotFoundException {
+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        final ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeObject(instance);
+        oos.close();
+        final ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));
+        try {
+            return (T) in.readObject();
+        } finally {
+            in.close();
+        }
+    }
+}
