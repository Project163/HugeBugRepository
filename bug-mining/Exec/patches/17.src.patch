diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 51ce6c71..d91b6959 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -23,6 +23,12 @@
     <author email="sgoeschl@apache.org">Siegfried Goeschl</author>
   </properties>
   <body>
+    <release version="1.1-SNAPSHOT" date="as in SVN" description="Maintenance Release">
+      <action dev="sgoeschl" type="fix" due-to="Milos Kleint" issue="EXEC-33">
+        Copies all data from an System.input stream to an output stream of 
+        the executed process. 
+      </action>
+    </release>  
     <release version="1.0" date="2009-03-15" description="First Public Release">
       <action dev="sgoeschl" type="fix" due-to="Sebastien Bazley" issue="EXEC-37">
         Removed useless synchronized statement in
diff --git a/src/main/java/org/apache/commons/exec/InputStreamPumper.java b/src/main/java/org/apache/commons/exec/InputStreamPumper.java
new file mode 100644
index 00000000..c9ce929e
--- /dev/null
+++ b/src/main/java/org/apache/commons/exec/InputStreamPumper.java
@@ -0,0 +1,84 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+
+package org.apache.commons.exec;
+
+import org.apache.commons.exec.util.DebugUtils;
+
+import java.io.InputStream;
+import java.io.OutputStream;
+
+/**
+ * Copies all data from an System.input stream to an output stream of the executed process.
+ *
+ * @author mkleint
+ */
+public class InputStreamPumper implements Runnable {
+
+    public static final int SLEEPING_TIME = 100;
+
+    /** the input stream to pump from */
+    private final InputStream is;
+
+    /** the output stream to pmp into */
+    private final OutputStream os;
+
+    /** flag to stop the stream pumping */
+    private volatile boolean stop;
+
+
+    /**
+     * Create a new stream pumper.
+     *
+     * @param is input stream to read data from
+     * @param os output stream to write data to.
+     */
+    public InputStreamPumper(final InputStream is, final OutputStream os) {
+        this.is = is;
+        this.os = os;
+    }
+
+
+    /**
+     * Copies data from the input stream to the output stream. Terminates as
+     * soon as the input stream is closed or an error occurs.
+     */
+    public void run() {
+        stop = false;
+
+        try {
+            while (!stop) {
+                while (is.available() > 0 && !stop) {
+                    os.write(is.read());
+                }
+                os.flush();
+                Thread.sleep(SLEEPING_TIME);
+            }
+        } catch (Exception e) {
+            String msg = "Got exception while reading/writing the stream";
+            DebugUtils.handleException(msg ,e);
+        } finally {
+        }
+    }
+
+
+    public void stopProcessing() {
+        stop = true;
+    }
+
+}
diff --git a/src/main/java/org/apache/commons/exec/PumpStreamHandler.java b/src/main/java/org/apache/commons/exec/PumpStreamHandler.java
index 6f1f4bd9..06c9e3b8 100644
--- a/src/main/java/org/apache/commons/exec/PumpStreamHandler.java
+++ b/src/main/java/org/apache/commons/exec/PumpStreamHandler.java
@@ -43,6 +43,8 @@ public class PumpStreamHandler implements ExecuteStreamHandler {
 
     private final InputStream input;
 
+    private InputStreamPumper inputStreamPumper;
+
     /**
      * Construct a new <CODE>PumpStreamHandler</CODE>.
      * 
@@ -56,12 +58,6 @@ public class PumpStreamHandler implements ExecuteStreamHandler {
     public PumpStreamHandler(final OutputStream out, final OutputStream err,
             final InputStream input) {
 
-        // see EXEC-33
-        if(input == System.in) {
-            String msg = "Using System.in is currently not supported since it would hang your application (see EXEC-33).";
-            throw new IllegalArgumentException(msg);
-        }
-
         this.out = out;
         this.err = err;
         this.input = input;
@@ -131,8 +127,11 @@ public class PumpStreamHandler implements ExecuteStreamHandler {
      */
     public void setProcessInputStream(final OutputStream os) {
         if (input != null) {
-            inputThread = createPump(input, os, true);
+            if (input == System.in) {
+                inputThread = createSystemInPump(input, os);
         } else {
+                inputThread = createPump(input, os, true);
+            }        } else {
             try {
                 os.close();
             } catch (IOException e) {
@@ -180,6 +179,10 @@ public class PumpStreamHandler implements ExecuteStreamHandler {
             }
         }
 
+        if (inputStreamPumper != null) {
+            inputStreamPumper.stopProcessing();
+        }
+
         if (inputThread != null) {
             try {
                 inputThread.join();
@@ -280,4 +283,20 @@ public class PumpStreamHandler implements ExecuteStreamHandler {
         result.setDaemon(true);
         return result;
     }
+
+
+    /**
+     * Creates a stream pumper to copy the given input stream to the given
+     * output stream.
+     *
+     * @param is the System.in input stream to copy from
+     * @param os the output stream to copy into
+     * @return the stream pumper thread
+     */
+    private Thread createSystemInPump(InputStream is, OutputStream os) {
+        inputStreamPumper = new InputStreamPumper(is, os);
+        final Thread result = new Thread(inputStreamPumper);
+        result.setDaemon(true);
+        return result;
+    }
 }
diff --git a/src/test/java/org/apache/commons/exec/DefaultExecutorTest.java b/src/test/java/org/apache/commons/exec/DefaultExecutorTest.java
index 7caed588..f3b099c3 100644
--- a/src/test/java/org/apache/commons/exec/DefaultExecutorTest.java
+++ b/src/test/java/org/apache/commons/exec/DefaultExecutorTest.java
@@ -372,23 +372,16 @@ public class DefaultExecutorTest extends TestCase {
     }
 
     /**
-     * Start a process and connect stdin, stdout and stderr. This
-     * test currenty hang. Therefore we throw an IllegalArgument
-     * Exception to notify the user (see EXEC-33).
+     * Start a process and connect stdin, stdout and stderr (see EXEC-33).
      */
     public void testExecuteWithStdin() throws Exception
     {
-        try {
-            CommandLine cl = new CommandLine(testScript);
-            PumpStreamHandler pumpStreamHandler = new PumpStreamHandler( System.out, System.err, System.in );
-            DefaultExecutor executor = new DefaultExecutor();
-            executor.setStreamHandler( pumpStreamHandler );
-            int exitValue = executor.execute(cl);
-            assertFalse(exec.isFailure(exitValue));
-        }
-        catch(IllegalArgumentException e) {
-            assertTrue( e.getMessage().indexOf("EXEC-33") >= 0);
-        }
+        CommandLine cl = new CommandLine(testScript);
+        PumpStreamHandler pumpStreamHandler = new PumpStreamHandler( System.out, System.err, System.in );
+        DefaultExecutor executor = new DefaultExecutor();
+        executor.setStreamHandler( pumpStreamHandler );
+        int exitValue = executor.execute(cl);
+        assertFalse(exec.isFailure(exitValue));
     }
 
      /**
