diff --git a/src/java/org/apache/commons/configuration/CompositeConfiguration.java b/src/java/org/apache/commons/configuration/CompositeConfiguration.java
index 0df59e88..22c4e008 100644
--- a/src/java/org/apache/commons/configuration/CompositeConfiguration.java
+++ b/src/java/org/apache/commons/configuration/CompositeConfiguration.java
@@ -271,7 +271,7 @@ implements Cloneable
     /**
      * {@inheritDoc}
      */
-    public void clearProperty(String key)
+    protected void clearPropertyDirect(String key)
     {
         for (Iterator i = configList.iterator(); i.hasNext();)
         {
diff --git a/src/test/org/apache/commons/configuration/TestCompositeConfiguration.java b/src/test/org/apache/commons/configuration/TestCompositeConfiguration.java
index a88a8074..16a240a2 100644
--- a/src/test/org/apache/commons/configuration/TestCompositeConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestCompositeConfiguration.java
@@ -440,7 +440,7 @@ public class TestCompositeConfiguration extends TestCase
         assertEquals("2nd element", "foo.bar2", array[1]);
         assertEquals("3rd element", "foo.bar3", array[2]);
     }
-    
+
     /**
      * Tests whether global interpolation works with lists.
      */
@@ -515,15 +515,61 @@ public class TestCompositeConfiguration extends TestCase
      */
     public void testCloneEventListener()
     {
-        cc.addConfigurationListener(new ConfigurationListener()
-        {
-            public void configurationChanged(ConfigurationEvent event)
-            {
-                // Just a dummy
-            }
-        });
+        cc.addConfigurationListener(new TestEventListenerImpl());
         CompositeConfiguration cc2 = (CompositeConfiguration) cc.clone();
         assertTrue("Listeners have been cloned", cc2
                 .getConfigurationListeners().isEmpty());
     }
+
+    /**
+     * Tests whether add property events are triggered.
+     */
+    public void testEventAddProperty()
+    {
+        TestEventListenerImpl l = new TestEventListenerImpl();
+        cc.addConfigurationListener(l);
+        cc.addProperty("test", "value");
+        assertEquals("No add events received", 2, l.eventCount);
+    }
+
+    /**
+     * Tests whether set property events are triggered.
+     */
+    public void testEventSetProperty()
+    {
+        TestEventListenerImpl l = new TestEventListenerImpl();
+        cc.addConfigurationListener(l);
+        cc.setProperty("test", "value");
+        assertEquals("No set events received", 2, l.eventCount);
+    }
+
+    /**
+     * Tests whether clear property events are triggered.
+     */
+    public void testEventClearProperty()
+    {
+        cc.addConfiguration(conf1);
+        assertTrue("Wrong value for property", cc
+                .getBoolean("configuration.loaded"));
+        TestEventListenerImpl l = new TestEventListenerImpl();
+        cc.addConfigurationListener(l);
+        cc.clearProperty("configuration.loaded");
+        assertFalse("Key still present", cc.containsKey("configuration.loaded"));
+        assertEquals("No clear events received", 2, l.eventCount);
+    }
+
+    /**
+     * A test configuration event listener that counts the number of received
+     * events. Used for testing the event facilities.
+     */
+    static class TestEventListenerImpl implements ConfigurationListener
+    {
+        /** The number of received events.*/
+        int eventCount;
+
+        public void configurationChanged(ConfigurationEvent event)
+        {
+            eventCount++;
+        }
+    }
 }
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 70e2a1fc..e8e7e5e6 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,10 @@
 
   <body>
     <release version="1.4-dev" date="in SVN">
+      <action dev="oheger" type="update" issue="CONFIGURATION-241">
+        CompositeConfiguration.clearProperty() now generates the correct
+        update events.
+      </action>
       <action dev="oheger" type="update" issue="CONFIGURATION-242">
         The configuration returned by HierarchicalConfiguration.subset()
         performed variable interpolation only in the keys that belong to the
