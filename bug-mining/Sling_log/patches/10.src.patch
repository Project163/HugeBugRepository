diff --git a/pom.xml b/pom.xml
index 14d7ac7..6119804 100644
--- a/pom.xml
+++ b/pom.xml
@@ -142,8 +142,15 @@
             <version>0.6.1</version>
             <scope>provided</scope>
         </dependency>
-        
         <!-- testing -->
+        <!--  using mockito because its a bit more relaxed and makes it easier to maintain
+              the test cases if dependencies change -->
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-all</artifactId>
+            <version>1.8.2</version>
+            <scope>test</scope>
+        </dependency>
         <dependency>
             <groupId>junit</groupId>
             <artifactId>junit</artifactId>
diff --git a/src/test/java/org/apache/sling/commons/log/internal/ActivatorTest.java b/src/test/java/org/apache/sling/commons/log/internal/ActivatorTest.java
new file mode 100644
index 0000000..3900f12
--- /dev/null
+++ b/src/test/java/org/apache/sling/commons/log/internal/ActivatorTest.java
@@ -0,0 +1,56 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.sling.commons.log.internal;
+
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.Mockito;
+import org.mockito.MockitoAnnotations;
+import org.osgi.framework.BundleContext;
+
+/**
+ * A simple but fairly relaxed test of the activator. Also tests LogManager.
+ */
+public class ActivatorTest {
+    
+    @Mock
+    private BundleContext context;
+    
+    public ActivatorTest() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testActivator() throws Exception {
+        Activator ac = new Activator();
+        ac.start(context);
+        ac.start(context);
+    }
+    
+    @Test
+    public void testActivatorWithJUL() throws Exception {
+        Activator ac = new Activator();
+        Mockito.when(context.getProperty("org.apache.sling.commons.log.julenabled")).thenReturn("true");
+        ac.start(context);
+        ac.start(context);
+        
+    }
+    
+
+}
diff --git a/src/test/java/org/apache/sling/commons/log/internal/config/AbstractSlingConfigTest.java b/src/test/java/org/apache/sling/commons/log/internal/config/AbstractSlingConfigTest.java
new file mode 100644
index 0000000..e75ed5a
--- /dev/null
+++ b/src/test/java/org/apache/sling/commons/log/internal/config/AbstractSlingConfigTest.java
@@ -0,0 +1,63 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.sling.commons.log.internal.config;
+
+import java.io.File;
+import java.util.Hashtable;
+
+import org.apache.sling.commons.log.internal.LogManager;
+
+public class AbstractSlingConfigTest {
+
+    
+    private int counter = 0;
+
+
+    
+    protected Hashtable<String, Object> getGoodConfiguration() {
+        Hashtable<String, Object> config = new Hashtable<String, Object>();
+        config.put(LogManager.LOG_PATTERN,"%s");
+        config.put(LogManager.LOG_LEVEL,"DEBUG");
+        config.put(LogManager.LOG_FILE,getBaseFile().getAbsolutePath());
+        config.put(LogManager.LOG_LOGGERS, new String[]{"loggerA,loggerB,loggerC","log.er.D,logger.E"});
+        return config;
+    }
+
+    protected Hashtable<String, Object> getBadConfiguration() {
+        Hashtable<String, Object> config = new Hashtable<String, Object>();
+        config.put(LogManager.LOG_PATTERN,"%s");
+        config.put(LogManager.LOG_FILE,getBaseFile().getAbsolutePath());
+        return config;
+    }
+
+    
+    /**
+     * Returns a base file for testing ensuring the parent path directory
+     * hierarchy exists. The file itself is located below the target folder of
+     * the current working directory.
+     */
+    protected File getBaseFile() {
+        final File baseFile = new File("target/" + getClass().getSimpleName()
+            + "/" + (counter++) + "-" + System.currentTimeMillis() + "/"
+            + getClass().getSimpleName());
+        baseFile.getParentFile().mkdirs();
+        return baseFile;
+    }
+
+}
diff --git a/src/test/java/org/apache/sling/commons/log/internal/config/GlobalConfigurationTest.java b/src/test/java/org/apache/sling/commons/log/internal/config/GlobalConfigurationTest.java
new file mode 100644
index 0000000..cdf51b8
--- /dev/null
+++ b/src/test/java/org/apache/sling/commons/log/internal/config/GlobalConfigurationTest.java
@@ -0,0 +1,59 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.sling.commons.log.internal.config;
+
+import java.util.Hashtable;
+
+import org.apache.sling.commons.log.internal.LogManager;
+import org.apache.sling.commons.log.internal.slf4j.LogConfigManager;
+import org.junit.Assert;
+import org.junit.Test;
+import org.mockito.MockitoAnnotations;
+import org.osgi.service.cm.ConfigurationException;
+
+public class GlobalConfigurationTest extends AbstractSlingConfigTest {
+    
+    public GlobalConfigurationTest() {
+        MockitoAnnotations.initMocks(this);
+    }    
+    
+    @Test
+    public void testGlobalConfigorator() throws ConfigurationException {
+        GlobalConfigurator g = new GlobalConfigurator();
+        LogConfigManager lcm = LogConfigManager.getInstance();
+        g.setLogConfigManager(lcm);
+        Assert.assertSame(lcm, g.getLogConfigManager());
+        Hashtable<String, Object> config = getGoodConfiguration();
+        g.updated(config);
+        Assert.assertTrue(config.containsKey(LogManager.LOG_LOGGERS));
+    }
+
+    @Test
+    public void testGlobalConfigoratorFail() throws ConfigurationException {
+        GlobalConfigurator g = new GlobalConfigurator();
+        g.setLogConfigManager(LogConfigManager.getInstance());
+        try {
+            g.updated(getBadConfiguration());
+            Assert.fail("Should have failed with a LOG_LEVEL not set");
+        } catch ( ConfigurationException e ) {
+            // good
+        }
+    }
+ 
+}
diff --git a/src/test/java/org/apache/sling/commons/log/internal/config/LogWriterManagedServiceFactoryTest.java b/src/test/java/org/apache/sling/commons/log/internal/config/LogWriterManagedServiceFactoryTest.java
new file mode 100644
index 0000000..95020d1
--- /dev/null
+++ b/src/test/java/org/apache/sling/commons/log/internal/config/LogWriterManagedServiceFactoryTest.java
@@ -0,0 +1,35 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.sling.commons.log.internal.config;
+
+import org.apache.sling.commons.log.internal.slf4j.LogConfigManager;
+import org.junit.Test;
+import org.osgi.service.cm.ConfigurationException;
+
+public class LogWriterManagedServiceFactoryTest extends AbstractSlingConfigTest {
+
+    @Test
+    public void testLogWriterManagedServiceFactory() throws ConfigurationException {
+        LogWriterManagedServiceFactory l = new LogWriterManagedServiceFactory();
+        l.setLogConfigManager(LogConfigManager.getInstance());
+        l.updated("test-pid", getGoodConfiguration());
+        l.deleted("test-pid");
+    }
+
+}
diff --git a/src/test/java/org/apache/sling/commons/log/internal/slf4j/PrivilegedWriterTest.java b/src/test/java/org/apache/sling/commons/log/internal/slf4j/PrivilegedWriterTest.java
new file mode 100644
index 0000000..eefa080
--- /dev/null
+++ b/src/test/java/org/apache/sling/commons/log/internal/slf4j/PrivilegedWriterTest.java
@@ -0,0 +1,54 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.sling.commons.log.internal.slf4j;
+
+import java.io.IOException;
+import java.io.StringWriter;
+import java.io.Writer;
+
+import junit.framework.Assert;
+
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+public class PrivilegedWriterTest {
+
+    @Mock
+    private Writer mockWriter;
+
+    public PrivilegedWriterTest() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testPrivilegedWriter() throws IOException {
+        StringWriter sw = new StringWriter();
+        PrivilegedWriter p = new PrivilegedWriter(sw);
+        char[] c = "Testing".toCharArray();
+        p.write(c, 0, c.length);
+        p.flush();
+        p.close();
+        Assert.assertEquals("Testing", sw.toString());
+    }
+
+    // Not certain how to test failures here. Mocking the Security manager doesnt work.
+
+}
diff --git a/src/test/java/org/apache/sling/commons/log/internal/slf4j/SlingConfigurationPrinterTest.java b/src/test/java/org/apache/sling/commons/log/internal/slf4j/SlingConfigurationPrinterTest.java
new file mode 100644
index 0000000..6bcef84
--- /dev/null
+++ b/src/test/java/org/apache/sling/commons/log/internal/slf4j/SlingConfigurationPrinterTest.java
@@ -0,0 +1,57 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.sling.commons.log.internal.slf4j;
+
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.net.URL;
+
+import org.apache.sling.commons.log.internal.config.GlobalConfigurationTest;
+import org.junit.Assert;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.osgi.framework.BundleContext;
+import org.osgi.service.cm.ConfigurationException;
+
+public class SlingConfigurationPrinterTest extends GlobalConfigurationTest {
+
+    @Mock
+    private BundleContext context;
+    
+    public SlingConfigurationPrinterTest() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testSlingLogConfigurationPrinter() throws ConfigurationException {
+        testGlobalConfigorator();
+        SlingConfigurationPrinter p = new SlingConfigurationPrinter();
+        SlingConfigurationPrinter.registerPrinter(context);
+        URL[] u = p.getAttachments("zip");
+        Assert.assertNotNull(u);
+        Assert.assertEquals(u.length,1);
+        StringWriter stringWriter = new StringWriter();
+        PrintWriter printWriter = new PrintWriter(stringWriter);
+        p.printConfiguration(printWriter);
+        SlingConfigurationPrinter.unregisterPrinter();
+        Assert.assertTrue(stringWriter.toString().length() > 0);
+    }
+
+}
diff --git a/src/test/java/org/apache/sling/commons/log/internal/slf4j/SlingLogPanelTest.java b/src/test/java/org/apache/sling/commons/log/internal/slf4j/SlingLogPanelTest.java
new file mode 100644
index 0000000..94e4d03
--- /dev/null
+++ b/src/test/java/org/apache/sling/commons/log/internal/slf4j/SlingLogPanelTest.java
@@ -0,0 +1,58 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.sling.commons.log.internal.slf4j;
+
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import junit.framework.Assert;
+
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.Mockito;
+import org.mockito.MockitoAnnotations;
+
+public class SlingLogPanelTest {
+
+    
+    @Mock
+    private HttpServletRequest request;
+    
+    @Mock
+    private HttpServletResponse response;
+    
+    public SlingLogPanelTest() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testGet() throws IOException {
+        StringWriter sw = new StringWriter();
+        PrintWriter pw = new PrintWriter(sw);
+        Mockito.when(response.getWriter()).thenReturn(pw);
+        SlingLogPanel p = new SlingLogPanel(LogConfigManager.getInstance());
+        p.doGet(request, response);
+        String html = sw.toString();
+        Assert.assertTrue(html.length()>0);
+    }
+}
diff --git a/src/test/java/org/apache/sling/commons/log/internal/slf4j/SlingLogWriterTest.java b/src/test/java/org/apache/sling/commons/log/internal/slf4j/SlingLogWriterTest.java
index 6111276..99034dd 100644
--- a/src/test/java/org/apache/sling/commons/log/internal/slf4j/SlingLogWriterTest.java
+++ b/src/test/java/org/apache/sling/commons/log/internal/slf4j/SlingLogWriterTest.java
@@ -240,7 +240,6 @@ public class SlingLogWriterTest extends AbstractSlingLogTest {
             File.class.getMethod("setWritable", boolean.class).invoke(protectedParent, false);
             File.class.getMethod("setExecutable", boolean.class).invoke(protectedParent, false);
         } catch ( Exception e ) {
-            e.printStackTrace();
             if ( System.getProperty("java.version").startsWith("1.5") ) {
                 return; // cant perform this test on JDKs before 1.5
             }
@@ -273,7 +272,6 @@ public class SlingLogWriterTest extends AbstractSlingLogTest {
             File.class.getMethod("setWritable", boolean.class).invoke(loggingParent, false);
             File.class.getMethod("setExecutable", boolean.class).invoke(protectedParent, false);
         } catch ( Exception e ) {
-            e.printStackTrace();
             if ( System.getProperty("java.version").startsWith("1.5") ) {
                 return; // cant perform this test on JDKs before 1.5
             }
