diff --git a/src/main/java/org/apache/commons/crypto/cipher/CipherFactory.java b/src/main/java/org/apache/commons/crypto/cipher/CipherFactory.java
index 51ade868..fb712d2c 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/CipherFactory.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/CipherFactory.java
@@ -35,6 +35,8 @@ public class CipherFactory {
   /** LOG instance for {@CipherFactory} */
   public final static Logger LOG = LoggerFactory.getLogger(CipherFactory.class);
 
+  private CipherFactory() {}
+
   /**
    * Gets a cipher instance for specified algorithm/mode/padding.
    *
diff --git a/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java b/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java
index 57a8cc7f..c3f75937 100644
--- a/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java
+++ b/src/main/java/org/apache/commons/crypto/cipher/OpensslNative.java
@@ -25,6 +25,8 @@
  */
 public class OpensslNative {
 
+  private OpensslNative() {}
+
   /**
    * Declares a native method to initialize JNI field and method IDs.
    */
diff --git a/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java b/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
index 24136a3e..494c28d7 100644
--- a/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
+++ b/src/main/java/org/apache/commons/crypto/conf/ConfigurationKeys.java
@@ -130,4 +130,6 @@ public class ConfigurationKeys {
    */
   public static final String COMMONS_CRYPTO_LIB_TEMPDIR_KEY =
       CONF_PREFIX + "lib.tempdir";
+
+  private ConfigurationKeys() {}
 }
diff --git a/src/main/java/org/apache/commons/crypto/random/OpensslSecureRandomNative.java b/src/main/java/org/apache/commons/crypto/random/OpensslSecureRandomNative.java
index d80cf89d..c36083fd 100644
--- a/src/main/java/org/apache/commons/crypto/random/OpensslSecureRandomNative.java
+++ b/src/main/java/org/apache/commons/crypto/random/OpensslSecureRandomNative.java
@@ -23,6 +23,9 @@
  * OpensslSecureRandomNative.h(genereted by javah).
  */
 public class OpensslSecureRandomNative {
+
+  private OpensslSecureRandomNative() {}
+
   /**
    * Declares a native method to initialize SR.
    */
diff --git a/src/main/java/org/apache/commons/crypto/random/SecureRandomFactory.java b/src/main/java/org/apache/commons/crypto/random/SecureRandomFactory.java
index ed416ead..47d4fa86 100644
--- a/src/main/java/org/apache/commons/crypto/random/SecureRandomFactory.java
+++ b/src/main/java/org/apache/commons/crypto/random/SecureRandomFactory.java
@@ -35,6 +35,8 @@ public class SecureRandomFactory {
   public final static Logger LOG = LoggerFactory
       .getLogger(SecureRandomFactory.class);
 
+  private SecureRandomFactory() {}
+
   /**
    * Gets a SecureRandom instance for specified props.
    *
diff --git a/src/main/java/org/apache/commons/crypto/utils/IOUtils.java b/src/main/java/org/apache/commons/crypto/utils/IOUtils.java
index 58a20a5b..a3ecda41 100644
--- a/src/main/java/org/apache/commons/crypto/utils/IOUtils.java
+++ b/src/main/java/org/apache/commons/crypto/utils/IOUtils.java
@@ -28,6 +28,8 @@
  */
 public class IOUtils {
 
+  private IOUtils() {}
+
   /**
    * Does the readFully based on the Input read.
    *
diff --git a/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java b/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java
index 17c55287..92f4dba5 100644
--- a/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java
+++ b/src/main/java/org/apache/commons/crypto/utils/NativeCodeLoader.java
@@ -43,6 +43,8 @@ public class NativeCodeLoader {
 
   private static boolean nativeCodeLoaded = false;
 
+  private NativeCodeLoader() {}
+
   static {
     // Try to load native library and set fallback flag appropriately
     if(LOG.isDebugEnabled()) {
diff --git a/src/main/java/org/apache/commons/crypto/utils/OSInfo.java b/src/main/java/org/apache/commons/crypto/utils/OSInfo.java
index 67f7d564..4cf74208 100644
--- a/src/main/java/org/apache/commons/crypto/utils/OSInfo.java
+++ b/src/main/java/org/apache/commons/crypto/utils/OSInfo.java
@@ -51,6 +51,8 @@ public class OSInfo {
    * The constant string represents for PPC64 architecture, the value is:{@value #PPC64}.*/
   public static final String PPC64 = "ppc64";
 
+  private OSInfo() {}
+
   static {
     // x86 mappings
     archMapping.put(X86, X86);
diff --git a/src/main/java/org/apache/commons/crypto/utils/ReflectionUtils.java b/src/main/java/org/apache/commons/crypto/utils/ReflectionUtils.java
index 9ffd7e8f..cff9406f 100644
--- a/src/main/java/org/apache/commons/crypto/utils/ReflectionUtils.java
+++ b/src/main/java/org/apache/commons/crypto/utils/ReflectionUtils.java
@@ -47,6 +47,8 @@ public class ReflectionUtils {
   private static final Class<?> NEGATIVE_CACHE_SENTINEL =
     NegativeCacheSentinel.class;
 
+  private ReflectionUtils() {}
+
   /**
    * A unique class which is used as a sentinel value in the caching
    * for getClassByName. {@link Cipher#getClassByNameOrNull(String)}.
diff --git a/src/main/java/org/apache/commons/crypto/utils/Utils.java b/src/main/java/org/apache/commons/crypto/utils/Utils.java
index 5b78be8f..ec2a1e4c 100644
--- a/src/main/java/org/apache/commons/crypto/utils/Utils.java
+++ b/src/main/java/org/apache/commons/crypto/utils/Utils.java
@@ -57,6 +57,8 @@ public class Utils {
    */
   private static final int AES_BLOCK_SIZE = AES_CTR_NOPADDING.getAlgorithmBlockSize();
 
+  private Utils() {}
+
   static {
     loadSystemProperties();
   }
