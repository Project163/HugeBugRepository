diff --git a/CHANGES.txt b/CHANGES.txt
index e0c77ae4d..c44479a96 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -1,5 +1,7 @@
 Release 1.11 - 10/18/2015
 
+  * Fix regression with spacing in PPT via Andreas Beeker (TIKA-1777).
+
   * Java7 API support for allowing java.nio.file.Path as method arguments
     was added to Tika and to ParsingReader, TikaFileTypeDetector, and to
     Tika Config (TIKA-1745, TIKA-1746, TIKA-1751).
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java
index dedb13544..6f33de8b0 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java
@@ -238,30 +238,58 @@ public class HSLFExtractor extends AbstractPOIFSExtractor {
             // = TextHeaderAtom.TITLE_TYPE, 1 = TextHeaderAtom.BODY_TYPE):
             //if (!isMaster || (run.getRunType() != 0 && run.getRunType() != 1)) {
 
-        	for (HSLFTextParagraph htp : run) {
-        		xhtml.startElement("p");
-
-        		for (HSLFTextRun htr : htp.getTextRuns()) {
-        			String line = htr.getRawText();
-        			if (line != null) {
-        				boolean isfirst = true;
-        				for (String fragment : line.split("\\u000b")){
-        					if (!isfirst)  {
-        	                    xhtml.startElement("br");
-        	                    xhtml.endElement("br");
-        					}
-        					isfirst = false;
-        					xhtml.characters(fragment.trim());
-        				}
-        			}
-        		}
-                xhtml.endElement("p");
+            boolean isBullet = false;
+            for (HSLFTextParagraph htp : run) {
+                boolean nextBullet = htp.isBullet();
+                // TODO: identify bullet/list type
+                if (isBullet != nextBullet) {
+                    isBullet = nextBullet;
+                    if (isBullet) {
+                        xhtml.startElement("ul");
+                    } else {
+                        xhtml.endElement("ul");
+                    }
+                }
 
+                List<HSLFTextRun> textRuns = htp.getTextRuns();
+                String firstLine = removePBreak(textRuns.get(0).getRawText());
+                boolean showBullet = (isBullet && (textRuns.size() > 1 || !"".equals(firstLine)));
+                String paraTag = showBullet ? "li" : "p";
+
+                xhtml.startElement(paraTag);
+                for (HSLFTextRun htr : textRuns) {
+                    String line = htr.getRawText();
+                    if (line != null) {
+                        boolean isfirst = true;
+                        for (String fragment : line.split("\\u000b")) {
+                            if (!isfirst) {
+                                xhtml.startElement("br");
+                                xhtml.endElement("br");
+                            }
+                            isfirst = false;
+                            xhtml.characters(removePBreak(fragment));
+                        }
+                        if (line.endsWith("\u000b")) {
+                            xhtml.startElement("br");
+                            xhtml.endElement("br");
+                        }
+                    }
+                }
+                xhtml.endElement(paraTag);
+            }
+            if (isBullet) {
+                xhtml.endElement("ul");
             }
-        	
         }
     }
 
+    // remove trailing paragraph break
+    private static String removePBreak(String fragment) {
+        // the last text run of a text paragraph contains the paragraph break (\r)
+        // line breaks (\\u000b) can happen more often
+        return fragment.replaceFirst("\\r$", "");
+    }
+
     private void handleSlideEmbeddedPictures(HSLFSlideShow slideshow, XHTMLContentHandler xhtml)
             throws TikaException, SAXException, IOException {
         for (HSLFPictureData pic : slideshow.getPictureData()) {
@@ -278,8 +306,8 @@ public class HSLFExtractor extends AbstractPOIFSExtractor {
                     mediaType = "image/bmp";
                     break;
                 default:
-            		mediaType = pic.getContentType();
-            		break;
+                    mediaType = pic.getContentType();
+                    break;
             }
 
             handleEmbeddedResource(
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java
index b91c6389a..e1f159abb 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java
@@ -58,12 +58,12 @@ public class PowerPointParserTest extends TikaTest {
         Metadata metadata = new Metadata();
         String xml = getXML("testPPT_various.ppt", metadata).xml;
         assertContains("<p>Footnote appears here", xml);
-        assertContains("<p>[1]This is a footnote.", xml);
+        assertContains("<p>[1] This is a footnote.", xml);
         assertContains("<p>This is the header text.</p>", xml);
         assertContains("<p>This is the footer text.</p>", xml);
         assertContains("<p>Here is a text box</p>", xml);
-        //TODO: fix this spacing: assertContains("<p>Bold ", xml);
-        assertContains("italic", xml);
+        assertContains("<p>Bold ", xml);
+        assertContains("italic underline superscript subscript", xml);
         assertContains("underline", xml);
         assertContains("superscript", xml);
         assertContains("subscript", xml);
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java
index 55dddfc50..07367da7f 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java
@@ -629,10 +629,7 @@ public class OOXMLParserTest extends TikaTest {
         assertContains("<p>This is the footer text.</p>", xml);
         assertContains("<p>Here is a text box</p>", xml);
         assertContains("<p>Bold", xml);
-        assertContains("italic", xml);
-        assertContains("underline", xml);
-        assertContains("superscript", xml);
-        assertContains("subscript", xml);
+        assertContains("italic underline superscript subscript", xml);
         assertContains("<p>Here is a citation:", xml);
         assertContains("Figure 1 This is a caption for Figure 1", xml);
         assertContains("(Kramer)", xml);
