diff --git a/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java b/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java
index beeed1fd9..429258e46 100644
--- a/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java
+++ b/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java
@@ -17,7 +17,6 @@
 package org.apache.tika.parser.external;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
-import static org.apache.commons.io.output.NullOutputStream.NULL_OUTPUT_STREAM;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -38,6 +37,7 @@ import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 import org.apache.commons.io.IOUtils;
+import org.apache.commons.io.output.NullOutputStream;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.xml.sax.ContentHandler;
@@ -122,7 +122,7 @@ public class ExternalParser implements Parser {
     private static Thread ignoreStream(final InputStream stream, boolean waitForDeath) {
         Thread t = new Thread(() -> {
             try {
-                IOUtils.copy(stream, NULL_OUTPUT_STREAM);
+                IOUtils.copy(stream, NullOutputStream.INSTANCE);
             } catch (IOException e) {
                 //swallow
             } finally {
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/detect/microsoft/ooxml/OPCPackageDetector.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/detect/microsoft/ooxml/OPCPackageDetector.java
index 369ba475c..341e9755b 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/detect/microsoft/ooxml/OPCPackageDetector.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/detect/microsoft/ooxml/OPCPackageDetector.java
@@ -16,8 +16,6 @@
  */
 package org.apache.tika.detect.microsoft.ooxml;
 
-import static org.apache.commons.compress.utils.IOUtils.closeQuietly;
-
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Arrays;
@@ -31,6 +29,7 @@ import java.util.regex.Pattern;
 
 import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
 import org.apache.commons.compress.archivers.zip.ZipFile;
+import org.apache.commons.io.IOUtils;
 import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
 import org.apache.poi.openxml4j.opc.OPCPackage;
 import org.apache.poi.openxml4j.opc.PackagePart;
@@ -268,7 +267,7 @@ public class OPCPackageDetector implements ZipContainerDetector {
             pkg = OPCPackage.open(zipEntrySource);
             type = detectOfficeOpenXML(pkg);
         } catch (SecurityException e) {
-            closeQuietly(zipEntrySource);
+            IOUtils.closeQuietly(zipEntrySource);
             //TIKA-2571
             throw e;
         } catch (InvalidFormatException | RuntimeException e) {
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/test/java/org/apache/tika/parser/microsoft/rtf/RTFParserTest.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/test/java/org/apache/tika/parser/microsoft/rtf/RTFParserTest.java
index b00ec300d..8b755702c 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/test/java/org/apache/tika/parser/microsoft/rtf/RTFParserTest.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/test/java/org/apache/tika/parser/microsoft/rtf/RTFParserTest.java
@@ -170,7 +170,7 @@ public class RTFParserTest extends TikaTest {
     public void testMaxLength() throws Exception {
         File file = getResourceAsFile("/test-documents/testRTFJapanese.rtf");
         Metadata metadata = new Metadata();
-        InputStream stream = TikaInputStream.get(file, metadata);
+        InputStream stream = TikaInputStream.get(file.toPath(), metadata);
 
         // Test w/ default limit:
         Tika localTika = new Tika();
@@ -181,7 +181,7 @@ public class RTFParserTest extends TikaTest {
 
         // Test setting max length on the instance:
         localTika.setMaxStringLength(200);
-        stream = TikaInputStream.get(file, metadata);
+        stream = TikaInputStream.get(file.toPath(), metadata);
         content = localTika.parseToString(stream, metadata);
 
         // parseToString closes for convenience:
@@ -189,7 +189,7 @@ public class RTFParserTest extends TikaTest {
         assertTrue(content.length() <= 200);
 
         // Test setting max length per-call:
-        stream = TikaInputStream.get(file, metadata);
+        stream = TikaInputStream.get(file.toPath(), metadata);
         content = localTika.parseToString(stream, metadata, 100);
         // parseToString closes for convenience:
         //stream.close();
diff --git a/tika-serialization/src/main/java/org/apache/tika/serialization/JsonMetadata.java b/tika-serialization/src/main/java/org/apache/tika/serialization/JsonMetadata.java
index 7281a3fa4..78a94c170 100644
--- a/tika-serialization/src/main/java/org/apache/tika/serialization/JsonMetadata.java
+++ b/tika-serialization/src/main/java/org/apache/tika/serialization/JsonMetadata.java
@@ -43,7 +43,7 @@ public class JsonMetadata {
      *
      * @param metadata metadata to write
      * @param writer   writer
-     * @throws TikaException if there is an IOException during writing
+     * @throws java.io.IOException if there is an IOException during writing
      */
     public static void toJson(Metadata metadata, Writer writer) throws IOException {
         if (metadata == null) {
@@ -56,7 +56,7 @@ public class JsonMetadata {
                         .builder()
                         .maxStringLength(TikaConfig.getMaxJsonStringFieldLength())
                         .build())
-                .createGenerator(new CloseShieldWriter(writer))) {
+                .createGenerator(CloseShieldWriter.wrap(writer))) {
             if (PRETTY_PRINT) {
                 jsonGenerator.useDefaultPrettyPrinter();
             }
@@ -103,7 +103,7 @@ public class JsonMetadata {
                         .builder()
                         .maxStringLength(TikaConfig.getMaxJsonStringFieldLength())
                         .build())
-                .createParser(new CloseShieldReader(reader))) {
+                .createParser(CloseShieldReader.wrap(reader))) {
             m = readMetadataObject(jParser);
         }
         return m;
@@ -135,7 +135,7 @@ public class JsonMetadata {
             if (token != JsonToken.FIELD_NAME) {
                 throw new IOException("expected field name, but got: " + token.name());
             }
-            String key = jParser.getCurrentName();
+            String key = jParser.currentName();
             token = jParser.nextToken();
             if (token == JsonToken.START_ARRAY) {
                 while (jParser.nextToken() != JsonToken.END_ARRAY) {
diff --git a/tika-serialization/src/main/java/org/apache/tika/serialization/JsonMetadataList.java b/tika-serialization/src/main/java/org/apache/tika/serialization/JsonMetadataList.java
index e9082c721..a7a3803e5 100644
--- a/tika-serialization/src/main/java/org/apache/tika/serialization/JsonMetadataList.java
+++ b/tika-serialization/src/main/java/org/apache/tika/serialization/JsonMetadataList.java
@@ -55,7 +55,7 @@ public class JsonMetadataList {
                         .builder()
                         .maxStringLength(TikaConfig.getMaxJsonStringFieldLength())
                         .build())
-                .createGenerator(new CloseShieldWriter(writer))) {
+                .createGenerator(CloseShieldWriter.wrap(writer))) {
             if (prettyPrint) {
                 jsonGenerator.useDefaultPrettyPrinter();
             }
@@ -96,7 +96,7 @@ public class JsonMetadataList {
                         .builder()
                         .maxStringLength(TikaConfig.getMaxJsonStringFieldLength())
                         .build())
-                .createParser(new CloseShieldReader(reader))) {
+                .createParser(CloseShieldReader.wrap(reader))) {
 
             JsonToken token = jParser.nextToken();
             if (token != JsonToken.START_ARRAY) {
