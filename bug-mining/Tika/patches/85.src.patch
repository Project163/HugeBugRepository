diff --git a/tika-core/src/main/java/org/apache/tika/language/LanguageIdentifier.java b/tika-core/src/main/java/org/apache/tika/language/LanguageIdentifier.java
index 5be5d649b..279ed09fc 100644
--- a/tika-core/src/main/java/org/apache/tika/language/LanguageIdentifier.java
+++ b/tika-core/src/main/java/org/apache/tika/language/LanguageIdentifier.java
@@ -17,357 +17,113 @@
 package org.apache.tika.language;
 
 import java.io.BufferedReader;
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
-import java.util.ArrayList;
-import java.util.Enumeration;
 import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Properties;
-import java.util.Vector;
+import java.util.Map;
 
 /**
  * Identify the language of a content, based on statistical analysis.
+ * Text document language identifier.
+ * <p>
+ * Language profiles are based on material from
+ * <a href="http://www.isi.edu/~koehn/europarl/">http://www.isi.edu/~koehn/europarl/</a>.
  *
- * @see <a href="http://www.w3.org/WAI/ER/IG/ert/iso639.htm">ISO 639
- *      Language Codes</a>
- * 
- * @author Sami Siren
- * @author J&eacute;r&ocirc;me Charron
+ * @see <a href="http://www.w3.org/WAI/ER/IG/ert/iso639.htm">
+ *      ISO 639 Language Codes</a>
  */
 public class LanguageIdentifier {
 
-    private final static int DEFAULT_ANALYSIS_LENGTH = 0;    // 0 means full content
-
-    private ArrayList<NGramProfile> languages = new ArrayList<NGramProfile>();
-
-    private ArrayList<String> supportedLanguages = new ArrayList<String>();
-
-    /** Minimum size of NGrams */
-    private int minLength = NGramProfile.DEFAULT_MIN_NGRAM_LENGTH;
-
-    /** Maximum size of NGrams */
-    private int maxLength = NGramProfile.DEFAULT_MAX_NGRAM_LENGTH;
-
-    /** The maximum amount of data to analyze */
-    private int analyzeLength = DEFAULT_ANALYSIS_LENGTH;
-
-    /** A global index of ngrams of all supported languages */
-    private HashMap<CharSequence, NGramEntry[]> ngramsIdx = new HashMap<CharSequence, NGramEntry[]>();
-
-    /** The NGramProfile used for identification */
-    private NGramProfile suspect = null;
-
     /**
-     * Constructs a new Language Identifier.
+     * The available language profiles.
      */
-    public LanguageIdentifier(NGramProfile suspect) {
-        this.suspect = suspect;
+    private static final Map<String, LanguageProfile> profiles =
+        new HashMap<String, LanguageProfile>();
 
-        Properties p = new Properties();
+    private static void addProfile(String language) {
         try {
-            p.load(this.getClass().getResourceAsStream("langmappings.properties"));
-
-            Enumeration alllanguages = p.keys();
-
-            StringBuffer list = new StringBuffer("Language identifier plugin supports:");
-            HashMap<NGramEntry, List<NGramEntry>> tmpIdx = new HashMap<NGramEntry, List<NGramEntry>>();
-            while (alllanguages.hasMoreElements()) {
-                String lang = (String) (alllanguages.nextElement());
-
-                InputStream is = this.getClass().getClassLoader().getResourceAsStream(
-                        "org/apache/tika/language/" + lang + "." + NGramProfile.FILE_EXTENSION);
-
-                if (is != null) {
-                    NGramProfile profile = new NGramProfile(lang, minLength, maxLength);
-                    try {
-                        profile.load(is);
-                        languages.add(profile);
-                        supportedLanguages.add(lang);
-                        List<NGramEntry> ngrams = profile.getSorted();
-                        for (int i=0; i<ngrams.size(); i++) {
-                            NGramEntry entry = ngrams.get(i);
-                            List<NGramEntry> registered = tmpIdx.get(entry);
-                            if (registered == null) {
-                                registered = new ArrayList<NGramEntry>();
-                                tmpIdx.put(entry, registered);
-                            }
-                            registered.add(entry);
-                        }
-                        list.append(" " + lang + "(" + ngrams.size() + ")");
-                        is.close();
-                    } catch (IOException e1) {
-                        // if (LOG.isFatalEnabled()) { LOG.fatal(e1.toString()); }
+            LanguageProfile profile = new LanguageProfile();
+
+            InputStream stream =
+                LanguageIdentifier.class.getResourceAsStream(language + ".ngp");
+            try {
+                BufferedReader reader =
+                    new BufferedReader(new InputStreamReader(stream, "UTF-8"));
+                String line = reader.readLine();
+                while (line != null) {
+                    if (line.length() > 0 && !line.startsWith("#")) {
+                        int space = line.indexOf(' ');
+                        profile.add(
+                                line.substring(0, space),
+                                Long.parseLong(line.substring(space + 1)));
                     }
+                    line = reader.readLine();
                 }
+            } finally {
+                stream.close();
             }
-            // transform all ngrams lists to arrays for performances
-            Iterator<NGramEntry> keys = tmpIdx.keySet().iterator();
-            while (keys.hasNext()) {
-                NGramEntry entry = keys.next();
-                List<NGramEntry> l = tmpIdx.get(entry);
-                if (l != null) {
-                    NGramEntry[] array = l.toArray(new NGramEntry[l.size()]);
-                    ngramsIdx.put(entry.getSeq(), array);
-                }
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-            // if (LOG.isFatalEnabled()) { LOG.fatal(e.toString()); }
+
+            profiles.put(language, profile);
+        } catch (Throwable t) {
+            // Failed to load this language profile. Log the problem?
         }
     }
 
-    public LanguageIdentifier() {
-        this(new NGramProfile(
-                "suspect",
-                NGramProfile.DEFAULT_MIN_NGRAM_LENGTH,
-                NGramProfile.DEFAULT_MAX_NGRAM_LENGTH));
+    static {
+        addProfile("da"); // Danish
+        addProfile("de"); // German
+        addProfile("ee");
+        addProfile("el"); // Greek
+        addProfile("en"); // English
+        addProfile("es"); // Spanish
+        addProfile("fi"); // Finnish
+        addProfile("fr"); // French
+        addProfile("hu"); // Hungarian
+        addProfile("is"); // Icelandic
+        addProfile("it"); // Italian
+        addProfile("nl"); // Dutch
+        addProfile("no"); // Norwegian
+        addProfile("pl"); // Polish
+        addProfile("pt"); // Portuguese
+        addProfile("ru"); // Russian
+        addProfile("sv"); // Swedish
+        addProfile("th"); // Thai
     }
 
-    /**
-     * Main method used for command line process.
-     * <br/>Usage is:
-     * <pre>
-     * LanguageIdentifier [-identifyrows filename maxlines]
-     *                    [-identifyfile charset filename]
-     *                    [-identifyfileset charset files]
-     *                    [-identifytext text]
-     *                    [-identifyurl url]
-     * </pre>
-     * @param args arguments.
-     */
-    public static void main(String args[]) {
-        String usage = "Usage: LanguageIdentifier" 
-            + " [-identifyrows filename maxlines]"
-            + " [-identifyfile charset filename]"
-            + " [-identifyfileset charset files]"
-            + " [-identifytext text] ";
-        int command = 0;
-
-        final int IDFILE = 1;
-        final int IDTEXT = 2;
-        final int IDFILESET = 4;
-        final int IDROWS = 5;
-
-        Vector<String> fileset = new Vector<String>();
-        String filename = "";
-        String charset = "";
-        String text = "";
-        int max = 0;
-
-        if (args.length == 0) {
-            System.err.println(usage);
-            System.exit(-1);
-        }
-
-        for (int i = 0; i < args.length; i++) { // parse command line
-            if (args[i].equals("-identifyfile")) {
-                command = IDFILE;
-                charset = args[++i];
-                filename = args[++i];
-            }
-
-            if (args[i].equals("-identifyrows")) {
-                command = IDROWS;
-                filename = args[++i];
-                max = Integer.parseInt(args[++i]);
-            }
+    private final String language;
 
-            if (args[i].equals("-identifytext")) {
-                command = IDTEXT;
-                for (i++; i < args.length - 1; i++)
-                    text += args[i] + " ";
-            }
+    private final double distance;
 
-            if (args[i].equals("-identifyfileset")) {
-                command = IDFILESET;
-                charset = args[++i];
-                for (i++; i < args.length; i++) {
-                    File[] files = null;
-                    File f = new File(args[i]);
-                    if (f.isDirectory()) {
-                        files = f.listFiles();
-                    } else {
-                        files = new File[] { f };
-                    }
-                    for (int j=0; j<files.length; j++) {
-                        fileset.add(files[j].getAbsolutePath());
-                    }
-                }
+    public LanguageIdentifier(LanguageProfile profile) {
+        String minLanguage = "unknown";
+        double minDistance = 1.0;
+        for (Map.Entry<String, LanguageProfile> entry : profiles.entrySet()) {
+            double distance = profile.distance(entry.getValue());
+            if (distance < minDistance) {
+                minDistance = distance;
+                minLanguage = entry.getKey();
             }
-
         }
 
-        String lang = null;
-        //LanguageIdentifier idfr = LanguageIdentifier.getInstance();
-        LanguageIdentifier idfr = new LanguageIdentifier();
-        File f;
-        FileInputStream fis;
-        try {
-            switch (command) {
-
-            case IDTEXT:
-                lang = idfr.identify(text);
-                break;
-
-            case IDFILE:
-                f = new File(filename);
-                fis = new FileInputStream(f);
-                lang = idfr.identify(fis, charset);
-                fis.close();
-                break;
-
-            case IDROWS:
-                f = new File(filename);
-                BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
-                String line;
-                while (max > 0 && (line = br.readLine()) != null) {
-                    line = line.trim();
-                    if (line.length() > 2) {
-                        max--;
-                        lang = idfr.identify(line);
-                        System.out.println("R=" + lang + ":" + line);
-                    }
-                }
-
-                br.close();
-                System.exit(0);
-                break;
-
-            case IDFILESET:
-                System.out.println("FILESET");
-                Iterator<String> i = fileset.iterator();
-                while (i.hasNext()) {
-                    try {
-                        filename = i.next();
-                        f = new File(filename);
-                        fis = new FileInputStream(f);
-                        lang = idfr.identify(fis, charset);
-                        fis.close();
-                    } catch (Exception e) {
-                        System.out.println(e);
-                    }
-                    System.out.println(filename + " was identified as " + lang);
-                }
-                System.exit(0);
-                break;
-            }
-        } catch (Exception e) {
-            System.out.println(e);
-        }
-        System.out.println("text was identified as " + lang);
+        this.language = minLanguage;
+        this.distance = minDistance;
     }
 
-    /**
-     * Identify language of a content.
-     * 
-     * @param content is the content to analyze.
-     * @return The 2 letter
-     *         <a href="http://www.w3.org/WAI/ER/IG/ert/iso639.htm">ISO 639
-     *         language code</a> (en, fi, sv, ...) of the language that best
-     *         matches the specified content.
-     */
-    public String identify(String content) {
-        return identify(new StringBuilder(content));
+    public LanguageIdentifier(String content) {
+        this(ProfilingWriter.profile(content));
     }
 
-    /**
-     * Identify language of a content.
-     * 
-     * @param content is the content to analyze.
-     * @return The 2 letter
-     *         <a href="http://www.w3.org/WAI/ER/IG/ert/iso639.htm">ISO 639
-     *         language code</a> (en, fi, sv, ...) of the language that best
-     *         matches the specified content.
-     */
-    public String identify(StringBuilder content) {
-        StringBuilder text = content;
-        if ((analyzeLength > 0) && (content.length() > analyzeLength)) {
-            text = new StringBuilder().append(content);
-            text.setLength(analyzeLength);
-        }
-        suspect.analyze(text);
-
-        return identify();
+    public String getLanguage() {
+        return language;
     }
 
-    public String identify() {
-        Iterator<NGramEntry> iter = suspect.getSorted().iterator();
-        float topscore = Float.MIN_VALUE;
-        String lang = "";
-        HashMap<NGramProfile, Float> scores = new HashMap<NGramProfile, Float>();
-        NGramEntry searched = null;
-
-        while (iter.hasNext()) {
-            searched = iter.next();
-            NGramEntry[] ngrams = ngramsIdx.get(searched.getSeq());
-            if (ngrams != null) {
-                for (int j=0; j<ngrams.length; j++) {
-                    NGramProfile profile = ngrams[j].getProfile();
-                    Float pScore = scores.get(profile);
-                    if (pScore == null) {
-                        pScore = new Float(0);
-                    }
-                    float plScore = pScore.floatValue();
-                    plScore += ngrams[j].getFrequency() + searched.getFrequency();
-                    scores.put(profile, new Float(plScore));
-                    if (plScore > topscore) {
-                        topscore = plScore;
-                        lang = profile.getName();
-                    }
-                }
-            }
-        }
-        return lang;
+    public boolean isReasonablyCertain() {
+        return distance < 0.022;
     }
 
-    /**
-     * Identify language from input stream.
-     * This method uses the platform default encoding to read the input stream.
-     * For using a specific encoding, use the
-     * {@link #identify(InputStream, String)} method.
-     *
-     * @param is is the input stream to analyze.
-     * @return The 2 letter
-     *         <a href="http://www.w3.org/WAI/ER/IG/ert/iso639.htm">ISO 639
-     *         language code</a> (en, fi, sv, ...) of the language that best
-     *         matches the content of the specified input stream.
-     * @throws IOException if something wrong occurs on the input stream.
-     */
-    public String identify(InputStream is) throws IOException {
-        return identify(is, null);
-    }
-
-    /**
-     * Identify language from input stream.
-     * 
-     * @param is is the input stream to analyze.
-     * @param charset is the charset to use to read the input stream.
-     * @return The 2 letter
-     *         <a href="http://www.w3.org/WAI/ER/IG/ert/iso639.htm">ISO 639
-     *         language code</a> (en, fi, sv, ...) of the language that best
-     *         matches the content of the specified input stream.
-     * @throws IOException if something wrong occurs on the input stream.
-     */
-    public String identify(InputStream is, String charset) throws IOException {
-        ByteArrayOutputStream out = new ByteArrayOutputStream();
-        byte[] buffer = new byte[2048];
-        int len = 0;
-
-        while (((len = is.read(buffer)) != -1) &&
-                ((analyzeLength == 0) || (out.size() < analyzeLength))) {
-            if (analyzeLength != 0) {
-                len = Math.min(len, analyzeLength - out.size());
-            }
-            out.write(buffer, 0, len);
-        }
-        return identify((charset == null) ? out.toString()
-                : out.toString(charset));
+    @Override
+    public String toString() {
+        return language + " (" + distance + ")";
     }
 
 }
diff --git a/tika-core/src/main/java/org/apache/tika/language/LanguageProfile.java b/tika-core/src/main/java/org/apache/tika/language/LanguageProfile.java
new file mode 100644
index 000000000..17ac58702
--- /dev/null
+++ b/tika-core/src/main/java/org/apache/tika/language/LanguageProfile.java
@@ -0,0 +1,116 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tika.language;
+
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * Language profile based on ngram counts.
+ */
+public class LanguageProfile {
+
+    /**
+     * The ngrams that make up this profile.
+     */
+    private final Map<String, Counter> ngrams =
+        new HashMap<String, Counter>();
+
+    /**
+     * The sum of all ngram counts in this profile.
+     * Used to calculate relative ngram frequency.
+     */
+    private long count = 0;
+
+    private class Counter {
+        private long count = 0;
+        public String toString() {
+            return Long.toString(count);
+        }
+    }
+
+    public long getCount() {
+        return count;
+    }
+
+    public long getCount(String ngram) {
+        Counter counter = ngrams.get(ngram);
+        if (counter != null) {
+            return counter.count;
+        } else {
+            return 0;
+        }
+    }
+
+    /**
+     * Adds a single occurrence of the given ngram to this profile.
+     *
+     * @param ngram the ngram
+     */
+    public void add(String ngram) {
+        add(ngram, 1);
+    }
+
+    /**
+     * Adds multiple occurrences of the given ngram to this profile.
+     *
+     * @param ngram the ngram
+     * @param count number of occurrences to add
+     */
+    public void add(String ngram, long count) {
+        Counter counter = ngrams.get(ngram);
+        if (counter == null) {
+            counter = new Counter();
+            ngrams.put(ngram, counter);
+        }
+        counter.count += count;
+        this.count += count;
+    }
+
+    /**
+     * Calculates the geometric distance between this and the given
+     * other language profile.
+     *
+     * @param that the other language profile
+     * @return distance between the profiles
+     */
+    public double distance(LanguageProfile that) {
+        double sumOfSquares = 0.0;
+        double thisCount = Math.max(this.count, 1.0);
+        double thatCount = Math.max(that.count, 1.0);
+
+        Set<String> ngrams = new HashSet<String>();
+        ngrams.addAll(this.ngrams.keySet());
+        ngrams.addAll(that.ngrams.keySet());
+        for (String ngram : ngrams) {
+            double thisFrequency = this.getCount(ngram) / thisCount;
+            double thatFrequency = that.getCount(ngram) / thatCount;
+            double difference = thisFrequency - thatFrequency;
+            sumOfSquares += difference * difference;
+        }
+
+        return Math.sqrt(sumOfSquares);
+    }
+
+    @Override
+    public String toString() {
+        return ngrams.toString();
+    }
+
+}
diff --git a/tika-core/src/main/java/org/apache/tika/language/NGramEntry.java b/tika-core/src/main/java/org/apache/tika/language/NGramEntry.java
deleted file mode 100644
index 3b6ed0789..000000000
--- a/tika-core/src/main/java/org/apache/tika/language/NGramEntry.java
+++ /dev/null
@@ -1,148 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.tika.language;
-
-/**
- * NGram entry.
- */
-class NGramEntry implements Comparable<NGramEntry> {
-
-    /**
-     * The ngram profile this entry is related to
-     */
-    private final NGramProfile profile;
-
-    /**
-     * The sequence of characters of the ngram
-     */
-    private CharSequence seq = null;
-
-    /**
-     * The number of occurrences of this ngram in its profile
-     */
-    private int count = 0;
-
-    /**
-     * The frequency of this ngram in its profile. Calculated by the
-     * {@link #calculateFrequency(int)} method.
-     */
-    private float frequency = 0.0F;
-
-    /** 
-     * Constructs a new NGramEntry
-     * @param seq is the sequence of characters of the ngram
-     * @param nGramProfile TODO
-     */
-    public NGramEntry(NGramProfile nGramProfile, CharSequence seq) {
-        this.profile = nGramProfile;
-        this.seq = seq;
-    }
-
-    /** 
-     * Constructs a new NGramEntry
-     * @param seq is the sequence of characters of the ngram
-     * @param count is the number of occurrences of this ngram
-     * @param nGramProfile TODO
-     */
-    public NGramEntry(NGramProfile nGramProfile, String seq, int count) {
-        this.profile = nGramProfile;
-        this.seq = new StringBuffer(seq).subSequence(0, seq.length());
-        this.count = count;
-    }
-
-    /**
-     * Returns the number of occurrences of this ngram in its profile
-     * @return the number of occurrences of this ngram in its profile
-     */
-    public int getCount() {
-        return count;
-    }
-
-    /**
-     * Returns the frequency of this ngram in its profile
-     * @return the frequency of this ngram in its profile
-     */
-    public float getFrequency() {
-        return frequency;
-    }
-
-    public void calculateFrequency(int totalCount) {
-        frequency = (float) count / (float) totalCount;
-    }
-
-    /**
-     * Returns the sequence of characters of this ngram
-     * @return the sequence of characters of this ngram
-     */
-    public CharSequence getSeq() {
-        return seq;
-    }
-
-    /**
-     * Returns the size of this ngram
-     * @return the size of this ngram
-     */
-    public int size() {
-        return seq.length();
-    }
-
-    // Inherited JavaDoc
-    public int compareTo(NGramEntry ngram) {
-        int diff = Float.compare(ngram.getFrequency(), frequency);
-        if (diff != 0) {
-            return diff;
-        } else {
-            return (toString().compareTo(ngram.toString()));
-        }
-    }
-
-    /**
-     * Increments the number of occurrences of this ngram.
-     */
-    public void inc() {
-        count++;
-    }
-
-    /**
-     * Returns the profile associated to this ngram
-     * @return the profile associated to this ngram
-     */
-    public NGramProfile getProfile() {
-        return profile;
-    }
-
-    public String toString() {
-        return "ngram(" + seq + "," + count + "," + frequency + ")";
-    }
-
-    // Inherited JavaDoc
-    public int hashCode() {
-        return seq.hashCode();
-    }
-
-    // Inherited JavaDoc
-    public boolean equals(Object obj) {
-        NGramEntry ngram = null;
-        try {
-            ngram = (NGramEntry) obj;
-            return ngram.seq.equals(seq);
-        } catch (Exception e) {
-            return false;
-        }
-    }
-
-}
\ No newline at end of file
diff --git a/tika-core/src/main/java/org/apache/tika/language/NGramProfile.java b/tika-core/src/main/java/org/apache/tika/language/NGramProfile.java
deleted file mode 100644
index bbab38a52..000000000
--- a/tika-core/src/main/java/org/apache/tika/language/NGramProfile.java
+++ /dev/null
@@ -1,562 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.tika.language;
-
-import java.io.BufferedInputStream;
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-
-/**
- * This class runs a ngram analysis over submitted text, results might be used
- * for automatic language identification.
- * 
- * The similarity calculation is at experimental level. You have been warned.
- * 
- * Methods are provided to build new NGramProfiles profiles.
- * 
- * @author Sami Siren
- * @author Jerome Charron - http://frutch.free.fr/
- */
-public class NGramProfile {
-
-    /** The minimum length allowed for a ngram. */
-    final static int ABSOLUTE_MIN_NGRAM_LENGTH = 1;
-
-    /** The maximum length allowed for a ngram. */
-    final static int ABSOLUTE_MAX_NGRAM_LENGTH = 4;
-
-    /** The default min length of ngram */
-    final static int DEFAULT_MIN_NGRAM_LENGTH = 3;
-
-    /** The default max length of ngram */
-    final static int DEFAULT_MAX_NGRAM_LENGTH = 3;
-
-    /** The ngram profile file extension */
-    static final String FILE_EXTENSION = "ngp";
-
-    /** The profile max size (number of ngrams of the same size) */
-    static final int MAX_SIZE = 1000;
-
-    /** separator char */
-    static final char SEPARATOR = '_';
-    /** The String form of the separator char */  
-    private final static String SEP_CHARSEQ = new String(new char[] { SEPARATOR });
-
-
-    /** The profile's name */
-    private String name = null;
-
-    /** The NGrams of this profile sorted on the number of occurences */
-    private List<NGramEntry> sorted = null;
-
-    /** The min length of ngram */
-    private int minLength = DEFAULT_MIN_NGRAM_LENGTH;
-
-    /** The max length of ngram */
-    private int maxLength = DEFAULT_MAX_NGRAM_LENGTH;
-
-    /** The total number of ngrams occurences */
-    private int[] ngramcounts = null;
-
-    /** An index of the ngrams of the profile */
-    private Map<CharSequence, NGramEntry> ngrams = null;
-
-    /** A StringBuffer used during analysis */
-    private QuickStringBuffer word = new QuickStringBuffer();
-
-
-    /**
-     * Construct a new ngram profile
-     * 
-     * @param name is the name of the profile
-     * @param minlen is the min length of ngram sequences
-     * @param maxlen is the max length of ngram sequences
-     */
-    public NGramProfile(String name, int minlen, int maxlen) {
-        // TODO: Compute the initial capacity using minlen and maxlen.
-        this.ngrams = new HashMap<CharSequence, NGramEntry>(4000);
-        this.minLength = minlen;
-        this.maxLength = maxlen;
-        this.name = name;
-    }
-
-    /**
-     * @return Returns the name.
-     */
-    public String getName() {
-        return name;
-    }
-
-    /**
-     * Add ngrams from a single word to this profile
-     * 
-     * @param word is the word to add
-     */
-    public void add(StringBuffer word) {
-        for (int i=minLength; (i <= maxLength) && (i < word.length()); i++) {
-            add(word, i);
-        }
-    }
-
-    /**
-     * Add the last NGrams from the specified word.
-     */
-    private void add(QuickStringBuffer word) {
-        int wlen = word.length();
-        if (wlen >= minLength) {
-            int max = Math.min(maxLength, wlen);
-            for (int i=minLength; i<=max; i++) {
-                add(word.subSequence(wlen-i, wlen));
-            }
-        }
-    }
-
-    /**
-     * Add ngrams from a single word in this profile
-     *
-     * @param word is the word to add
-     * @param n is the ngram size
-     */
-    private void add(CharSequence cs) {
-        if (cs.equals(SEP_CHARSEQ)) { return; }
-        NGramEntry nge = ngrams.get(cs);
-        if (nge == null) {
-            nge = new NGramEntry(this, cs);
-            ngrams.put(cs, nge);
-        }
-        nge.inc();
-    }
-
-    /**
-     * Analyze a piece of text
-     * 
-     * @param text the text to be analyzed
-     */
-    public void analyze(StringBuilder text) {
-        if (ngrams != null) {
-            ngrams.clear();
-            sorted = null;
-            ngramcounts = null;
-        }
-
-        word.clear().append(SEPARATOR);
-        for (int i = 0; i < text.length(); i++) {
-            char c = Character.toLowerCase(text.charAt(i));
-
-            if (Character.isLetter(c)) {
-                add(word.append(c));
-            } else {
-                //found word boundary
-                if (word.length() > 1) {
-                    //we have a word!
-                    add(word.append(SEPARATOR));
-                    word.clear().append(SEPARATOR);
-                }
-            }
-        }
-
-        if (word.length() > 1) {
-            //we have a word!
-            add(word.append(SEPARATOR));
-        }
-        normalize();
-    }
-
-    /**
-     * @param word
-     * @param n sequence length
-     */
-    private void add(StringBuffer word, int n) {
-        for (int i=0; i <= word.length()-n; i++) {
-            add(word.subSequence(i, i + n));
-        }
-    }
-
-    /**
-     * Normalize the profile (calculates the ngram frequencies)
-     */
-    protected void normalize() {
-        // Calculate ngram count if not already done
-        if (ngramcounts == null) {
-            ngramcounts = new int[maxLength+1];
-            for (NGramEntry entry : ngrams.values()) {
-                ngramcounts[entry.size()] += entry.getCount();
-            }
-        }
-
-        for (NGramEntry entry : ngrams.values()) {
-            entry.calculateFrequency(ngramcounts[entry.size()]);
-        }
-    }
-
-    /**
-     * Return a sorted list of ngrams (sort done by 1. frequency 2. sequence)
-     * 
-     * @return sorted vector of ngrams
-     */
-    public List<NGramEntry> getSorted() {
-        // make sure sorting is done only once
-        if (sorted == null) {
-            sorted = new ArrayList<NGramEntry>(ngrams.values());
-            Collections.sort(sorted);
-
-            // trim at NGRAM_LENGTH entries
-            if (sorted.size() > MAX_SIZE) {
-                sorted = sorted.subList(0, MAX_SIZE);
-            }
-        }
-        return sorted;
-    }
-
-    // Inherited JavaDoc
-    public String toString() {
-        StringBuffer s = new StringBuffer().append("NGramProfile: ")
-        .append(name).append("\n");
-
-        for (NGramEntry entry : getSorted()) {
-            s.append("    ");
-            s.append(entry);
-            s.append("\n");
-        }
-        return s.toString();
-    }
-
-    /**
-     * Calculate a score how well NGramProfiles match each other
-     * 
-     * @param another
-     *          ngram profile to compare against
-     * @return similarity 0=exact match
-     */
-    public float getSimilarity(NGramProfile another) {
-        float sum = 0;
-
-        try {
-            Iterator<NGramEntry> i = another.getSorted().iterator();
-            while (i.hasNext()) {
-                NGramEntry other = i.next();
-                if (ngrams.containsKey(other.getSeq())) {
-                    sum += Math.abs((other.getFrequency() -
-                            ngrams.get(other.getSeq()).getFrequency())) / 2;
-                } else {
-                    sum += other.getFrequency();
-                }
-            }
-            i = getSorted().iterator();
-            while (i.hasNext()) {
-                NGramEntry other = i.next();
-                if (another.ngrams.containsKey(other.getSeq())) {
-                    sum += Math.abs((other.getFrequency() -
-                            another.ngrams.get(other.getSeq()).getFrequency())) / 2;
-                } else {
-                    sum += other.getFrequency();
-                }
-            }
-        } catch (Exception e) {
-            // if (LOG.isFatalEnabled()) { LOG.fatal(e.toString()); }
-        }
-        return sum;
-    }
-
-    /**
-     * Loads a ngram profile from an InputStream
-     * (assumes UTF-8 encoded content)
-     * @param is the InputStream to read
-     */
-    public void load(InputStream is) throws IOException {
-        ngrams.clear();
-        ngramcounts = new int[maxLength+1];
-        BufferedReader reader = new BufferedReader(new InputStreamReader(is, "UTF-8"));
-        String line = null;
-
-        while ((line = reader.readLine()) != null) {
-
-            // # starts a comment line
-            if (line.charAt(0) != '#') {
-                int spacepos = line.indexOf(' ');
-                String ngramsequence = line.substring(0, spacepos).trim();
-                int len = ngramsequence.length();
-                if ((len >= minLength) && (len <= maxLength)) {
-                    int ngramcount = Integer.parseInt(line.substring(spacepos + 1));
-                    NGramEntry en = new NGramEntry(this, ngramsequence, ngramcount);
-                    ngrams.put(en.getSeq(), en);
-                    ngramcounts[len] += ngramcount;
-                }
-            }
-        }
-        normalize();
-    }
-
-    /**
-     * Create a new Language profile from (preferably quite large) text file
-     * 
-     * @param name is thename of profile
-     * @param is is the stream to read
-     * @param encoding is the encoding of stream
-     */
-    public static NGramProfile create(String name, InputStream is, String encoding) {
-        NGramProfile newProfile = new NGramProfile(name, ABSOLUTE_MIN_NGRAM_LENGTH,
-                ABSOLUTE_MAX_NGRAM_LENGTH);
-        BufferedInputStream bis = new BufferedInputStream(is);
-
-        byte buffer[] = new byte[4096];
-        StringBuilder text = new StringBuilder();
-        int len;
-
-        try {
-            while ((len = bis.read(buffer)) != -1) {
-                text.append(new String(buffer, 0, len, encoding));
-            }
-        } catch (IOException e) {
-            // e.printStackTrace(LogUtil.getWarnStream(LOG));
-        }
-
-        newProfile.analyze(text);
-        return newProfile;
-    }
-
-    /**
-     * Writes NGramProfile content into OutputStream, content is outputted with
-     * UTF-8 encoding
-     * 
-     * @param os the Stream to output to
-     * @throws IOException
-     */
-    public void save(OutputStream os) throws IOException {
-        // Write header
-        os.write(("# NgramProfile generated at " + new Date() +
-        " for Nutch Language Identification\n").getBytes());
-
-        // And then each ngram
-
-        // First dispatch ngrams in many lists depending on their size
-        // (one list for each size, in order to store MAX_SIZE ngrams for each
-        // size of ngram)
-        List<NGramEntry> list = new ArrayList<NGramEntry>();
-        List<NGramEntry> sublist = new ArrayList<NGramEntry>();
-        NGramEntry[] entries = ngrams.values().toArray(new NGramEntry[ngrams.size()]);
-        for (int i=minLength; i<=maxLength; i++) {
-            for (int j=0; j<entries.length; j++) {
-                if (entries[j].getSeq().length() == i) {
-                    sublist.add(entries[j]);
-                }
-            }
-            Collections.sort(sublist);
-            if (sublist.size() > MAX_SIZE) {
-                sublist = sublist.subList(0, MAX_SIZE);
-            }
-            list.addAll(sublist);
-            sublist.clear();
-        }
-        for (int i=0; i<list.size(); i++) {
-            NGramEntry e = list.get(i);
-            String line = e.toString() + " " + e.getCount() + "\n";
-            os.write(line.getBytes("UTF-8"));
-        }
-        os.flush();
-    }
-
-    /**
-     * main method used for testing only
-     * 
-     * @param args
-     */
-    public static void main(String args[]) {
-        String usage = "Usage: NGramProfile"
-            + " [-create profilename filename encoding]"
-            + " [-similarity file1 file2]"
-            + " [-score profile-name filename encoding]";
-        int command = 0;
-
-        final int CREATE = 1;
-        final int SIMILARITY = 2;
-        final int SCORE = 3;
-
-        String profilename = "";
-        String filename = "";
-        String filename2 = "";
-        String encoding = "";
-
-        if (args.length == 0) {
-            System.err.println(usage);
-            System.exit(-1);
-        }
-
-        for (int i = 0; i < args.length; i++) { // parse command line
-            if (args[i].equals("-create")) { // found -create option
-                command = CREATE;
-                profilename = args[++i];
-                filename = args[++i];
-                encoding = args[++i];
-            }
-
-            if (args[i].equals("-similarity")) { // found -similarity option
-                command = SIMILARITY;
-                filename = args[++i];
-                filename2 = args[++i];
-                encoding = args[++i];
-            }
-
-            if (args[i].equals("-score")) { // found -Score option
-                command = SCORE;
-                profilename = args[++i];
-                filename = args[++i];
-                encoding = args[++i];
-            }
-        }
-
-        try {
-            switch (command) {
-            case CREATE:
-                File f = new File(filename);
-                FileInputStream fis = new FileInputStream(f);
-                NGramProfile newProfile = NGramProfile.create(profilename, fis, encoding);
-                fis.close();
-                f = new File(profilename + "." + FILE_EXTENSION);
-                FileOutputStream fos = new FileOutputStream(f);
-                newProfile.save(fos);
-                System.out.println("new profile " + profilename + "." + FILE_EXTENSION + " was created.");
-                break;
-
-            case SIMILARITY:
-                f = new File(filename);
-                fis = new FileInputStream(f);
-                newProfile = NGramProfile.create(filename, fis, encoding);
-                newProfile.normalize();
-
-                f = new File(filename2);
-                fis = new FileInputStream(f);
-                NGramProfile newProfile2 = NGramProfile.create(filename2, fis, encoding);
-                newProfile2.normalize();
-                System.out.println("Similarity is " + newProfile.getSimilarity(newProfile2));
-                break;
-
-            case SCORE:
-                f = new File(filename);
-                fis = new FileInputStream(f);
-                newProfile = NGramProfile.create(filename, fis, encoding);
-
-                f = new File(profilename + "." + FILE_EXTENSION);
-                fis = new FileInputStream(f);
-                NGramProfile compare = new NGramProfile(profilename,
-                        DEFAULT_MIN_NGRAM_LENGTH,
-                        DEFAULT_MAX_NGRAM_LENGTH);
-                compare.load(fis);
-                System.out.println("Score is " + compare.getSimilarity(newProfile));
-                break;
-            }
-        } catch (Exception e) {
-        }
-    }
-
-    private class QuickStringBuffer implements CharSequence {
-
-        private char value[];
-
-        private int count;
-
-        QuickStringBuffer() {
-            this(16);
-        }
-
-        QuickStringBuffer(char[] value) {
-            this.value = value;
-            count = value.length;
-        }
-
-        QuickStringBuffer(int length) {
-            value = new char[length];
-        }
-
-        QuickStringBuffer(String str) {
-            this(str.length() + 16);
-            append(str);
-        }
-
-        public int length() {
-            return count;
-        }
-
-        private void expandCapacity(int minimumCapacity) {
-            int newCapacity = (value.length + 1) * 2;
-            if (newCapacity < 0) {
-                newCapacity = Integer.MAX_VALUE;
-            } else if (minimumCapacity > newCapacity) {
-                newCapacity = minimumCapacity;
-            }
-
-            char newValue[] = new char[newCapacity];
-            System.arraycopy(value, 0, newValue, 0, count);
-            value = newValue;
-        }
-
-        QuickStringBuffer clear() {
-            count = 0;
-            return this;
-        }
-
-        public char charAt(int index) {
-            return value[index];
-        }
-
-        QuickStringBuffer append(String str) {
-            if (str == null) {
-                str = String.valueOf(str);
-            }
-
-            int len = str.length();
-            int newcount = count + len;
-            if (newcount > value.length) {
-                expandCapacity(newcount);
-            }
-            str.getChars(0, len, value, count);
-            count = newcount;
-            return this;
-        }
-
-        QuickStringBuffer append(char c) {
-            int newcount = count + 1;
-            if (newcount > value.length) {
-                expandCapacity(newcount);
-            }
-            value[count++] = c;
-            return this;
-        }
-
-        public CharSequence subSequence(int start, int end) {
-            return new String(value, start, end - start);
-        }
-
-        public String toString() {
-            return new String(this.value);
-        }
-    }
-
-}
diff --git a/tika-core/src/main/java/org/apache/tika/language/ProfilingHandler.java b/tika-core/src/main/java/org/apache/tika/language/ProfilingHandler.java
new file mode 100644
index 000000000..66159f7a6
--- /dev/null
+++ b/tika-core/src/main/java/org/apache/tika/language/ProfilingHandler.java
@@ -0,0 +1,66 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tika.language;
+
+import org.apache.tika.metadata.Metadata;
+import org.apache.tika.sax.BodyContentHandler;
+import org.xml.sax.SAXException;
+
+public class ProfilingHandler extends BodyContentHandler {
+
+    private static final long CHECK_INTERVAL = 1000;
+
+    private final LanguageProfile profile;
+
+    private final Metadata metadata;
+
+    private long nextCheckCount = CHECK_INTERVAL;
+
+    private ProfilingHandler(ProfilingWriter writer, Metadata metadata) {
+        super(writer);
+        this.profile = writer.getProfile();
+        this.metadata = metadata;
+    }
+
+    public ProfilingHandler(Metadata metadata) {
+        this(new ProfilingWriter(), metadata);
+    }
+
+    private void checkAndSetLanguage() {
+        LanguageIdentifier identifier = new LanguageIdentifier(profile);
+        if (identifier.isReasonablyCertain()) {
+            metadata.set(Metadata.LANGUAGE, identifier.getLanguage());
+        }
+    }
+
+    @Override
+    public void characters(char[] ch, int start, int length)
+            throws SAXException {
+        super.characters(ch, start, length);
+        if (profile.getCount() > nextCheckCount) {
+            checkAndSetLanguage();
+            nextCheckCount = profile.getCount() + CHECK_INTERVAL;
+        }
+    }
+
+    @Override
+    public void endDocument() throws SAXException {
+        super.endDocument();
+        checkAndSetLanguage();
+    }
+
+}
diff --git a/tika-core/src/main/java/org/apache/tika/language/ProfilingWriter.java b/tika-core/src/main/java/org/apache/tika/language/ProfilingWriter.java
index e274ec031..b9bc970f1 100644
--- a/tika-core/src/main/java/org/apache/tika/language/ProfilingWriter.java
+++ b/tika-core/src/main/java/org/apache/tika/language/ProfilingWriter.java
@@ -21,40 +21,53 @@ import java.io.Writer;
 
 public class ProfilingWriter extends Writer {
 
-    private final NGramProfile profile = new NGramProfile(
-            "suspect",
-            NGramProfile.DEFAULT_MIN_NGRAM_LENGTH,
-            NGramProfile.DEFAULT_MAX_NGRAM_LENGTH);
+    public static LanguageProfile profile(String content) {
+        ProfilingWriter writer = new ProfilingWriter();
+        char[] ch = content.toCharArray();
+        writer.write(ch, 0, ch.length);
+        return writer.getProfile();
+    }
 
-    private final StringBuffer buffer = new StringBuffer("_");
 
-    private void addWord() {
-        if (buffer.length() > 1) {
-            buffer.append("_");
-            profile.add(buffer);
-            buffer.setLength(1);
-        }
-    }
+    private final LanguageProfile profile = new LanguageProfile();
+
+    private char[] buffer = new char[] { 0, 0, '_' };
+
+    private int n = 1;
 
-    public NGramProfile getProfile() {
+    public LanguageProfile getProfile() {
         return profile;
     }
 
     @Override
-    public void write(char[] cbuf, int off, int len) throws IOException {
+    public void write(char[] cbuf, int off, int len) {
         for (int i = 0; i < len; i++) {
             char c = Character.toLowerCase(cbuf[off + i]);
             if (Character.isLetter(c)) {
-                buffer.append(c);
+                addLetter(c);
             } else {
-                addWord();
+                addSeparator();
             }
         }
     }
 
+    private void addLetter(char c) {
+        System.arraycopy(buffer, 1, buffer, 0, buffer.length - 1);
+        buffer[buffer.length - 1] = c;
+        n++;
+        if (n >= buffer.length) {
+            profile.add(new String(buffer));
+        }
+    }
+
+    private void addSeparator() {
+        addLetter('_');
+        n = 1;
+    }
+
     @Override
     public void close() throws IOException {
-        addWord();
+        addSeparator();
     }
 
     /**
diff --git a/tika-core/src/main/java/org/apache/tika/language/package.html b/tika-core/src/main/java/org/apache/tika/language/package.html
deleted file mode 100644
index 9e5822f45..000000000
--- a/tika-core/src/main/java/org/apache/tika/language/package.html
+++ /dev/null
@@ -1,6 +0,0 @@
-<html>
-<body>
-<p>Text document language identifier.</p><p>Language profiles are based on material from
-<a href="http://www.isi.edu/~koehn/europarl/">http://www.isi.edu/~koehn/europarl/</a>.</p>
-</body>
-</html>
diff --git a/tika-core/src/main/java/org/apache/tika/parser/AutoDetectParser.java b/tika-core/src/main/java/org/apache/tika/parser/AutoDetectParser.java
index 06a4e430d..8b4e4ff0a 100644
--- a/tika-core/src/main/java/org/apache/tika/parser/AutoDetectParser.java
+++ b/tika-core/src/main/java/org/apache/tika/parser/AutoDetectParser.java
@@ -25,9 +25,11 @@ import java.util.Map;
 import org.apache.tika.config.TikaConfig;
 import org.apache.tika.exception.TikaException;
 import org.apache.tika.io.CountingInputStream;
+import org.apache.tika.language.ProfilingHandler;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.mime.MediaType;
 import org.apache.tika.sax.SecureContentHandler;
+import org.apache.tika.sax.TeeContentHandler;
 import org.apache.tika.detect.Detector;
 import org.xml.sax.ContentHandler;
 import org.xml.sax.SAXException;
@@ -98,9 +100,14 @@ public class AutoDetectParser extends CompositeParser {
         CountingInputStream count = new CountingInputStream(stream);
         SecureContentHandler secure = new SecureContentHandler(handler, count);
 
+        // Automatic language detection
+        ContentHandler profiler = new ProfilingHandler(metadata);
+
         // Parse the document
         try {
-            super.parse(count, secure, metadata, context);
+            super.parse(
+                    count, new TeeContentHandler(secure, profiler),
+                    metadata, context);
         } catch (SAXException e) {
             // Convert zip bomb exceptions to TikaExceptions
             secure.throwIfCauseOf(e);
diff --git a/tika-core/src/main/resources/org/apache/tika/language/langmappings.properties b/tika-core/src/main/resources/org/apache/tika/language/langmappings.properties
deleted file mode 100644
index 7e90068e6..000000000
--- a/tika-core/src/main/resources/org/apache/tika/language/langmappings.properties
+++ /dev/null
@@ -1,204 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-# Defines some mapping between common erroneous languages codes and
-# the ISO 639 two-letters language codes.
-
-aa=aar,Afar
-ab=abk,Abkhazian
-ae=ave
-af=afr,Afrikaans
-ak=aka
-am=amh,Amharic
-an=arg
-ar=ara,Arabic
-as=asm,Assamese
-av=ava
-ay=aym,Aymara
-az=aze,Azerbaijani
-ba=bak,Bashkir
-be=bel,Byelorussian
-bg=bul,Bulgarian
-bh=bih,Bihari
-bi=bis,Bislama
-bm=bam
-bn=ben,Bengali
-bo=bod,tib,Tibetan
-br=bre,Breton
-bs=bos
-ca=cat,Catalan
-ce=che
-ch=cha
-co=cos,Corsican
-cr=cre
-cs=ces,cze,Czech
-cu=chu
-cv=chv
-cy=cym,wel,Welsh
-da=dan,Danish
-de=deu,ger,German
-dv=div
-dz=dzo,Dzongkha
-ee=ewe
-el=ell,gre,Greek
-en=eng,English
-eo=epo,Esperanto
-es=esl,spa,Spanish
-et=est,Estonian
-eu=baq,eus,Basque
-fa=fas,per,Persian
-ff=ful
-fi=fin,Finnish
-fj=fij,Fijian
-fo=fao,Faroese
-fr=fra,fre,French
-fy=fry,Frisian
-ga=gai,iri,Irish
-gd=gla
-gl=glg,Gallegan
-gn=grn,Guarani
-gu=guj,Gujarati
-gv=glv
-ha=hau,Hausa
-he=heb,Hebrew
-hi=hin,Hindi
-ho=hmo
-hr=scr,hrv,Croatian
-ht=hat
-hu=hun,Hungarian
-hy=arm,hye,Armenian
-hz=her
-ia=ina,Interlingua
-id=ind,Indonesian
-ie=ile
-ig=ibo
-ii=iii
-ik=ipk,Inupiak
-io=ido
-is=ice,isl,Icelandic
-it=ita,Italian
-iu=iku,Inuktitut
-ja=jpn,Japanese
-jv=jw,jav,jaw,Javanese
-ka=geo,kat,Georgian
-kg=kon
-ki=kik
-kj=kua
-kk=kaz,Kazakh
-kl=kal,Greenlandic
-km=khm,Khmer
-kn=kan,Kannada
-ko=kor,Korean
-kr=kau
-ks=kas,Kashmiri
-ku=kur,Kurdish
-kv=kom
-kw=cor
-ky=kir,Kirghiz
-la=lat,Latin
-lb=ltz
-lg=lug
-li=lim
-ln=lin,Lingala
-lo=lao,Lao
-lt=lit,Lithuanian
-lu=lub
-lv=lav,Latvian
-mg=mlg,Malagasy
-mh=mah
-mi=mao,mri,Maori
-mk=mac,mak,Macedonian
-ml=mal,mlt,Maltese
-mn=mon,Mongolian
-mo=mol,Moldavian
-mr=mar,Marathi
-ms=may,msa,Malay
-mt=mlt
-my=bur,mya,Burmese
-na=nau,Nauru
-nb=nob
-nd=nde
-ne=nep,Nepali
-ng=ndo
-nl=dut,nla,Dutch
-nn=nno
-no=nor,Norwegian
-nr=nbl
-nv=nav
-ny=nya
-oc=oci,Langue d'Oc
-oj=oji
-om=orm,Oromo
-or=ori,Oriya
-os=oss
-pa=pan,Panjabi
-pi=pli
-pl=pol,Polish
-ps=pus,Pushto
-pt=por,Portuguese
-qu=que,Quechua
-rm=roh,Rhaeto-Romance
-rn=run,Rundi
-ro=ron,rum,Romanian
-ru=rus,Russian
-rw=kin,Kinyarwanda
-sa=san,Sanskrit
-sc=srd
-sd=snd,Sindhi
-se=sme
-sg=sag,Sango
-sh=scr,Serbo-Croatian
-si=sin,Singhalese
-sk=slk,slo,Slovak
-sl=slv,Slovenian
-sm=smo,Samoan
-sn=sna,Shona
-so=som,Somali
-sq=alb,sqi,Albanian
-sr=scc,srp,Serbian
-ss=ssw,Siswant
-st=sot,Sotho
-su=sun,Sudanese
-sv=sve,swe,Swedish,Svenska,Sweden
-sw=swa,Swahili
-ta=tam,Tamil
-te=tel,Telugu
-tg=tgk,Tajik
-th=tha,Thai
-ti=tir,Tigrinya
-tk=tuk,Turkmen
-tl=tgl,Tagalog
-tn=tsn,Tswana
-to=tog,Tonga
-tr=tur,Turkish
-ts=tso,Tsonga
-tt=tat,Tatar
-tw=twi,Twi
-ty=tah
-ug=uig,Uighur
-uk=ukr,Ukrainian
-ur=urd,Urdu
-uz=uzb,Uzbek
-ve=ven
-vi=vie,Vietnamese
-vo=vol,Volapk
-wa=wln
-wo=wol,Wolof
-xh=xho,Xhosa
-yi=yidYiddish
-yo=yor,Yoruba
-za=zha,Zhuang
-zh=chi,zho,Chinese
-zu=zul,Zulu
diff --git a/tika-core/src/test/java/org/apache/tika/language/LanguageIdentifierTest.java b/tika-core/src/test/java/org/apache/tika/language/LanguageIdentifierTest.java
new file mode 100644
index 000000000..adc97a66e
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/language/LanguageIdentifierTest.java
@@ -0,0 +1,76 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tika.language;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Writer;
+
+import junit.framework.TestCase;
+
+import org.apache.tika.io.IOUtils;
+
+/**
+ * JUnit based test of class {@link LanguageIdentifier}.
+ *
+ * @author Sami Siren
+ * @author Jerome Charron - http://frutch.free.fr/
+ */
+public class LanguageIdentifierTest extends TestCase {
+
+    private static final String[] languages = new String[] {
+        "da", "de", /* "el", */ "en", "es", "fi", "fr", "it", "nl", "pt", "sv"
+    };
+
+    public void testLanguageDetection() throws IOException {
+        for (String language : languages) {
+            ProfilingWriter writer = new ProfilingWriter();
+            writeTo(language, writer);
+            LanguageIdentifier identifier =
+                new LanguageIdentifier(writer.getProfile());
+            assertTrue(identifier.toString(), identifier.isReasonablyCertain());
+            assertEquals(language, identifier.getLanguage());
+        }
+    }
+
+    public void testMixedLanguages() throws IOException {
+        for (String language : languages) {
+            for (String other : languages) {
+                if (!language.equals(other)) {
+                    ProfilingWriter writer = new ProfilingWriter();
+                    writeTo(language, writer);
+                    writeTo(other, writer);
+                    LanguageIdentifier identifier =
+                        new LanguageIdentifier(writer.getProfile());
+                    assertFalse(identifier.isReasonablyCertain());
+                }
+            }
+        }
+    }
+
+    private void writeTo(String language, Writer writer) throws IOException {
+        InputStream stream =
+            LanguageIdentifierTest.class.getResourceAsStream(language + ".test");
+        try {
+            IOUtils.copy(new InputStreamReader(stream, "UTF-8"), writer);
+        } finally {
+            stream.close();
+        }
+    }
+
+}
diff --git a/tika-core/src/test/java/org/apache/tika/language/LanguageProfileTest.java b/tika-core/src/test/java/org/apache/tika/language/LanguageProfileTest.java
new file mode 100644
index 000000000..ce992a737
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/language/LanguageProfileTest.java
@@ -0,0 +1,54 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tika.language;
+
+import java.io.IOException;
+
+import junit.framework.TestCase;
+
+public class LanguageProfileTest extends TestCase {
+
+    public void testLanguageProfile() throws IOException {
+        LanguageProfile foo = new LanguageProfile();
+        assertEquals(0, foo.getCount("foo"));
+
+        foo.add("foo");
+        assertEquals(1, foo.getCount("foo"));
+
+        foo.add("foo", 3);
+        assertEquals(4, foo.getCount("foo"));
+
+        LanguageProfile bar = new LanguageProfile();
+        assertEquals(1.0, foo.distance(bar));
+
+        bar.add("bar");
+        assertEquals(Math.sqrt(2.0), foo.distance(bar));
+
+        bar.add("bar", 3);
+        assertEquals(Math.sqrt(2.0), foo.distance(bar));
+
+        LanguageProfile foobar = new LanguageProfile();
+        assertTrue(foo.distance(foobar) == bar.distance(foobar));
+
+        foobar.add("foo");
+        assertTrue( foo.distance(foobar) < bar.distance(foobar));
+
+        foobar.add("bar");
+        assertTrue(foo.distance(foobar) == bar.distance(foobar));
+    }
+
+}
diff --git a/tika-core/src/test/java/org/apache/tika/language/ProfilingWriterTest.java b/tika-core/src/test/java/org/apache/tika/language/ProfilingWriterTest.java
index 8f33aeec0..a084ae0ce 100644
--- a/tika-core/src/test/java/org/apache/tika/language/ProfilingWriterTest.java
+++ b/tika-core/src/test/java/org/apache/tika/language/ProfilingWriterTest.java
@@ -17,40 +17,25 @@
 package org.apache.tika.language;
 
 import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-
-import org.apache.tika.io.IOUtils;
 
 import junit.framework.TestCase;
 
 public class ProfilingWriterTest extends TestCase {
 
     public void testProfilingWriter() throws IOException {
-        assertProfile("da");
-        assertProfile("de");
-        assertProfile("el");
-        assertProfile("en");
-        assertProfile("es");
-        assertProfile("fi");
-        assertProfile("fr");
-        assertProfile("it");
-        assertProfile("nl");
-        assertProfile("pt");
-        assertProfile("sv");
-    }
+        ProfilingWriter writer = new ProfilingWriter();
+        writer.write(" foo+BAR FooBar\n");
+        writer.close();
 
-    private void assertProfile(String lang) throws IOException {
-        InputStream stream =
-            ProfilingWriterTest.class.getResourceAsStream(lang + ".test");
-        try {
-            ProfilingWriter writer = new ProfilingWriter();
-            IOUtils.copy(new InputStreamReader(stream, "UTF-8"), writer);
-            NGramProfile profile = writer.getProfile();
-            assertEquals(lang, new LanguageIdentifier(profile).identify());
-        } finally {
-            stream.close();
-        }
+        LanguageProfile profile = writer.getProfile();
+        assertEquals(2, profile.getCount("_fo"));
+        assertEquals(2, profile.getCount("foo"));
+        assertEquals(1, profile.getCount("oo_"));
+        assertEquals(1, profile.getCount("oob"));
+        assertEquals(1, profile.getCount("oba"));
+        assertEquals(1, profile.getCount("_ba"));
+        assertEquals(2, profile.getCount("bar"));
+        assertEquals(2, profile.getCount("ar_"));
     }
 
 }
diff --git a/tika-core/src/test/java/org/apache/tika/language/TestLanguageIdentifier.java b/tika-core/src/test/java/org/apache/tika/language/TestLanguageIdentifier.java
deleted file mode 100644
index 82c93a79a..000000000
--- a/tika-core/src/test/java/org/apache/tika/language/TestLanguageIdentifier.java
+++ /dev/null
@@ -1,213 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.tika.language;
-
-import java.io.BufferedReader;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.util.List;
-
-import junit.framework.Test;
-import junit.framework.TestCase;
-import junit.framework.TestSuite;
-import junit.textui.TestRunner;
-
-/**
- * JUnit based test of class {@link LanguageIdentifier}.
- *
- * @author Sami Siren
- * @author Jerome Charron - http://frutch.free.fr/
- */
-public class TestLanguageIdentifier extends TestCase {
-
-    public TestLanguageIdentifier(String testName) {
-        super(testName);
-    }
-
-    public static Test suite() {
-        return new TestSuite(TestLanguageIdentifier.class);
-    }
-
-    public static void main(String[] args) {
-        TestRunner.run(suite());
-    }
-
-    String tokencontent1 = "testaddtoken";
-    String tokencontent2 = "anotherteststring";
-
-    int[] counts1 = { 3, 2, 2, 1, 1, 1, 1, 1 };
-
-    String[] chars1 = { "t", "d", "e", "a", "k", "n", "o", "s" };
-
-    /**
-     * Test analyze method
-     */
-    public void testAnalyze() {
-        String tokencontent = "testmeagain";
-
-        NGramProfile p = new NGramProfile("test", 1, 1);
-        p.analyze(new StringBuilder(tokencontent));
-
-        //test that profile size is ok, eg 9 different NGramEntries "tesmagin"
-        assertEquals(8, p.getSorted().size());
-    }
-
-    /**
-     * Test addNGrams method with StringBuffer argument
-     *
-     */
-    public void testAddNGramsStringBuffer() {
-        String tokencontent = "testmeagain";
-
-        NGramProfile p = new NGramProfile("test", 1, 1);
-        p.add(new StringBuffer(tokencontent));
-
-        //test that profile size is ok, eg 8 different NGramEntries "tesmagin"
-        assertEquals(8, p.getSorted().size());
-
-    }
-
-    /**
-     * test getSorted method
-     */
-    public void testGetSorted() {
-        int[] count = { 4, 3, 1 };
-        String[] ngram = { "a", "b", "c" };
-
-        String teststring = "AAaaBbbC";
-
-        NGramProfile p = new NGramProfile("test", 1, 1);
-        p.analyze(new StringBuilder(teststring));
-
-        //test size of profile
-        assertEquals(3, p.getSorted().size());
-
-        testCounts(p.getSorted(), count);
-        testContents(p.getSorted(), ngram);
-    }
-
-    public void testGetSimilarity() {
-        NGramProfile a = new NGramProfile("a", 1, 1);
-        NGramProfile b = new NGramProfile("b", 1, 1);
-
-        a.analyze(new StringBuilder(tokencontent1));
-        b.analyze(new StringBuilder(tokencontent2));
-
-        //because of rounding errors might slightly return different results
-        assertEquals(a.getSimilarity(b), b.getSimilarity(a), 0.0000002);
-    }
-
-    public void testExactMatch() {
-        NGramProfile a = new NGramProfile("a", 1, 1);
-
-        a.analyze(new StringBuilder(tokencontent1));
-
-        assertEquals(a.getSimilarity(a), 0, 0);
-    }
-
-
-    public void testIO() {
-        //Create profile and set some contents
-        NGramProfile a = new NGramProfile("a", 1, 1);
-        a.analyze(new StringBuilder(this.tokencontent1));
-
-        NGramProfile b = new NGramProfile("a_from_inputstream", 1, 1);
-
-        //save profile
-        ByteArrayOutputStream os = new ByteArrayOutputStream();
-
-        try {
-            a.save(os);
-            os.close();
-        } catch (Exception e) {
-            fail();
-        }
-
-        //load profile
-        InputStream is = new ByteArrayInputStream(os.toByteArray());
-        try {
-            b.load(is);
-            is.close();
-        } catch (Exception e) {
-            fail();
-        }
-
-        //check it
-        testCounts(b.getSorted(), counts1);
-        testContents(b.getSorted(), chars1);
-    }
-
-    private void testContents(List<NGramEntry> entries, String contents[]) {
-        int c = 0;
-
-        for (NGramEntry nge : entries) {
-            assertEquals(contents[c], nge.getSeq().toString());
-            c++;
-        }
-    }
-
-    private void testCounts(List<NGramEntry> entries, int counts[]) {
-        int c = 0;
-
-        for (NGramEntry nge : entries) {
-            // System.out.println(nge);
-            assertEquals(counts[c], nge.getCount());
-            c++;
-        }
-    }
-
-    public void testIdentify() {
-        try {
-            long total = 0;
-            LanguageIdentifier idfr = new LanguageIdentifier();
-            BufferedReader in = new BufferedReader(new InputStreamReader(
-                    this.getClass().getResourceAsStream("test-referencial.txt")));
-            String line = null;
-            while((line = in.readLine()) != null) {
-                String[] tokens = line.split(";");
-                if (!tokens[0].equals("")) {
-                    long start = System.currentTimeMillis();
-                    // Identify the whole file
-                    String lang = idfr.identify(this.getClass().getResourceAsStream(tokens[0]), "UTF-8");
-                    total += System.currentTimeMillis() - start;
-                    assertEquals(tokens[1], lang);
-                    // Then, each line of the file...
-                    BufferedReader testFile = new BufferedReader(
-                            new InputStreamReader(
-                                    this.getClass().getResourceAsStream(tokens[0]), "UTF-8"));
-                    String testLine = null;
-                    while((testLine = testFile.readLine()) != null) {
-                        testLine = testLine.trim();
-                        if (testLine.length() > 256) {
-                            lang = idfr.identify(testLine);
-                            assertEquals(tokens[1], lang);
-                        }
-                    }
-                    testFile.close();
-                }
-            }
-            in.close();
-            System.out.println("Total Time=" + total);
-        } catch(Exception e) {
-            e.printStackTrace();
-            fail(e.toString());
-        }
-    }
-
-}
diff --git a/tika-core/src/test/java/org/apache/tika/language/TestNGramProfile.java b/tika-core/src/test/java/org/apache/tika/language/TestNGramProfile.java
deleted file mode 100644
index ba68b18bd..000000000
--- a/tika-core/src/test/java/org/apache/tika/language/TestNGramProfile.java
+++ /dev/null
@@ -1,133 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.tika.language;
-
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.InputStream;
-import java.util.List;
-
-import junit.framework.TestCase;
-
-public class TestNGramProfile extends TestCase {
-
-    String tokencontent1 = "testaddtoken";
-    String tokencontent2 = "anotherteststring";
-
-    int[] counts1 = { 3, 2, 2, 1, 1, 1, 1, 1 };
-
-    String[] chars1 = { "t", "d", "e", "a", "k", "n", "o", "s" };
-
-    /**
-     * Test analyze method
-     */
-    public void testAnalyze() {
-        String tokencontent = "testmeagain";
-
-        NGramProfile p = new NGramProfile("test", 1, 1);
-        p.analyze(new StringBuilder(tokencontent));
-
-        //test that profile size is ok, eg 8 different NGramEntries "tesmagin"
-        assertEquals(8, p.getSorted().size());
-    }
-
-    /**
-     * test getSorted method
-     */
-    public void testGetSorted() {
-        int[] count = { 4, 3, 1 };
-        String[] ngram = { "a", "b", "c" };
-
-        String teststring = "AAaaBbbC";
-
-        NGramProfile p = new NGramProfile("test", 1, 1);
-        p.analyze(new StringBuilder(teststring));
-
-        //test size of profile
-        assertEquals(3, p.getSorted().size());
-
-        testCounts(p.getSorted(), count);
-        testContents(p.getSorted(), ngram);
-    }
-
-    public void testGetSimilarity() {
-        NGramProfile a = new NGramProfile("a", 1, 1);
-        NGramProfile b = new NGramProfile("b", 1, 1);
-
-        a.analyze(new StringBuilder(tokencontent1));
-        b.analyze(new StringBuilder(tokencontent2));
-
-        //because of rounding errors might slightly return different results
-        assertEquals(a.getSimilarity(b), b.getSimilarity(a), 0.0000002);
-    }
-
-    public void testExactMatch() {
-        NGramProfile a = new NGramProfile("a", 1, 1);
-        a.analyze(new StringBuilder(tokencontent1));
-        assertEquals(a.getSimilarity(a), 0, 0);
-    }
-
-    public void testIO() {
-        //Create profile and set some contents
-        NGramProfile a = new NGramProfile("a", 1, 1);
-        a.analyze(new StringBuilder(this.tokencontent1));
-
-        NGramProfile b = new NGramProfile("a_from_inputstream", 1, 1);
-
-        //save profile
-        ByteArrayOutputStream os = new ByteArrayOutputStream();
-
-        try {
-            a.save(os);
-            os.close();
-        } catch (Exception e) {
-            fail();
-        }
-
-        //load profile
-        InputStream is = new ByteArrayInputStream(os.toByteArray());
-        try {
-            b.load(is);
-            is.close();
-        } catch (Exception e) {
-            fail();
-        }
-
-        //check it
-        testCounts(b.getSorted(), counts1);
-        testContents(b.getSorted(), chars1);
-    }
-
-    private void testContents(List<NGramEntry> entries, String contents[]) {
-        int c = 0;
-
-        for (NGramEntry nge : entries) {
-            assertEquals(contents[c], nge.getSeq().toString());
-            c++;
-        }
-    }
-
-    private void testCounts(List<NGramEntry> entries, int counts[]) {
-        int c = 0;
-
-        for (NGramEntry nge : entries) {
-            assertEquals(counts[c], nge.getCount());
-            c++;
-        }
-    }
-
-}
diff --git a/tika-core/src/test/resources/org/apache/tika/language/test-referencial.txt b/tika-core/src/test/resources/org/apache/tika/language/test-referencial.txt
deleted file mode 100644
index ca3207303..000000000
--- a/tika-core/src/test/resources/org/apache/tika/language/test-referencial.txt
+++ /dev/null
@@ -1,10 +0,0 @@
-da.test;da
-de.test;de
-el.test;el
-en.test;en
-es.test;es
-fi.test;fi
-fr.test;fr
-it.test;it
-nl.test;nl
-pt.test;pt
