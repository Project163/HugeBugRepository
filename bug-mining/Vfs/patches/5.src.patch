diff --git a/src/java/org/apache/commons/vfs/provider/AbstractFileProvider.java b/src/java/org/apache/commons/vfs/provider/AbstractFileProvider.java
index 6240aa86..283e86d7 100644
--- a/src/java/org/apache/commons/vfs/provider/AbstractFileProvider.java
+++ b/src/java/org/apache/commons/vfs/provider/AbstractFileProvider.java
@@ -146,7 +146,10 @@ public abstract class AbstractFileProvider
 
         synchronized (fileSystems)
         {
-            fileSystems.remove(fs.getCacheKey());
+            if (fs.getCacheKey() != null)
+            {
+                fileSystems.remove(fs.getCacheKey());
+            }
         }
 
         removeComponent(fs);
diff --git a/src/java/org/apache/commons/vfs/provider/AbstractOriginatingFileProvider.java b/src/java/org/apache/commons/vfs/provider/AbstractOriginatingFileProvider.java
index e14f6c59..6880e34c 100644
--- a/src/java/org/apache/commons/vfs/provider/AbstractOriginatingFileProvider.java
+++ b/src/java/org/apache/commons/vfs/provider/AbstractOriginatingFileProvider.java
@@ -78,7 +78,8 @@ public abstract class AbstractOriginatingFileProvider
         }
 
         // Locate the file
-        return fs.resolveFile(name.getPath());
+        // return fs.resolveFile(name.getPath());
+        return fs.resolveFile(name);
     }
 
     /**
diff --git a/src/test/org/apache/commons/vfs/test/AbstractProviderTestCase.java b/src/test/org/apache/commons/vfs/test/AbstractProviderTestCase.java
index 5a163b54..b2ef737c 100644
--- a/src/test/org/apache/commons/vfs/test/AbstractProviderTestCase.java
+++ b/src/test/org/apache/commons/vfs/test/AbstractProviderTestCase.java
@@ -22,6 +22,7 @@ import org.apache.commons.vfs.FileContent;
 import org.apache.commons.vfs.FileObject;
 import org.apache.commons.vfs.FileSystemException;
 import org.apache.commons.vfs.FileType;
+import org.apache.commons.vfs.FileSystemManager;
 import org.apache.commons.vfs.impl.DefaultFileSystemManager;
 import org.apache.commons.vfs.provider.AbstractFileSystem;
 import org.apache.commons.vfs.provider.local.DefaultLocalFileProvider;
@@ -106,6 +107,15 @@ public abstract class AbstractProviderTestCase
 	    }
 	    return fs;
     }
+
+    /**
+     * some provider config do some post-initialization in getBaseTestFolder.
+     * This is a hack to allow access to this code for <code>createManager</code>
+     */
+    protected FileObject getBaseTestFolder(FileSystemManager fs) throws Exception
+    {
+        return providerConfig.getBaseTestFolder(fs);
+    }
     
     /**
      * Returns the base test folder.  This is the parent of both the read
diff --git a/src/test/org/apache/commons/vfs/test/ProviderCacheStrategyTests.java b/src/test/org/apache/commons/vfs/test/ProviderCacheStrategyTests.java
index 602370d5..99c6734a 100644
--- a/src/test/org/apache/commons/vfs/test/ProviderCacheStrategyTests.java
+++ b/src/test/org/apache/commons/vfs/test/ProviderCacheStrategyTests.java
@@ -22,6 +22,7 @@ import org.apache.commons.vfs.Selectors;
 import org.apache.commons.vfs.provider.ram.RamFileObject;
 import org.apache.commons.vfs.util.FileObjectUtils;
 import org.apache.commons.vfs.impl.DefaultFileSystemManager;
+import org.apache.commons.vfs.impl.VirtualFileSystem;
 
 /**
  * Test the cache stragey
@@ -49,20 +50,22 @@ public class ProviderCacheStrategyTests
      */
     public void testManualCache() throws Exception
     {
-        if (FileObjectUtils.isInstanceOf(getBaseFolder(), RamFileObject.class))
+        FileObject scratchFolder = getWriteFolder();
+        if (FileObjectUtils.isInstanceOf(getBaseFolder(), RamFileObject.class) ||
+            scratchFolder.getFileSystem() instanceof VirtualFileSystem)
         {
             // cant check ram filesystem as every manager holds its own ram filesystem data
             return;
         }
 
-        FileObject scratchFolder = getWriteFolder();
         scratchFolder.delete(Selectors.EXCLUDE_SELF);
         
         DefaultFileSystemManager fs = createManager();
 	    fs.setCacheStrategy(CacheStrategy.MANUAL);
         fs.init();
-        
-        FileObject cachedFolder = fs.resolveFile(scratchFolder.getName().getURI());
+        FileObject foBase2 = getBaseTestFolder(fs);
+
+        FileObject cachedFolder = foBase2.resolveFile(scratchFolder.getName().getPath());
         
         FileObject[] fos = cachedFolder.getChildren();
         assertContainsNot(fos, "file1.txt");
@@ -82,20 +85,22 @@ public class ProviderCacheStrategyTests
      */
     public void testOnResolveCache() throws Exception
     {
-        if (FileObjectUtils.isInstanceOf(getBaseFolder(), RamFileObject.class))
+        FileObject scratchFolder = getWriteFolder();
+        if (FileObjectUtils.isInstanceOf(getBaseFolder(), RamFileObject.class) ||
+            scratchFolder.getFileSystem() instanceof VirtualFileSystem)
         {
             // cant check ram filesystem as every manager holds its own ram filesystem data
             return;
         }
 
-        FileObject scratchFolder = getWriteFolder();
         scratchFolder.delete(Selectors.EXCLUDE_SELF);
         
         DefaultFileSystemManager fs = createManager();
 	    fs.setCacheStrategy(CacheStrategy.ON_RESOLVE);
         fs.init();
-        
-        FileObject cachedFolder = fs.resolveFile(scratchFolder.getName().getURI());
+        FileObject foBase2 = getBaseTestFolder(fs);
+
+        FileObject cachedFolder = foBase2.resolveFile(scratchFolder.getName().getPath());
         
         FileObject[] fos = cachedFolder.getChildren();
         assertContainsNot(fos, "file1.txt");
@@ -105,7 +110,7 @@ public class ProviderCacheStrategyTests
         fos = cachedFolder.getChildren();
         assertContainsNot(fos, "file1.txt");
         
-        cachedFolder = fs.resolveFile(scratchFolder.getName().getURI());
+        cachedFolder = foBase2.resolveFile(scratchFolder.getName().getPath());
         fos = cachedFolder.getChildren();
         assertContains(fos, "file1.txt");
     }
@@ -115,20 +120,22 @@ public class ProviderCacheStrategyTests
      */
     public void testOnCallCache() throws Exception
     {
-        if (FileObjectUtils.isInstanceOf(getBaseFolder(), RamFileObject.class))
+        FileObject scratchFolder = getWriteFolder();
+        if (FileObjectUtils.isInstanceOf(getBaseFolder(), RamFileObject.class) ||
+            scratchFolder.getFileSystem() instanceof VirtualFileSystem)
         {
             // cant check ram filesystem as every manager holds its own ram filesystem data
             return;
         }
 
-        FileObject scratchFolder = getWriteFolder();
         scratchFolder.delete(Selectors.EXCLUDE_SELF);
         
         DefaultFileSystemManager fs = createManager();
 	    fs.setCacheStrategy(CacheStrategy.ON_CALL);
         fs.init();
-        
-        FileObject cachedFolder = fs.resolveFile(scratchFolder.getName().getURI());
+        FileObject foBase2 = getBaseTestFolder(fs);
+
+        FileObject cachedFolder = foBase2.resolveFile(scratchFolder.getName().getPath());
         
         FileObject[] fos = cachedFolder.getChildren();
         assertContainsNot(fos, "file1.txt");
