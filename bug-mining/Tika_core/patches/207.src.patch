diff --git a/tika-core/src/test/java/org/apache/tika/config/AbstractTikaConfigTest.java b/tika-core/src/test/java/org/apache/tika/config/AbstractTikaConfigTest.java
new file mode 100644
index 000000000..1a290ff2e
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/config/AbstractTikaConfigTest.java
@@ -0,0 +1,43 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tika.config;
+
+import java.net.URL;
+
+import org.apache.tika.parser.ParseContext;
+import org.junit.After;
+
+/**
+ * Parent of Junit test classes for {@link TikaConfig}, including
+ *  Tika Core based ones, and ones in Tika Parsers that do things 
+ *  that {@link TikaConfigTest} can't, do due to a need for the
+ *  full set of "real" classes of parsers / detectors
+ */
+public abstract class AbstractTikaConfigTest {
+    protected static ParseContext context = new ParseContext();
+    
+    protected static TikaConfig getConfig(String config) throws Exception {
+        URL url = TikaConfig.class.getResource(config);
+        System.setProperty("tika.config", url.toExternalForm());
+        return new TikaConfig();
+    }
+    
+    @After
+    public void resetConfig() {
+        System.clearProperty("tika.config");
+    }
+}
diff --git a/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java b/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java
index e459ec5fd..c2a748768 100644
--- a/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java
+++ b/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java
@@ -43,8 +43,7 @@ import static org.junit.Assert.fail;
  *  over in the Tika Parsers project, which do further Tika Config
  *  testing using real parsers and detectors.
  */
-public class TikaConfigTest {
-
+public class TikaConfigTest extends AbstractTikaConfigTest {
     /**
      * Make sure that a configuration file can't reference the
      * {@link AutoDetectParser} class a &lt;parser&gt; configuration element.
@@ -53,15 +52,20 @@ public class TikaConfigTest {
      */
     @Test
     public void withInvalidParser() throws Exception {
-        URL url = TikaConfigTest.class.getResource("TIKA-866-invalid.xml");
-        System.setProperty("tika.config", url.toExternalForm());
         try {
-            new TikaConfig();
+            getConfig("TIKA-866-invalid.xml");
             fail("AutoDetectParser allowed in a <parser> element");
-        } catch (TikaException expected) {
-        } finally {
-            System.clearProperty("tika.config");
-        }
+        } catch (TikaException expected) {}
+    }
+    
+    /**
+     * Make sure that with a service loader given, we can
+     * get different configurable behaviour on parser classes
+     * which can't be found.
+     */
+    @Test
+    public void testUnknownParser() throws Exception {
+        // TODO
     }
 
     /**
@@ -73,14 +77,10 @@ public class TikaConfigTest {
      */
     @Test
     public void asCompositeParser() throws Exception {
-        URL url = TikaConfigTest.class.getResource("TIKA-866-composite.xml");
-        System.setProperty("tika.config", url.toExternalForm());
         try {
-            new TikaConfig();
+            getConfig("TIKA-866-composite.xml");
         } catch (TikaException e) {
             fail("Unexpected TikaException: " + e);
-        } finally {
-            System.clearProperty("tika.config");
         }
     }
 
@@ -92,14 +92,10 @@ public class TikaConfigTest {
      */
     @Test
     public void onlyValidParser() throws Exception {
-        URL url = TikaConfigTest.class.getResource("TIKA-866-valid.xml");
-        System.setProperty("tika.config", url.toExternalForm());
         try {
-            new TikaConfig();
+            getConfig("TIKA-866-valid.xml");
         } catch (TikaException e) {
             fail("Unexpected TikaException: " + e);
-        } finally {
-            System.clearProperty("tika.config");
         }
     }
 
@@ -149,10 +145,8 @@ public class TikaConfigTest {
      */
     @Test
     public void defaultParserWithExcludes() throws Exception {
-        URL url = TikaConfigTest.class.getResource("TIKA-1445-default-except.xml");
-        System.setProperty("tika.config", url.toExternalForm());
         try {
-            TikaConfig config = new TikaConfig();
+            TikaConfig config = getConfig("TIKA-1445-default-except.xml");
             
             CompositeParser cp = (CompositeParser)config.getParser();
             List<Parser> parsers = cp.getAllComponentParsers();
@@ -180,8 +174,6 @@ public class TikaConfigTest {
             assertEquals("fail/world", p.getSupportedTypes(null).iterator().next().toString());
         } catch (TikaException e) {
             fail("Unexpected TikaException: " + e);
-        } finally {
-            System.clearProperty("tika.config");
         }
     }
     
@@ -191,10 +183,8 @@ public class TikaConfigTest {
      */
     @Test
     public void parserWithChildParsers() throws Exception {
-        URL url = TikaConfigTest.class.getResource("TIKA-1653-norepeat.xml");
-        System.setProperty("tika.config", url.toExternalForm());
         try {
-            TikaConfig config = new TikaConfig();
+            TikaConfig config = getConfig("TIKA-1653-norepeat.xml");
             
             CompositeParser cp = (CompositeParser)config.getParser();
             List<Parser> parsers = cp.getAllComponentParsers();
@@ -215,8 +205,6 @@ public class TikaConfigTest {
             assertEquals("hello/world", p.getSupportedTypes(null).iterator().next().toString());
         } catch (TikaException e) {
             fail("Unexpected TikaException: " + e);
-        } finally {
-            System.clearProperty("tika.config");
         }
     }
 }
\ No newline at end of file
