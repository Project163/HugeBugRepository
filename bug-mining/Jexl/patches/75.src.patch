diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 5c8a9d8e..2d57e9fd 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -27,7 +27,7 @@ Version 3.0.1 is a micro release to fix issues detected so far in 3.0:
 
 Bugs Fixed in 3.0.1:
 ====================
-
+* JEXL-202:     Detect invalid assignment operator usage with non-assignable l-value during script parsing
 * JEXL-198:     JxltEngine Template does not expose pragmas
 * JEXL-196:     Script execution hangs while calling method with one argument without parameter
 * JEXL-194      allow synchronization on iterableValue in foreach statement
diff --git a/src/main/java/org/apache/commons/jexl3/parser/JexlParser.java b/src/main/java/org/apache/commons/jexl3/parser/JexlParser.java
index c6a605cc..0271e727 100644
--- a/src/main/java/org/apache/commons/jexl3/parser/JexlParser.java
+++ b/src/main/java/org/apache/commons/jexl3/parser/JexlParser.java
@@ -25,6 +25,9 @@ import org.apache.commons.jexl3.internal.Scope;
 
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
+import java.util.Arrays;
+import java.util.HashSet;
 import java.util.TreeMap;
 import java.util.Stack;
 
@@ -170,6 +173,22 @@ public abstract class JexlParser extends StringParser {
     void jjtreeOpenNodeScope(JexlNode node) {
     }
 
+    /**
+     * The set of assignment operators as classes.
+     */
+    @SuppressWarnings("unchecked")
+    private static final Set<Class<? extends JexlNode>> ASSIGN_NODES = new HashSet<Class<? extends JexlNode>>(
+        Arrays.asList(
+            ASTAssignment.class,
+            ASTSetAddNode.class,
+            ASTSetMultNode.class,
+            ASTSetDivNode.class,
+            ASTSetAndNode.class,
+            ASTSetOrNode.class,
+            ASTSetXorNode.class,
+            ASTSetSubNode.class
+        )
+    );
     /**
      * Called by parser at end of node construction.
      * <p>Detects "Ambiguous statement" and 'non-leaft value assignment'.</p>
@@ -186,7 +205,7 @@ public abstract class JexlParser extends StringParser {
             popFrame();
         } else if (node instanceof ASTAmbiguous) {
             throwParsingException(JexlException.Ambiguous.class, node);
-        } else if (node instanceof ASTAssignment) {
+        } else if (ASSIGN_NODES.contains(node.getClass())) {
             JexlNode lv = node.jjtGetChild(0);
             if (!lv.isLeftValue()) {
                 throwParsingException(JexlException.Assignment.class, lv);
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index 9ff16933..71a23c3a 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -26,6 +26,9 @@
     </properties>
     <body>
         <release version="3.0.1" date="unreleased">
+            <action dev="henrib" type="fix" issue="JEXL-202" due-to="Dmitri Blinov">
+                Detect invalid assignment operator usage with non-assignable l-value during script parsing
+            </action>
             <action dev="henrib" type="fix" issue="JEXL-198" due-to="Terefang Verigorn">
                 JxltEngine Template does not expose pragmas
             </action>
diff --git a/src/test/java/org/apache/commons/jexl3/parser/ParserTest.java b/src/test/java/org/apache/commons/jexl3/parser/ParserTest.java
index c128acb0..d999b111 100644
--- a/src/test/java/org/apache/commons/jexl3/parser/ParserTest.java
+++ b/src/test/java/org/apache/commons/jexl3/parser/ParserTest.java
@@ -48,12 +48,17 @@ public class ParserTest extends TestCase {
     }
 
     public void testErrorAssign() throws Exception {
-        Parser parser = new Parser(new StringReader(";"));
-        try {
-            JexlNode sn = parser.parse(null, "foo() = 1;", null, false, false);
-            fail("should have failed on invalid assignment");
-        } catch (JexlException.Parsing xparse) {
-            // ok
+        String[] ops = { "=", "+=", "-=", "/=", "*=", "^=", "&=", "|=" };
+        for(String op : ops) {
+            Parser parser = new Parser(new StringReader(";"));
+            try {
+                JexlNode sn = parser.parse(null, "foo() "+op+" 1;", null, false, false);
+                fail("should have failed on invalid assignment " + op);
+            } catch (JexlException.Parsing xparse) {
+                // ok
+                String ss = xparse.getDetail();
+                String sss = xparse.toString();
+            }
         }
     }
 
