diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/parser/pkg/PackageParser.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/parser/pkg/PackageParser.java
index 2f72e5c38..ae040dbcc 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/parser/pkg/PackageParser.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/parser/pkg/PackageParser.java
@@ -29,7 +29,6 @@ import static org.apache.tika.detect.zip.PackageConstants.ZIP;
 import java.io.BufferedInputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.OutputStream;
 import java.nio.charset.Charset;
 import java.util.Collections;
 import java.util.Date;
@@ -451,7 +450,6 @@ public class PackageParser extends AbstractEncodingDetectorParser {
                 TemporaryResources tmp = new TemporaryResources();
                 try {
                     TikaInputStream tis = TikaInputStream.get(archive, tmp, entrydata);
-                    tis.getPath(); // fixes troubles with commons-compress 1.26.0
                     extractor.parseEmbedded(tis, xhtml, entrydata, true);
                 } finally {
                     tmp.dispose();
@@ -520,53 +518,7 @@ public class PackageParser extends AbstractEncodingDetectorParser {
         @Override
         public void close() throws IOException {
             file.close();
-        }
-
-        @Override
-        public synchronized void mark(int readlimit) {
-            in.mark(readlimit);
-        }
-
-        @Override
-        public synchronized void reset() throws IOException {
-            in.reset();
-        }
-
-        @Override
-        public boolean markSupported() {
-            return in.markSupported();
-        }
-
-        @Override
-        public byte[] readAllBytes() throws IOException {
-            return in.readAllBytes();
-        }
-
-        @Override
-        public byte[] readNBytes(int len) throws IOException {
-            return in.readNBytes(len);
-        }
-
-        @Override
-        public int readNBytes(byte[] b, int off, int len) throws IOException {
-            return in.readNBytes(b, off, len);
-        }
-
-        @Override
-        public long skip(long n) throws IOException {
-            return in.skip(n);
-        }
-
-        @Override
-        public int available() throws IOException {
-            return in.available();
-        }
-
-        @Override
-        public long transferTo(OutputStream out) throws IOException {
-            return in.transferTo(out);
-        }
-        
+        }   
     }
 
     /**
