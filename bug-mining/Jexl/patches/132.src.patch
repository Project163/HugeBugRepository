diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index cf6e9792..a721f9bb 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -69,6 +69,7 @@ New Features in 3.2:
 Bugs Fixed in 3.2:
 ==================
 
+* JEXL-291:      Using sandbox prevents array-syntax lookup by number in Map
 * JEXL-290:      Safe navigation fails on chained method calls
 * JEXL-289:      Passing undeclared function parameter can overwrite a local function variable
 * JEXL-287:      Wrong resolution of local variables
diff --git a/src/main/java/org/apache/commons/jexl3/internal/introspection/SandboxUberspect.java b/src/main/java/org/apache/commons/jexl3/internal/introspection/SandboxUberspect.java
index bb7a9803..13778b0c 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/introspection/SandboxUberspect.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/introspection/SandboxUberspect.java
@@ -112,9 +112,12 @@ public final class SandboxUberspect implements JexlUberspect {
                                           final Object obj,
                                           final Object identifier) {
         if (obj != null && identifier != null) {
-            String actual = sandbox.read(obj.getClass().getName(), identifier.toString());
+            String property = identifier.toString();
+            String actual = sandbox.read(obj.getClass().getName(), property);
             if (actual != null) {
-                return uberspect.getPropertyGet(resolvers, obj, actual);
+                 // no transformation, strict equality: use identifier before string conversion
+                Object pty = actual == property? identifier : actual;
+                return uberspect.getPropertyGet(resolvers, obj, pty);
             }
         }
         return null;
@@ -131,9 +134,12 @@ public final class SandboxUberspect implements JexlUberspect {
                                           final Object identifier,
                                           final Object arg) {
         if (obj != null && identifier != null) {
-            String actual = sandbox.write(obj.getClass().getName(), identifier.toString());
+            String property = identifier.toString();
+            String actual = sandbox.write(obj.getClass().getName(), property);
             if (actual != null) {
-                return uberspect.getPropertySet(resolvers, obj, actual, arg);
+                 // no transformation, strict equality: use identifier before string conversion
+                Object pty = actual == property? identifier : actual;
+                return uberspect.getPropertySet(resolvers, obj, pty, arg);
             }
         }
         return null;
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index e3ee7877..a3242abc 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -26,6 +26,9 @@
     </properties>
     <body>
         <release version="3.2" date="unreleased">
+            <action dev="henrib" type="fix" issue="JEXL-291" due-to="David Costanzo"> 
+                Using sandbox prevents array-syntax lookup by number in Map
+            </action>
             <action dev="henrib" type="fix" issue="JEXL-290"> 
                 Safe navigation fails on chained method calls
             </action>
diff --git a/src/test/java/org/apache/commons/jexl3/Issues200Test.java b/src/test/java/org/apache/commons/jexl3/Issues200Test.java
index 6be4e071..c22e7030 100644
--- a/src/test/java/org/apache/commons/jexl3/Issues200Test.java
+++ b/src/test/java/org/apache/commons/jexl3/Issues200Test.java
@@ -32,8 +32,8 @@ import java.util.Set;
 import java.util.TreeSet;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
+import org.apache.commons.jexl3.introspection.JexlSandbox;
 import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -906,4 +906,21 @@ public class Issues200Test extends JexlTestCase {
             Assert.assertNull(result);
         }
     }
+    
+    @Test
+    public void test291() throws Exception {
+        final String str = "{1:'one'}[1]";
+        JexlContext ctxt = new MapContext();
+        JexlEngine jexl = new JexlBuilder().create();
+        JexlExpression e = jexl.createExpression(str);
+        Object value = e.evaluate(ctxt);
+        Assert.assertEquals("one", value);
+
+        JexlEngine sandboxedJexlEngine = new JexlBuilder().
+                sandbox(new JexlSandbox(true)). // add a whitebox sandbox
+                create();
+         e = sandboxedJexlEngine.createExpression(str);
+        value = e.evaluate(ctxt);
+        Assert.assertEquals("one", value);
+    }
 }
