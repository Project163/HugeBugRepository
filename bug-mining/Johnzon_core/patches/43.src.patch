diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonGeneratorImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonGeneratorImpl.java
index ce5e8b79..916542de 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonGeneratorImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonGeneratorImpl.java
@@ -230,7 +230,7 @@ class JsonGeneratorImpl implements JsonGenerator, JsonChars, Serializable {
     }
 
     private void writeJsonValue(final JsonValue value) {
-        checkArray();
+        checkArrayOrValue();
         //TODO check null handling
         switch (value.getValueType()) {
             case ARRAY:
@@ -374,49 +374,49 @@ class JsonGeneratorImpl implements JsonGenerator, JsonChars, Serializable {
 
     @Override
     public JsonGenerator write(final JsonValue value) {
-        checkArray();
+        checkArrayOrValue();
         writeJsonValue(value);
         return this;
     }
 
     @Override
     public JsonGenerator write(final String value) {
-        checkArray();
+        checkArrayOrValue();
         writeValueAsJsonString(value);
         return this;
     }
 
     @Override
     public JsonGenerator write(final BigDecimal value) {
-        checkArray();
+        checkArrayOrValue();
         writeValue(String.valueOf(value));
         return this;
     }
 
     @Override
     public JsonGenerator write(final BigInteger value) {
-        checkArray();
+        checkArrayOrValue();
         writeValue(String.valueOf(value));
         return this;
     }
 
     @Override
     public JsonGenerator write(final int value) {
-        checkArray();
+        checkArrayOrValue();
         writeValue(value);
         return this;
     }
 
     @Override
     public JsonGenerator write(final long value) {
-        checkArray();
+        checkArrayOrValue();
         writeValue(value);
         return this;
     }
 
     @Override
     public JsonGenerator write(final double value) {
-        checkArray();
+        checkArrayOrValue();
         checkDoubleRange(value);
         writeValue(String.valueOf(value));
         return this;
@@ -424,14 +424,14 @@ class JsonGeneratorImpl implements JsonGenerator, JsonChars, Serializable {
 
     @Override
     public JsonGenerator write(final boolean value) {
-        checkArray();
+        checkArrayOrValue();
         writeValue(String.valueOf(value));
         return this;
     }
 
     @Override
     public JsonGenerator writeNull() {
-        checkArray();
+        checkArrayOrValue();
         writeValue(NULL);
         return this;
     }
@@ -616,9 +616,10 @@ class JsonGeneratorImpl implements JsonGenerator, JsonChars, Serializable {
         }
     }
 
-    private void checkArray() {
+    private void checkArrayOrValue() {
         final GeneratorState currentState = currentState();
-        if (currentState != GeneratorState.IN_ARRAY && currentState != GeneratorState.START_ARRAY) {
+        if (currentState != GeneratorState.IN_ARRAY && currentState != GeneratorState.START_ARRAY &
+                currentState != GeneratorState.AFTER_KEY) {
             if (currentState != GeneratorState.INITIAL) {
                 throw new JsonGenerationException("write(param) is only valid in arrays");
             }
diff --git a/johnzon-core/src/test/java/org/apache/johnzon/core/JsonGeneratorImplTest.java b/johnzon-core/src/test/java/org/apache/johnzon/core/JsonGeneratorImplTest.java
index b359e20a..17958943 100644
--- a/johnzon-core/src/test/java/org/apache/johnzon/core/JsonGeneratorImplTest.java
+++ b/johnzon-core/src/test/java/org/apache/johnzon/core/JsonGeneratorImplTest.java
@@ -18,6 +18,7 @@
  */
 package org.apache.johnzon.core;
 
+import static java.util.Collections.singletonMap;
 import static org.junit.Assert.assertEquals;
 
 import java.io.ByteArrayInputStream;
@@ -41,6 +42,29 @@ import org.junit.Assert;
 import org.junit.Test;
 
 public class JsonGeneratorImplTest {
+    @Test
+    public void writeKeyWrite() {
+        final StringWriter writer = new StringWriter();
+        Json.createGenerator(writer).writeStartObject().writeKey("foo").write("bar").writeEnd().close();
+        assertEquals("{\"foo\":\"bar\"}", writer.toString());
+    }
+
+    @Test
+    public void writeKeyWriteFormatted() {
+        final StringWriter writer = new StringWriter();
+        Json.createGeneratorFactory(singletonMap(JsonGenerator.PRETTY_PRINTING, "true")).createGenerator(writer)
+            .writeStartObject().writeKey("foo").write("bar").writeEnd().close();
+        assertEquals("{\n  \"foo\":\"bar\"\n}", writer.toString());
+    }
+
+    @Test
+    public void writeKeyWriteNull() {
+        final StringWriter writer = new StringWriter();
+        Json.createGenerator(writer)
+            .writeStartObject().writeKey("foo").writeNull().writeEnd().close();
+        assertEquals("{\"foo\":null}", writer.toString());
+    }
+
     @Test
     public void closeOnce() throws Throwable {
         final ByteArrayOutputStream baos = new ByteArrayOutputStream();
