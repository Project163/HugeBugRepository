diff --git a/src/main/java/org/apache/commons/configuration2/XMLConfiguration.java b/src/main/java/org/apache/commons/configuration2/XMLConfiguration.java
index 3fe0e192..0eba2908 100644
--- a/src/main/java/org/apache/commons/configuration2/XMLConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration2/XMLConfiguration.java
@@ -1135,6 +1135,7 @@ public class XMLConfiguration extends BaseHierarchicalConfiguration implements
          */
         public void processDocument(ReferenceNodeHandler refHandler)
         {
+            updateAttributes(refHandler.getRootNode(), document.getDocumentElement() );
             NodeTreeWalker.INSTANCE.walkDFS(refHandler.getRootNode(), this,
                     refHandler);
         }
diff --git a/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java b/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java
index 3e789014..dec88784 100644
--- a/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java
+++ b/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java
@@ -397,6 +397,20 @@ public class TestXMLConfiguration
                 .getString("[@test]"));
     }
 
+    @Test
+    public void testSetRootNamespace() throws ConfigurationException
+    {
+        conf.addProperty(  "[@xmlns:foo]",  "http://example.com/" );
+        conf.addProperty(  "foo:bar", "foobar" );
+        assertEquals("Root attribute not set", "http://example.com/", conf
+                .getString("[@xmlns:foo]"));
+        saveTestConfig();
+        XMLConfiguration checkConf = checkSavedConfig();
+        assertTrue("Attribute not found after save", checkConf
+                .containsKey("[@xmlns:foo]"));
+        checkConf.setProperty("[@xmlns:foo]", "http://example.net/");
+    }
+
     @Test
     public void testAddList()
     {
@@ -918,6 +932,23 @@ public class TestXMLConfiguration
         assertEquals("test3_yoge", conf.getString("yoge"));
     }
 
+
+    @Test
+    public void testLoadWithRootNamespace() throws ConfigurationException
+    {
+        conf = new XMLConfiguration();
+        new FileHandler(conf).load(ConfigurationAssert.getTestFile("testRootNamespace.xml"));
+        assertEquals("http://example.com/", conf.getString("[@xmlns:foo]"));
+    }
+
+    @Test
+    public void testLoadChildNamespace() throws ConfigurationException
+    {
+        conf = new XMLConfiguration();
+        new FileHandler(conf).load(ConfigurationAssert.getTestFile("testChildNamespace.xml"));
+        assertEquals("http://example.com/", conf.getString("foo:bar.[@xmlns:foo]"));
+    }
+
     /**
      * Tests whether the encoding is written to the generated XML file.
      */
@@ -935,6 +966,35 @@ public class TestXMLConfiguration
                 containsString("encoding=\"" + ENCODING + "\""));
     }
 
+    @Test
+    public void testSaveWithRootAttributes() throws ConfigurationException
+    {
+        conf.setProperty("[@xmlns:ex]", "http://example.com/");
+        assertEquals("Root attribute not set", "http://example.com/", conf
+                .getString("[@xmlns:ex]"));
+        FileHandler handler = new FileHandler(conf);
+
+        StringWriter out = new StringWriter();
+        handler.save(out);
+        assertThat("Encoding was not written to file", out.toString(),
+                containsString("testconfig xmlns:ex=\"http://example.com/\""));
+    }
+
+    @Test
+    public void testSaveWithRootAttributes_ByHand() throws ConfigurationException
+    {
+        conf = new XMLConfiguration();
+        conf.addProperty(  "[@xmlns:foo]",  "http://example.com/" );
+        assertEquals("Root attribute not set", "http://example.com/", conf
+                .getString("[@xmlns:foo]"));
+        FileHandler handler = new FileHandler(conf);
+
+        StringWriter out = new StringWriter();
+        handler.save(out);
+        assertThat("Encoding was not written to file", out.toString(),
+                containsString("configuration xmlns:foo=\"http://example.com/\""));
+    }
+
     /**
      * Tests whether a default encoding is used if no specific encoding is set.
      * According to the XSLT specification (http://www.w3.org/TR/xslt#output)
diff --git a/src/test/resources/testChildNamespace.xml b/src/test/resources/testChildNamespace.xml
new file mode 100644
index 00000000..145f2370
Binary files /dev/null and b/src/test/resources/testChildNamespace.xml differ
diff --git a/src/test/resources/testRootNamespace.xml b/src/test/resources/testRootNamespace.xml
new file mode 100644
index 00000000..7bfda864
Binary files /dev/null and b/src/test/resources/testRootNamespace.xml differ
