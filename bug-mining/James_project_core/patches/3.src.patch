diff --git a/core/src/main/java/org/apache/james/core/MailAddress.java b/core/src/main/java/org/apache/james/core/MailAddress.java
index e53f5bc508..cd206eff6b 100644
--- a/core/src/main/java/org/apache/james/core/MailAddress.java
+++ b/core/src/main/java/org/apache/james/core/MailAddress.java
@@ -20,6 +20,8 @@
 package org.apache.james.core;
 
 import java.util.Locale;
+import java.util.Objects;
+import java.util.Optional;
 
 import javax.mail.internet.AddressException;
 import javax.mail.internet.InternetAddress;
@@ -108,11 +110,12 @@ public class MailAddress implements java.io.Serializable {
         return NULL_SENDER;
     }
 
-    private String localPart = null;
-    private Domain domain = null;
+    private final String localPart;
+    private final Domain domain;
 
     private MailAddress() {
-
+        localPart = null;
+        domain = null;
     }
 
     /**
@@ -317,7 +320,9 @@ public class MailAddress implements java.io.Serializable {
 
     @Override
     public String toString() {
-        return localPart + "@" + domain.asString();
+        return localPart + "@" + Optional.ofNullable(domain)
+            .map(Domain::asString)
+            .orElse("");
     }
     
     public String asPrettyString() {
@@ -350,7 +355,7 @@ public class MailAddress implements java.io.Serializable {
      * @returns true if the given object is equal to this one, false otherwise
      */
     @Override
-    public boolean equals(Object obj) {
+    public final boolean equals(Object obj) {
         if (obj == null) {
             return false;
         } else if (obj instanceof String) {
@@ -361,11 +366,22 @@ public class MailAddress implements java.io.Serializable {
             if (isNullSender() && addr.isNullSender()) {
                 return true;
             }
-            return getLocalPart().equalsIgnoreCase(addr.getLocalPart()) && getDomain().equals(addr.getDomain());
+            return equalsIgnoreCase(getLocalPart(), addr.getLocalPart())
+                && Objects.equals(getDomain(), addr.getDomain());
         }
         return false;
     }
 
+    private boolean equalsIgnoreCase(String a, String b) {
+        if (a == null ^ b == null) {
+            return false;
+        }
+        if (a == null) {
+            return true;
+        }
+        return a.equalsIgnoreCase(b);
+    }
+
     /**
      * Returns a hash code value for this object.
      * <p/>
@@ -376,7 +392,7 @@ public class MailAddress implements java.io.Serializable {
      * @return the hashcode.
      */
     @Override
-    public int hashCode() {
+    public final int hashCode() {
         return toString().toLowerCase(Locale.US).hashCode();
     }
 
diff --git a/core/src/test/java/org/apache/james/core/MailAddressTest.java b/core/src/test/java/org/apache/james/core/MailAddressTest.java
index edb1cfa8b0..f7cfc024e8 100644
--- a/core/src/test/java/org/apache/james/core/MailAddressTest.java
+++ b/core/src/test/java/org/apache/james/core/MailAddressTest.java
@@ -19,6 +19,8 @@
 
 package org.apache.james.core;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 import javax.mail.internet.AddressException;
 import javax.mail.internet.InternetAddress;
 
@@ -26,6 +28,8 @@ import org.assertj.core.api.Assertions;
 import org.junit.Assert;
 import org.junit.Test;
 
+import nl.jqno.equalsverifier.EqualsVerifier;
+
 public class MailAddressTest {
 
     private static final String GOOD_LOCAL_PART = "\"quoted@local part\"";
@@ -222,4 +226,16 @@ public class MailAddressTest {
         Assert.assertTrue(a.toString() + " != " + b.toString(), a.equals(b));
         Assert.assertFalse(a.toString() + " != " + null, a.equals(null));
     }
+
+    @Test
+    public void equalsShouldReturnTrueWhenBothNullSender() {
+        assertThat(MailAddress.nullSender())
+            .isEqualTo(MailAddress.nullSender());
+    }
+
+    @Test
+    public void shouldMatchBeanContract() {
+        EqualsVerifier.forClass(MailAddress.class)
+            .verify();
+    }
 }
