diff --git a/src/java/org/apache/commons/dbcp/DelegatingConnection.java b/src/java/org/apache/commons/dbcp/DelegatingConnection.java
index 407e79ff..cadcc362 100644
--- a/src/java/org/apache/commons/dbcp/DelegatingConnection.java
+++ b/src/java/org/apache/commons/dbcp/DelegatingConnection.java
@@ -209,15 +209,10 @@ public class DelegatingConnection extends AbandonedTrace
      * any Statements that were not explicitly closed.
      */
     public void close() throws SQLException {
-        // close can be called multiple times, but PoolableConnection improperly
-        // throws an exception when a connection is closed twice, so before calling
-        // close we aren't already closed
-        if (!isClosed()) {
-            try {
-                _conn.close();
-            } finally {
-                _closed = true;
-            }
+        try {
+            _conn.close();
+        } finally {
+            _closed = true;
         }
     }
 
@@ -350,10 +345,7 @@ public class DelegatingConnection extends AbandonedTrace
     { checkOpen(); try { _conn.setTypeMap(map); } catch (SQLException e) { handleException(e); } }
 
     public boolean isClosed() throws SQLException {
-         if(_closed || _conn.isClosed()) {
-             return true;
-         }
-         return false;
+        return _closed || _conn.isClosed();
     }
 
     protected void checkOpen() throws SQLException {
diff --git a/src/java/org/apache/commons/dbcp/PoolableConnection.java b/src/java/org/apache/commons/dbcp/PoolableConnection.java
index e5fe094d..6c023f12 100644
--- a/src/java/org/apache/commons/dbcp/PoolableConnection.java
+++ b/src/java/org/apache/commons/dbcp/PoolableConnection.java
@@ -53,8 +53,7 @@ public class PoolableConnection extends DelegatingConnection {
      * @param config the abandoned configuration settings
      * @deprecated AbandonedConfig is now deprecated.
      */
-    public PoolableConnection(Connection conn, ObjectPool pool,
-                              AbandonedConfig config) {
+    public PoolableConnection(Connection conn, ObjectPool pool, AbandonedConfig config) {
         super(conn, config);
         _pool = pool;
     }
@@ -64,9 +63,14 @@ public class PoolableConnection extends DelegatingConnection {
      * Returns me to my pool.
      */
      public synchronized void close() throws SQLException {
-        boolean isClosed = false;
+        if (_closed) {
+            // already closed
+            return;
+        }
+
+        boolean isUnderlyingConectionClosed;
         try {
-            isClosed = isClosed();
+            isUnderlyingConectionClosed = _conn.isClosed();
         } catch (SQLException e) {
             try {
                 _pool.invalidateObject(this); // XXX should be guarded to happen at most once
@@ -77,33 +81,38 @@ public class PoolableConnection extends DelegatingConnection {
             } catch (Exception ie) {
                 // DO NOTHING the original exception will be rethrown
             }
-            throw new SQLNestedException("Cannot close connection (isClosed check failed)", e);
+            throw (SQLException) new SQLException("Cannot close connection (isClosed check failed)").initCause(e);
         }
-        if (isClosed) {
+
+        if (!isUnderlyingConectionClosed) {
+            // Normal close: underlying connection is still open, so we
+            // simply need to return this proxy to the pool
             try {
-                _pool.invalidateObject(this); // XXX should be guarded to happen at most once
+                _pool.returnObject(this); // XXX should be guarded to happen at most once
             } catch(IllegalStateException e) {
                 // pool is closed, so close the connection
                 passivate();
                 getInnermostDelegate().close();
-            } catch (Exception ie) {
-                // DO NOTHING, "Already closed" exception thrown below
+            } catch(SQLException e) {
+                throw e;
+            } catch(RuntimeException e) {
+                throw e;
+            } catch(Exception e) {
+                throw (SQLException) new SQLException("Cannot close connection (return to pool failed)").initCause(e);
             }
-            throw new SQLException("Already closed.");
         } else {
+            // Abnormal close: underlying connection closed unexpectedly, so we
+            // must destroy this proxy
             try {
-                _pool.returnObject(this); // XXX should be guarded to happen at most once
+                _pool.invalidateObject(this); // XXX should be guarded to happen at most once
             } catch(IllegalStateException e) {
                 // pool is closed, so close the connection
                 passivate();
                 getInnermostDelegate().close();
-            } catch(SQLException e) {
-                throw e;
-            } catch(RuntimeException e) {
-                throw e;
-            } catch(Exception e) {
-                throw new SQLNestedException("Cannot close connection (return to pool failed)", e);
+            } catch (Exception ie) {
+                // DO NOTHING, "Already closed" exception thrown below
             }
+            throw new SQLException("Already closed.");
         }
     }
 
@@ -113,6 +122,5 @@ public class PoolableConnection extends DelegatingConnection {
     public void reallyClose() throws SQLException {
         super.close();
     }
-
 }
 
diff --git a/src/test/org/apache/commons/dbcp/TestBasicDataSource.java b/src/test/org/apache/commons/dbcp/TestBasicDataSource.java
index 2bf2d7dd..7b91b80e 100644
--- a/src/test/org/apache/commons/dbcp/TestBasicDataSource.java
+++ b/src/test/org/apache/commons/dbcp/TestBasicDataSource.java
@@ -95,7 +95,7 @@ public class TestBasicDataSource extends TestConnectionPool {
         ds.close();
 
         // raw idle connection should now be closed
-        assertFalse(rawIdleConnection.isClosed());
+        assertTrue(rawIdleConnection.isClosed());
 
         // active connection should still be open
         assertFalse(activeConnection.isClosed());
@@ -339,7 +339,7 @@ public class TestBasicDataSource extends TestConnectionPool {
             fail("Expected SQLException");
         }
         catch(SQLException ex) { }
-        
+
         assertEquals(0, ds.getNumActive());
     }
     
diff --git a/src/test/org/apache/commons/dbcp/TestDelegatingConnection.java b/src/test/org/apache/commons/dbcp/TestDelegatingConnection.java
index a5fe6ebc..13fbee50 100644
--- a/src/test/org/apache/commons/dbcp/TestDelegatingConnection.java
+++ b/src/test/org/apache/commons/dbcp/TestDelegatingConnection.java
@@ -124,7 +124,7 @@ public class TestDelegatingConnection extends TestCase {
             conn.prepareStatement("");
             fail("Expecting SQLException");
         } catch (SQLException ex) {
-            assertTrue(ex.getMessage().endsWith("invalid PoolingConnection."));
+            assertTrue(ex.getMessage().endsWith("is closed."));
         }  
         
         try {
diff --git a/src/test/org/apache/commons/dbcp/TesterConnection.java b/src/test/org/apache/commons/dbcp/TesterConnection.java
index ded7f303..5761c397 100644
--- a/src/test/org/apache/commons/dbcp/TesterConnection.java
+++ b/src/test/org/apache/commons/dbcp/TesterConnection.java
@@ -65,7 +65,7 @@ public class TesterConnection implements Connection {
     }
 
     public void close() throws SQLException {
-        checkOpen();
+        checkFailure();
         _open = false;
     }
 
