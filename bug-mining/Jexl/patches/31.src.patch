diff --git a/src/main/java/org/apache/commons/jexl2/parser/ASTArrayLiteral.java b/src/main/java/org/apache/commons/jexl2/parser/ASTArrayLiteral.java
index a7cff215..4dae54da 100644
--- a/src/main/java/org/apache/commons/jexl2/parser/ASTArrayLiteral.java
+++ b/src/main/java/org/apache/commons/jexl2/parser/ASTArrayLiteral.java
@@ -19,6 +19,8 @@ package org.apache.commons.jexl2.parser;
 public final class ASTArrayLiteral extends JexlNode implements JexlNode.Literal<Object> {
     /** The type literal value. */
     Object array = null;
+    /** Whether this array is constant or not. */
+    boolean constant = false;
 
     ASTArrayLiteral(int id) {
         super(id);
@@ -28,6 +30,13 @@ public final class ASTArrayLiteral extends JexlNode implements JexlNode.Literal<
         super(p, id);
     }
 
+
+    /** {@inheritDoc} */
+    @Override
+    public void jjtClose() {
+        constant = isConstant();
+    }
+
     /**
      *  Gets the literal value.
      * @return the array literal
@@ -37,15 +46,17 @@ public final class ASTArrayLiteral extends JexlNode implements JexlNode.Literal<
     }
 
     /**
-     * Sets the literal value.
+     * Sets the literal value only if the descendants of this node compose a constant
      * @param literal the literal array value
      * @throws IllegalArgumentException if literal is not an array or null
      */
     public void setLiteral(Object literal) {
-        if (literal != null && !literal.getClass().isArray()) {
-            throw new IllegalArgumentException(literal.getClass() + " is not an array");
+        if (constant) {
+            if (literal != null && !literal.getClass().isArray()) {
+                throw new IllegalArgumentException(literal.getClass() + " is not an array");
+            }
+            this.array = literal;
         }
-        this.array = literal;
     }
 
     /** {@inheritDoc} */
diff --git a/src/main/java/org/apache/commons/jexl2/parser/JexlNode.java b/src/main/java/org/apache/commons/jexl2/parser/JexlNode.java
index 3486e18c..7725b9dd 100644
--- a/src/main/java/org/apache/commons/jexl2/parser/JexlNode.java
+++ b/src/main/java/org/apache/commons/jexl2/parser/JexlNode.java
@@ -58,4 +58,23 @@ public abstract class JexlNode extends SimpleNode implements JexlInfo {
         JexlInfo info = getInfo();
         return info != null? info.debugString() : "";
     }
+
+    /**
+     * Whether this node is a constant node
+     * Its value can not change after the first evaluation and can be cached indefinitely.
+     * @return true if constant, false otherwise
+     */
+    public boolean isConstant() {
+        if (this instanceof JexlNode.Literal<?>) {
+            if (children != null) {
+                for(JexlNode child : children) {
+                    if (!child.isConstant()) {
+                        return false;
+                    }
+                }
+            }
+            return true;
+        }
+        return false;
+    }
 }
diff --git a/src/test/java/org/apache/commons/jexl2/JexlTestCase.java b/src/test/java/org/apache/commons/jexl2/JexlTestCase.java
index b626d103..6be9fc83 100644
--- a/src/test/java/org/apache/commons/jexl2/JexlTestCase.java
+++ b/src/test/java/org/apache/commons/jexl2/JexlTestCase.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.jexl2;
+package org.apache.commons.jexl2; 
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
