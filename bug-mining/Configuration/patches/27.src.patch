diff --git a/src/java/org/apache/commons/configuration/ConfigurationUtils.java b/src/java/org/apache/commons/configuration/ConfigurationUtils.java
index e15ffe0f..a06691ae 100644
--- a/src/java/org/apache/commons/configuration/ConfigurationUtils.java
+++ b/src/java/org/apache/commons/configuration/ConfigurationUtils.java
@@ -30,6 +30,9 @@ import java.net.URL;
 import java.net.URLDecoder;
 import java.util.Iterator;
 
+import org.apache.commons.configuration.event.ConfigurationErrorEvent;
+import org.apache.commons.configuration.event.ConfigurationErrorListener;
+import org.apache.commons.configuration.event.EventSource;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -644,4 +647,35 @@ public final class ConfigurationUtils
             return null;
         }
     }
+
+    /**
+     * Enables runtime exceptions for the specified configuration object. This
+     * method can be used for configuration implementations that may face errors
+     * on normal property access, e.g. <code>DatabaseConfiguration</code> or
+     * <code>JNDIConfiguration</code>. Per default such errors are simply
+     * logged and then ignored. This implementation will register a special
+     * <code>{@link ConfigurationErrorListener}</code> that throws a runtime
+     * exception (namely a <code>ConfigurationRuntimeException</code>) on
+     * each received error event.
+     *
+     * @param src the configuration, for which runtime exceptions are to be
+     * enabled; this configuration must be derived from
+     * <code>{@link EventSource}</code>
+     */
+    public static void enableRuntimeExceptions(Configuration src)
+    {
+        if (!(src instanceof EventSource))
+        {
+            throw new IllegalArgumentException(
+                    "Configuration must be derived from EventSource!");
+        }
+        ((EventSource) src).addErrorListener(new ConfigurationErrorListener()
+        {
+            public void configurationError(ConfigurationErrorEvent event)
+            {
+                // Throw a runtime exception
+                throw new ConfigurationRuntimeException(event.getCause());
+            }
+        });
+    }
 }
diff --git a/src/test/org/apache/commons/configuration/TestConfigurationUtils.java b/src/test/org/apache/commons/configuration/TestConfigurationUtils.java
index bdea737d..e4d7d4b9 100644
--- a/src/test/org/apache/commons/configuration/TestConfigurationUtils.java
+++ b/src/test/org/apache/commons/configuration/TestConfigurationUtils.java
@@ -23,6 +23,8 @@ import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 
+import com.mockobjects.dynamic.Mock;
+
 import junit.framework.TestCase;
 import junitx.framework.ListAssert;
 
@@ -284,4 +286,67 @@ public class TestConfigurationUtils extends TestCase
         assertNull("Wrong return value", ConfigurationUtils
                 .cloneConfiguration(null));
     }
+
+    /**
+     * Tests whether runtime exceptions can be enabled.
+     */
+    public void testEnableRuntimeExceptions()
+    {
+        PropertiesConfiguration config = new PropertiesConfiguration()
+        {
+            protected void addPropertyDirect(String key, Object value)
+            {
+                // always simulate an exception
+                fireError(EVENT_ADD_PROPERTY, key, value, new RuntimeException(
+                        "A faked exception!"));
+            }
+        };
+        config.clearErrorListeners();
+        ConfigurationUtils.enableRuntimeExceptions(config);
+        try
+        {
+            config.addProperty("test", "testValue");
+            fail("No runtime exception was thrown!");
+        }
+        catch (ConfigurationRuntimeException crex)
+        {
+            // ok
+        }
+    }
+
+    /**
+     * Tries to enable runtime exceptions for a configurtion that does not
+     * inherit from EventSource. This should cause an exception.
+     */
+    public void testEnableRuntimeExceptionsInvalid()
+    {
+        try
+        {
+            ConfigurationUtils
+                    .enableRuntimeExceptions((Configuration) new Mock(
+                            Configuration.class).proxy());
+            fail("Could enable exceptions for non EventSource configuration!");
+        }
+        catch (IllegalArgumentException iex)
+        {
+            // ok
+        }
+    }
+
+    /**
+     * Tries to enable runtime exceptions for a null configuration. This should
+     * cause an exception.
+     */
+    public void testEnableRuntimeExceptionsNull()
+    {
+        try
+        {
+            ConfigurationUtils.enableRuntimeExceptions(null);
+            fail("Could enable exceptions for a null configuration!");
+        }
+        catch (IllegalArgumentException iex)
+        {
+            //ok
+        }
+    }
 }
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 25c03c87..db443b88 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -27,6 +27,9 @@
         In addition to configuration event listeners now so-called configuration
         error listeners are supported. These listeners are notified about
         internal errors that had been logged and swallowed by privious versions.
+        The new enableRuntimeExceptions() method of ConfigurationUtils
+        registers a special error listener at the passed in configuration that
+        generates a runtime exception when an error event is received.
       </action>
       <action dev="oheger" type="add">
         AbstractConfiguration now allows to set an instance specific logger
