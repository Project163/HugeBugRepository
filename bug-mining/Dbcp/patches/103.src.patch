diff --git a/src/main/java/org/apache/commons/dbcp2/DataSourceConnectionFactory.java b/src/main/java/org/apache/commons/dbcp2/DataSourceConnectionFactory.java
index 1a2e4fd5..0f5cc33d 100644
--- a/src/main/java/org/apache/commons/dbcp2/DataSourceConnectionFactory.java
+++ b/src/main/java/org/apache/commons/dbcp2/DataSourceConnectionFactory.java
@@ -5,16 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.commons.dbcp2;
 
 import java.sql.Connection;
@@ -47,7 +46,7 @@ public class DataSourceConnectionFactory implements ConnectionFactory {
         }
     }
 
-    protected String _uname = null; // TODO make private?
-    protected String _passwd = null; // TODO make private?
-    protected DataSource _source = null; // TODO make private?
+    private final String _uname;
+    private final String _passwd;
+    private final DataSource _source;
 }
diff --git a/src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java b/src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java
index 130c126a..ad2f6e06 100644
--- a/src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java
+++ b/src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java
@@ -75,7 +75,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
     /** My delegate {@link Connection}. */
     private C _conn = null;
 
-    protected boolean _closed = false; // TODO make private and add getter/setter?
+    private boolean _closed = false;
 
     private boolean _cacheState = true;
     private Boolean _autoCommitCached = null;
@@ -249,6 +249,14 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         }
     }
 
+    protected boolean isClosedInternal() {
+        return _closed;
+    }
+
+    protected void setClosedInternal(boolean closed) {
+        this._closed = closed;
+    }
+
     protected final void closeInternal() throws SQLException {
         try {
             passivate();
diff --git a/src/main/java/org/apache/commons/dbcp2/DelegatingDatabaseMetaData.java b/src/main/java/org/apache/commons/dbcp2/DelegatingDatabaseMetaData.java
index 29048a02..8cc1c0ed 100644
--- a/src/main/java/org/apache/commons/dbcp2/DelegatingDatabaseMetaData.java
+++ b/src/main/java/org/apache/commons/dbcp2/DelegatingDatabaseMetaData.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.commons.dbcp2;
 
 import java.sql.Connection;
@@ -36,10 +35,10 @@ import java.sql.SQLException;
 public class DelegatingDatabaseMetaData implements DatabaseMetaData {
 
     /** My delegate {@link DatabaseMetaData} */
-    protected DatabaseMetaData _meta; // TODO make final and private?
+    private final DatabaseMetaData _meta;
 
     /** The connection that created me. **/
-    protected DelegatingConnection<?> _conn = null; // TODO make final and private?
+    private final DelegatingConnection<?> _conn;
 
     public DelegatingDatabaseMetaData(DelegatingConnection<?> c,
             DatabaseMetaData m) {
diff --git a/src/main/java/org/apache/commons/dbcp2/PoolableConnection.java b/src/main/java/org/apache/commons/dbcp2/PoolableConnection.java
index e234a9ba..4294e45a 100644
--- a/src/main/java/org/apache/commons/dbcp2/PoolableConnection.java
+++ b/src/main/java/org/apache/commons/dbcp2/PoolableConnection.java
@@ -49,7 +49,7 @@ public class PoolableConnection extends DelegatingConnection<Connection> {
 
     @Override
     public boolean isClosed() throws SQLException {
-        if (_closed) {
+        if (isClosedInternal()) {
             return true;
         }
 
@@ -71,7 +71,7 @@ public class PoolableConnection extends DelegatingConnection<Connection> {
      */
      @Override
     public synchronized void close() throws SQLException {
-        if (_closed) {
+        if (isClosedInternal()) {
             // already closed
             return;
         }
@@ -121,7 +121,7 @@ public class PoolableConnection extends DelegatingConnection<Connection> {
                 throw (SQLException) new SQLException("Cannot close connection (invalidating pooled object failed)").initCause(e);
             }
         }
-        _closed = true;
+        setClosedInternal(true);
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/dbcp2/PoolingConnection.java b/src/main/java/org/apache/commons/dbcp2/PoolingConnection.java
index 246bacf4..4d2e0906 100644
--- a/src/main/java/org/apache/commons/dbcp2/PoolingConnection.java
+++ b/src/main/java/org/apache/commons/dbcp2/PoolingConnection.java
@@ -96,7 +96,7 @@ public class PoolingConnection extends DelegatingConnection<Connection>
             try {
                 getDelegateInternal().close();
             } finally {
-                _closed = true;
+                setClosedInternal(true);
             }
         }
     }
diff --git a/src/main/java/org/apache/commons/dbcp2/cpdsadapter/ConnectionImpl.java b/src/main/java/org/apache/commons/dbcp2/cpdsadapter/ConnectionImpl.java
index 1c62e116..5e5e3c06 100644
--- a/src/main/java/org/apache/commons/dbcp2/cpdsadapter/ConnectionImpl.java
+++ b/src/main/java/org/apache/commons/dbcp2/cpdsadapter/ConnectionImpl.java
@@ -73,11 +73,11 @@ class ConnectionImpl extends DelegatingConnection<Connection> {
      */
     @Override
     public void close() throws SQLException {
-        if (!_closed) {
+        if (!isClosedInternal()) {
             try {
                 passivate();
             } finally {
-                _closed = true;
+                setClosedInternal(true);
                 pooledConnection.notifyListeners();
             }
         }
diff --git a/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java b/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java
index 045f606d..d54cc757 100644
--- a/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java
+++ b/src/main/java/org/apache/commons/dbcp2/managed/ManagedConnection.java
@@ -150,7 +150,7 @@ public class ManagedConnection<C extends Connection> extends DelegatingConnectio
 
     @Override
     public void close() throws SQLException {
-        if (!_closed) {
+        if (!isClosedInternal()) {
             try {
                 // Don't actually close the connection if in a transaction. The
                 // connection will be closed by the transactionComplete method.
@@ -158,7 +158,7 @@ public class ManagedConnection<C extends Connection> extends DelegatingConnectio
                     super.close();
                 }
             } finally {
-                _closed = true;
+                setClosedInternal(true);
             }
         }
     }
@@ -189,7 +189,7 @@ public class ManagedConnection<C extends Connection> extends DelegatingConnectio
         // If this connection was closed during the transaction and there is
         // still a delegate present close it
         Connection delegate = getDelegateInternal();
-        if (_closed && delegate != null) {
+        if (isClosedInternal() && delegate != null) {
             try {
                 setDelegate(null);
 
diff --git a/src/test/java/org/apache/commons/dbcp2/TestDelegatingConnection.java b/src/test/java/org/apache/commons/dbcp2/TestDelegatingConnection.java
index cd9185d9..3af21902 100644
--- a/src/test/java/org/apache/commons/dbcp2/TestDelegatingConnection.java
+++ b/src/test/java/org/apache/commons/dbcp2/TestDelegatingConnection.java
@@ -112,7 +112,7 @@ public class TestDelegatingConnection extends TestCase {
 
         try {
             conn = new DelegatingConnection<>(null);
-            conn._closed = true;
+            conn.setClosedInternal(true);
             conn.checkOpen();
             fail("Expecting SQLException");
         } catch (SQLException ex) {
