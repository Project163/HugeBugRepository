diff --git a/src/main/java/org/apache/sling/commons/classloader/impl/ClassLoaderFacade.java b/src/main/java/org/apache/sling/commons/classloader/impl/ClassLoaderFacade.java
index b3c2d20..84f54bd 100644
--- a/src/main/java/org/apache/sling/commons/classloader/impl/ClassLoaderFacade.java
+++ b/src/main/java/org/apache/sling/commons/classloader/impl/ClassLoaderFacade.java
@@ -43,6 +43,14 @@ public class ClassLoaderFacade extends ClassLoader {
 
     /** Dynamic class loader manager which manages the dynamic class loader providers for this facade. */
     private final DynamicClassLoaderManagerImpl manager;
+    
+    /** Used to log stack traces in slf4j for non-critical errors */
+    @SuppressWarnings("serial")
+    static class StackTraceProbe extends Exception {
+        StackTraceProbe(String reason) {
+            super(reason);
+        }
+    }
 
     /**
      * Constructor
@@ -51,12 +59,24 @@ public class ClassLoaderFacade extends ClassLoader {
         this.manager = manager;
     }
 
+    /** Return false if our manager is not active, and log the stack trace
+     *  when that happens, to ease troubleshooting. 
+     */
+    private boolean checkManagerActive() {
+        if(!this.manager.isActive()) {
+            final String msg = "Dynamic class loader has already been deactivated."; 
+            final StackTraceProbe p = new StackTraceProbe(msg);
+            logger.error(msg, p);
+            return false;
+        }
+        return true;
+    }
+
     /**
      * @see java.lang.ClassLoader#getResource(java.lang.String)
      */
     public URL getResource(String name) {
-        if ( !this.manager.isActive() ) {
-            logger.error("Dynamic class loader has already been deactivated.");
+        if (!checkManagerActive()) {
             return null;
         }
         final ClassLoader[] loaders = manager.getDynamicClassLoaders();
@@ -81,8 +101,7 @@ public class ClassLoaderFacade extends ClassLoader {
      * @see java.lang.ClassLoader#getResources(java.lang.String)
      */
     public Enumeration<URL> getResources(String name) throws IOException {
-        if ( !this.manager.isActive() ) {
-            logger.error("Dynamic class loader has already been deactivated.");
+        if(!checkManagerActive()) {
             return Collections.enumeration(EMPTY_LIST);
         }
         final ClassLoader[] loaders = manager.getDynamicClassLoaders();
@@ -107,8 +126,7 @@ public class ClassLoaderFacade extends ClassLoader {
      */
     protected synchronized Class<?> loadClass(String name, boolean resolve)
     throws ClassNotFoundException {
-        if ( !this.manager.isActive() ) {
-            logger.error("Dynamic class loader has already been deactivated.");
+        if(!checkManagerActive()) {
             throw new ClassNotFoundException(name);
         }
         final ClassLoader[] loaders = manager.getDynamicClassLoaders();
