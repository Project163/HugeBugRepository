diff --git a/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/JohnzonMessageBodyReader.java b/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/JohnzonMessageBodyReader.java
index f3d9a18c..42fcbf0b 100644
--- a/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/JohnzonMessageBodyReader.java
+++ b/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/JohnzonMessageBodyReader.java
@@ -58,8 +58,10 @@ public class JohnzonMessageBodyReader<T> extends IgnorableTypes implements Messa
     public boolean isReadable(final Class<?> rawType, final Type genericType,
                               final Annotation[] annotations, final MediaType mediaType) {
         return !isIgnored(rawType)
-                && InputStream.class != genericType && Reader.class != genericType && Response.class != genericType
-                && String.class != genericType
+                && !InputStream.class.isAssignableFrom(rawType)
+                && !Reader.class.isAssignableFrom(rawType)
+                && !Response.class.isAssignableFrom(rawType)
+                && !CharSequence.class.isAssignableFrom(rawType)
                 && !JsonStructure.class.isAssignableFrom(rawType);
     }
 
diff --git a/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/JohnzonMessageBodyWriter.java b/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/JohnzonMessageBodyWriter.java
index e6a8d364..6a3e1639 100644
--- a/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/JohnzonMessageBodyWriter.java
+++ b/johnzon-jaxrs/src/main/java/org/apache/johnzon/jaxrs/JohnzonMessageBodyWriter.java
@@ -65,12 +65,12 @@ public class JohnzonMessageBodyWriter<T> extends IgnorableTypes implements Messa
     public boolean isWriteable(final Class<?> rawType, final Type genericType,
                                final Annotation[] annotations, final MediaType mediaType) {
         return !isIgnored(rawType)
-                && InputStream.class != genericType
-                && OutputStream.class != genericType
-                && Writer.class != genericType
-                && StreamingOutput.class != genericType
-                && String.class != genericType
-                && Response.class != genericType
+                && !InputStream.class.isAssignableFrom(rawType)
+                && !OutputStream.class.isAssignableFrom(rawType)
+                && !Writer.class.isAssignableFrom(rawType)
+                && !StreamingOutput.class.isAssignableFrom(rawType)
+                && !CharSequence.class.isAssignableFrom(rawType)
+                && !Response.class.isAssignableFrom(rawType)
                 && !JsonStructure.class.isAssignableFrom(rawType);
     }
 
diff --git a/johnzon-jaxrs/src/test/java/org/apache/johnzon/jaxrs/JohnzonProviderTest.java b/johnzon-jaxrs/src/test/java/org/apache/johnzon/jaxrs/JohnzonProviderTest.java
index 6af6f689..a77752d7 100644
--- a/johnzon-jaxrs/src/test/java/org/apache/johnzon/jaxrs/JohnzonProviderTest.java
+++ b/johnzon-jaxrs/src/test/java/org/apache/johnzon/jaxrs/JohnzonProviderTest.java
@@ -18,14 +18,20 @@
  */
 package org.apache.johnzon.jaxrs;
 
-import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
-import org.apache.cxf.jaxrs.client.WebClient;
-import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;
-import org.apache.cxf.transport.local.LocalConduit;
-import org.junit.AfterClass;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import static java.util.Arrays.asList;
+import static java.util.Collections.singletonList;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.io.IOException;
+import java.io.OutputStream;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
 
 import javax.ws.rs.Consumes;
 import javax.ws.rs.GET;
@@ -34,24 +40,25 @@ import javax.ws.rs.Path;
 import javax.ws.rs.Produces;
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.client.Entity;
+import javax.ws.rs.container.AsyncResponse;
+import javax.ws.rs.container.Suspended;
 import javax.ws.rs.core.GenericType;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.StreamingOutput;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.lang.reflect.ParameterizedType;
-import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
 
-import static java.util.Arrays.asList;
-import static java.util.Collections.singletonList;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
+import org.apache.cxf.jaxrs.client.WebClient;
+import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;
+import org.apache.cxf.transport.local.LocalConduit;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
 
 public class JohnzonProviderTest {
+
     private final static String ENDPOINT_ADDRESS = "local://johnzon";
+
     private static Server server;
 
     @BeforeClass
@@ -72,7 +79,8 @@ public class JohnzonProviderTest {
 
     @Test
     public void asParam() {
-        final String result = client().path("johnzon").type(MediaType.APPLICATION_JSON_TYPE).post(new Johnzon("client")).readEntity(String.class);
+        final String result = client().path("johnzon").type(MediaType.APPLICATION_JSON_TYPE).post(new Johnzon("client"))
+                .readEntity(String.class);
         assertTrue(Boolean.parseBoolean(result));
     }
 
@@ -88,6 +96,19 @@ public class JohnzonProviderTest {
         assertEquals("ok", stream);
     }
 
+    @Test
+    public void untypedStreamOutput() {
+        final StreamingOutput impl = new StreamingOutput() {
+
+            @Override
+            public void write(final OutputStream outputStream) throws IOException, WebApplicationException {
+                // no-op
+            }
+        };
+        assertFalse(new JohnzonMessageBodyWriter().isWriteable(impl.getClass(), impl.getClass(), new Annotation[0],
+                MediaType.APPLICATION_JSON_TYPE));
+    }
+
     @Test
     public void primitive() {
         final String val = client(MediaType.TEXT_PLAIN_TYPE).path("johnzon/primitive").get(String.class);
@@ -106,9 +127,10 @@ public class JohnzonProviderTest {
     @Test
     public void list() {
         final ParameterizedType list = new ParameterizedType() {
+
             @Override
             public Type[] getActualTypeArguments() {
-                return new Type[]{Johnzon.class};
+                return new Type[] { Johnzon.class };
             }
 
             @Override
@@ -146,12 +168,14 @@ public class JohnzonProviderTest {
     }
 
     private static WebClient client(final MediaType mediaType) {
-        final WebClient client = WebClient.create(ENDPOINT_ADDRESS, singletonList(new JohnzonProvider<Object>())).accept(mediaType);
+        final WebClient client = WebClient.create(ENDPOINT_ADDRESS, singletonList(new JohnzonProvider<Object>()))
+                .accept(mediaType);
         WebClient.getConfig(client).getRequestContext().put(LocalConduit.DIRECT_DISPATCH, Boolean.TRUE);
         return client;
     }
 
     public static class Johnzon {
+
         private String name;
 
         public Johnzon(final String name) {
@@ -173,6 +197,7 @@ public class JohnzonProviderTest {
 
     @Path("johnzon")
     public static class JohnzonResource {
+
         @GET
         public Johnzon johnzon() {
             return new Johnzon("johnzon");
@@ -207,6 +232,7 @@ public class JohnzonProviderTest {
         @Path("stream")
         public StreamingOutput out() {
             return new StreamingOutput() {
+
                 @Override
                 public void write(OutputStream outputStream) throws IOException, WebApplicationException {
                     outputStream.write("ok".getBytes());
@@ -214,6 +240,18 @@ public class JohnzonProviderTest {
             };
         }
 
+        @GET
+        @Path("lazy_stream")
+        public void out(@Suspended final AsyncResponse response) {
+            response.resume(new StreamingOutput() {
+
+                @Override
+                public void write(OutputStream outputStream) throws IOException, WebApplicationException {
+                    outputStream.write("ok".getBytes());
+                }
+            });
+        }
+
         @GET
         @Produces(MediaType.TEXT_PLAIN)
         @Path("primitive")
