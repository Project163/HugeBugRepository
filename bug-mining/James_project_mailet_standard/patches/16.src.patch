diff --git a/mailet/standard/src/main/java/org/apache/james/transport/mailets/ClamAVScan.java b/mailet/standard/src/main/java/org/apache/james/transport/mailets/ClamAVScan.java
index 5d3fc8e5ac..8be918bed0 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/mailets/ClamAVScan.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/mailets/ClamAVScan.java
@@ -527,7 +527,7 @@ public class ClamAVScan extends GenericMailet {
 
         InetAddress address;
 
-        Set<InetAddress> usedAddresses = new HashSet<InetAddress>(getAddressesCount());
+        Set<InetAddress> usedAddresses = new HashSet<>(getAddressesCount());
         for (; ; ) {
             // this do-while loop is needed because other threads could in the meantime
             // calling getNextAddress(), and because of that the current thread may skip
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/mailets/HeadersToHTTP.java b/mailet/standard/src/main/java/org/apache/james/transport/mailets/HeadersToHTTP.java
index 241e2436f9..0057ea091e 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/mailets/HeadersToHTTP.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/mailets/HeadersToHTTP.java
@@ -162,7 +162,7 @@ public class HeadersToHTTP extends GenericMailet {
         // reply to
         // subject
 
-        HashSet<NameValuePair> pairs = new HashSet<NameValuePair>();
+        HashSet<NameValuePair> pairs = new HashSet<>();
 
         if (message!=null) {
             if (message.getSender()!=null) {
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/mailets/OnlyText.java b/mailet/standard/src/main/java/org/apache/james/transport/mailets/OnlyText.java
index fffc6c03c7..3fc4f539bb 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/mailets/OnlyText.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/mailets/OnlyText.java
@@ -19,18 +19,19 @@
 
 package org.apache.james.transport.mailets;
 
-import org.apache.mailet.Experimental;
-import org.apache.mailet.Mail;
-import org.apache.mailet.MailetException;
-import org.apache.mailet.base.GenericMailet;
+import java.io.IOException;
+import java.util.HashMap;
 
 import javax.mail.Message;
 import javax.mail.MessagingException;
 import javax.mail.Multipart;
 import javax.mail.Part;
 import javax.mail.internet.ContentType;
-import java.io.IOException;
-import java.util.HashMap;
+
+import org.apache.mailet.Experimental;
+import org.apache.mailet.Mail;
+import org.apache.mailet.MailetException;
+import org.apache.mailet.base.GenericMailet;
 
 /**
  * Keep only the text part of a message.
@@ -45,7 +46,7 @@ public class OnlyText extends GenericMailet {
     private static final String PARAMETER_NAME_NOTEXT_PROCESSOR = "NoTextProcessor";
 
     private String optionsNotextProcessor = null;
-    private final HashMap<String, String> charMap = new HashMap<String, String>();
+    private final HashMap<String, String> charMap = new HashMap<>();
 
     /**
      * returns a String describing this mailet.
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/mailets/PostmasterAlias.java b/mailet/standard/src/main/java/org/apache/james/transport/mailets/PostmasterAlias.java
index a419f95da1..6f822dbe3e 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/mailets/PostmasterAlias.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/mailets/PostmasterAlias.java
@@ -21,14 +21,15 @@
 
 package org.apache.james.transport.mailets;
 
-import org.apache.mailet.base.GenericMailet;
+import java.util.Collection;
+import java.util.Vector;
+
+import javax.mail.MessagingException;
+
 import org.apache.mailet.Mail;
 import org.apache.mailet.MailAddress;
 import org.apache.mailet.MailetContext;
-
-import javax.mail.MessagingException;
-import java.util.Collection;
-import java.util.Vector;
+import org.apache.mailet.base.GenericMailet;
 
 /**
  * Rewrites recipient addresses to make sure email for the postmaster is
@@ -59,7 +60,7 @@ public class PostmasterAlias extends GenericMailet {
                 //Should remove this address... we want to replace it with
                 //  the server's postmaster address
                 if (recipientsToRemove == null) {
-                    recipientsToRemove = new Vector<MailAddress>();
+                    recipientsToRemove = new Vector<>();
                 }
                 recipientsToRemove.add(addr);
                 //Flag this as having found the postmaster
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/mailets/StripAttachment.java b/mailet/standard/src/main/java/org/apache/james/transport/mailets/StripAttachment.java
index 58b7304303..dd20ed46bf 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/mailets/StripAttachment.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/mailets/StripAttachment.java
@@ -342,7 +342,7 @@ public class StripAttachment extends GenericMailet {
         @SuppressWarnings("unchecked")
         List<String> attributeValues = (List<String>) mail.getAttribute(attributeName);
         if (attributeValues == null) {
-            attributeValues = new ArrayList<String>();
+            attributeValues = new ArrayList<>();
             mail.setAttribute(attributeName, (Serializable) attributeValues);
         }
         attributeValues.add(filename);
@@ -358,7 +358,7 @@ public class StripAttachment extends GenericMailet {
         @SuppressWarnings("unchecked")
         Map<String, byte[]> fileNamesToPartContent = (Map<String, byte[]>) mail.getAttribute(attributeName);
         if (fileNamesToPartContent == null) {
-            fileNamesToPartContent = new LinkedHashMap<String, byte[]>();
+            fileNamesToPartContent = new LinkedHashMap<>();
             mail.setAttribute(attributeName, (Serializable) fileNamesToPartContent);
         }
         ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/matchers/AbstractQuotaMatcher.java b/mailet/standard/src/main/java/org/apache/james/transport/matchers/AbstractQuotaMatcher.java
index ba41e1bfcb..7b7de3145c 100755
--- a/mailet/standard/src/main/java/org/apache/james/transport/matchers/AbstractQuotaMatcher.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/matchers/AbstractQuotaMatcher.java
@@ -21,14 +21,15 @@
 
 package org.apache.james.transport.matchers;
 
-import java.util.Collection;
 import java.util.ArrayList;
+import java.util.Collection;
+
 import javax.mail.MessagingException;
 
 import org.apache.mailet.Experimental;
-import org.apache.mailet.base.GenericMatcher;
-import org.apache.mailet.MailAddress;
 import org.apache.mailet.Mail;
+import org.apache.mailet.MailAddress;
+import org.apache.mailet.base.GenericMatcher;
 
 /**
  * <P>Abstract matcher checking whether a recipient has exceeded a maximum allowed quota.</P>
@@ -53,7 +54,7 @@ abstract public class AbstractQuotaMatcher extends GenericMatcher {
     public final Collection<MailAddress> match(Mail mail) throws MessagingException {
         Collection<MailAddress> matching = null;
         if (isSenderChecked(mail.getSender())) {
-            matching = new ArrayList<MailAddress>();
+            matching = new ArrayList<>();
             for (MailAddress recipient : mail.getRecipients()) {
                 if (isRecipientChecked(recipient) && isOverQuota(recipient, mail)) {
                     matching.add(recipient);
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/matchers/AttachmentFileNameIs.java b/mailet/standard/src/main/java/org/apache/james/transport/matchers/AttachmentFileNameIs.java
index e35a10e5c4..ea9ec07e1e 100755
--- a/mailet/standard/src/main/java/org/apache/james/transport/matchers/AttachmentFileNameIs.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/matchers/AttachmentFileNameIs.java
@@ -21,23 +21,24 @@
  
 package org.apache.james.transport.matchers;
 
-import org.apache.mailet.Experimental;
-import org.apache.mailet.base.GenericMatcher;
-import org.apache.mailet.Mail;
-import org.apache.mailet.MailAddress;
-
-import javax.mail.MessagingException;
-import javax.mail.Multipart;
-import javax.mail.Part;
-import javax.mail.internet.MimeMessage;
 import java.io.IOException;
+import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.StringTokenizer;
 import java.util.Locale;
-import java.util.zip.ZipInputStream;
+import java.util.StringTokenizer;
 import java.util.zip.ZipEntry;
-import java.io.UnsupportedEncodingException;
+import java.util.zip.ZipInputStream;
+
+import javax.mail.MessagingException;
+import javax.mail.Multipart;
+import javax.mail.Part;
+import javax.mail.internet.MimeMessage;
+
+import org.apache.mailet.Experimental;
+import org.apache.mailet.Mail;
+import org.apache.mailet.MailAddress;
+import org.apache.mailet.base.GenericMatcher;
 
 
 /**
@@ -97,7 +98,7 @@ public class AttachmentFileNameIs extends GenericMatcher {
         /* sets up fileNameMasks variable by parsing the condition */
         
         StringTokenizer st = new StringTokenizer(getCondition(), ", ", false);
-        ArrayList<Mask> theMasks = new ArrayList<Mask>(20);
+        ArrayList<Mask> theMasks = new ArrayList<>(20);
         while (st.hasMoreTokens()) {
             String fileName = st.nextToken();
             
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/matchers/HostIs.java b/mailet/standard/src/main/java/org/apache/james/transport/matchers/HostIs.java
index 409745a9a2..26000075d5 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/matchers/HostIs.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/matchers/HostIs.java
@@ -21,14 +21,14 @@
 
 package org.apache.james.transport.matchers;
 
-import org.apache.mailet.base.GenericRecipientMatcher;
-import org.apache.mailet.MailAddress;
-
 import java.util.Collection;
 import java.util.Locale;
 import java.util.StringTokenizer;
 import java.util.Vector;
 
+import org.apache.mailet.MailAddress;
+import org.apache.mailet.base.GenericRecipientMatcher;
+
 /**
  * Matches mail to given hosts.
  */
@@ -42,7 +42,7 @@ public class HostIs extends GenericRecipientMatcher {
      */
     public void init() {
         StringTokenizer st = new StringTokenizer(getCondition(), ", ", false);
-        hosts = new Vector<String>();
+        hosts = new Vector<>();
         while (st.hasMoreTokens()) {
             hosts.add(st.nextToken().toLowerCase(Locale.US));
         }
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/matchers/SMTPAuthUserIs.java b/mailet/standard/src/main/java/org/apache/james/transport/matchers/SMTPAuthUserIs.java
index d7eda39f31..cc3fc52b14 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/matchers/SMTPAuthUserIs.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/matchers/SMTPAuthUserIs.java
@@ -24,9 +24,9 @@ package org.apache.james.transport.matchers;
 import java.util.Collection;
 import java.util.StringTokenizer;
 
-import org.apache.mailet.base.GenericMatcher;
 import org.apache.mailet.Mail;
 import org.apache.mailet.MailAddress;
+import org.apache.mailet.base.GenericMatcher;
 
 /**
  * <P>Matches mails that are sent by an SMTP authenticated user present in a supplied list.</P>
@@ -48,7 +48,7 @@ public class SMTPAuthUserIs extends GenericMatcher {
 
     public void init() throws javax.mail.MessagingException {
         StringTokenizer st = new StringTokenizer(getCondition(), ", \t", false);
-        users = new java.util.HashSet<String>();
+        users = new java.util.HashSet<>();
         while (st.hasMoreTokens()) {
             users.add(st.nextToken());
         }
