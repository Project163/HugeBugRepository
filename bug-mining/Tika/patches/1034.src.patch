diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/html/charsetdetector/FullStandardEncodingDetector.java b/tika-parsers/src/main/java/org/apache/tika/parser/html/charsetdetector/FullStandardEncodingDetector.java
new file mode 100644
index 000000000..ab1edad7a
--- /dev/null
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/html/charsetdetector/FullStandardEncodingDetector.java
@@ -0,0 +1,20 @@
+package org.apache.tika.parser.html.charsetdetector;
+
+import org.apache.tika.detect.CompositeEncodingDetector;
+
+import static java.util.Arrays.asList;
+
+/**
+ * A composite encoding detector chaining a {@link StandardHtmlEncodingDetector}
+ * (that may return null) and a {@link StandardIcu4JEncodingDetector} (that always returns a value)
+ * This full detector thus always returns an encoding, and still works very well with data coming
+ * from the web.
+ */
+public class FullStandardEncodingDetector extends CompositeEncodingDetector {
+    public FullStandardEncodingDetector() {
+        super(asList(
+                new StandardHtmlEncodingDetector(),
+                StandardIcu4JEncodingDetector.STANDARD_ICU4J_ENCODING_DETECTOR
+        ));
+    }
+}
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/html/charsetdetector/StandardHtmlEncodingDetector.java b/tika-parsers/src/main/java/org/apache/tika/parser/html/charsetdetector/StandardHtmlEncodingDetector.java
index 18a00700e..041827066 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/html/charsetdetector/StandardHtmlEncodingDetector.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/html/charsetdetector/StandardHtmlEncodingDetector.java
@@ -17,7 +17,7 @@
 package org.apache.tika.parser.html.charsetdetector;
 
 import org.apache.commons.io.input.BoundedInputStream;
-import org.apache.tika.detect.CompositeEncodingDetector;
+import org.apache.tika.config.Field;
 import org.apache.tika.detect.EncodingDetector;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.mime.MediaType;
@@ -26,7 +26,6 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.Charset;
 
-import static java.util.Arrays.asList;
 import static org.apache.tika.parser.html.charsetdetector.CharsetAliases.getCharsetByLabel;
 
 /**
@@ -49,22 +48,13 @@ import static org.apache.tika.parser.html.charsetdetector.CharsetAliases.getChar
  *     );
  * }</pre>
  * <p>
- * This detector is stateless, and the same instance can be used on several different input streams.
  */
 public final class StandardHtmlEncodingDetector implements EncodingDetector {
-
-    /**
-     * A composite encoding detector chaining a {@link StandardHtmlEncodingDetector}
-     * (that may return null) and a {@link StandardIcu4JEncodingDetector} (that always return a value)
-     * This full thus always returns an encoding, and still works very well with data coming
-     * from the web.
-     */
-    public static final EncodingDetector FULL_DETECTOR = new CompositeEncodingDetector(asList(
-            new StandardHtmlEncodingDetector(),
-            new StandardIcu4JEncodingDetector()
-    ));
     private static final int META_TAG_BUFFER_SIZE = 8192;
 
+    @Field
+    private int markLimit = META_TAG_BUFFER_SIZE;
+
     /**
      * Extracts a charset from a Content-Type HTTP header.
      *
@@ -81,9 +71,10 @@ public final class StandardHtmlEncodingDetector implements EncodingDetector {
 
     @Override
     public Charset detect(InputStream input, Metadata metadata) throws IOException {
-        input.mark(META_TAG_BUFFER_SIZE);
+        int limit = getMarkLimit();
+        input.mark(limit);
         // Never read more than the first META_TAG_BUFFER_SIZE bytes
-        InputStream limitedStream = new BoundedInputStream(input, META_TAG_BUFFER_SIZE);
+        InputStream limitedStream = new BoundedInputStream(input, limit);
         PreScanner preScanner = new PreScanner(limitedStream);
 
         // The order of priority for detection is:
@@ -97,4 +88,17 @@ public final class StandardHtmlEncodingDetector implements EncodingDetector {
         input.reset();
         return detectedCharset;
     }
+
+    public int getMarkLimit() {
+        return markLimit;
+    }
+
+    /**
+     * How far into the stream to read for charset detection.
+     * Default is 8192.
+     */
+    @Field
+    public void setMarkLimit(int markLimit) {
+        this.markLimit = markLimit;
+    }
 }
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/html/charsetdetector/StandardIcu4JEncodingDetector.java b/tika-parsers/src/main/java/org/apache/tika/parser/html/charsetdetector/StandardIcu4JEncodingDetector.java
index b942aaf31..f7ed53f46 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/html/charsetdetector/StandardIcu4JEncodingDetector.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/html/charsetdetector/StandardIcu4JEncodingDetector.java
@@ -33,6 +33,8 @@ import java.nio.charset.StandardCharsets;
  * This detector is stateless and a single instance can be used several times for different streams.
  */
 public class StandardIcu4JEncodingDetector implements EncodingDetector {
+    public static EncodingDetector STANDARD_ICU4J_ENCODING_DETECTOR = new StandardIcu4JEncodingDetector();
+
     public Charset detect(InputStream input, Metadata metadata) throws IOException {
         CharsetDetector detector = new CharsetDetector();
         detector.enableInputFilter(true); // enabling input filtering (stripping of HTML tags)
