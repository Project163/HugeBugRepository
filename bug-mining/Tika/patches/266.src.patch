diff --git a/tika-core/src/test/java/org/apache/tika/language/LanguageProfilerBuilderTest.java b/tika-core/src/test/java/org/apache/tika/language/LanguageProfilerBuilderTest.java
index 2671d8c2c..33c4b1668 100644
--- a/tika-core/src/test/java/org/apache/tika/language/LanguageProfilerBuilderTest.java
+++ b/tika-core/src/test/java/org/apache/tika/language/LanguageProfilerBuilderTest.java
@@ -29,7 +29,6 @@ import java.net.URISyntaxException;
 import junit.framework.Assert;
 import junit.framework.TestCase;
 import org.apache.tika.exception.TikaException;
-import org.apache.tika.io.TikaInputStream;
 
 public class LanguageProfilerBuilderTest extends TestCase {
     /* Test members */
@@ -44,8 +43,14 @@ public class LanguageProfilerBuilderTest extends TestCase {
     private final int maxlen = 1000;
 
     public void testCreateProfile() throws TikaException, IOException, URISyntaxException {
-        TikaInputStream is = TikaInputStream.get(LanguageProfilerBuilderTest.class.getResourceAsStream(corpusName));
-        ngramProfile = LanguageProfilerBuilder.create(profileName, is , encoding);
+        InputStream is =
+                LanguageProfilerBuilderTest.class.getResourceAsStream(corpusName);
+        try {
+            ngramProfile = LanguageProfilerBuilder.create(profileName, is , encoding);
+        } finally {
+            is.close();
+        }
+
         File f = new File(profileName + "." + FILE_EXTENSION);
         FileOutputStream fos = new FileOutputStream(f);
         ngramProfile.save(fos);
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/chm/CHMDocumentInformation.java b/tika-parsers/src/main/java/org/apache/tika/parser/chm/CHMDocumentInformation.java
index 44ce7c2bb..6b8177495 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/chm/CHMDocumentInformation.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/chm/CHMDocumentInformation.java
@@ -49,22 +49,9 @@ public class CHMDocumentInformation {
      * @throws IOException 
      */
     public static CHMDocumentInformation load(InputStream is) throws TikaException, IOException {
-        return new CHMDocumentInformation().getInstance(is);
-    }
-
-    /**
-     * Returns instance of chm document information
-     * 
-     * @param is
-     *            InputStream
-     * 
-     * @return
-     * @throws TikaException 
-     * @throws IOException 
-     */
-    private CHMDocumentInformation getInstance(InputStream is) throws TikaException, IOException {
-        setChmExtractor(new ChmExtractor(is));
-        return this;
+        CHMDocumentInformation document = new CHMDocumentInformation();
+        document.setChmExtractor(new ChmExtractor(is));
+        return document;
     }
 
     /**
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/chm/core/ChmCommons.java b/tika-parsers/src/main/java/org/apache/tika/parser/chm/core/ChmCommons.java
index 14de922da..1b34cd77b 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/chm/core/ChmCommons.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/chm/core/ChmCommons.java
@@ -16,11 +16,9 @@
  */
 package org.apache.tika.parser.chm.core;
 
-import java.io.ByteArrayOutputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
-import java.io.InputStream;
 import java.util.Iterator;
 import java.util.List;
 
@@ -254,37 +252,6 @@ public class ChmCommons {
         }
     }
 
-    /**
-     * Returns byte array Closes the InputStream
-     * 
-     * @param is
-     *            InputStream of chm file
-     * 
-     * @return byte array
-     * 
-     * @throws IOException
-     * @throws TikaException 
-     */
-    public static byte[] toByteArray(InputStream is) throws IOException, TikaException {
-        if (is != null) {
-            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
-            int nRead;
-            byte[] data = new byte[16384];
-            while ((nRead = is.read(data, 0, data.length)) != -1) {
-                buffer.write(data, 0, nRead);
-            }
-            buffer.flush();
-            try {
-                is.close();
-                buffer.close();
-            } catch (Exception e) {
-                throw new TikaException(e.getMessage());
-            }
-            return buffer.toByteArray();
-        } else
-            throw new IOException("InputStream is null");
-    }
-
     /**
      * Returns an index of the reset table
      * 
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/chm/core/ChmExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/chm/core/ChmExtractor.java
index d4c873799..eb1a6f79c 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/chm/core/ChmExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/chm/core/ChmExtractor.java
@@ -22,6 +22,7 @@ import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import org.apache.tika.exception.TikaException;
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.parser.chm.accessor.ChmDirectoryListingSet;
 import org.apache.tika.parser.chm.accessor.ChmItsfHeader;
 import org.apache.tika.parser.chm.accessor.ChmItspHeader;
@@ -145,7 +146,7 @@ public class ChmExtractor {
     public ChmExtractor(InputStream is) throws TikaException, IOException {
         ChmAssert.assertInputStreamNotNull(is);
         try {
-            setData(ChmCommons.toByteArray(is));
+            setData(IOUtils.toByteArray(is));
 
             /* Creates and parses chm itsf header */
             setChmItsfHeader(new ChmItsfHeader());
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmBlockInfo.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmBlockInfo.java
index 029082022..22d0ddbb2 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmBlockInfo.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmBlockInfo.java
@@ -21,7 +21,6 @@ import java.util.Iterator;
 import junit.framework.Assert;
 import junit.framework.TestCase;
 
-import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.parser.chm.accessor.ChmDirectoryListingSet;
 import org.apache.tika.parser.chm.accessor.ChmItsfHeader;
 import org.apache.tika.parser.chm.accessor.ChmItspHeader;
@@ -44,8 +43,7 @@ public class TestChmBlockInfo extends TestCase {
     private ChmLzxcControlData chmLzxcControlData = null;
 
     public void setUp() throws Exception {
-        data = TestUtils.toByteArray(TikaInputStream.get(TestChmBlockInfo.class
-                .getResource(TestParameters.chmFile)));
+        data = TestParameters.chmData;
         /* Creates and parses itsf header */
         ChmItsfHeader chmItsHeader = new ChmItsfHeader();
         // chmItsHeader.parse(Arrays.copyOfRange(data, 0,
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmDocumentInformation.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmDocumentInformation.java
index c0b6dba46..addd9267b 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmDocumentInformation.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmDocumentInformation.java
@@ -17,22 +17,21 @@
 
 package org.apache.tika.parser.chm;
 
+import java.io.ByteArrayInputStream;
 import java.io.IOException;
 
 import junit.framework.Assert;
 import junit.framework.TestCase;
 
 import org.apache.tika.exception.TikaException;
-import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
 
 public class TestChmDocumentInformation extends TestCase {
     private CHMDocumentInformation chmDoc = null;
 
     public void setUp() throws Exception {
-        chmDoc = CHMDocumentInformation
-                .load(TikaInputStream.get(TestChmBlockInfo.class
-                        .getResource(TestParameters.chmFile)));
+        chmDoc = CHMDocumentInformation.load(
+                new ByteArrayInputStream(TestParameters.chmData));
     }
 
     public void testGetCHMDocInformation() throws TikaException, IOException {
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmExtraction.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmExtraction.java
index eb4e423c7..41454275d 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmExtraction.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmExtraction.java
@@ -17,7 +17,6 @@
 
 package org.apache.tika.parser.chm;
 
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
@@ -29,8 +28,6 @@ import java.util.concurrent.locks.ReentrantLock;
 
 import junit.framework.TestCase;
 
-import org.apache.tika.exception.TikaException;
-import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
 
 public class TestChmExtraction extends TestCase {
@@ -52,9 +49,7 @@ public class TestChmExtraction extends TestCase {
                     for (String fileName : files) {
                         InputStream stream = null;
                         try {
-                            stream = TikaInputStream
-                                    .get(TestChmExtraction.class
-                                            .getResource(fileName));
+                            stream = TestChmExtraction.class.getResourceAsStream(fileName);
 
                             CHMDocumentInformation chmDocInfo = CHMDocumentInformation
                                     .load(stream);
@@ -64,11 +59,7 @@ public class TestChmExtraction extends TestCase {
                             chmDocInfo.getCHMDocInformation(md);
                             assertEquals(TestParameters.VP_CHM_MIME_TYPE, md.toString().trim());
                             assertTrue(text.length() > 0);
-                        } catch (TikaException e) {
-                            e.printStackTrace();
-                        } catch (FileNotFoundException e) {
-                            e.printStackTrace();
-                        } catch (IOException e) {
+                        } catch (Exception e) {
                             e.printStackTrace();
                         } finally {
                             try {
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmExtractor.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmExtractor.java
index 760fe19ad..4d4aa4e87 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmExtractor.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmExtractor.java
@@ -16,6 +16,7 @@
  */
 package org.apache.tika.parser.chm;
 
+import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
@@ -37,8 +38,7 @@ public class TestChmExtractor extends TestCase {
 
     public void setUp() throws Exception {
         chmExtractor = new ChmExtractor(
-                TikaInputStream.get(TestChmBlockInfo.class
-                        .getResource(TestParameters.chmFile)));
+                new ByteArrayInputStream(TestParameters.chmData));
     }
 
     public void testEnumerateChm() {
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmItsfHeader.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmItsfHeader.java
index 0c2c6dc57..7356277d7 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmItsfHeader.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmItsfHeader.java
@@ -19,7 +19,6 @@ package org.apache.tika.parser.chm;
 import junit.framework.Assert;
 import junit.framework.TestCase;
 
-import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.parser.chm.accessor.ChmItsfHeader;
 import org.apache.tika.parser.chm.core.ChmCommons;
 import org.apache.tika.parser.chm.core.ChmConstants;
@@ -33,9 +32,7 @@ public class TestChmItsfHeader extends TestCase {
 
     public void setUp() throws Exception {
         chmItsfHeader = new ChmItsfHeader();
-        byte[] data = TestUtils
-                .toByteArray(TikaInputStream.get(TestChmBlockInfo.class
-                        .getResource(TestParameters.chmFile)));
+        byte[] data = TestParameters.chmData;
         // chmItsfHeader.parse(Arrays.copyOfRange(data, 0,
         // ChmConstants.CHM_ITSF_V3_LEN - 1), chmItsfHeader);
         chmItsfHeader.parse(ChmCommons.copyOfRange(data, 0,
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmItspHeader.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmItspHeader.java
index 2d3edf342..6072a8a6d 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmItspHeader.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmItspHeader.java
@@ -19,7 +19,6 @@ package org.apache.tika.parser.chm;
 import junit.framework.Assert;
 import junit.framework.TestCase;
 
-import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.parser.chm.accessor.ChmItsfHeader;
 import org.apache.tika.parser.chm.accessor.ChmItspHeader;
 import org.apache.tika.parser.chm.core.ChmCommons;
@@ -33,9 +32,7 @@ public class TestChmItspHeader extends TestCase {
     private ChmItspHeader chmItspHeader = null;
 
     public void setUp() throws Exception {
-        byte[] data = TestUtils
-                .toByteArray(TikaInputStream.get(TestChmBlockInfo.class
-                        .getResource(TestParameters.chmFile)));
+        byte[] data = TestParameters.chmData;
 
         ChmItsfHeader chmItsfHeader = new ChmItsfHeader();
         // chmItsfHeader.parse(Arrays.copyOfRange(data, 0,
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxState.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxState.java
index 044c81153..070d5a8fc 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxState.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxState.java
@@ -16,12 +16,10 @@
  */
 package org.apache.tika.parser.chm;
 
-import java.io.IOException;
 import junit.framework.Assert;
 import junit.framework.TestCase;
 
 import org.apache.tika.exception.TikaException;
-import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.parser.chm.accessor.ChmDirectoryListingSet;
 import org.apache.tika.parser.chm.accessor.ChmItsfHeader;
 import org.apache.tika.parser.chm.accessor.ChmItspHeader;
@@ -35,55 +33,49 @@ public class TestChmLzxState extends TestCase {
     private int windowSize;
 
     public void setUp() throws Exception {
-        try {
-            byte[] data = TestUtils.toByteArray(TikaInputStream
-                    .get(TestChmBlockInfo.class
-                            .getResource(TestParameters.chmFile)));
+        byte[] data = TestParameters.chmData;
 
-            /* Creates and parses itsf header */
-            ChmItsfHeader chmItsHeader = new ChmItsfHeader();
-            // chmItsHeader.parse(Arrays.copyOfRange(data, 0,
-            // ChmConstants.CHM_ITSF_V3_LEN - 1), chmItsHeader);
-            chmItsHeader.parse(ChmCommons.copyOfRange(data, 0,
-                    ChmConstants.CHM_ITSF_V3_LEN - 1), chmItsHeader);
-            /* Creates and parses itsp block */
-            ChmItspHeader chmItspHeader = new ChmItspHeader();
-            // chmItspHeader.parse(Arrays.copyOfRange( data, (int)
-            // chmItsHeader.getDirOffset(),
-            // (int) chmItsHeader.getDirOffset()
-            // + ChmConstants.CHM_ITSP_V1_LEN), chmItspHeader);
-            chmItspHeader.parse(ChmCommons.copyOfRange(data,
-                    (int) chmItsHeader.getDirOffset(),
-                    (int) chmItsHeader.getDirOffset()
-                            + ChmConstants.CHM_ITSP_V1_LEN), chmItspHeader);
+        /* Creates and parses itsf header */
+        ChmItsfHeader chmItsHeader = new ChmItsfHeader();
+        // chmItsHeader.parse(Arrays.copyOfRange(data, 0,
+        // ChmConstants.CHM_ITSF_V3_LEN - 1), chmItsHeader);
+        chmItsHeader.parse(ChmCommons.copyOfRange(data, 0,
+                ChmConstants.CHM_ITSF_V3_LEN - 1), chmItsHeader);
+        /* Creates and parses itsp block */
+        ChmItspHeader chmItspHeader = new ChmItspHeader();
+        // chmItspHeader.parse(Arrays.copyOfRange( data, (int)
+        // chmItsHeader.getDirOffset(),
+        // (int) chmItsHeader.getDirOffset()
+        // + ChmConstants.CHM_ITSP_V1_LEN), chmItspHeader);
+        chmItspHeader.parse(ChmCommons.copyOfRange(data,
+                (int) chmItsHeader.getDirOffset(),
+                (int) chmItsHeader.getDirOffset()
+                + ChmConstants.CHM_ITSP_V1_LEN), chmItspHeader);
 
-            /* Creating instance of ChmDirListingContainer */
-            ChmDirectoryListingSet chmDirListCont = new ChmDirectoryListingSet(
-                    data, chmItsHeader, chmItspHeader);
-            int indexOfControlData = ChmCommons.indexOf(
-                    chmDirListCont.getDirectoryListingEntryList(),
-                    ChmConstants.CONTROL_DATA);
+        /* Creating instance of ChmDirListingContainer */
+        ChmDirectoryListingSet chmDirListCont = new ChmDirectoryListingSet(
+                data, chmItsHeader, chmItspHeader);
+        int indexOfControlData = ChmCommons.indexOf(
+                chmDirListCont.getDirectoryListingEntryList(),
+                ChmConstants.CONTROL_DATA);
 
-            int indexOfResetTable = ChmCommons.indexOfResetTableBlock(data,
-                    ChmConstants.LZXC.getBytes());
-            byte[] dir_chunk = null;
-            if (indexOfResetTable > 0) {
-                // dir_chunk = Arrays.copyOfRange( data, indexOfResetTable,
-                // indexOfResetTable
-                // +
-                // chmDirListCont.getDirectoryListingEntryList().get(indexOfControlData).getLength());
-                dir_chunk = ChmCommons.copyOfRange(data, indexOfResetTable,
-                        indexOfResetTable
-                                + chmDirListCont.getDirectoryListingEntryList()
-                                        .get(indexOfControlData).getLength());
-            }
-
-            ChmLzxcControlData clcd = new ChmLzxcControlData();
-            clcd.parse(dir_chunk, clcd);
-            windowSize = (int) clcd.getWindowSize();
-        } catch (IOException e) {
-            e.printStackTrace();
+        int indexOfResetTable = ChmCommons.indexOfResetTableBlock(data,
+                ChmConstants.LZXC.getBytes());
+        byte[] dir_chunk = null;
+        if (indexOfResetTable > 0) {
+            // dir_chunk = Arrays.copyOfRange( data, indexOfResetTable,
+            // indexOfResetTable
+            // +
+            // chmDirListCont.getDirectoryListingEntryList().get(indexOfControlData).getLength());
+            dir_chunk = ChmCommons.copyOfRange(data, indexOfResetTable,
+                    indexOfResetTable
+                    + chmDirListCont.getDirectoryListingEntryList()
+                    .get(indexOfControlData).getLength());
         }
+
+        ChmLzxcControlData clcd = new ChmLzxcControlData();
+        clcd.parse(dir_chunk, clcd);
+        windowSize = (int) clcd.getWindowSize();
     }
 
     public void testChmLzxStateConstructor() throws TikaException {
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxcControlData.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxcControlData.java
index ddc9fc3a6..cbf990b83 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxcControlData.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxcControlData.java
@@ -19,7 +19,6 @@ package org.apache.tika.parser.chm;
 import junit.framework.Assert;
 import junit.framework.TestCase;
 
-import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.parser.chm.accessor.ChmDirectoryListingSet;
 import org.apache.tika.parser.chm.accessor.ChmItsfHeader;
 import org.apache.tika.parser.chm.accessor.ChmItspHeader;
@@ -34,9 +33,7 @@ public class TestChmLzxcControlData extends TestCase {
     private ChmLzxcControlData chmLzxcControlData = null;
 
     public void setUp() throws Exception {
-        byte[] data = TestUtils
-                .toByteArray(TikaInputStream.get(TestChmBlockInfo.class
-                        .getResource(TestParameters.chmFile)));
+        byte[] data = TestParameters.chmData;
         /* Creates and parses itsf header */
         ChmItsfHeader chmItsHeader = new ChmItsfHeader();
         // chmItsHeader.parse(Arrays.copyOfRange(data, 0,
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxcResetTable.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxcResetTable.java
index 96a0458b4..5d85cc9c3 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxcResetTable.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestChmLzxcResetTable.java
@@ -19,7 +19,7 @@ package org.apache.tika.parser.chm;
 
 import junit.framework.Assert;
 import junit.framework.TestCase;
-import org.apache.tika.io.TikaInputStream;
+
 import org.apache.tika.parser.chm.accessor.ChmDirectoryListingSet;
 import org.apache.tika.parser.chm.accessor.ChmItsfHeader;
 import org.apache.tika.parser.chm.accessor.ChmItspHeader;
@@ -33,9 +33,7 @@ public class TestChmLzxcResetTable extends TestCase {
     private ChmLzxcResetTable chmLzxcResetTable = null;
 
     public void setUp() throws Exception {
-        byte[] data = TestUtils
-                .toByteArray(TikaInputStream.get(TestChmBlockInfo.class
-                        .getResource(TestParameters.chmFile)));
+        byte[] data = TestParameters.chmData;
         /* Creates and parses itsf header */
         ChmItsfHeader chmItsfHeader = new ChmItsfHeader();
         // chmItsfHeader.parse(Arrays.copyOfRange(data, 0,
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestParameters.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestParameters.java
index f8cc11397..d22150f35 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestParameters.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestParameters.java
@@ -16,6 +16,10 @@
  */
 package org.apache.tika.parser.chm;
 
+import java.io.IOException;
+import java.io.InputStream;
+
+import org.apache.tika.io.IOUtils;
 import org.apache.tika.parser.chm.core.ChmCommons.EntryType;
 
 /**
@@ -36,7 +40,20 @@ public class TestParameters {
 
     static final int BUFFER_SIZE = 16384;
 
-    static final String chmFile = "/test-documents/testChm.chm";
+    static final byte[] chmData = readResource("/test-documents/testChm.chm");
+
+    private static byte[] readResource(String name) {
+        try {
+            InputStream stream = TestParameters.class.getResourceAsStream(name);
+            try {
+                return IOUtils.toByteArray(stream);
+            } finally {
+                stream.close();
+            }
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
 
     /* Verification points */
     static final String VP_CHM_MIME_TYPE = "Content-Type=application/x-chm";
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestPmgiHeader.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestPmgiHeader.java
index 076123d87..5e9df682a 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestPmgiHeader.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestPmgiHeader.java
@@ -14,23 +14,18 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.tika.parser.chm;
 
 import junit.framework.Assert;
 import junit.framework.TestCase;
-import org.apache.tika.io.TikaInputStream;
+
 import org.apache.tika.parser.chm.accessor.ChmPmgiHeader;
-import org.apache.tika.parser.chm.core.ChmCommons;
 
 public class TestPmgiHeader extends TestCase {
     ChmPmgiHeader chmPmgiHeader = null;
 
     public void setUp() throws Exception {
-        byte[] data = ChmCommons
-                .toByteArray(TikaInputStream.get(TestChmBlockInfo.class
-                        .getResource(TestParameters.chmFile)));
+        byte[] data = TestParameters.chmData;
         chmPmgiHeader = new ChmPmgiHeader();
         chmPmgiHeader.parse(data, chmPmgiHeader);
     }
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestPmglHeader.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestPmglHeader.java
index 0a1292997..0187aad45 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestPmglHeader.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestPmglHeader.java
@@ -14,12 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.tika.parser.chm;
 
 import junit.framework.Assert;
 import junit.framework.TestCase;
-import org.apache.tika.io.TikaInputStream;
+
 import org.apache.tika.parser.chm.accessor.ChmPmglHeader;
 import org.apache.tika.parser.chm.core.ChmCommons;
 import org.apache.tika.parser.chm.core.ChmConstants;
@@ -28,9 +27,7 @@ public class TestPmglHeader extends TestCase {
     ChmPmglHeader chmPmglHeader = null;
 
     public void setUp() throws Exception {
-        byte[] data = ChmCommons
-                .toByteArray(TikaInputStream.get(TestChmBlockInfo.class
-                        .getResource(TestParameters.chmFile)));
+        byte[] data = TestParameters.chmData;
         chmPmglHeader = new ChmPmglHeader();
         chmPmglHeader.parse(ChmCommons.copyOfRange(data,
                 ChmConstants.START_PMGL, ChmConstants.START_PMGL
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestUtils.java b/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestUtils.java
deleted file mode 100644
index b25881ef2..000000000
--- a/tika-parsers/src/test/java/org/apache/tika/parser/chm/TestUtils.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.tika.parser.chm;
-
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-
-import org.apache.tika.exception.TikaException;
-
-public class TestUtils {
-    /**
-     * Converts InputStream to byte array
-     * 
-     * @param is
-     *            InputStream
-     * @return byte[]
-     * 
-     * @throws IOException
-     * @throws TikaException 
-     */
-    public static byte[] toByteArray(InputStream is) throws IOException, TikaException {
-        synchronized (is) {
-            if (is != null) {
-                ByteArrayOutputStream buffer = new ByteArrayOutputStream();
-                int nRead;
-                byte[] data = new byte[TestParameters.BUFFER_SIZE];
-                while ((nRead = is.read(data, 0, data.length)) != -1) {
-                    buffer.write(data, 0, nRead);
-                }
-                buffer.flush();
-                try {
-                    is.close();
-                    buffer.close();
-                } catch (Exception e) {
-                    new TikaException(e.getMessage());
-                }
-                return buffer.toByteArray();
-            } else
-                throw new IOException("InputStream is null");
-        }
-    }
-}
