diff --git a/src/main/java/org/apache/commons/crypto/random/JavaSecureRandom.java b/src/main/java/org/apache/commons/crypto/random/JavaSecureRandom.java
index 86333bc1..60b8448a 100644
--- a/src/main/java/org/apache/commons/crypto/random/JavaSecureRandom.java
+++ b/src/main/java/org/apache/commons/crypto/random/JavaSecureRandom.java
@@ -38,8 +38,10 @@ public class JavaSecureRandom implements SecureRandom {
    * Constructs a {@link org.apache.commons.crypto.random.JavaSecureRandom}.
    *
    * @param properties the configuration properties.
+   * @throws NoSuchAlgorithmException if no Provider supports a SecureRandomSpi implementation for
+   *         the specified algorithm.
    */
-  public JavaSecureRandom(Properties properties) {
+  public JavaSecureRandom(Properties properties) throws NoSuchAlgorithmException {
     try {
       instance = java.security.SecureRandom
           .getInstance(properties.getProperty(
@@ -47,6 +49,7 @@ public JavaSecureRandom(Properties properties) {
               ConfigurationKeys.COMMONS_CRYPTO_SECURE_RANDOM_JAVA_ALGORITHM_DEFAULT));
     } catch (NoSuchAlgorithmException e) {
       LOG.error("Failed to create java secure random due to error: " + e);
+      throw e;
     }
   }
 
diff --git a/src/main/java/org/apache/commons/crypto/random/OpensslSecureRandom.java b/src/main/java/org/apache/commons/crypto/random/OpensslSecureRandom.java
index 3794fde1..2ad32445 100644
--- a/src/main/java/org/apache/commons/crypto/random/OpensslSecureRandom.java
+++ b/src/main/java/org/apache/commons/crypto/random/OpensslSecureRandom.java
@@ -17,6 +17,7 @@
  */
 package org.apache.commons.crypto.random;
 
+import java.security.NoSuchAlgorithmException;
 import java.util.Properties;
 import java.util.Random;
 
@@ -72,8 +73,10 @@ public static boolean isNativeCodeLoaded() {
    * Constructs a {@link org.apache.commons.crypto.random.OpensslSecureRandom}.
    *
    * @param props the configuration properties.
+   * @throws NoSuchAlgorithmException if no Provider supports a SecureRandomSpi implementation for
+   *         the specified algorithm.
    */
-  public OpensslSecureRandom(Properties props) {
+  public OpensslSecureRandom(Properties props) throws NoSuchAlgorithmException {
     if (!nativeEnabled) {
       fallback = new JavaSecureRandom(props);
     }
diff --git a/src/main/java/org/apache/commons/crypto/random/SecureRandomFactory.java b/src/main/java/org/apache/commons/crypto/random/SecureRandomFactory.java
index 47d4fa86..3e428572 100644
--- a/src/main/java/org/apache/commons/crypto/random/SecureRandomFactory.java
+++ b/src/main/java/org/apache/commons/crypto/random/SecureRandomFactory.java
@@ -17,6 +17,7 @@
  */
 package org.apache.commons.crypto.random;
 
+import java.security.GeneralSecurityException;
 import java.util.Properties;
 
 import org.slf4j.Logger;
@@ -41,10 +42,11 @@ private SecureRandomFactory() {}
    * Gets a SecureRandom instance for specified props.
    *
    * @param props the configuration properties.
-   * @return SecureRandom the secureRandom object.Null value will be returned if no
-   *         SecureRandom classes with props.
+   * @return SecureRandom the secureRandom object.Null value will be returned if no SecureRandom
+   *         classes with props.
+   * @throws GeneralSecurityException if fail to create the {@link SecureRandom}.
    */
-  public static SecureRandom getSecureRandom(Properties props) {
+  public static SecureRandom getSecureRandom(Properties props) throws GeneralSecurityException {
     String secureRandomClasses = props.getProperty(
         COMMONS_CRYPTO_SECURE_RANDOM_CLASSES_KEY);
     if (secureRandomClasses == null) {
diff --git a/src/test/java/org/apache/commons/crypto/cipher/OpensslCipherTest.java b/src/test/java/org/apache/commons/crypto/cipher/OpensslCipherTest.java
index c1ef8498..9428e2ab 100644
--- a/src/test/java/org/apache/commons/crypto/cipher/OpensslCipherTest.java
+++ b/src/test/java/org/apache/commons/crypto/cipher/OpensslCipherTest.java
@@ -45,7 +45,7 @@ public void testInvalidAlgorithm() throws Exception {
     Assume.assumeTrue(Openssl.getLoadingFailureReason() == null);
 
     try {
-      Openssl cipher = Openssl.getInstance("AES2/CTR/NoPadding");
+      Openssl.getInstance("AES2/CTR/NoPadding");
       Assert.fail("Should specify correct algorithm.");
     } catch (NoSuchAlgorithmException e) {
       Assert.assertTrue(e.getMessage().contains("Doesn't support algorithm: AES2 and mode: CTR"));
@@ -58,7 +58,7 @@ public void testInvalidPadding() throws Exception {
     Assume.assumeTrue(Openssl.getLoadingFailureReason() == null);
 
     try {
-      Openssl cipher = Openssl.getInstance("AES/CTR/NoPadding2");
+      Openssl.getInstance("AES/CTR/NoPadding2");
       Assert.fail("Should specify correct padding.");
     } catch (NoSuchPaddingException e) {
       Assert.assertTrue(e.getMessage().contains("Doesn't support padding: NoPadding2"));
@@ -70,7 +70,7 @@ public void testInvalidPadding() throws Exception {
   public void testInvalidMode() throws Exception {
     try {
       Assume.assumeTrue(Openssl.getLoadingFailureReason() == null);
-      Openssl cipher = Openssl.getInstance("AES/CTR2/NoPadding");
+      Openssl.getInstance("AES/CTR2/NoPadding");
       Assert.fail("java.security.NoSuchAlgorithmException should be thrown.");
     } catch (NoSuchAlgorithmException e) {
       Assert.assertTrue(e.getMessage().contains("Doesn't support algorithm: AES and mode: CTR2"));
diff --git a/src/test/java/org/apache/commons/crypto/random/AbstractRandomTest.java b/src/test/java/org/apache/commons/crypto/random/AbstractRandomTest.java
index 6c6f6927..d2919eaf 100644
--- a/src/test/java/org/apache/commons/crypto/random/AbstractRandomTest.java
+++ b/src/test/java/org/apache/commons/crypto/random/AbstractRandomTest.java
@@ -17,14 +17,14 @@
  */
 package org.apache.commons.crypto.random;
 
-import java.io.IOException;
+import java.security.GeneralSecurityException;
 import java.util.Arrays;
 
 import org.junit.Test;
 
 public abstract class AbstractRandomTest {
 
-  public abstract SecureRandom getSecureRandom() throws IOException;
+  public abstract SecureRandom getSecureRandom() throws GeneralSecurityException;
 
   @Test(timeout=120000)
   public void testRandomBytes() throws Exception {
diff --git a/src/test/java/org/apache/commons/crypto/random/TestJavaSecureRandom.java b/src/test/java/org/apache/commons/crypto/random/TestJavaSecureRandom.java
index 26152b06..2bbed66f 100644
--- a/src/test/java/org/apache/commons/crypto/random/TestJavaSecureRandom.java
+++ b/src/test/java/org/apache/commons/crypto/random/TestJavaSecureRandom.java
@@ -17,7 +17,7 @@
  */
 package org.apache.commons.crypto.random;
 
-import java.io.IOException;
+import java.security.GeneralSecurityException;
 import java.util.Properties;
 
 import org.apache.commons.crypto.conf.ConfigurationKeys;
@@ -26,7 +26,7 @@
 public class TestJavaSecureRandom extends AbstractRandomTest {
 
   @Override
-  public SecureRandom getSecureRandom() throws IOException {
+  public SecureRandom getSecureRandom() throws GeneralSecurityException {
     Properties props = new Properties();
     props.setProperty(ConfigurationKeys.COMMONS_CRYPTO_SECURE_RANDOM_CLASSES_KEY,
         JavaSecureRandom.class.getName());
diff --git a/src/test/java/org/apache/commons/crypto/random/TestOpensslSecureRandom.java b/src/test/java/org/apache/commons/crypto/random/TestOpensslSecureRandom.java
index c9ff37be..13224ddc 100644
--- a/src/test/java/org/apache/commons/crypto/random/TestOpensslSecureRandom.java
+++ b/src/test/java/org/apache/commons/crypto/random/TestOpensslSecureRandom.java
@@ -17,7 +17,7 @@
  */
 package org.apache.commons.crypto.random;
 
-import java.io.IOException;
+import java.security.GeneralSecurityException;
 import java.util.Properties;
 
 import org.apache.commons.crypto.conf.ConfigurationKeys;
@@ -26,7 +26,7 @@
 public class TestOpensslSecureRandom extends AbstractRandomTest {
 
   @Override
-  public SecureRandom getSecureRandom() throws IOException {
+  public SecureRandom getSecureRandom() throws GeneralSecurityException {
     Properties props = new Properties();
     props.setProperty(ConfigurationKeys.COMMONS_CRYPTO_SECURE_RANDOM_CLASSES_KEY,
         OpensslSecureRandom.class.getName());
diff --git a/src/test/java/org/apache/commons/crypto/random/TestOsSecureRandom.java b/src/test/java/org/apache/commons/crypto/random/TestOsSecureRandom.java
index 138f7669..de885114 100644
--- a/src/test/java/org/apache/commons/crypto/random/TestOsSecureRandom.java
+++ b/src/test/java/org/apache/commons/crypto/random/TestOsSecureRandom.java
@@ -17,13 +17,12 @@
  */
 package org.apache.commons.crypto.random;
 
-import java.io.IOException;
 import java.util.Properties;
 
 public class TestOsSecureRandom extends AbstractRandomTest{
 
   @Override
-  public SecureRandom getSecureRandom() throws IOException {
+  public SecureRandom getSecureRandom() {
     return new OsSecureRandom(new Properties());
   }
 }
