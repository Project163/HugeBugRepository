diff --git a/src/java/org/apache/commons/configuration/ConfigurationUtils.java b/src/java/org/apache/commons/configuration/ConfigurationUtils.java
index 294dab54..1a325290 100644
--- a/src/java/org/apache/commons/configuration/ConfigurationUtils.java
+++ b/src/java/org/apache/commons/configuration/ConfigurationUtils.java
@@ -188,7 +188,11 @@ public final class ConfigurationUtils
         else
         {
             HierarchicalConfiguration hc = new HierarchicalConfiguration();
+            // Workaround for problem with copy()
+            boolean delimiterParsingStatus = hc.isDelimiterParsingDisabled();
+            hc.setDelimiterParsingDisabled(true);
             ConfigurationUtils.copy(conf, hc);
+            hc.setDelimiterParsingDisabled(delimiterParsingStatus);
             return hc;
         }
     }
diff --git a/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java b/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java
index 334f5478..5af480bf 100644
--- a/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java
@@ -558,6 +558,17 @@ public class TestCombinedConfiguration extends TestCase
         }
     }
 
+    /**
+     * Tests whether escaped list delimiters are treated correctly.
+     */
+    public void testEscapeListDelimiters()
+    {
+        PropertiesConfiguration sub = new PropertiesConfiguration();
+        sub.addProperty("test.pi", "3\\,1415");
+        config.addConfiguration(sub);
+        assertEquals("Wrong value", "3,1415", config.getString("test.pi"));
+    }
+
     /**
      * Helper method for writing a file.
      *
diff --git a/src/test/org/apache/commons/configuration/TestConfigurationUtils.java b/src/test/org/apache/commons/configuration/TestConfigurationUtils.java
index dd42076e..f3781abf 100644
--- a/src/test/org/apache/commons/configuration/TestConfigurationUtils.java
+++ b/src/test/org/apache/commons/configuration/TestConfigurationUtils.java
@@ -48,10 +48,10 @@ public class TestConfigurationUtils extends TestCase
 
         config.setProperty("two", "2");
         assertEquals("String representation of a configuration", "one=1" + lineSeparator + "two=2" , ConfigurationUtils.toString(config));
-        
+
         config.clearProperty("one");
         assertEquals("String representation of a configuration", "two=2" , ConfigurationUtils.toString(config));
-                
+
         config.setProperty("one","1");
         assertEquals("String representation of a configuration", "two=2" + lineSeparator + "one=1" , ConfigurationUtils.toString(config));
     }
@@ -75,7 +75,7 @@ public class TestConfigurationUtils extends TestCase
         URL url = ConfigurationUtils.getURL(null, "config.xml");
         assertEquals("file", url.getProtocol());
         assertEquals("", url.getHost());
-        
+
         assertEquals(
             "http://localhost:8080/webapp/config/config.xml",
             ConfigurationUtils
@@ -97,7 +97,7 @@ public class TestConfigurationUtils extends TestCase
         assertEquals(
             absFile.toURL(),
             ConfigurationUtils.getURL(null, absFile.getAbsolutePath()));
-        
+
 		assertEquals(absFile.toURL(),
 		ConfigurationUtils.getURL(absFile.getParent(), "config.xml"));
     }
@@ -180,10 +180,10 @@ public class TestConfigurationUtils extends TestCase
     {
         File directory = new File("target");
         File reference = new File(directory, "test.txt").getAbsoluteFile();
-        
+
         assertEquals(reference, ConfigurationUtils.getFile(null, reference.getAbsolutePath()));
         assertEquals(reference, ConfigurationUtils.getFile(directory.getAbsolutePath(), reference.getAbsolutePath()));
-        assertEquals(reference, ConfigurationUtils.getFile(directory.getAbsolutePath(), reference.getName()));        
+        assertEquals(reference, ConfigurationUtils.getFile(directory.getAbsolutePath(), reference.getName()));
         assertEquals(reference, ConfigurationUtils.getFile(directory.toURL().toString(), reference.getName()));
         assertEquals(reference, ConfigurationUtils.getFile("invalid", reference.toURL().toString()));
         assertEquals(reference, ConfigurationUtils.getFile(
@@ -251,6 +251,22 @@ public class TestConfigurationUtils extends TestCase
                 ConfigurationUtils.convertToHierarchical(null));
     }
 
+    /**
+     * Tests converting a configuration into a hierarchical one if some of its
+     * properties contain escaped list delimiter characters.
+     */
+    public void testConvertToHierarchicalDelimiters()
+    {
+        Configuration conf = new BaseConfiguration();
+        conf.addProperty("test.key", "1\\,2\\,3");
+        assertEquals("Wrong property value", "1,2,3", conf
+                .getString("test.key"));
+        HierarchicalConfiguration hc = ConfigurationUtils
+                .convertToHierarchical(conf);
+        assertEquals("Escaped list delimiters not correctly handled", "1,2,3",
+                hc.getString("test.key"));
+    }
+
     /**
      * Tests cloning a configuration that supports this operation.
      */
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 2f97127e..0ecc80bc 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,12 @@
 
   <body>
     <release version="1.5-SNAPSHOT" date="in SVN" description="">
+      <action dev="oheger" type="fix" issue="CONFIGURATION-283">
+        ConfigurationUtils.convertToHierarchical() now correctly deals with
+        property values containing escaped list delimiters. This also affects
+        CombinedConfiguration when sub configurations with such property values
+        are contained.
+      </action>
       <action dev="oheger" type="fix" issue="CONFIGURATION-275">
         AbstractConfiguration.addProperty() now correctly deals with list and
         array properties if delimiter parsing is disabled.
