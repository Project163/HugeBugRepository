diff --git a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializerTest.java b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializerTest.java
index e535b54b..fe658d59 100644
--- a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializerTest.java
+++ b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializerTest.java
@@ -37,6 +37,7 @@ import javax.json.bind.JsonbConfig;
 import javax.json.bind.annotation.JsonbTransient;
 import javax.json.bind.annotation.JsonbTypeDeserializer;
 import javax.json.bind.annotation.JsonbTypeSerializer;
+import javax.json.bind.config.PropertyOrderStrategy;
 import javax.json.bind.serializer.DeserializationContext;
 import javax.json.bind.serializer.JsonbDeserializer;
 import javax.json.bind.serializer.JsonbSerializer;
@@ -51,7 +52,21 @@ import org.junit.Test;
 
 public class SerializerTest {
     @Rule
-    public final JsonbRule jsonb = new JsonbRule();
+    public final JsonbRule jsonb = new JsonbRule()
+            .withPropertyOrderStrategy(PropertyOrderStrategy.LEXICOGRAPHICAL);
+
+    @Test
+    public void passthroughSerializer() {
+        final NameHolder nameHolder = new NameHolder();
+        nameHolder.name = new Named();
+        nameHolder.name.name = "Test String";
+        nameHolder.name.detailName = new DetailName();
+        nameHolder.name.detailName.name = "Another Test String";
+        assertEquals(
+                "{\"detailName\":{\"name\":\"Another Test String\",\"detail\":true},\"name\":{\"name\":\"Test String\"}}",
+                jsonb.toJson(nameHolder));
+
+    }
 
     @Test
     public void typeSerializer() {
@@ -455,6 +470,39 @@ public class SerializerTest {
         }
     }
 
+    public static class NameHolder {
+        @JsonbTypeSerializer(FooPassthroughSerializer.class)
+        public Named name;
+    }
+
+    public static class Named {
+        public String name;
+
+        @JsonbTypeSerializer(DetailNameSerializer.class)
+        public DetailName detailName;
+    }
+
+    public static class DetailName {
+        public String name;
+    }
+
+    public static class DetailNameSerializer implements JsonbSerializer<DetailName> {
+        @Override
+        public void serialize(final DetailName foo, final JsonGenerator jsonGenerator,
+                              final SerializationContext serializationContext) {
+            serializationContext.serialize(foo, jsonGenerator);
+            jsonGenerator.write("detail", true);
+        }
+    }
+
+    public static class FooPassthroughSerializer implements JsonbSerializer<Named> {
+        @Override
+        public void serialize(final Named foo, final JsonGenerator jsonGenerator,
+                              final SerializationContext serializationContext) {
+            serializationContext.serialize(foo, jsonGenerator);
+        }
+    }
+
     public static class StringHolder implements Holder<String> {
         private String instance = "Test";
 
diff --git a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/test/JsonbRule.java b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/test/JsonbRule.java
index 024d3caa..bd164fa5 100644
--- a/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/test/JsonbRule.java
+++ b/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/test/JsonbRule.java
@@ -27,6 +27,7 @@ import java.lang.reflect.Type;
 import javax.json.JsonValue;
 import javax.json.bind.Jsonb;
 import javax.json.bind.JsonbBuilder;
+import javax.json.bind.JsonbConfig;
 import javax.json.bind.JsonbException;
 
 import org.apache.johnzon.jsonb.api.experimental.JsonbExtension;
@@ -37,12 +38,19 @@ import org.junit.runners.model.Statement;
 public class JsonbRule implements TestRule, Jsonb, JsonbExtension {
     private Jsonb jsonb;
 
+    private final JsonbConfig config = new JsonbConfig();
+
+    public JsonbRule withPropertyOrderStrategy(final String propertyOrderStrategy) {
+        config.withPropertyOrderStrategy(propertyOrderStrategy);
+        return this;
+    }
+
     @Override
-    public Statement apply(Statement statement, Description description) {
+    public Statement apply(final Statement statement, final Description description) {
         return new Statement() {
             @Override
             public void evaluate() throws Throwable {
-                try (final Jsonb jsonb = JsonbBuilder.create()) {
+                try (final Jsonb jsonb = JsonbBuilder.create(config)) {
                     JsonbRule.this.jsonb = jsonb;
                     statement.evaluate();
                 } finally {
