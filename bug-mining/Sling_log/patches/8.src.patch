diff --git a/src/main/java/org/apache/sling/commons/log/internal/slf4j/SlingLoggerWriter.java b/src/main/java/org/apache/sling/commons/log/internal/slf4j/SlingLoggerWriter.java
index 59f8717..2c91409 100644
--- a/src/main/java/org/apache/sling/commons/log/internal/slf4j/SlingLoggerWriter.java
+++ b/src/main/java/org/apache/sling/commons/log/internal/slf4j/SlingLoggerWriter.java
@@ -19,6 +19,7 @@
 package org.apache.sling.commons.log.internal.slf4j;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStreamWriter;
@@ -350,20 +351,30 @@ class SlingLoggerWriter extends Writer {
     }
 
     private Writer createWriter() throws IOException {
-        if (file == null) {
-            return new OutputStreamWriter(System.out) {
-                @Override
-                public void close() {
-                    // not really !!
-                }
-            };
+        if ( file != null ) {
+            try {
+                // ensure parent path of the file to create
+                file.getParentFile().mkdirs();
+        
+                // open the file in append mode to not overwrite an existing
+                // log file from a previous instance running
+                return new OutputStreamWriter(new FileOutputStream(file, true));
+            } catch ( FileNotFoundException e) {
+                System.out.println("Unable to open "+file.getAbsolutePath()+" due to "+e.getMessage());
+                System.out.println("Defaulting to stdout");
+            } catch ( SecurityException e) {
+                System.out.println("Unable to open "+file.getAbsolutePath()+" due to "+e.getMessage());
+                System.out.println("Defaulting to stdout");
+            }
+            file = null;
+            path = null;
         }
-
-        // ensure parent path of the file to create
-        file.getParentFile().mkdirs();
-
-        // open the file in append mode to not overwrite an existing
-        // log file from a previous instance running
-        return new OutputStreamWriter(new FileOutputStream(file, true));
+        
+        return new OutputStreamWriter(System.out) {
+            @Override
+            public void close() {
+                // not really !!
+            }
+        };        
     }
 }
diff --git a/src/test/java/org/apache/sling/commons/log/internal/slf4j/SlingLogWriterTest.java b/src/test/java/org/apache/sling/commons/log/internal/slf4j/SlingLogWriterTest.java
index a2f9ffc..4d10e99 100644
--- a/src/test/java/org/apache/sling/commons/log/internal/slf4j/SlingLogWriterTest.java
+++ b/src/test/java/org/apache/sling/commons/log/internal/slf4j/SlingLogWriterTest.java
@@ -229,6 +229,54 @@ public class SlingLogWriterTest extends AbstractSlingLogTest {
         assertTime("'.'yyyy-MM-dd", "");
         assertTime("'.'yyyy-MM-dd-mm", "'.'yyyy-MM-dd-mm");
     }
+    
+    public void test_create_denied_parent() throws IOException {
+        File baseFile = getBaseFile();
+        File protectedParent = new File(baseFile,"protected");
+        protectedParent.mkdirs();
+        File loggingParent = new File(protectedParent,"logging");
+        protectedParent.setExecutable(false);
+        protectedParent.setWritable(false);
+        try{
+            assertFalse(protectedParent.canWrite());
+            SlingLoggerWriter writer = createLogWriter(loggingParent.getAbsolutePath(), -1, 10);
+            assertNotNull(writer);
+            assertNull(writer.getFile());
+            assertNull(writer.getPath());
+            writer.append("Testing Stdout");
+        } finally {
+            try {
+                protectedParent.setExecutable(true);
+                protectedParent.setWritable(true);
+            } catch ( Exception e ) {
+                // no need.
+            }
+        }
+    }
+
+    public void test_create_denied() throws IOException {
+        File baseFile = getBaseFile();
+        File protectedParent = new File(baseFile,"protected");
+        File loggingParent = new File(protectedParent,"logging");
+        loggingParent.mkdirs();
+        loggingParent.setWritable(false);
+        protectedParent.setExecutable(false);
+        try {
+            assertFalse(loggingParent.canWrite());
+            SlingLoggerWriter writer = createLogWriter(loggingParent.getAbsolutePath(), -1, 10);
+            assertNotNull(writer);
+            assertNull(writer.getFile());
+            assertNull(writer.getPath());
+            writer.append("Testing Stdout");
+        } finally {
+            try {
+                protectedParent.setExecutable(true);
+                protectedParent.setWritable(true);
+            } catch ( Exception e ) {
+                // no need.
+            }
+        }
+    }
 
     private SlingLoggerWriter createLogWriter(String file, int numFiles,
             long size) throws IOException {
