diff --git a/src/java/org/apache/commons/configuration/SubnodeConfiguration.java b/src/java/org/apache/commons/configuration/SubnodeConfiguration.java
index 6dfab44a..cba4b560 100644
--- a/src/java/org/apache/commons/configuration/SubnodeConfiguration.java
+++ b/src/java/org/apache/commons/configuration/SubnodeConfiguration.java
@@ -21,6 +21,7 @@ import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 
+import org.apache.commons.configuration.interpol.ConfigurationInterpolator;
 import org.apache.commons.configuration.tree.ConfigurationNode;
 
 /**
@@ -326,14 +327,16 @@ public class SubnodeConfiguration extends HierarchicalConfiguration
     }
 
     /**
-     * Performs interpolation. This implementation will ask the parent
-     * configuration to perform the interpolation so that variables can be
-     * evaluated in the global context.
+     * Creates a ConfigurationInterpolator with a chain to the parent's
+     * interpolator. 
      *
-     * @param value the value to be interpolated
+     * @return the new interpolator
      */
-    protected Object interpolate(Object value)
-    {
-        return getParent().interpolate(value);
+    @Override
+    protected ConfigurationInterpolator createInterpolator() {
+        ConfigurationInterpolator interpolator = super.createInterpolator();
+        interpolator.setParentInterpolator(getParent().getInterpolator());
+        return interpolator;
     }
+    
 }
diff --git a/src/java/org/apache/commons/configuration/interpol/ConfigurationInterpolator.java b/src/java/org/apache/commons/configuration/interpol/ConfigurationInterpolator.java
index 6103ad30..ddca9710 100644
--- a/src/java/org/apache/commons/configuration/interpol/ConfigurationInterpolator.java
+++ b/src/java/org/apache/commons/configuration/interpol/ConfigurationInterpolator.java
@@ -286,12 +286,19 @@ public class ConfigurationInterpolator extends StrLookup
             String prefix = var.substring(0, prefixPos);
             String name = var.substring(prefixPos + 1);
             String value = fetchLookupForPrefix(prefix).lookup(name);
+            if (value == null && getParentInterpolator() != null) {
+                value = getParentInterpolator().fetchLookupForPrefix(prefix).lookup(name);
+            }
             if (value != null)
             {
                 return value;
-            }
+            } 
+        }
+        String value = fetchNoPrefixLookup().lookup(var);
+        if (value == null && getParentInterpolator() != null) {
+            value = getParentInterpolator().fetchNoPrefixLookup().lookup(var);
         }
-        return fetchNoPrefixLookup().lookup(var);
+        return value;
     }
 
     /**
@@ -304,17 +311,7 @@ public class ConfigurationInterpolator extends StrLookup
      */
     protected StrLookup fetchNoPrefixLookup()
     {
-        StrLookup lookup = null;
-        if (getDefaultLookup() != null) { 
-            lookup = getDefaultLookup();
-        }
-        if (lookup == null) { 
-            ConfigurationInterpolator parent = getParentInterpolator();
-            lookup = (parent == null) 
-                ? StrLookup.noneLookup() 
-                : parent.fetchNoPrefixLookup();
-        }
-        return lookup;
+        return (getDefaultLookup() != null) ? getDefaultLookup() : StrLookup.noneLookup();
     }
 
     /**
@@ -331,10 +328,7 @@ public class ConfigurationInterpolator extends StrLookup
         StrLookup lookup = (StrLookup) localLookups.get(prefix);
         if (lookup == null)
         {
-            ConfigurationInterpolator parent = getParentInterpolator();
-            lookup = (parent == null) 
-                ? StrLookup.noneLookup() 
-                : parent.fetchLookupForPrefix(prefix);
+            lookup = StrLookup.noneLookup();
         }
         return lookup;
     }
diff --git a/src/test/org/apache/commons/configuration/TestSubnodeConfiguration.java b/src/test/org/apache/commons/configuration/TestSubnodeConfiguration.java
index cd1feaae..8bcf1f20 100644
--- a/src/test/org/apache/commons/configuration/TestSubnodeConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestSubnodeConfiguration.java
@@ -333,10 +333,27 @@ public class TestSubnodeConfiguration extends TestCase
         }
     }
 
+    /**
+     * An additional test for interpolation when the configurationAt() method is
+     * involved for a local interpolation.
+     */
+    public void testLocalInterpolationFromConfigurationAt()
+    {
+        parent.addProperty("base.dir", "/home/foo");
+        parent.addProperty("test.absolute.dir.dir1", "${base.dir}/path1");
+        parent.addProperty("test.absolute.dir.dir2", "${dir1}");
+
+        Configuration sub = parent.configurationAt("test.absolute.dir");
+        assertEquals("Wrong interpolation in subnode",
+            "/home/foo/path1", sub.getString("dir1"));
+        assertEquals("Wrong local interpolation in subnode",
+            "/home/foo/path1", sub.getString("dir2"));
+    }
+
     /**
      * Tests manipulating the interpolator.
      */
-    public void todoTestInterpolator()
+    public void testInterpolator()
     {
         parent.addProperty("tablespaces.tablespace.name", "default");
         parent.addProperty("tablespaces.tablespace(-1).name", "test");
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 0eb0690a..c215bc3e 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -37,9 +37,23 @@
       <action dev="rgoers" type="fix" issue="CONFIGURATION-361">
         MultiFileHierarchicalConfiguration was not using basepath to
         construct the file url. It also threw an exception if the
-        file pattern resolved to a non-existant file. This is now
+        file pattern resolved to a non-existent file. This is now
         configurable.
       </action>
+      <action dev="joehni" type="update">
+        <fixes issue="CONFIGURATION-375" />
+        <fixes issue="CONFIGURATION-376" />
+        <fixes issue="CONFIGURATION-377" />
+        Align interpolation functionality of SubnodeConfiguration and
+        SubsetConfiguration. SubsetConfiguration will now also interpolate
+        keys of the parent configuration or use the local lookups of its
+        parent. SubnodeConfiguration is in turn now able to lookup local
+        keys as well.
+      </action>
+      <action dev="joehni" type="fix" issue="CONFIGURATION-369">
+        SubsetConfiguration did not use locally registered lookups of its
+        interpolator.
+      </action>
       <action dev="oheger" type="fix" issue="CONFIGURATION-359">
         Fixed broken links to the API documentation in the user's guide.
       </action>
