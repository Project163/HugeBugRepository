diff --git a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/AdminControllerUtil.java b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/AdminControllerUtil.java
index 4fd7e44a..ef49e4af 100644
--- a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/AdminControllerUtil.java
+++ b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/AdminControllerUtil.java
@@ -56,47 +56,75 @@ public final class AdminControllerUtil {
         return "create".equals(action) || isDeleteOrUpdate(action);
     }
 
-    static void addNavigationMenusToModel(String selectedItem, Model model) {
-        final NavigationMenu topMenu = getTopMenu();
+    static void addNavigationMenusToModel(String selectedItem, Model model,  String referringPageId) {
+        final NavigationMenu topMenu = getTopMenu(referringPageId);
         model.addAttribute(topMenu.getName(), topMenu);
-        final NavigationMenu tabMenu = getTabMenu(selectedItem);
+        final NavigationMenu tabMenu = getTabMenu(selectedItem, referringPageId);
         model.addAttribute(tabMenu.getName(), tabMenu);
     }
 
     // For the time being hard coded NavigationMenu's
-    private static NavigationMenu getTopMenu() {
+    private static NavigationMenu getTopMenu(String referringPageId) {
         NavigationMenu menu = new NavigationMenu("topnav");
 
-        NavigationItem raveHome = new NavigationItem("page.general.back", null, "/");
-        menu.addNavigationItem(raveHome);
-
         NavigationItem logout = new NavigationItem("page.general.logout", null, "/j_spring_security_logout");
         menu.addNavigationItem(logout);
 
+        NavigationItem raveHome = new NavigationItem();
+        raveHome.setName("page.general.back");
+
+        if (referringPageId != null && !referringPageId.isEmpty()) {
+            raveHome.setUrl("/app/page/view/" + referringPageId);
+        } else {
+            raveHome.setUrl("/");
+        }
+        menu.addNavigationItem(raveHome);
+
         return menu;
     }
 
-    private static NavigationMenu getTabMenu(String selectedItem) {
+    private static NavigationMenu getTabMenu(String selectedItem, String referringPageId) {
         NavigationMenu menu = new NavigationMenu("tabs");
 
-        NavigationItem home = new NavigationItem("admin.home.shorttitle", null, "/app/admin/");
+        NavigationItem home = new NavigationItem("admin.home.shorttitle", null, null);
         home.setSelected("home".equals(selectedItem));
-        menu.addNavigationItem(home);
 
-        NavigationItem users = new NavigationItem("admin.users.shorttitle", null, "/app/admin/users");
+
+        NavigationItem users = new NavigationItem("admin.users.shorttitle", null, null);
         users.setSelected("users".equals(selectedItem));
-        menu.addNavigationItem(users);
 
-        NavigationItem widgets = new NavigationItem("admin.widgets.shorttitle", null, "/app/admin/widgets");
+
+        NavigationItem widgets = new NavigationItem("admin.widgets.shorttitle", null, null);
         widgets.setSelected("widgets".equals(selectedItem));
-        menu.addNavigationItem(widgets);
 
-        NavigationItem preferences = new NavigationItem("admin.preferences.shorttitle", null, "/app/admin/preferences");
+
+        NavigationItem preferences = new NavigationItem("admin.preferences.shorttitle", null, null);
         preferences.setSelected("preferences".equals(selectedItem));
-        menu.addNavigationItem(preferences);
 
-        NavigationItem categories = new NavigationItem("admin.category.shortTitle", null, "/app/admin/categories");
+
+        NavigationItem categories = new NavigationItem("admin.category.shortTitle", null, null);
         categories.setSelected("categories".equals(selectedItem));
+
+        // set url of nav items with or without the referring page id
+        if (referringPageId != null && !referringPageId.isEmpty()) {
+            home.setUrl("/app/admin?referringPageId=" + referringPageId);
+            users.setUrl("/app/admin/users?referringPageId=" + referringPageId);
+            widgets.setUrl("/app/admin/widgets?referringPageId=" + referringPageId);
+            preferences.setUrl("/app/admin/preferences?referringPageId=" + referringPageId);
+            categories.setUrl("/app/admin/categories?referringPageId=" + referringPageId);
+        } else {
+            home.setUrl("/app/admin");
+            users.setUrl("/app/admin/users");
+            widgets.setUrl("/app/admin/widgets");
+            preferences.setUrl("/app/admin/preferences");
+            categories.setUrl("/app/admin/categories");
+        }
+
+        // add nav items to menu
+        menu.addNavigationItem(home);
+        menu.addNavigationItem(users);
+        menu.addNavigationItem(widgets);
+        menu.addNavigationItem(preferences);
         menu.addNavigationItem(categories);
 
         return menu;
diff --git a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/AdminHomeController.java b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/AdminHomeController.java
index a17e3830..2f88eda4 100644
--- a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/AdminHomeController.java
+++ b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/AdminHomeController.java
@@ -19,11 +19,13 @@
 
 package org.apache.rave.portal.web.controller.admin;
 
+import org.apache.rave.portal.web.util.ModelKeys;
 import org.apache.rave.portal.web.util.ViewNames;
 import org.springframework.stereotype.Controller;
 import org.springframework.ui.Model;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.RequestParam;
 
 /**
  * Controller for the admin pages
@@ -33,8 +35,9 @@ import org.springframework.web.bind.annotation.RequestMethod;
 public class AdminHomeController {
 
     @RequestMapping(method = RequestMethod.GET)
-    public String viewDefault(Model model) {
-        AdminControllerUtil.addNavigationMenusToModel("home", model);
+    public String viewDefault(Model model, @RequestParam (required = false) String referringPageId) {
+        model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+        AdminControllerUtil.addNavigationMenusToModel("home", model, referringPageId);
         return ViewNames.ADMIN_HOME;
     }
 
diff --git a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/CategoryController.java b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/CategoryController.java
index d97eaae0..c1e35f79 100644
--- a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/CategoryController.java
+++ b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/CategoryController.java
@@ -45,8 +45,9 @@ public class CategoryController {
     private CategoryService categoryService;
 
     @RequestMapping(value = {"/admin/categories", "/admin/categories/"}, method = RequestMethod.GET)
-    public String getCategories(@RequestParam(required = false) final String action, Model model){
-        addNavigationMenusToModel(SELECTED_ITEM, model);
+    public String getCategories(@RequestParam(required = false) final String action,
+                                @RequestParam(required = false) String referringPageId,Model model){
+        addNavigationMenusToModel(SELECTED_ITEM, model, referringPageId);
 
         List<Category> categories = categoryService.getAll();
 
@@ -55,6 +56,7 @@ public class CategoryController {
         model.addAttribute(ModelKeys.CATEGORY, new CategoryImpl());
         // add tokencheck attribute for creating new category
         model.addAttribute(ModelKeys.TOKENCHECK, AdminControllerUtil.generateSessionToken());
+        model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
 
         if (isCreateDeleteOrUpdate(action)) {
             model.addAttribute("actionresult", action);
@@ -67,6 +69,7 @@ public class CategoryController {
     public String createCategory(@ModelAttribute CategoryImpl category,
                                  @ModelAttribute(ModelKeys.TOKENCHECK) String sessionToken,
                                  @RequestParam String token,
+                                 @RequestParam(required = false) String referringPageId,
                                  Model model,
                                  SessionStatus status) {
         checkTokens(sessionToken, token, status);
@@ -75,31 +78,34 @@ public class CategoryController {
         if (isValidRequest) {
             categoryService.create(category.getText(), creator);
         } else {
-            addNavigationMenusToModel(SELECTED_ITEM, model);
+            model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+            addNavigationMenusToModel(SELECTED_ITEM, model, referringPageId);
             return ViewNames.ADMIN_CATEGORIES;
         }
         status.setComplete();
-        return "redirect:/app/admin/categories?action=create";
+        return "redirect:/app/admin/categories?action=create&referringPageId=" + referringPageId;
     }
 
     @RequestMapping(value = {"/admin/category/update"}, method = RequestMethod.POST)
     public String updateCategory(@ModelAttribute(ModelKeys.CATEGORY) Category category,
                                  @ModelAttribute(ModelKeys.TOKENCHECK) String sessionToken,
                                  @RequestParam String token,
+                                 @RequestParam(required = false) String referringPageId,
                                  Model model,
                                  SessionStatus status){
         checkTokens(sessionToken, token, status);
+        model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
         User currentUser = userService.getAuthenticatedUser();
         boolean isValidRequest = validateRequest(category, currentUser);
         if (isValidRequest) {
             categoryService.update(category.getId(), category.getText(), currentUser);
         } else {
-            addNavigationMenusToModel(SELECTED_ITEM, model);
+            addNavigationMenusToModel(SELECTED_ITEM, model, referringPageId);
             return ViewNames.ADMIN_CATEGORY_DETAIL;
         }
         status.setComplete();
         model.asMap().clear();
-        return "redirect:/app/admin/categories?action=update";
+        return "redirect:/app/admin/categories?action=update&referringPageId=" + referringPageId;
     }
 
     @RequestMapping(value = {"/admin/category/delete"}, method = RequestMethod.POST)
@@ -107,12 +113,14 @@ public class CategoryController {
                                  @ModelAttribute(ModelKeys.TOKENCHECK) String sessionToken,
                                  @RequestParam String token,
                                  @RequestParam(required = false) String confirmdelete,
+                                 @RequestParam(required = false) String referringPageId,
                                  Model model,
                                  SessionStatus status){
         checkTokens(sessionToken, token, status);
         User creator = userService.getAuthenticatedUser();
         if (!Boolean.parseBoolean(confirmdelete)) {
-            AdminControllerUtil.addNavigationMenusToModel(SELECTED_ITEM, model);
+            model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+            AdminControllerUtil.addNavigationMenusToModel(SELECTED_ITEM, model, referringPageId);
             model.addAttribute("missingConfirm", true);
             return ViewNames.ADMIN_CATEGORY_DETAIL;
         }
@@ -120,16 +128,19 @@ public class CategoryController {
         if (isValidRequest) {
             categoryService.delete(category);
         } else {
-            addNavigationMenusToModel(SELECTED_ITEM, model);
+            model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+            addNavigationMenusToModel(SELECTED_ITEM, model, referringPageId);
             return ViewNames.ADMIN_CATEGORY_DETAIL;
         }
         status.setComplete();
-        return "redirect:/app/admin/categories?action=delete";
+        return "redirect:/app/admin/categories?action=delete&referringPageId=" + referringPageId;
     }
 
     @RequestMapping(value = "/admin/category/edit", method = RequestMethod.GET)
-    public String editCategory(@RequestParam(required = true) String id, Model model) {
-        addNavigationMenusToModel(SELECTED_ITEM, model);
+    public String editCategory(@RequestParam(required = true) String id,
+                               @RequestParam(required = false) String referringPageId,Model model) {
+        model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+        addNavigationMenusToModel(SELECTED_ITEM, model, referringPageId);
 
         model.addAttribute(ModelKeys.TOKENCHECK, AdminControllerUtil.generateSessionToken());
         model.addAttribute(ModelKeys.CATEGORY, categoryService.get(id));
diff --git a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/PortalPreferenceController.java b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/PortalPreferenceController.java
index 86335da2..f499c5a8 100644
--- a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/PortalPreferenceController.java
+++ b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/PortalPreferenceController.java
@@ -59,8 +59,10 @@ public class PortalPreferenceController {
     private PortalPreferenceFormValidator formValidator;
 
     @RequestMapping(value = {"/admin/preferences", "/admin/preferences/"}, method = RequestMethod.GET)
-    public String viewPreferences(@RequestParam(required = false) final String action, Model model) {
-        addNavigationMenusToModel(SELECTED_ITEM, model);
+    public String viewPreferences(@RequestParam(required = false) final String action,
+                                  @RequestParam(required = false) String referringPageId,Model model) {
+        model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+        addNavigationMenusToModel(SELECTED_ITEM, model, referringPageId);
 
         final Map<String, PortalPreference> preferenceMap = preferenceService.getPreferencesAsMap();
 
@@ -74,8 +76,9 @@ public class PortalPreferenceController {
     }
 
     @RequestMapping(value = "/admin/preferencedetail/edit", method = RequestMethod.GET)
-    public String editPreferences(Model model) {
-        addNavigationMenusToModel(SELECTED_ITEM, model);
+    public String editPreferences(Model model, @RequestParam(required = false) String referringPageId) {
+        model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+        addNavigationMenusToModel(SELECTED_ITEM, model, referringPageId);
         final Map<String, PortalPreference> preferenceMap = preferenceService.getPreferencesAsMap();
 
         PortalPreferenceForm form = new PortalPreferenceForm(preferenceMap);
@@ -89,13 +92,15 @@ public class PortalPreferenceController {
     public String updatePreferences(@ModelAttribute("preferenceForm") PortalPreferenceForm form, BindingResult result,
                                     @ModelAttribute(ModelKeys.TOKENCHECK) String sessionToken,
                                     @RequestParam String token,
+                                    @RequestParam(required = false) String referringPageId,
                                     ModelMap modelMap,
                                     SessionStatus status) {
         checkTokens(sessionToken, token, status);
 
         formValidator.validate(form, result);
         if (result.hasErrors()) {
-            addNavigationMenusToModel(SELECTED_ITEM, (Model) modelMap);
+            modelMap.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+            addNavigationMenusToModel(SELECTED_ITEM, (Model) modelMap, referringPageId);
             return ViewNames.ADMIN_PREFERENCE_DETAIL;
         }
 
@@ -107,7 +112,7 @@ public class PortalPreferenceController {
 
         modelMap.clear();
         status.setComplete();
-        return "redirect:/app/admin/preferences?action=update";
+        return "redirect:/app/admin/preferences?action=update&referringPageId=" + referringPageId;
     }
 
     void setFormValidator(PortalPreferenceFormValidator formValidator) {
diff --git a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/UserController.java b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/UserController.java
index 76912155..da8fb7a7 100644
--- a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/UserController.java
+++ b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/UserController.java
@@ -95,8 +95,10 @@ public class UserController {
     @RequestMapping(value = {"/admin/users"}, method = RequestMethod.GET)
     public String viewUsers(@RequestParam(required = false, defaultValue = "0") int offset,
                             @RequestParam(required = false) final String action,
+                            @RequestParam(required = false) String referringPageId,
                             Model model) {
-        addNavigationMenusToModel(SELECTED_ITEM, model);
+        model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+        addNavigationMenusToModel(SELECTED_ITEM, model, referringPageId);
         final SearchResult<User> users = userService.getLimitedListOfUsers(offset, getPageSize());
         model.addAttribute(ModelKeys.SEARCHRESULT, users);
 
@@ -109,8 +111,10 @@ public class UserController {
 
     @RequestMapping(value = "/admin/users/search", method = RequestMethod.GET)
     public String searchUsers(@RequestParam(required = true) String searchTerm,
-                              @RequestParam(required = false, defaultValue = "0") int offset, Model model) {
-        addNavigationMenusToModel(SELECTED_ITEM, model);
+                              @RequestParam(required = false, defaultValue = "0") int offset,
+                              @RequestParam(required = false) String referringPageId,Model model) {
+        model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+        addNavigationMenusToModel(SELECTED_ITEM, model, referringPageId);
         final SearchResult<User> users = userService.getUsersByFreeTextSearch(
                 searchTerm, offset, getPageSize());
         model.addAttribute(ModelKeys.SEARCH_TERM, searchTerm);
@@ -119,8 +123,11 @@ public class UserController {
     }
 
     @RequestMapping(value = "/admin/userdetail/{userid}", method = RequestMethod.GET)
-    public String viewUserDetail(@PathVariable("userid") String userid, Model model) {
-        addNavigationMenusToModel(SELECTED_ITEM, model);
+    public String viewUserDetail(@PathVariable("userid") String userid,
+                                 @RequestParam(required = false) String referringPageId,
+                                 Model model) {
+        model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+        addNavigationMenusToModel(SELECTED_ITEM, model,referringPageId );
         model.addAttribute(ModelKeys.USER, userService.getUserById(userid));
         model.addAttribute(ModelKeys.TOKENCHECK, AdminControllerUtil.generateSessionToken());
         return ViewNames.ADMIN_USERDETAIL;
@@ -130,19 +137,21 @@ public class UserController {
     public String updateUserDetail(@ModelAttribute User user, BindingResult result,
                                    @ModelAttribute(ModelKeys.TOKENCHECK) String sessionToken,
                                    @RequestParam() String token,
+                                   @RequestParam(required = false) String referringPageId,
                                    ModelMap modelMap,
                                    SessionStatus status) {
         checkTokens(sessionToken, token, status);
         user.setConfirmPassword(user.getPassword());
         userProfileValidator.validate(user, result);
         if (result.hasErrors()) {
-            AdminControllerUtil.addNavigationMenusToModel(SELECTED_ITEM, (Model) modelMap);
+            modelMap.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+            AdminControllerUtil.addNavigationMenusToModel(SELECTED_ITEM, (Model) modelMap, referringPageId);
             return ViewNames.ADMIN_USERDETAIL;
         }
         userService.updateUserProfile(user);
         modelMap.clear();
         status.setComplete();
-        return "redirect:/app/admin/users?action=update";
+        return "redirect:/app/admin/users?action=update&referringPageId=" + referringPageId;
     }
 
     @RequestMapping(value = "/admin/userdetail/delete", method = RequestMethod.POST)
@@ -150,24 +159,27 @@ public class UserController {
                                    @ModelAttribute(ModelKeys.TOKENCHECK) String sessionToken,
                                    @RequestParam String token,
                                    @RequestParam(required = false) String confirmdelete,
+                                   @RequestParam(required = false) String referringPageId,
                                    ModelMap modelMap,
                                    SessionStatus status) {
         checkTokens(sessionToken, token, status);
         if (!Boolean.parseBoolean(confirmdelete)) {
-            AdminControllerUtil.addNavigationMenusToModel(SELECTED_ITEM, (Model) modelMap);
+            modelMap.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+            AdminControllerUtil.addNavigationMenusToModel(SELECTED_ITEM, (Model) modelMap, referringPageId);
             modelMap.addAttribute("missingConfirm", true);
             return ViewNames.ADMIN_USERDETAIL;
         }
         userService.deleteUser(user.getId());
         modelMap.clear();
         status.setComplete();
-        return "redirect:/app/admin/users?action=delete";
+        return "redirect:/app/admin/users?action=delete&referringPageId=" + referringPageId;
     }
 
     @RequestMapping(method = RequestMethod.GET, value = {"/admin/adduser"})
-    public String setUpForm(ModelMap model) {
+    public String setUpForm(ModelMap model, @RequestParam(required = false) String referringPageId) {
         logger.debug("Initializing new account form");
-        AdminControllerUtil.addNavigationMenusToModel(SELECTED_ITEM, (Model) model);
+        model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+        AdminControllerUtil.addNavigationMenusToModel(SELECTED_ITEM, (Model) model, referringPageId);
         model.addAttribute(ModelKeys.NEW_USER, new UserImpl());
         return ViewNames.ADMIN_NEW_ACCOUNT;
 
@@ -175,22 +187,25 @@ public class UserController {
 
     @RequestMapping(value = {"/admin/newaccount", "/admin/newaccount/*"}, method = RequestMethod.POST)
     public String create(@ModelAttribute(value = "newUser") UserForm newUser, BindingResult results, Model model,
+                         @RequestParam(required = false) String referringPageId,
                          RedirectAttributes redirectAttributes) {
         logger.debug("Creating a new user account");
         model.addAttribute(ModelKeys.NEW_USER, newUser);
         newAccountValidator.validate(newUser, results);
         if (results.hasErrors()) {
             logger.info("newaccount.jsp: shows validation errors");
-            addNavigationMenusToModel(SELECTED_ITEM, model);
+            model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+            addNavigationMenusToModel(SELECTED_ITEM, model, referringPageId);
             return ViewNames.ADMIN_NEW_ACCOUNT;
         }
         try {
             logger.debug("newaccount.jsp: passed form validation");
             newAccountService.createNewAccount(ModelUtils.convert(newUser));
             redirectAttributes.addFlashAttribute(ModelKeys.REDIRECT_MESSAGE, messageSuccess);
-            return "redirect:/app/admin/users";
+            return "redirect:/app/admin/users?referringPageId=" +referringPageId;
         } catch (org.springframework.dao.IncorrectResultSizeDataAccessException ex) {
-            addNavigationMenusToModel(SELECTED_ITEM, model);
+            model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+            addNavigationMenusToModel(SELECTED_ITEM, model, referringPageId);
             logger.info("Account creation failed: ", ex);
             results.reject("Account already exists", "Unable to create account");
             return ViewNames.ADMIN_NEW_ACCOUNT;
@@ -202,7 +217,8 @@ public class UserController {
                 logger.error("Account creation failed: {}", ex.getMessage());
             }
             results.reject("Unable to create account:" + ex.getMessage(), "Unable to create account");
-            addNavigationMenusToModel(SELECTED_ITEM, model);
+            model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+            addNavigationMenusToModel(SELECTED_ITEM, model, referringPageId);
             return ViewNames.ADMIN_NEW_ACCOUNT;
         }
 
diff --git a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/WidgetController.java b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/WidgetController.java
index e2f7e678..d6d166a1 100644
--- a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/WidgetController.java
+++ b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/admin/WidgetController.java
@@ -77,8 +77,10 @@ public class WidgetController {
     @RequestMapping(value = "/admin/widgets", method = RequestMethod.GET)
     public String viewWidgets(@RequestParam(required = false, defaultValue = "0") int offset,
                               @RequestParam(required = false) final String action,
+                              @RequestParam(required = false) String referringPageId,
                               Model model) {
-        addNavigationMenusToModel(SELECTED_ITEM, model);
+        model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+        addNavigationMenusToModel(SELECTED_ITEM, model, referringPageId);
         final SearchResult<Widget> widgets =
                 widgetService.getLimitedListOfWidgets(offset, getPageSize());
         model.addAttribute(ModelKeys.SEARCHRESULT, widgets);
@@ -94,8 +96,10 @@ public class WidgetController {
     public String searchWidgets(@RequestParam(required = false) String searchTerm,
                                 @RequestParam(required = false) String widgettype,
                                 @RequestParam(required = false) String widgetstatus,
-                                @RequestParam(required = false, defaultValue = "0") int offset, Model model) {
-        addNavigationMenusToModel(SELECTED_ITEM, model);
+                                @RequestParam(required = false, defaultValue = "0") int offset,
+                                @RequestParam(required = false) String referringPageId, Model model) {
+        model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
+        addNavigationMenusToModel(SELECTED_ITEM, model, referringPageId);
         final SearchResult<Widget> widgets = widgetService.getWidgetsBySearchCriteria(searchTerm, widgettype,
                 widgetstatus, offset, getPageSize());
         model.addAttribute(ModelKeys.SEARCHRESULT, widgets);
@@ -106,8 +110,10 @@ public class WidgetController {
     }
 
     @RequestMapping(value = "/admin/widgetdetail/{widgetid}", method = RequestMethod.GET)
-    public String viewWidgetDetail(@PathVariable("widgetid") String widgetid, Model model) {
-        addNavigationMenusToModel(SELECTED_ITEM, model);
+    public String viewWidgetDetail(@PathVariable("widgetid") String widgetid,
+                                   @RequestParam(required = false) String referringPageId,Model model) {
+        addNavigationMenusToModel(SELECTED_ITEM, model, referringPageId);
+        model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
         model.addAttribute(ModelKeys.WIDGET, widgetService.getWidget(widgetid));
         model.addAttribute(ModelKeys.TOKENCHECK, AdminControllerUtil.generateSessionToken());
         model.addAttribute(ModelKeys.CATEGORIES, categoryService.getAll());
@@ -119,19 +125,21 @@ public class WidgetController {
     public String updateWidgetDetail(@ModelAttribute(ModelKeys.WIDGET) Widget widget, BindingResult result,
                                      @ModelAttribute(ModelKeys.TOKENCHECK) String sessionToken,
                                      @RequestParam String token,
+                                     @RequestParam(required = false) String referringPageId,
                                      ModelMap modelMap,
                                      SessionStatus status) {
         checkTokens(sessionToken, token, status);
         widgetValidator.validate(widget, result);
         if (result.hasErrors()) {
-            addNavigationMenusToModel(SELECTED_ITEM, (Model) modelMap);
+            addNavigationMenusToModel(SELECTED_ITEM, (Model) modelMap, referringPageId);
+            modelMap.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
             modelMap.addAttribute(ModelKeys.CATEGORIES, categoryService.getAll());
             return ViewNames.ADMIN_WIDGETDETAIL;
         }
         widgetService.updateWidget(widget);
         modelMap.clear();
         status.setComplete();
-        return "redirect:/app/admin/widgets?action=update";
+        return "redirect:/app/admin/widgets?action=update&referringPageId=" + referringPageId;
     }
 
     @ModelAttribute("widgetStatus")
diff --git a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/util/ControllerUtils.java b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/util/ControllerUtils.java
index e0c9e342..f9edf838 100644
--- a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/util/ControllerUtils.java
+++ b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/controller/util/ControllerUtils.java
@@ -79,7 +79,7 @@ public class ControllerUtils {
                 NavigationItem store = new NavigationItem("page.store.title", null, "/app/store?referringPageId=" + referringPageId);
                 menu.addNavigationItem(store);
             }
-            NavigationItem admin = getAdminItem();
+            NavigationItem admin = getAdminItem(referringPageId);
             menu.addNavigationItem(admin);
 
             NavigationItem logout = getLogoutItem();
@@ -91,7 +91,7 @@ public class ControllerUtils {
             NavigationItem back = getBackItem(referringPageId);
             menu.addNavigationItem(back);
 
-            NavigationItem admin = getAdminItem();
+            NavigationItem admin = getAdminItem(referringPageId);
             menu.addNavigationItem(admin);
 
             NavigationItem logout = getLogoutItem();
@@ -100,7 +100,7 @@ public class ControllerUtils {
             NavigationItem back = getBackItem(referringPageId);
             menu.addNavigationItem(back);
 
-            NavigationItem admin = getAdminItem();
+            NavigationItem admin = getAdminItem(referringPageId);
             menu.addNavigationItem(admin);
 
             NavigationItem logout = getLogoutItem();
@@ -117,7 +117,7 @@ public class ControllerUtils {
             NavigationItem back = getBackItem(referringPageId);
             menu.addNavigationItem(back);
 
-            NavigationItem admin = getAdminItem();
+            NavigationItem admin = getAdminItem(referringPageId);
             menu.addNavigationItem(admin);
 
             NavigationItem logout = getLogoutItem();
@@ -143,8 +143,15 @@ public class ControllerUtils {
         return back;
     }
 
-    private static NavigationItem getAdminItem() {
-        return new NavigationItem("page.general.toadmininterface", null, "/app/admin/");
+    private static NavigationItem getAdminItem(String referringPageId) {
+        NavigationItem admin = new NavigationItem();
+        admin.setName("page.general.toadmininterface");
+        if (referringPageId != null && !referringPageId.isEmpty()) {
+            admin.setUrl("/app/admin?referringPageId=" + referringPageId);
+        } else {
+            admin.setUrl("/app/admin");
+        }
+        return admin;
     }
 
     private static NavigationItem getLogoutItem() {
diff --git a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/AdminHomeControllerTest.java b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/AdminHomeControllerTest.java
index 500b4f66..54965f43 100644
--- a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/AdminHomeControllerTest.java
+++ b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/AdminHomeControllerTest.java
@@ -19,6 +19,7 @@
 
 package org.apache.rave.portal.web.controller.admin;
 
+import org.apache.rave.portal.web.util.ModelKeys;
 import org.apache.rave.portal.web.util.ViewNames;
 import org.junit.Before;
 import org.junit.Test;
@@ -27,6 +28,9 @@ import org.springframework.ui.Model;
 
 import static junit.framework.Assert.assertEquals;
 import static junit.framework.Assert.assertTrue;
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
 
 /**
  * Test for {@link AdminHomeController}
@@ -34,15 +38,17 @@ import static junit.framework.Assert.assertTrue;
 public class AdminHomeControllerTest {
 
     private static final String TABS = "tabs";
+    private static final String REFERRER_ID = "35";
 
     private AdminHomeController controller;
 
     @Test
     public void adminHome() throws Exception {
         Model model = new ExtendedModelMap();
-        String homeView = controller.viewDefault(model);
+        String homeView = controller.viewDefault(model, REFERRER_ID);
         assertEquals(ViewNames.ADMIN_HOME, homeView);
         assertTrue(model.containsAttribute(TABS));
+        assertThat((String) model.asMap().get(ModelKeys.REFERRING_PAGE_ID), is(equalTo(REFERRER_ID)));
     }
 
     @Before
diff --git a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/CategoryControllerTest.java b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/CategoryControllerTest.java
index 38c067b9..c480c193 100644
--- a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/CategoryControllerTest.java
+++ b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/CategoryControllerTest.java
@@ -35,6 +35,9 @@ import java.util.List;
 
 import static junit.framework.Assert.*;
 import static org.easymock.EasyMock.*;
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
 
 /**
  * Test for {@link CategoryController}
@@ -49,6 +52,7 @@ public class CategoryControllerTest {
     private static final String UPDATE = "update";
     private static final String DELETE = "delete";
     private static final String CREATE = "create";
+    private static final String REFERRER_ID = "35";
 
     @Before
     public void setup() {
@@ -68,7 +72,7 @@ public class CategoryControllerTest {
 
         Model model = new ExtendedModelMap();
 
-        String viewName = controller.getCategories("", model);
+        String viewName = controller.getCategories("",REFERRER_ID, model);
         verify(categoryService);
 
         assertEquals(ViewNames.ADMIN_CATEGORIES, viewName);
@@ -79,6 +83,7 @@ public class CategoryControllerTest {
         assertTrue(model.containsAttribute("topnav"));
         assertTrue(model.containsAttribute("tabs"));
         assertTrue("verify tokencheck", model.asMap().containsKey(ModelKeys.TOKENCHECK));
+        assertThat((String) model.asMap().get(ModelKeys.REFERRING_PAGE_ID), is(equalTo(REFERRER_ID)));
     }
 
     @Test
@@ -89,7 +94,7 @@ public class CategoryControllerTest {
 
         Model model = new ExtendedModelMap();
 
-        String viewName = controller.getCategories(UPDATE, model);
+        String viewName = controller.getCategories(UPDATE,REFERRER_ID, model);
         verify(categoryService);
 
         assertEquals(ViewNames.ADMIN_CATEGORIES, viewName);
@@ -100,6 +105,7 @@ public class CategoryControllerTest {
         assertEquals("Check that the category object available", new CategoryImpl(), model.asMap().get("category"));
         assertTrue(model.containsAttribute("topnav"));
         assertTrue(model.containsAttribute("tabs"));
+        assertThat((String) model.asMap().get(ModelKeys.REFERRING_PAGE_ID), is(equalTo(REFERRER_ID)));
     }
 
     @Test
@@ -110,7 +116,7 @@ public class CategoryControllerTest {
 
         Model model = new ExtendedModelMap();
 
-        String viewName = controller.getCategories(DELETE, model);
+        String viewName = controller.getCategories(DELETE,REFERRER_ID, model);
         verify(categoryService);
 
         assertEquals(ViewNames.ADMIN_CATEGORIES, viewName);
@@ -121,6 +127,7 @@ public class CategoryControllerTest {
         assertEquals("Check that the category object available", new CategoryImpl(), model.asMap().get("category"));
         assertTrue(model.containsAttribute("topnav"));
         assertTrue(model.containsAttribute("tabs"));
+        assertThat((String) model.asMap().get(ModelKeys.REFERRING_PAGE_ID), is(equalTo(REFERRER_ID)));
     }
 
     @Test
@@ -131,7 +138,7 @@ public class CategoryControllerTest {
 
         Model model = new ExtendedModelMap();
 
-        String viewName = controller.getCategories(CREATE, model);
+        String viewName = controller.getCategories(CREATE,REFERRER_ID, model);
         verify(categoryService);
 
         assertEquals(ViewNames.ADMIN_CATEGORIES, viewName);
@@ -142,6 +149,7 @@ public class CategoryControllerTest {
         assertEquals("Check category object available", new CategoryImpl(), model.asMap().get("category"));
         assertTrue(model.containsAttribute("topnav"));
         assertTrue(model.containsAttribute("tabs"));
+        assertThat((String) model.asMap().get(ModelKeys.REFERRING_PAGE_ID), is(equalTo(REFERRER_ID)));
     }
 
     @Test
@@ -157,8 +165,8 @@ public class CategoryControllerTest {
         sessionStatus.setComplete();
         expectLastCall();
         replay(userService, categoryService,sessionStatus);
-        String view = controller.createCategory(category, validToken, validToken, model, sessionStatus);
-        assertEquals("ViewName match", "redirect:/app/admin/categories?action=create", view);
+        String view = controller.createCategory(category, validToken, validToken,REFERRER_ID, model, sessionStatus);
+        assertEquals("ViewName match", "redirect:/app/admin/categories?action=create&referringPageId=" +REFERRER_ID, view);
         assertTrue("empty model", model.asMap().isEmpty());
         verify(userService, categoryService, sessionStatus);
     }
@@ -177,7 +185,7 @@ public class CategoryControllerTest {
         sessionStatus.setComplete();
         expectLastCall();
         replay(userService, categoryService,sessionStatus);
-        String view = controller.createCategory(category, validToken, invalidToken, model, sessionStatus);
+        String view = controller.createCategory(category, validToken, invalidToken,REFERRER_ID, model, sessionStatus);
         assertTrue("Test should catch exception and never hit this test", false);
     }
 
@@ -191,7 +199,7 @@ public class CategoryControllerTest {
         SessionStatus sessionStatus = createMock(SessionStatus.class);
         expect(userService.getAuthenticatedUser()).andReturn(user).once();
         replay(userService);
-        String view = controller.createCategory(category, validToken, validToken, model, sessionStatus);
+        String view = controller.createCategory(category, validToken, validToken,REFERRER_ID, model, sessionStatus);
         assertEquals("ViewName match", ViewNames.ADMIN_CATEGORIES, view);
         assertFalse("empty model", model.asMap().isEmpty());
         verify(userService);
@@ -213,8 +221,8 @@ public class CategoryControllerTest {
         sessionStatus.setComplete();
         expectLastCall();
         replay(userService, categoryService,sessionStatus);
-        String view = controller.updateCategory(category, validToken, validToken, model, sessionStatus);
-        assertEquals("ViewName match", "redirect:/app/admin/categories?action=update", view);
+        String view = controller.updateCategory(category, validToken, validToken,REFERRER_ID, model, sessionStatus);
+        assertEquals("ViewName match", "redirect:/app/admin/categories?action=update&referringPageId=" + REFERRER_ID, view);
         assertTrue("empty model", model.asMap().isEmpty());
         verify(userService, categoryService, sessionStatus);
     }
@@ -237,7 +245,7 @@ public class CategoryControllerTest {
         sessionStatus.setComplete();
         expectLastCall();
         replay(userService, categoryService,sessionStatus);
-        String view = controller.updateCategory(category, validToken, invalidToken, model, sessionStatus);assertTrue("Test should catch exception and never hit this test", false);
+        String view = controller.updateCategory(category, validToken, invalidToken,REFERRER_ID, model, sessionStatus);assertTrue("Test should catch exception and never hit this test", false);
         assertTrue("Test should catch exception and never hit this test", false);
     }
 
@@ -255,7 +263,7 @@ public class CategoryControllerTest {
         SessionStatus sessionStatus = createMock(SessionStatus.class);
         expect(userService.getAuthenticatedUser()).andReturn(user).once();
         replay(userService);
-        String view = controller.updateCategory(category, validToken, validToken, model, sessionStatus);
+        String view = controller.updateCategory(category, validToken, validToken,REFERRER_ID, model, sessionStatus);
         assertEquals("ViewName match", ViewNames.ADMIN_CATEGORY_DETAIL, view);
         assertFalse("empty model", model.asMap().isEmpty());
         verify(userService);
@@ -274,7 +282,7 @@ public class CategoryControllerTest {
         SessionStatus sessionStatus = createMock(SessionStatus.class);
         expect(userService.getAuthenticatedUser()).andReturn(user).once();
         replay(userService);
-        String view = controller.updateCategory(category, validToken, validToken, model, sessionStatus);
+        String view = controller.updateCategory(category, validToken, validToken,REFERRER_ID, model, sessionStatus);
         assertEquals("ViewName match", ViewNames.ADMIN_CATEGORY_DETAIL, view);
         assertFalse("empty model", model.asMap().isEmpty());
         verify(userService);
@@ -294,7 +302,7 @@ public class CategoryControllerTest {
         expect(userService.getAuthenticatedUser()).andReturn(user).once();
         expect(categoryService.get(id)).andReturn(null).once();
         replay(userService, categoryService);
-        String view = controller.updateCategory(category, validToken, validToken, model, sessionStatus);
+        String view = controller.updateCategory(category, validToken, validToken, REFERRER_ID, model, sessionStatus);
         assertEquals("ViewName match", ViewNames.ADMIN_CATEGORY_DETAIL, view);
         assertFalse("empty model", model.asMap().isEmpty());
         verify(userService, categoryService);
@@ -318,8 +326,8 @@ public class CategoryControllerTest {
         sessionStatus.setComplete();
         expectLastCall();
         replay(userService, categoryService,sessionStatus);
-        String view = controller.deleteCategory(category, validToken, validToken, "true", model,sessionStatus);
-        assertEquals("ViewName match", "redirect:/app/admin/categories?action=delete", view);
+        String view = controller.deleteCategory(category, validToken, validToken, "true",REFERRER_ID, model,sessionStatus);
+        assertEquals("ViewName match", "redirect:/app/admin/categories?action=delete&referringPageId=" + REFERRER_ID, view);
         assertTrue("empty model", model.asMap().isEmpty());
         verify(userService, categoryService, sessionStatus);
     }
@@ -343,7 +351,7 @@ public class CategoryControllerTest {
         sessionStatus.setComplete();
         expectLastCall();
         replay(userService, categoryService,sessionStatus);
-        String view = controller.deleteCategory(category, validToken, invalidToken, "true", model, sessionStatus);assertTrue("Test should catch exception and never hit this test", false);
+        String view = controller.deleteCategory(category, validToken, invalidToken, "true",REFERRER_ID, model, sessionStatus);assertTrue("Test should catch exception and never hit this test", false);
         assertTrue("Test should catch exception and never hit this test", false);
     }
 
@@ -361,7 +369,7 @@ public class CategoryControllerTest {
         SessionStatus sessionStatus = createMock(SessionStatus.class);
         expect(userService.getAuthenticatedUser()).andReturn(user).once();
         replay(userService);
-        String view = controller.deleteCategory(category, validToken, validToken, "true", model, sessionStatus);
+        String view = controller.deleteCategory(category, validToken, validToken, "true",REFERRER_ID, model, sessionStatus);
         assertEquals("ViewName match", ViewNames.ADMIN_CATEGORY_DETAIL, view);
         assertFalse("empty model", model.asMap().isEmpty());
         verify(userService);
@@ -380,7 +388,7 @@ public class CategoryControllerTest {
         SessionStatus sessionStatus = createMock(SessionStatus.class);
         expect(userService.getAuthenticatedUser()).andReturn(user).once();
         replay(userService);
-        String view = controller.deleteCategory(category, validToken, validToken, "true", model, sessionStatus);
+        String view = controller.deleteCategory(category, validToken, validToken, "true",REFERRER_ID, model, sessionStatus);
         assertEquals("ViewName match", ViewNames.ADMIN_CATEGORY_DETAIL, view);
         assertFalse("empty model", model.asMap().isEmpty());
         verify(userService);
@@ -400,7 +408,7 @@ public class CategoryControllerTest {
         expect(userService.getAuthenticatedUser()).andReturn(user).once();
         expect(categoryService.get(id)).andReturn(null).once();
         replay(userService, categoryService);
-        String view = controller.deleteCategory(category, validToken, validToken,"true", model, sessionStatus);
+        String view = controller.deleteCategory(category, validToken, validToken,"true",REFERRER_ID, model, sessionStatus);
         assertEquals("ViewName match", ViewNames.ADMIN_CATEGORY_DETAIL, view);
         assertFalse("empty model", model.asMap().isEmpty());
         verify(userService, categoryService);
@@ -419,7 +427,7 @@ public class CategoryControllerTest {
         SessionStatus sessionStatus = createMock(SessionStatus.class);
         expect(userService.getAuthenticatedUser()).andReturn(user).once();
         replay(userService);
-        String view = controller.deleteCategory(category, validToken, validToken,"false", model, sessionStatus);
+        String view = controller.deleteCategory(category, validToken, validToken,"false",REFERRER_ID, model, sessionStatus);
         assertEquals("ViewName match", ViewNames.ADMIN_CATEGORY_DETAIL, view);
         assertEquals("missing confirmation", true, model.asMap().get("missingConfirm"));
         verify(userService);
@@ -437,7 +445,7 @@ public class CategoryControllerTest {
         category.setId(id);
         expect(categoryService.get(id)).andReturn(category).once();
         replay(categoryService);
-        String view = controller.editCategory(id, model);
+        String view = controller.editCategory(id,REFERRER_ID, model);
         assertEquals("ViewName match", ViewNames.ADMIN_CATEGORY_DETAIL, view);
         assertFalse("model is not empty", model.asMap().isEmpty());
         assertSame("check model object", category, model.asMap().get("category"));
diff --git a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/PortalPreferenceControllerTest.java b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/PortalPreferenceControllerTest.java
index d712eb9b..94dfbd37 100644
--- a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/PortalPreferenceControllerTest.java
+++ b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/PortalPreferenceControllerTest.java
@@ -42,6 +42,9 @@ import java.util.Set;
 
 import static junit.framework.Assert.*;
 import static org.easymock.EasyMock.*;
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
 
 /**
  * Test for {@link PortalPreferenceController}
@@ -51,6 +54,7 @@ public class PortalPreferenceControllerTest {
     private PortalPreferenceController controller;
     private PortalPreferenceService service;
     private String validToken;
+    private static final String REFERRER_ID = "35";
 
     @Before
     public void setUp() {
@@ -69,13 +73,14 @@ public class PortalPreferenceControllerTest {
         expect(service.getPreferencesAsMap()).andReturn(preferenceMap);
         replay(service);
 
-        String view = controller.viewPreferences(null, model);
+        String view = controller.viewPreferences(null,REFERRER_ID, model);
 
         assertEquals(ViewNames.ADMIN_PREFERENCES, view);
         assertEquals(preferenceMap, model.asMap().get("preferenceMap"));
         assertFalse(model.containsAttribute("actionresult"));
         assertTrue(model.containsAttribute("topnav"));
         assertTrue(model.containsAttribute("tabs"));
+        assertThat((String) model.asMap().get(ModelKeys.REFERRING_PAGE_ID), is(equalTo(REFERRER_ID)));
 
         verify(service);
     }
@@ -90,13 +95,14 @@ public class PortalPreferenceControllerTest {
         replay(service);
 
         final String action = "update";
-        String view = controller.viewPreferences(action, model);
+        String view = controller.viewPreferences(action,REFERRER_ID, model);
 
         assertEquals(ViewNames.ADMIN_PREFERENCES, view);
         assertEquals(preferenceMap, model.asMap().get("preferenceMap"));
         assertEquals(action, model.asMap().get("actionresult"));
         assertTrue(model.containsAttribute("topnav"));
         assertTrue(model.containsAttribute("tabs"));
+        assertThat((String) model.asMap().get(ModelKeys.REFERRING_PAGE_ID), is(equalTo(REFERRER_ID)));
 
         verify(service);
     }
@@ -109,13 +115,14 @@ public class PortalPreferenceControllerTest {
 
         expect(service.getPreferencesAsMap()).andReturn(preferenceMap);
         replay(service);
-        String view = controller.editPreferences(model);
+        String view = controller.editPreferences(model,REFERRER_ID);
         assertEquals(ViewNames.ADMIN_PREFERENCE_DETAIL, view);
 
         assertTrue(model.asMap().get("preferenceForm") instanceof PortalPreferenceForm);
         assertTrue(model.containsAttribute(ModelKeys.TOKENCHECK));
         assertTrue(model.containsAttribute("topnav"));
         assertTrue(model.containsAttribute("tabs"));
+        assertThat((String) model.asMap().get(ModelKeys.REFERRING_PAGE_ID), is(equalTo(REFERRER_ID)));
     }
 
     @Test
@@ -134,9 +141,9 @@ public class PortalPreferenceControllerTest {
 
         expectLastCall();
         replay(service, sessionStatus);
-        String view = controller.updatePreferences(form, errors, validToken, validToken, model, sessionStatus);
+        String view = controller.updatePreferences(form, errors, validToken, validToken,REFERRER_ID, model, sessionStatus);
 
-        assertEquals("redirect:/app/admin/preferences?action=update", view);
+        assertEquals("redirect:/app/admin/preferences?action=update&referringPageId=" + REFERRER_ID, view);
         assertTrue("Model has been cleared", model.isEmpty());
 
         verify(service, sessionStatus);
@@ -153,7 +160,7 @@ public class PortalPreferenceControllerTest {
         
         expectLastCall();
         replay(service, sessionStatus);
-        controller.updatePreferences(form, errors, validToken, invalidToken, model, sessionStatus);
+        controller.updatePreferences(form, errors, validToken, invalidToken,REFERRER_ID, model, sessionStatus);
 
         assertFalse("Should not end up here", true);
         verify(service, sessionStatus);
@@ -170,7 +177,7 @@ public class PortalPreferenceControllerTest {
         SessionStatus sessionStatus = createMock(SessionStatus.class);
 
         replay(service, sessionStatus);
-        String view = controller.updatePreferences(form, errors, validToken, validToken, model, sessionStatus);
+        String view = controller.updatePreferences(form, errors, validToken, validToken,REFERRER_ID, model, sessionStatus);
 
         assertEquals(ViewNames.ADMIN_PREFERENCE_DETAIL, view);
         assertTrue(errors.hasErrors());
diff --git a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/UserControllerTest.java b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/UserControllerTest.java
index 0ac83bb5..919fb4b0 100644
--- a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/UserControllerTest.java
+++ b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/UserControllerTest.java
@@ -48,6 +48,9 @@ import java.util.List;
 
 import static junit.framework.Assert.*;
 import static org.easymock.EasyMock.*;
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
 
 /**
  * Test for {@link UserController}
@@ -55,6 +58,7 @@ import static org.easymock.EasyMock.*;
 public class UserControllerTest {
 
     private static final String TABS = "tabs";
+    private static final String REFERRER_ID = "35";
 
     private UserController controller;
     private UserService userService;
@@ -74,10 +78,11 @@ public class UserControllerTest {
         expect(userService.getLimitedListOfUsers(offset, pageSize)).andReturn(searchResult);
         replay(userService);
 
-        String adminUsersView = controller.viewUsers(offset, referer, model);
+        String adminUsersView = controller.viewUsers(offset, referer,REFERRER_ID, model);
         assertEquals(ViewNames.ADMIN_USERS, adminUsersView);
         assertEquals(searchResult, model.asMap().get(ModelKeys.SEARCHRESULT));
         assertTrue(model.containsAttribute(TABS));
+        assertThat((String) model.asMap().get(ModelKeys.REFERRING_PAGE_ID), is(equalTo(REFERRER_ID)));
     }
 
     @Test
@@ -92,11 +97,12 @@ public class UserControllerTest {
         expect(userService.getUsersByFreeTextSearch(searchTerm, offset, pageSize)).andReturn(searchResult);
         replay(userService);
 
-        String adminUsersView = controller.searchUsers(searchTerm, offset, model);
+        String adminUsersView = controller.searchUsers(searchTerm, offset,REFERRER_ID, model);
         assertEquals(ViewNames.ADMIN_USERS, adminUsersView);
         assertEquals(searchResult, model.asMap().get(ModelKeys.SEARCHRESULT));
         assertEquals(searchTerm, model.asMap().get(ModelKeys.SEARCH_TERM));
         assertTrue(model.containsAttribute(TABS));
+        assertThat((String) model.asMap().get(ModelKeys.REFERRING_PAGE_ID), is(equalTo(REFERRER_ID)));
     }
 
 
@@ -109,12 +115,13 @@ public class UserControllerTest {
         expect(userService.getUserById(userid)).andReturn(user);
         replay(userService);
 
-        String adminUserDetailView = controller.viewUserDetail(userid, model);
+        String adminUserDetailView = controller.viewUserDetail(userid,REFERRER_ID, model);
         verify(userService);
 
         assertEquals(ViewNames.ADMIN_USERDETAIL, adminUserDetailView);
         assertTrue(model.containsAttribute(TABS));
         assertEquals(user, model.asMap().get("user"));
+        assertThat((String) model.asMap().get(ModelKeys.REFERRING_PAGE_ID), is(equalTo(REFERRER_ID)));
     }
 
 
@@ -137,11 +144,12 @@ public class UserControllerTest {
         expectLastCall();
         replay(userService, sessionStatus);
 
-        final String view = controller.updateUserDetail(user, errors, validToken, validToken, modelMap, sessionStatus);
+        final String view = controller.updateUserDetail(user, errors, validToken, validToken,REFERRER_ID, modelMap, sessionStatus);
         verify(userService, sessionStatus);
 
         assertFalse(errors.hasErrors());
-        assertEquals("redirect:/app/admin/users?action=update", view);
+        assertEquals("redirect:/app/admin/users?action=update&referringPageId=" + REFERRER_ID, view);
+
     }
 
     @Test
@@ -153,7 +161,7 @@ public class UserControllerTest {
 
         SessionStatus sessionStatus = createMock(SessionStatus.class);
         replay(sessionStatus);
-        final String view = controller.updateUserDetail(user, errors, validToken, validToken, modelMap, sessionStatus);
+        final String view = controller.updateUserDetail(user, errors, validToken, validToken,REFERRER_ID, modelMap, sessionStatus);
         verify(sessionStatus);
 
         assertTrue(errors.hasErrors());
@@ -173,7 +181,7 @@ public class UserControllerTest {
 
         String otherToken = AdminControllerUtil.generateSessionToken();
 
-        controller.updateUserDetail(user, errors, validToken, otherToken, modelMap, sessionStatus);
+        controller.updateUserDetail(user, errors, validToken, otherToken,REFERRER_ID, modelMap, sessionStatus);
         verify(sessionStatus);
 
         assertFalse("SecurityException", true);
@@ -196,10 +204,11 @@ public class UserControllerTest {
         expectLastCall();
         replay(userService, sessionStatus);
 
-        final String view = controller.deleteUserDetail(user, validToken, validToken, "true", modelMap, sessionStatus);
+        final String view = controller.deleteUserDetail(user, validToken, validToken, "true",REFERRER_ID, modelMap, sessionStatus);
         verify(userService, sessionStatus);
 
-        assertEquals("redirect:/app/admin/users?action=delete", view);
+        assertEquals("redirect:/app/admin/users?action=delete&referringPageId=" + REFERRER_ID, view);
+
     }
 
     @Test
@@ -210,10 +219,11 @@ public class UserControllerTest {
 
         SessionStatus sessionStatus = createMock(SessionStatus.class);
         replay(sessionStatus);
-        final String view = controller.deleteUserDetail(user, validToken, validToken, null, modelMap, sessionStatus);
+        final String view = controller.deleteUserDetail(user, validToken, validToken, null,REFERRER_ID, modelMap, sessionStatus);
         verify(sessionStatus);
 
         assertEquals(ViewNames.ADMIN_USERDETAIL, view);
+        assertThat((String) modelMap.get(ModelKeys.REFERRING_PAGE_ID), is(equalTo(REFERRER_ID)));
     }
 
     @Test(expected = SecurityException.class)
@@ -228,7 +238,7 @@ public class UserControllerTest {
 
         String otherToken = AdminControllerUtil.generateSessionToken();
 
-        controller.deleteUserDetail(user, validToken, otherToken, "true", modelMap, sessionStatus);
+        controller.deleteUserDetail(user, validToken, otherToken, "true",REFERRER_ID, modelMap, sessionStatus);
         verify(sessionStatus);
 
         assertFalse("SecurityException", true);
@@ -238,10 +248,11 @@ public class UserControllerTest {
     @Test
     public void setupForm() {
         ModelMap modelMap = new ExtendedModelMap();
-        final String viewName = controller.setUpForm(modelMap);
+        final String viewName = controller.setUpForm(modelMap,REFERRER_ID);
         assertEquals(ViewNames.ADMIN_NEW_ACCOUNT, viewName);
         assertTrue(modelMap.containsAttribute(TABS));
         assertTrue(modelMap.get(ModelKeys.NEW_USER) instanceof UserImpl);
+        assertThat((String) modelMap.get(ModelKeys.REFERRING_PAGE_ID), is(equalTo(REFERRER_ID)));
     }
 
     @Test
@@ -268,11 +279,12 @@ public class UserControllerTest {
         expectLastCall();
         replay(userService, model, newAccountService, redirectAttributes);
 
-        String result = controller.create(User, errors, model, redirectAttributes);
+        String result = controller.create(User, errors, model,REFERRER_ID,redirectAttributes);
         verify(userService, model, newAccountService, redirectAttributes);
 
         assertFalse(errors.hasErrors());
-        assertEquals("redirect:/app/admin/users", result);
+        assertEquals("redirect:/app/admin/users?referringPageId=" +REFERRER_ID, result);
+
     }
     @Test
     public void create_EmptyForm() throws Exception {
@@ -294,11 +306,12 @@ public class UserControllerTest {
 
         replay(model);
 
-        String result = controller.create(User, errors, model, redirectAttributes);
+        String result = controller.create(User, errors, model,REFERRER_ID, redirectAttributes);
         verify(model);
 
         assertTrue(errors.hasErrors());
         assertEquals(ViewNames.ADMIN_NEW_ACCOUNT, result);
+
     }
 
     @Test
diff --git a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/WidgetControllerTest.java b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/WidgetControllerTest.java
index 2289bd73..2f5d768c 100644
--- a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/WidgetControllerTest.java
+++ b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/controller/admin/WidgetControllerTest.java
@@ -46,6 +46,7 @@ import java.util.ArrayList;
 import java.util.List;
 
 import static org.easymock.EasyMock.*;
+import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.*;
 
@@ -55,6 +56,7 @@ import static org.junit.Assert.*;
 public class WidgetControllerTest {
 
     private static final String TABS = "tabs";
+    private static final String REFERRER_ID = "35";
     public static final int DEFAULT_OFFSET = 0;
     public static final int DEFAULT_PAGESIZE = AdminControllerUtil.DEFAULT_PAGE_SIZE;
 
@@ -102,11 +104,12 @@ public class WidgetControllerTest {
         replay(service);
 
 
-        String adminWidgetsView = controller.viewWidgets(DEFAULT_OFFSET, null, model);
+        String adminWidgetsView = controller.viewWidgets(DEFAULT_OFFSET, null,REFERRER_ID, model);
         verify(service);
         assertEquals(ViewNames.ADMIN_WIDGETS, adminWidgetsView);
         assertEquals(widgetSearchResult, model.asMap().get(ModelKeys.SEARCHRESULT));
         assertTrue(model.containsAttribute(TABS));
+        assertThat((String) model.asMap().get(ModelKeys.REFERRING_PAGE_ID), is(equalTo(REFERRER_ID)));
     }
 
     @Test
@@ -124,13 +127,14 @@ public class WidgetControllerTest {
         replay(service);
 
 
-        String searchView = controller.searchWidgets(searchTerm, type, status, DEFAULT_OFFSET, model);
+        String searchView = controller.searchWidgets(searchTerm, type, status, DEFAULT_OFFSET,REFERRER_ID, model);
         verify(service);
 
         assertEquals(ViewNames.ADMIN_WIDGETS, searchView);
         assertEquals(searchTerm, model.asMap().get(ModelKeys.SEARCH_TERM));
         assertEquals(type, model.asMap().get("selectedWidgetType"));
         assertEquals(status, model.asMap().get("selectedWidgetStatus"));
+        assertThat((String) model.asMap().get(ModelKeys.REFERRING_PAGE_ID), is(equalTo(REFERRER_ID)));
     }
 
     @SuppressWarnings("unchecked")
@@ -145,7 +149,7 @@ public class WidgetControllerTest {
         expect(service.getWidget(entityId)).andReturn(widget);
         expect(categoryService.getAll()).andReturn(categories);
         replay(service, categoryService);
-        String adminWidgetDetailView = controller.viewWidgetDetail(entityId, model);
+        String adminWidgetDetailView = controller.viewWidgetDetail(entityId,REFERRER_ID, model);
         verify(service, categoryService);
 
         assertEquals(ViewNames.ADMIN_WIDGETDETAIL, adminWidgetDetailView);
@@ -153,6 +157,7 @@ public class WidgetControllerTest {
         assertEquals(widget, model.asMap().get("widget"));
         assertThat(model.containsAttribute(ModelKeys.CATEGORIES), is(true));
         assertThat((List<Category>) model.asMap().get(ModelKeys.CATEGORIES), is(categories));
+        assertThat((String) model.asMap().get(ModelKeys.REFERRING_PAGE_ID), is(equalTo(REFERRER_ID)));
     }
 
     @Test
@@ -171,11 +176,13 @@ public class WidgetControllerTest {
         sessionStatus.setComplete();
         expectLastCall();
         replay(service, sessionStatus);
-        String view = controller.updateWidgetDetail(widget, errors, validToken, validToken, modelMap, sessionStatus);
+        String view = controller.updateWidgetDetail(widget, errors, validToken, validToken,REFERRER_ID, modelMap, sessionStatus);
         verify(service, sessionStatus);
 
         assertFalse("No errors", errors.hasErrors());
-        assertEquals("redirect:/app/admin/widgets?action=update", view);
+        assertEquals("redirect:/app/admin/widgets?action=update&referringPageId=" +REFERRER_ID, view);
+
+
 
     }
 
@@ -192,7 +199,7 @@ public class WidgetControllerTest {
 
         String otherToken = AdminControllerUtil.generateSessionToken();
 
-        controller.updateWidgetDetail(widget, errors, "sessionToken", otherToken, modelMap, sessionStatus);
+        controller.updateWidgetDetail(widget, errors, "sessionToken", otherToken,REFERRER_ID, modelMap, sessionStatus);
 
         verify(sessionStatus);
         assertFalse("Can't come here", true);
@@ -205,7 +212,7 @@ public class WidgetControllerTest {
         SessionStatus sessionStatus = createMock(SessionStatus.class);
         ModelMap modelMap = new ExtendedModelMap();
 
-        String view = controller.updateWidgetDetail(widget, errors, validToken, validToken, modelMap, sessionStatus);
+        String view = controller.updateWidgetDetail(widget, errors, validToken, validToken,REFERRER_ID, modelMap, sessionStatus);
 
         assertTrue("Errors", errors.hasErrors());
         assertEquals(ViewNames.ADMIN_WIDGETDETAIL, view);
