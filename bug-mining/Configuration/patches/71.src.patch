diff --git a/src/java/org/apache/commons/configuration/XMLConfiguration.java b/src/java/org/apache/commons/configuration/XMLConfiguration.java
index 041fb2f7..bfa6b702 100644
--- a/src/java/org/apache/commons/configuration/XMLConfiguration.java
+++ b/src/java/org/apache/commons/configuration/XMLConfiguration.java
@@ -620,8 +620,9 @@ public class XMLConfiguration extends AbstractHierarchicalFileConfiguration
             XMLBuilderVisitor builder = new XMLBuilderVisitor(document,
                     isDelimiterParsingDisabled() ? (char) 0 : getListDelimiter());
             builder.processDocument(getRoot());
+            initRootElementText(document, getRootNode().getValue());
             return document;
-        } /* try */
+        }
         catch (DOMException domEx)
         {
             throw new ConfigurationException(domEx);
@@ -632,6 +633,34 @@ public class XMLConfiguration extends AbstractHierarchicalFileConfiguration
         }
     }
 
+    /**
+     * Sets the text of the root element of a newly created XML Document.
+     *
+     * @param doc the document
+     * @param value the new text to be set
+     */
+    private void initRootElementText(Document doc, Object value)
+    {
+        Element elem = doc.getDocumentElement();
+        NodeList children = elem.getChildNodes();
+
+        // Remove all existing text nodes
+        for (int i = 0; i < children.getLength(); i++)
+        {
+            org.w3c.dom.Node nd = children.item(i);
+            if (nd.getNodeType() == org.w3c.dom.Node.TEXT_NODE)
+            {
+                elem.removeChild(nd);
+            }
+        }
+
+        if (value != null)
+        {
+            // Add a new text node
+            elem.appendChild(doc.createTextNode(String.valueOf(value)));
+        }
+    }
+
     /**
      * Creates a new node object. This implementation returns an instance of the
      * <code>XMLNode</code> class.
diff --git a/src/test/org/apache/commons/configuration/TestXMLConfiguration.java b/src/test/org/apache/commons/configuration/TestXMLConfiguration.java
index ac379d31..1e1688a1 100644
--- a/src/test/org/apache/commons/configuration/TestXMLConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestXMLConfiguration.java
@@ -997,6 +997,36 @@ public class TestXMLConfiguration extends TestCase
         checkSavedConfig(copy);
     }
 
+    /**
+     * Tests setting text of the root element.
+     */
+    public void testSetTextRootElement() throws ConfigurationException
+    {
+        conf.setProperty("", "Root text");
+        conf.save(testSaveConf);
+        XMLConfiguration copy = new XMLConfiguration();
+        copy.setFile(testSaveConf);
+        checkSavedConfig(copy);
+    }
+
+    /**
+     * Tests removing the text of the root element.
+     */
+    public void testClearTextRootElement() throws ConfigurationException
+    {
+        final String xml = "<e a=\"v\">text</e>";
+        conf.clear();
+        StringReader in = new StringReader(xml);
+        conf.load(in);
+        assertEquals("Wrong text of root", "text", conf.getString(""));
+
+        conf.clearProperty("");
+        conf.save(testSaveConf);
+        XMLConfiguration copy = new XMLConfiguration();
+        copy.setFile(testSaveConf);
+        checkSavedConfig(copy);
+    }
+
     /**
      * Tests list nodes with multiple values and attributes.
      */
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 555899ec..19d2211f 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,10 @@
 
   <body>
     <release version="1.6" date="in SVN" description="">
+      <action dev="oheger" type="fix" issue="CONFIGURATION-316">
+        Changing the text of the root element of an XMLConfiguration had no
+        effect when the configuration was saved. This has been fixed.
+      </action>
       <action dev="oheger" type="fix" issue="CONFIGURATION-315">
         CombinedConfiguration used to send two EVENT_COMBINED_INVALIDATE events
         for each modified child configuration. Now this event is sent only
