diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 0fc7a0eb..a89a04c1 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -109,7 +109,7 @@ The <action> type attribute can be add,update,fix,remove.
         remains but is deprecated so not to break clients currently using the
         incorrect name.
       </action>
-       <action dev="markt" type="add" issue="DBCP-462" due-to=" Keiichi Fujino">
+       <action dev="markt" type="add" issue="DBCP-462" due-to="Keiichi Fujino">
          Refactoring to prepare for a future patch to enable pooling of all
          prepared and callable statements in PoolingConnection.
        </action>
@@ -127,6 +127,10 @@ The <action> type attribute can be add,update,fix,remove.
          abandoned connections to the underlying pool so that the pool
          configuration may be updated dynamically. 
        </action>
+       <action dev="markt" type="add" issue="DBCP-474" due-to="Keiichi Fujino">
+         Enable pooling of all prepared and callable statements
+         inPoolingConnection.
+       </action>
     </release>
     <release version="2.1.1" date="6 Aug 2015" description=
 "This is a patch release, including bug fixes only.">
diff --git a/src/main/java/org/apache/commons/dbcp2/PStmtKey.java b/src/main/java/org/apache/commons/dbcp2/PStmtKey.java
index 4d5dc90a..1d3a918a 100644
--- a/src/main/java/org/apache/commons/dbcp2/PStmtKey.java
+++ b/src/main/java/org/apache/commons/dbcp2/PStmtKey.java
@@ -20,6 +20,7 @@ import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 import java.sql.Statement;
+import java.util.Arrays;
 
 import org.apache.commons.dbcp2.PoolingConnection.StatementType;
 
@@ -39,12 +40,21 @@ public class PStmtKey {
     /** Result set concurrency */
     private final Integer _resultSetConcurrency;
 
+    /** Result set holdability */
+    private final Integer _resultSetHoldability;
+
     /** Database catalog */
     private final String _catalog;
 
     /** Auto generated keys */
     private final Integer _autoGeneratedKeys;
 
+    /** column indexes */
+    private final int[] _columnIndexes;
+
+    /** column names */
+    private final String[] _columnNames;
+
     /** Statement type */
     private final StatementType _stmtType;
 
@@ -64,8 +74,11 @@ public class PStmtKey {
         _catalog = catalog;
         _stmtType = stmtType;
         _autoGeneratedKeys = null;
+        _columnIndexes = null;
+        _columnNames = null;
         _resultSetType = null;
         _resultSetConcurrency = null;
+        _resultSetHoldability = null;
         // create builder
         if (stmtType == StatementType.PREPARED_STATEMENT) {
             builder = new PreparedStatementSQL();
@@ -83,8 +96,11 @@ public class PStmtKey {
         _catalog = catalog;
         _stmtType = stmtType;
         _autoGeneratedKeys = autoGeneratedKeys;
+        _columnIndexes = null;
+        _columnNames = null;
         _resultSetType = null;
         _resultSetConcurrency = null;
+        _resultSetHoldability = null;
         // create builder
         if (stmtType == StatementType.PREPARED_STATEMENT) {
             builder = new PreparedStatementWithAutoGeneratedKeys();
@@ -93,6 +109,34 @@ public class PStmtKey {
         }
     }
 
+    public PStmtKey(final String sql, final String catalog, final int[] columnIndexes) {
+        _sql = sql;
+        _catalog = catalog;
+        _stmtType = StatementType.PREPARED_STATEMENT;
+        _autoGeneratedKeys = null;
+        _columnIndexes = columnIndexes;
+        _columnNames = null;
+        _resultSetType = null;
+        _resultSetConcurrency = null;
+        _resultSetHoldability = null;
+        // create builder
+        builder = new PreparedStatementWithColumnIndexes();
+    }
+
+    public PStmtKey(final String sql, final String catalog, final String[] columnNames) {
+        _sql = sql;
+        _catalog = catalog;
+        _stmtType = StatementType.PREPARED_STATEMENT;
+        _autoGeneratedKeys = null;
+        _columnIndexes = null;
+        _columnNames = columnNames;
+        _resultSetType = null;
+        _resultSetConcurrency = null;
+        _resultSetHoldability = null;
+        // create builder
+        builder = new PreparedStatementWithColumnNames();
+    }
+
     public  PStmtKey(final String sql, final int resultSetType, final int resultSetConcurrency) {
         this(sql, null, resultSetType, resultSetConcurrency, StatementType.PREPARED_STATEMENT);
     }
@@ -106,8 +150,11 @@ public class PStmtKey {
         _catalog = catalog;
         _resultSetType = Integer.valueOf(resultSetType);
         _resultSetConcurrency = Integer.valueOf(resultSetConcurrency);
+        _resultSetHoldability = null;
         _stmtType = stmtType;
         _autoGeneratedKeys = null;
+        _columnIndexes = null;
+        _columnNames = null;
         // create builder
         if (stmtType == StatementType.PREPARED_STATEMENT) {
             builder = new PreparedStatementWithResultSetConcurrency();
@@ -116,6 +163,30 @@ public class PStmtKey {
         }
     }
 
+    public PStmtKey(final String sql, final String catalog, final int resultSetType, final int resultSetConcurrency,
+            final int resultSetHoldability) {
+        this(sql, catalog, resultSetType, resultSetConcurrency, resultSetHoldability, StatementType.PREPARED_STATEMENT);
+    }
+
+    public PStmtKey(final String sql, final String catalog, final int resultSetType, final int resultSetConcurrency,
+            final int resultSetHoldability, final StatementType stmtType) {
+        _sql = sql;
+        _catalog = catalog;
+        _resultSetType = Integer.valueOf(resultSetType);
+        _resultSetConcurrency = Integer.valueOf(resultSetConcurrency);
+        _resultSetHoldability = Integer.valueOf(resultSetHoldability);
+        _stmtType = stmtType;
+        _autoGeneratedKeys = null;
+        _columnIndexes = null;
+        _columnNames = null;
+        // create builder
+        if (stmtType == StatementType.PREPARED_STATEMENT) {
+            builder = new PreparedStatementWithResultSetHoldability();
+        } else if (stmtType == StatementType.CALLABLE_STATEMENT) {
+            builder = new PreparedCallWithResultSetHoldability();
+        }
+    }
+
 
     public String getSql() {
         return _sql;
@@ -129,10 +200,22 @@ public class PStmtKey {
         return _resultSetConcurrency;
     }
 
+    public Integer getResultSetHoldability() {
+        return _resultSetHoldability;
+    }
+
     public Integer getAutoGeneratedKeys() {
         return _autoGeneratedKeys;
     }
 
+    public int[] getColumnIndexes() {
+        return _columnIndexes;
+    }
+
+    public String[] getColumnNames() {
+        return _columnNames;
+    }
+
     public String getCatalog() {
         return _catalog;
     }
@@ -174,6 +257,13 @@ public class PStmtKey {
         } else if (!_resultSetType.equals(other._resultSetType)) {
             return false;
         }
+        if (_resultSetHoldability == null) {
+            if (other._resultSetHoldability != null) {
+                return false;
+            }
+        } else if (!_resultSetHoldability.equals(other._resultSetHoldability)) {
+            return false;
+        }
         if (_autoGeneratedKeys == null) {
             if (other._autoGeneratedKeys != null) {
                 return false;
@@ -181,6 +271,12 @@ public class PStmtKey {
         } else if (!_autoGeneratedKeys.equals(other._autoGeneratedKeys)) {
             return false;
         }
+        if (!Arrays.equals(_columnIndexes, other._columnIndexes)) {
+            return false;
+        }
+        if (!Arrays.equals(_columnNames, other._columnNames)) {
+            return false;
+        }
         if (_sql == null) {
             if (other._sql != null) {
                 return false;
@@ -201,8 +297,11 @@ public class PStmtKey {
         result = prime * result + (_catalog == null ? 0 : _catalog.hashCode());
         result = prime * result + (_resultSetConcurrency == null ? 0 : _resultSetConcurrency.hashCode());
         result = prime * result + (_resultSetType == null ? 0 : _resultSetType.hashCode());
+        result = prime * result + (_resultSetHoldability == null ? 0 : _resultSetHoldability.hashCode());
         result = prime * result + (_sql == null ? 0 : _sql.hashCode());
         result = prime * result + (_autoGeneratedKeys == null ? 0 : _autoGeneratedKeys.hashCode());
+        result = prime * result + Arrays.hashCode(_columnIndexes);
+        result = prime * result + Arrays.hashCode(_columnNames);
         result = prime * result + _stmtType.hashCode();
         return result;
     }
@@ -218,8 +317,14 @@ public class PStmtKey {
         buf.append(_resultSetType);
         buf.append(", resultSetConcurrency=");
         buf.append(_resultSetConcurrency);
+        buf.append(", resultSetHoldability=");
+        buf.append(_resultSetHoldability);
         buf.append(", autoGeneratedKeys=");
         buf.append(_autoGeneratedKeys);
+        buf.append(", columnIndexes=");
+        buf.append(Arrays.toString(_columnIndexes));
+        buf.append(", columnNames=");
+        buf.append(Arrays.toString(_columnNames));
         buf.append(", statmentType=");
         buf.append(_stmtType);
         return buf.toString();
@@ -260,6 +365,18 @@ public class PStmtKey {
         }
     }
 
+    /**
+     * Builder for prepareStatement(String sql, int[] columnIndexes)
+     */
+    private class PreparedStatementWithColumnIndexes implements StatementeBuilder {
+        @Override
+        public Statement createStatement(Connection connection) throws SQLException {
+            PreparedStatement statement = connection.prepareStatement(
+                    _sql, _columnIndexes);
+            return statement;
+        }
+    }
+
     /**
      * Builder for prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
      */
@@ -272,6 +389,31 @@ public class PStmtKey {
         }
     }
 
+    /**
+     * Builder for prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
+     */
+    private class PreparedStatementWithResultSetHoldability implements StatementeBuilder {
+        @Override
+        public Statement createStatement(Connection connection) throws SQLException {
+            PreparedStatement statement = connection.prepareStatement(
+                    _sql, _resultSetType.intValue(), _resultSetConcurrency.intValue(),
+                    _resultSetHoldability.intValue());
+            return statement;
+        }
+    }
+
+    /**
+     * Builder for prepareStatement(String sql, String[] columnNames)
+     */
+    private class PreparedStatementWithColumnNames implements StatementeBuilder {
+        @Override
+        public Statement createStatement(Connection connection) throws SQLException {
+            PreparedStatement statement = connection.prepareStatement(
+                    _sql, _columnNames);
+            return statement;
+        }
+    }
+
     /**
      * Builder for prepareCall(String sql)
      */
@@ -294,4 +436,17 @@ public class PStmtKey {
             return statement;
         }
     }
+
+    /**
+     * Builder for prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
+     */
+    private class PreparedCallWithResultSetHoldability implements StatementeBuilder {
+        @Override
+        public Statement createStatement(Connection connection) throws SQLException {
+            PreparedStatement statement = connection.prepareCall(
+                    _sql, _resultSetType.intValue(), _resultSetConcurrency.intValue(),
+                    _resultSetHoldability.intValue());
+            return statement;
+        }
+    }
 }
diff --git a/src/main/java/org/apache/commons/dbcp2/PoolingConnection.java b/src/main/java/org/apache/commons/dbcp2/PoolingConnection.java
index 1fd9bbea..de3ab499 100644
--- a/src/main/java/org/apache/commons/dbcp2/PoolingConnection.java
+++ b/src/main/java/org/apache/commons/dbcp2/PoolingConnection.java
@@ -201,26 +201,103 @@ public class PoolingConnection extends DelegatingConnection<Connection>
         }
     }
 
+    /**
+     * Create or obtain a {@link PreparedStatement} from the pool.
+     * @param sql the sql string used to define the PreparedStatement
+     * @param resultSetType result set type
+     * @param resultSetConcurrency result set concurrency
+     * @param resultSetHoldability result set holdability
+     * @return a {@link PoolablePreparedStatement}
+     */
+    @Override
+    public PreparedStatement prepareStatement(final String sql, final int resultSetType,
+            final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
+        if (null == _pstmtPool) {
+            throw new SQLException(
+                    "Statement pool is null - closed or invalid PoolingConnection.");
+        }
+        try {
+            return _pstmtPool.borrowObject(createKey(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
+        } catch(final NoSuchElementException e) {
+            throw new SQLException("MaxOpenPreparedStatements limit reached", e);
+        } catch(final RuntimeException e) {
+            throw e;
+        } catch(final Exception e) {
+            throw new SQLException("Borrow prepareStatement from pool failed", e);
+        }
+    }
 
-//    TODO: possible enhancement, cache these preparedStatements as well
-
-//    public PreparedStatement prepareStatement(String sql, int resultSetType,
-//                                              int resultSetConcurrency,
-//                                              int resultSetHoldability)
-//        throws SQLException {
-//        return super.prepareStatement(
-//            sql, resultSetType, resultSetConcurrency, resultSetHoldability);
-//    }
-//
-//    public PreparedStatement prepareStatement(String sql, int columnIndexes[])
-//        throws SQLException {
-//        return super.prepareStatement(sql, columnIndexes);
-//    }
-//
-//    public PreparedStatement prepareStatement(String sql, String columnNames[])
-//        throws SQLException {
-//        return super.prepareStatement(sql, columnNames);
-//    }
+    /**
+     * Create or obtain a {@link PreparedStatement} from the pool.
+     * @param sql the sql string used to define the PreparedStatement
+     * @param columnIndexes column indexes
+     * @return a {@link PoolablePreparedStatement}
+     */
+    @Override
+    public PreparedStatement prepareStatement(final String sql, final int columnIndexes[])
+            throws SQLException {
+        if (null == _pstmtPool) {
+            throw new SQLException(
+                    "Statement pool is null - closed or invalid PoolingConnection.");
+        }
+        try {
+            return _pstmtPool.borrowObject(createKey(sql, columnIndexes));
+        } catch(final NoSuchElementException e) {
+            throw new SQLException("MaxOpenPreparedStatements limit reached", e);
+        } catch(final RuntimeException e) {
+            throw e;
+        } catch(final Exception e) {
+            throw new SQLException("Borrow prepareStatement from pool failed", e);
+        }
+    }
+
+    /**
+     * Create or obtain a {@link PreparedStatement} from the pool.
+     * @param sql the sql string used to define the PreparedStatement
+     * @param columnNames column names
+     * @return a {@link PoolablePreparedStatement}
+     */
+    @Override
+    public PreparedStatement prepareStatement(final String sql, final String columnNames[])
+            throws SQLException {
+        if (null == _pstmtPool) {
+            throw new SQLException(
+                    "Statement pool is null - closed or invalid PoolingConnection.");
+        }
+        try {
+            return _pstmtPool.borrowObject(createKey(sql, columnNames));
+        } catch(final NoSuchElementException e) {
+            throw new SQLException("MaxOpenPreparedStatements limit reached", e);
+        } catch(final RuntimeException e) {
+            throw e;
+        } catch(final Exception e) {
+            throw new SQLException("Borrow prepareStatement from pool failed", e);
+        }
+    }
+
+    /**
+     * Create or obtain a {@link CallableStatement} from the pool.
+     * @param sql the sql string used to define the CallableStatement
+     * @param resultSetType result set type
+     * @param resultSetConcurrency result set concurrency
+     * @param resultSetHoldability result set holdability
+     * @return a {@link PoolableCallableStatement}
+     * @throws SQLException
+     */
+    @Override
+    public CallableStatement prepareCall(final String sql, final int resultSetType,
+            final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
+        try {
+            return (CallableStatement) _pstmtPool.borrowObject(createKey(sql, resultSetType,
+                            resultSetConcurrency, resultSetHoldability, StatementType.CALLABLE_STATEMENT));
+        } catch (final NoSuchElementException e) {
+            throw new SQLException("MaxOpenCallableStatements limit reached", e);
+        } catch (final RuntimeException e) {
+            throw e;
+        } catch (final Exception e) {
+            throw new SQLException("Borrow callableStatement from pool failed", e);
+        }
+    }
 
     protected PStmtKey createKey(final String sql, final int autoGeneratedKeys) {
         String catalog = null;
@@ -294,6 +371,73 @@ public class PoolingConnection extends DelegatingConnection<Connection>
         return new PStmtKey(normalizeSQL(sql), catalog, stmtType, null);
     }
 
+    /**
+     * Create a PStmtKey for the given arguments.
+     * @param sql the sql string used to define the statement
+     * @param resultSetType result set type
+     * @param resultSetConcurrency result set concurrency
+     * @param resultSetHoldability result set holdability
+     */
+    protected PStmtKey createKey(final String sql, final int resultSetType, final int resultSetConcurrency,
+            final int resultSetHoldability) {
+        String catalog = null;
+        try {
+            catalog = getCatalog();
+        } catch (final SQLException e) {
+            // Ignored
+        }
+        return new PStmtKey(normalizeSQL(sql), catalog, resultSetType, resultSetConcurrency, resultSetHoldability);
+    }
+
+    /**
+     * Create a PStmtKey for the given arguments.
+     * @param sql the sql string used to define the statement
+     * @param resultSetType result set type
+     * @param resultSetConcurrency result set concurrency
+     * @param resultSetHoldability result set holdability
+     * @param stmtType statement type
+     */
+    protected PStmtKey createKey(final String sql, final int resultSetType, final int resultSetConcurrency,
+            final int resultSetHoldability, final StatementType stmtType) {
+        String catalog = null;
+        try {
+            catalog = getCatalog();
+        } catch (final SQLException e) {
+            // Ignored
+        }
+        return new PStmtKey(normalizeSQL(sql), catalog, resultSetType, resultSetConcurrency, resultSetHoldability,  stmtType);
+    }
+
+    /**
+     * Create a PStmtKey for the given arguments.
+     * @param sql the sql string used to define the statement
+     * @param columnIndexes column indexes
+     */
+    protected PStmtKey createKey(final String sql, final int columnIndexes[]) {
+        String catalog = null;
+        try {
+            catalog = getCatalog();
+        } catch (final SQLException e) {
+            // Ignored
+        }
+        return new PStmtKey(normalizeSQL(sql), catalog, columnIndexes);
+    }
+
+    /**
+     * Create a PStmtKey for the given arguments.
+     * @param sql the sql string used to define the statement
+     * @param columnNames column names
+     */
+    protected PStmtKey createKey(final String sql, final String columnNames[]) {
+        String catalog = null;
+        try {
+            catalog = getCatalog();
+        } catch (final SQLException e) {
+            // Ignored
+        }
+        return new PStmtKey(normalizeSQL(sql), catalog, columnNames);
+    }
+
     /**
      * Normalize the given SQL statement, producing a
      * canonical form that is semantically equivalent to the original.
diff --git a/src/test/java/org/apache/commons/dbcp2/TestPoolingConnection.java b/src/test/java/org/apache/commons/dbcp2/TestPoolingConnection.java
index 101fa6fc..b9606cb4 100644
--- a/src/test/java/org/apache/commons/dbcp2/TestPoolingConnection.java
+++ b/src/test/java/org/apache/commons/dbcp2/TestPoolingConnection.java
@@ -17,6 +17,7 @@
 package org.apache.commons.dbcp2;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertArrayEquals;
 
 import org.apache.commons.pool2.KeyedObjectPool;
 import org.apache.commons.pool2.impl.GenericKeyedObjectPool;
@@ -82,6 +83,43 @@ public class TestPoolingConnection {
         assertEquals(resultSetConcurrency, testStatement.getResultSetConcurrency());
     }
 
+    @Test
+    public void testPrepareStatementWithResultSetHoldability() throws Exception {
+        String sql = "select 'a' from dual";
+        int resultSetType = 0;
+        int resultSetConcurrency = 0;
+        int resultSetHoldability = 0;
+        DelegatingPreparedStatement statement = (DelegatingPreparedStatement)con.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
+        TesterPreparedStatement testStatement = (TesterPreparedStatement) statement.getInnermostDelegate();
+        // assert
+        assertEquals(sql, testStatement.getSql());
+        assertEquals(resultSetType, testStatement.getResultSetType());
+        assertEquals(resultSetConcurrency, testStatement.getResultSetConcurrency());
+        assertEquals(resultSetHoldability, testStatement.getResultSetHoldability());
+    }
+
+    @Test
+    public void testPrepareStatementWithColumnIndexes() throws Exception {
+        String sql = "select 'a' from dual";
+        int[] columnIndexes = new int[]{1};
+        DelegatingPreparedStatement statement = (DelegatingPreparedStatement)con.prepareStatement(sql, columnIndexes);
+        TesterPreparedStatement testStatement = (TesterPreparedStatement) statement.getInnermostDelegate();
+        // assert
+        assertEquals(sql, testStatement.getSql());
+        assertArrayEquals(columnIndexes, testStatement.getColumnIndexes());
+    }
+
+    @Test
+    public void testPrepareStatementWithColumnNames() throws Exception {
+        String sql = "select 'a' from dual";
+        String columnNames[] = new String[]{"columnName1"};
+        DelegatingPreparedStatement statement = (DelegatingPreparedStatement)con.prepareStatement(sql, columnNames);
+        TesterPreparedStatement testStatement = (TesterPreparedStatement) statement.getInnermostDelegate();
+        // assert
+        assertEquals(sql, testStatement.getSql());
+        assertArrayEquals(columnNames, testStatement.getColumnNames());
+    }
+
     @Test
     public void testPrepareCall() throws Exception {
         String sql = "select 'a' from dual";
@@ -103,4 +141,19 @@ public class TestPoolingConnection {
         assertEquals(resultSetType, testStatement.getResultSetType());
         assertEquals(resultSetConcurrency, testStatement.getResultSetConcurrency());
     }
+
+    @Test
+    public void testPrepareCallWithResultSetHoldability() throws Exception {
+        String sql = "select 'a' from dual";
+        int resultSetType = 0;
+        int resultSetConcurrency = 0;
+        int resultSetHoldability = 0;
+        DelegatingCallableStatement statement = (DelegatingCallableStatement)con.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
+        TesterCallableStatement testStatement = (TesterCallableStatement) statement.getInnermostDelegate();
+        // assert
+        assertEquals(sql, testStatement.getSql());
+        assertEquals(resultSetType, testStatement.getResultSetType());
+        assertEquals(resultSetConcurrency, testStatement.getResultSetConcurrency());
+        assertEquals(resultSetHoldability, testStatement.getResultSetHoldability());
+    }
 }
diff --git a/src/test/java/org/apache/commons/dbcp2/TesterCallableStatement.java b/src/test/java/org/apache/commons/dbcp2/TesterCallableStatement.java
index bfce1716..02a693cf 100644
--- a/src/test/java/org/apache/commons/dbcp2/TesterCallableStatement.java
+++ b/src/test/java/org/apache/commons/dbcp2/TesterCallableStatement.java
@@ -57,6 +57,11 @@ public class TesterCallableStatement extends TesterPreparedStatement implements
         super(conn, sql, resultSetType, resultSetConcurrency);
     }
 
+    public TesterCallableStatement(final Connection conn, final String sql, final int resultSetType, final int resultSetConcurrency,
+            final int resultSetHoldability) {
+        super(conn, sql, resultSetType, resultSetConcurrency, resultSetHoldability);
+    }
+
     @Override
     public void registerOutParameter(final int parameterIndex, final int sqlType) throws SQLException {
     }
diff --git a/src/test/java/org/apache/commons/dbcp2/TesterConnection.java b/src/test/java/org/apache/commons/dbcp2/TesterConnection.java
index 3be2a457..c69bb241 100644
--- a/src/test/java/org/apache/commons/dbcp2/TesterConnection.java
+++ b/src/test/java/org/apache/commons/dbcp2/TesterConnection.java
@@ -288,7 +288,8 @@ public class TesterConnection implements Connection {
                                               final int resultSetConcurrency,
                                               final int resultSetHoldability)
         throws SQLException {
-        return prepareStatement(sql);
+        checkOpen();
+        return new TesterPreparedStatement(this, sql, resultSetType, resultSetConcurrency, resultSetHoldability);
     }
 
     @Override
@@ -296,7 +297,8 @@ public class TesterConnection implements Connection {
                                          final int resultSetConcurrency,
                                          final int resultSetHoldability)
         throws SQLException {
-        return prepareCall(sql);
+        checkOpen();
+        return new TesterCallableStatement(this, sql, resultSetType, resultSetConcurrency, resultSetHoldability);
     }
 
     @Override
@@ -309,13 +311,13 @@ public class TesterConnection implements Connection {
     @Override
     public PreparedStatement prepareStatement(final String sql, final int columnIndexes[])
         throws SQLException {
-        return prepareStatement(sql);
+        return new TesterPreparedStatement(this, sql, columnIndexes);
     }
 
     @Override
     public PreparedStatement prepareStatement(final String sql, final String columnNames[])
         throws SQLException {
-        return prepareStatement(sql);
+        return new TesterPreparedStatement(this, sql, columnNames);
     }
 
 
diff --git a/src/test/java/org/apache/commons/dbcp2/TesterPreparedStatement.java b/src/test/java/org/apache/commons/dbcp2/TesterPreparedStatement.java
index 147a9dcb..978bdbf6 100644
--- a/src/test/java/org/apache/commons/dbcp2/TesterPreparedStatement.java
+++ b/src/test/java/org/apache/commons/dbcp2/TesterPreparedStatement.java
@@ -46,6 +46,8 @@ public class TesterPreparedStatement extends TesterStatement implements Prepared
     private String _sql = null;
     private String _catalog = null;
     private int _autoGeneratedKeys = 1;
+    private int[] _columnIndexes = null;
+    private String[] _columnNames = null; 
 
     public TesterPreparedStatement(final Connection conn) {
         super(conn);
@@ -77,6 +79,28 @@ public class TesterPreparedStatement extends TesterStatement implements Prepared
         }
     }
 
+    public TesterPreparedStatement(final Connection conn, final String sql, final int columnIndexes[]) {
+        super(conn);
+        _sql = sql;
+        _columnIndexes = columnIndexes;
+        try {
+            _catalog = conn.getCatalog();
+        } catch (final SQLException e) {
+            // Ignored
+        }
+    }
+
+    public TesterPreparedStatement(final Connection conn, final String sql, final String columnNames[]) {
+        super(conn);
+        _sql = sql;
+        _columnNames = columnNames;
+        try {
+            _catalog = conn.getCatalog();
+        } catch (final SQLException e) {
+            // Ignored
+        }
+    }
+
     public TesterPreparedStatement(final Connection conn, final String sql, final int resultSetType, final int resultSetConcurrency) {
         super(conn, resultSetType, resultSetConcurrency);
         _sql = sql;
@@ -87,6 +111,17 @@ public class TesterPreparedStatement extends TesterStatement implements Prepared
         }
     }
 
+    public TesterPreparedStatement(final Connection conn, final String sql, final int resultSetType, final int resultSetConcurrency,
+            final int resultSetHoldability) {
+        super(conn, resultSetType, resultSetConcurrency, resultSetHoldability);
+        _sql = sql;
+        try {
+            _catalog = conn.getCatalog();
+        } catch (final SQLException e) {
+            // Ignored
+        }
+    }
+
     /** for junit test only */
     public String getSql() {
         return _sql;
@@ -100,6 +135,14 @@ public class TesterPreparedStatement extends TesterStatement implements Prepared
         return _autoGeneratedKeys;
     }
 
+    public int[] getColumnIndexes() {
+        return _columnIndexes;
+    }
+
+    public String[] getColumnNames() {
+        return _columnNames;
+    }
+
     @Override
     public ResultSet executeQuery(final String sql) throws SQLException {
         checkOpen();
@@ -349,11 +392,6 @@ public class TesterPreparedStatement extends TesterStatement implements Prepared
         checkOpen(); return true;
     }
 
-    @Override
-    public int getResultSetHoldability() throws SQLException {
-        throw new SQLException("Not implemented.");
-    }
-
     @Override
     public void setURL(final int parameterIndex, final java.net.URL x)
         throws SQLException {
diff --git a/src/test/java/org/apache/commons/dbcp2/TesterStatement.java b/src/test/java/org/apache/commons/dbcp2/TesterStatement.java
index 8e68ef1d..e53b7b4c 100644
--- a/src/test/java/org/apache/commons/dbcp2/TesterStatement.java
+++ b/src/test/java/org/apache/commons/dbcp2/TesterStatement.java
@@ -41,6 +41,14 @@ public class TesterStatement implements Statement {
         _resultSetConcurrency = resultSetConcurrency;
     }
 
+    public TesterStatement(final Connection conn, final int resultSetType, final int resultSetConcurrency,
+            final int resultSetHoldability) {
+        _connection = conn;
+        _resultSetType = resultSetType;
+        _resultSetConcurrency = resultSetConcurrency;
+        _resultSetHoldability = resultSetHoldability;
+    }
+
     protected Connection _connection = null;
     protected boolean _open = true;
     protected int _rowsUpdated = 1;
@@ -54,6 +62,7 @@ public class TesterStatement implements Statement {
     protected int _fetchSize = 1;
     protected int _resultSetConcurrency = 1;
     protected int _resultSetType = 1;
+    private int _resultSetHoldability = 1;
     protected ResultSet _resultSet = null;
 
     @Override
@@ -307,7 +316,7 @@ public class TesterStatement implements Statement {
     @Override
     public int getResultSetHoldability() throws SQLException {
         checkOpen();
-        throw new SQLException("Not implemented.");
+        return _resultSetHoldability;
     }
 
 
