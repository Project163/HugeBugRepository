diff --git a/.travis.yml b/.travis.yml
index 83f01b34..1cf4ffb2 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,6 +21,7 @@ jdk:
   - oraclejdk11
   - openjdk8
   - openjdk11
+  - openjdk12
   - openjdk-ea
 
   
\ No newline at end of file
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 9ff7a4ce..5962f072 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -76,6 +76,9 @@ The <action> type attribute can be add,update,fix,remove.
       <action dev="ggregory" type="update" issue="DBCP-541" due-to="Allon Murienik">
         Upgrade to JUnit Jupiter #19.
       </action>
+      <action dev="ggregory" type="update" issue="DBCP-542" due-to="Zheng Feng, Gary Gregory">
+        Fix tests on Java 11.
+      </action>
     </release>
     <release version="2.6.0" date="2019-02-14" description="This is a minor release, including bug fixes and enhancements.">
       <action dev="chtompki" type="add" issue="DBCP-534" due-to="Peter Wicks">
diff --git a/src/test/java/org/apache/commons/dbcp2/managed/TestSynchronizationOrder.java b/src/test/java/org/apache/commons/dbcp2/managed/TestSynchronizationOrder.java
index 62333433..6f610f8c 100644
--- a/src/test/java/org/apache/commons/dbcp2/managed/TestSynchronizationOrder.java
+++ b/src/test/java/org/apache/commons/dbcp2/managed/TestSynchronizationOrder.java
@@ -63,31 +63,31 @@ public class TestSynchronizationOrder {
 
     @Test
     public void testSessionSynchronization() throws Exception {
-        final DataSourceXAConnectionFactory xaConnectionFactory = new DataSourceXAConnectionFactory(transactionManager, xads);
+        final DataSourceXAConnectionFactory xaConnectionFactory = new DataSourceXAConnectionFactory(transactionManager,
+                xads);
 
-        final PoolableConnectionFactory factory =
-                new PoolableConnectionFactory(xaConnectionFactory, null);
+        final PoolableConnectionFactory factory = new PoolableConnectionFactory(xaConnectionFactory, null);
         factory.setValidationQuery("SELECT DUMMY FROM DUAL");
         factory.setDefaultReadOnly(Boolean.TRUE);
         factory.setDefaultAutoCommit(Boolean.TRUE);
 
         // create the pool
-        final GenericObjectPool pool = new GenericObjectPool<>(factory);
-        factory.setPool(pool);
-        pool.setMaxTotal(10);
-        pool.setMaxWaitMillis(1000);
-
-        // finally create the datasource
-        final ManagedDataSource ds = new ManagedDataSource<>(pool, xaConnectionFactory.getTransactionRegistry());
-        ds.setAccessToUnderlyingConnectionAllowed(true);
-
-
-        transactionManager.begin();
-        final DelegatingConnection<?> connectionA = (DelegatingConnection<?>) ds.getConnection();
-        connectionA.close();
-        transactionManager.commit();
-        assertTrue(transactionManagerRegistered);
-        assertFalse(transactionSynchronizationRegistryRegistered);
+        try (final GenericObjectPool pool = new GenericObjectPool<>(factory)) {
+            factory.setPool(pool);
+            pool.setMaxTotal(10);
+            pool.setMaxWaitMillis(1000);
+
+            // finally create the datasource
+            final ManagedDataSource ds = new ManagedDataSource<>(pool, xaConnectionFactory.getTransactionRegistry());
+            ds.setAccessToUnderlyingConnectionAllowed(true);
+
+            transactionManager.begin();
+            final DelegatingConnection<?> connectionA = (DelegatingConnection<?>) ds.getConnection();
+            connectionA.close();
+            transactionManager.commit();
+            assertTrue(transactionManagerRegistered);
+            assertFalse(transactionSynchronizationRegistryRegistered);
+        }
     }
 
     @Test
