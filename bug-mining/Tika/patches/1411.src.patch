diff --git a/tika-core/src/main/java/org/apache/tika/mime/MagicMatch.java b/tika-core/src/main/java/org/apache/tika/mime/MagicMatch.java
index afa0de91f..4917ea542 100644
--- a/tika-core/src/main/java/org/apache/tika/mime/MagicMatch.java
+++ b/tika-core/src/main/java/org/apache/tika/mime/MagicMatch.java
@@ -57,7 +57,7 @@ class MagicMatch implements Clause {
 
     public boolean eval(byte[] data) {
         try {
-            return getDetector().detect(new UnsynchronizedByteArrayInputStream(data), new Metadata()) !=
+            return getDetector().detect(UnsynchronizedByteArrayInputStream.builder().setByteArray(data).get(), new Metadata()) !=
                     MediaType.OCTET_STREAM;
         } catch (IOException e) {
             // Should never happen with a ByteArrayInputStream
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/PipesClient.java b/tika-core/src/main/java/org/apache/tika/pipes/PipesClient.java
index 129067136..0e1ca18e0 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/PipesClient.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/PipesClient.java
@@ -368,7 +368,7 @@ public class PipesClient implements Closeable {
         byte[] bytes = new byte[length];
         input.readFully(bytes);
         try (ObjectInputStream objectInputStream = new ObjectInputStream(
-                new UnsynchronizedByteArrayInputStream(bytes))) {
+                UnsynchronizedByteArrayInputStream.builder().setByteArray(bytes).get())) {
             EmitData emitData = (EmitData) objectInputStream.readObject();
 
             String stack = emitData.getContainerStackTrace();
@@ -390,7 +390,7 @@ public class PipesClient implements Closeable {
         byte[] bytes = new byte[length];
         input.readFully(bytes);
         try (ObjectInputStream objectInputStream = new ObjectInputStream(
-                new UnsynchronizedByteArrayInputStream(bytes))) {
+                UnsynchronizedByteArrayInputStream.builder().setByteArray(bytes).get())) {
             Metadata metadata = (Metadata) objectInputStream.readObject();
             EmitData emitData = new EmitData(emitKey, Collections.singletonList(metadata));
             return new PipesResult(PipesResult.STATUS.INTERMEDIATE_RESULT, emitData, true);
diff --git a/tika-core/src/main/java/org/apache/tika/pipes/PipesServer.java b/tika-core/src/main/java/org/apache/tika/pipes/PipesServer.java
index 54d2b439c..d4ebbf011 100644
--- a/tika-core/src/main/java/org/apache/tika/pipes/PipesServer.java
+++ b/tika-core/src/main/java/org/apache/tika/pipes/PipesServer.java
@@ -169,7 +169,7 @@ public class PipesServer implements Runnable {
             PipesServer server =
                     new PipesServer(tikaConfig, System.in, System.out, maxForEmitBatchBytes,
                             serverParseTimeoutMillis, serverWaitTimeoutMillis);
-            System.setIn(new UnsynchronizedByteArrayInputStream(new byte[0]));
+            System.setIn(UnsynchronizedByteArrayInputStream.builder().setByteArray(new byte[0]).get());
             System.setOut(System.err);
             Thread watchdog = new Thread(server, "Tika Watchdog");
             watchdog.setDaemon(true);
@@ -727,7 +727,7 @@ public class PipesServer implements Runnable {
             byte[] bytes = new byte[length];
             input.readFully(bytes);
             try (ObjectInputStream objectInputStream = new ObjectInputStream(
-                    new UnsynchronizedByteArrayInputStream(bytes))) {
+                    UnsynchronizedByteArrayInputStream.builder().setByteArray(bytes).get())) {
                 return (FetchEmitTuple) objectInputStream.readObject();
             }
         } catch (IOException e) {
diff --git a/tika-core/src/test/java/org/apache/tika/pipes/PipesServerTest.java b/tika-core/src/test/java/org/apache/tika/pipes/PipesServerTest.java
index dd8ef4ff4..ff80bb916 100644
--- a/tika-core/src/test/java/org/apache/tika/pipes/PipesServerTest.java
+++ b/tika-core/src/test/java/org/apache/tika/pipes/PipesServerTest.java
@@ -61,7 +61,7 @@ public class PipesServerTest extends TikaTest {
                 tmp.resolve("mock.xml"));
 
         PipesServer pipesServer = new PipesServer(tikaConfig,
-                new UnsynchronizedByteArrayInputStream(new byte[0]),
+                UnsynchronizedByteArrayInputStream.builder().setByteArray(new byte[0]).get(),
                 new PrintStream(UnsynchronizedByteArrayOutputStream.builder().get(), true,
                         StandardCharsets.UTF_8.name()),
                 -1, 30000, 30000);
@@ -96,7 +96,7 @@ public class PipesServerTest extends TikaTest {
                 tmp.resolve("mock.xml"));
 
         PipesServer pipesServer = new PipesServer(tikaConfig,
-                new UnsynchronizedByteArrayInputStream(new byte[0]),
+                UnsynchronizedByteArrayInputStream.builder().setByteArray(new byte[0]).get(),
                 new PrintStream(UnsynchronizedByteArrayOutputStream.builder().get(), true,
                         StandardCharsets.UTF_8.name()),
                 -1, 30000, 30000);
@@ -152,7 +152,7 @@ public class PipesServerTest extends TikaTest {
                 tmp.resolve("mock.xml"));
 
         PipesServer pipesServer = new PipesServer(tikaConfig,
-                new UnsynchronizedByteArrayInputStream(new byte[0]),
+                UnsynchronizedByteArrayInputStream.builder().setByteArray(new byte[0]).get(),
                 new PrintStream(UnsynchronizedByteArrayOutputStream.builder().get(), true,
                         StandardCharsets.UTF_8.name()),
                 -1, 30000, 30000);
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-audiovideo-module/src/main/java/org/apache/tika/parser/video/FLVParser.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-audiovideo-module/src/main/java/org/apache/tika/parser/video/FLVParser.java
index 6674d7445..0040989fd 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-audiovideo-module/src/main/java/org/apache/tika/parser/video/FLVParser.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-audiovideo-module/src/main/java/org/apache/tika/parser/video/FLVParser.java
@@ -225,7 +225,8 @@ public class FLVParser implements Parser {
                 }
 
                 try (
-                        UnsynchronizedByteArrayInputStream is = new UnsynchronizedByteArrayInputStream(metaBytes);
+                        UnsynchronizedByteArrayInputStream is =
+                                UnsynchronizedByteArrayInputStream.builder().setByteArray(metaBytes).get();
                         DataInputStream dis = new DataInputStream(is);
                 ) {
                     Object data = null;
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java
index ce1b503f2..2ad97c1e6 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java
@@ -186,7 +186,7 @@ public class ImageMetadataExtractor {
 
     public void parseRawXMP(byte[] xmpData) throws IOException, SAXException, TikaException {
         XMPMetadata xmp = null;
-        try (InputStream decoded = new UnsynchronizedByteArrayInputStream(xmpData)) {
+        try (InputStream decoded = UnsynchronizedByteArrayInputStream.builder().setByteArray(xmpData).get()) {
             Document dom = XMLReaderUtils.buildDOM(decoded, EMPTY_PARSE_CONTEXT);
             if (dom != null) {
                 xmp = new XMPMetadata(dom);
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/PSDParser.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/PSDParser.java
index 6cd3212ff..0a4437dce 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/PSDParser.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/PSDParser.java
@@ -145,7 +145,7 @@ public class PSDParser implements Parser {
                 //if there are multiple xmps in a file, this will
                 //overwrite the data from the earlier xmp
                 JempboxExtractor ex = new JempboxExtractor(metadata);
-                ex.parse(new UnsynchronizedByteArrayInputStream(rb.data));
+                ex.parse(UnsynchronizedByteArrayInputStream.builder().setByteArray(rb.data).get());
             }
             blocks++;
         }
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-jdbc-commons/src/main/java/org/apache/tika/parser/jdbc/JDBCTableReader.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-jdbc-commons/src/main/java/org/apache/tika/parser/jdbc/JDBCTableReader.java
index 3944df3ef..9df4d197d 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-jdbc-commons/src/main/java/org/apache/tika/parser/jdbc/JDBCTableReader.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-jdbc-commons/src/main/java/org/apache/tika/parser/jdbc/JDBCTableReader.java
@@ -201,7 +201,7 @@ public class JDBCTableReader {
         String s = clob.getSubString(0, readSize);
         if (embeddedDocumentUtil.shouldParseEmbedded(m)) {
             embeddedDocumentUtil
-                    .parseEmbedded(new UnsynchronizedByteArrayInputStream(s.getBytes(UTF_8)), handler, m, true);
+                    .parseEmbedded(UnsynchronizedByteArrayInputStream.builder().setByteArray(s.getBytes(UTF_8)).get(), handler, m, true);
         }
     }
 
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-mail-module/src/main/java/org/apache/tika/parser/mail/MailContentHandler.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-mail-module/src/main/java/org/apache/tika/parser/mail/MailContentHandler.java
index 95edcb9ff..7c5d266ca 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-mail-module/src/main/java/org/apache/tika/parser/mail/MailContentHandler.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-mail-module/src/main/java/org/apache/tika/parser/mail/MailContentHandler.java
@@ -546,7 +546,7 @@ class MailContentHandler implements ContentHandler {
                     inlineMetadata.set(TikaCoreProperties.CONTENT_TYPE_PARSER_OVERRIDE,
                             MediaType.TEXT_PLAIN.toString());
                 }
-                parser.parse(new UnsynchronizedByteArrayInputStream(part.bytes),
+                parser.parse(UnsynchronizedByteArrayInputStream.builder().setByteArray(part.bytes).get(),
                         new EmbeddedContentHandler(new BodyContentHandler(handler)), inlineMetadata,
                         parseContext);
             } catch (SAXException | TikaException e) {
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/extractor/microsoft/MSEmbeddedStreamTranslator.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/extractor/microsoft/MSEmbeddedStreamTranslator.java
index 95eb6260d..24f7ec2d3 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/extractor/microsoft/MSEmbeddedStreamTranslator.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/extractor/microsoft/MSEmbeddedStreamTranslator.java
@@ -82,7 +82,7 @@ public class MSEmbeddedStreamTranslator implements EmbeddedStreamTranslator {
                 name += '.' + type.getExtension();
             }
             metadata.set(TikaCoreProperties.RESOURCE_NAME_KEY, name);
-            return new UnsynchronizedByteArrayInputStream(data);
+            return UnsynchronizedByteArrayInputStream.builder().setByteArray(data).get();
         } else if (inputStream instanceof TikaInputStream) {
             TikaInputStream tin = (TikaInputStream) inputStream;
 
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/detect/gzip/GZipSpecializationDetector.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/detect/gzip/GZipSpecializationDetector.java
index 1e199f9ff..097481a66 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/detect/gzip/GZipSpecializationDetector.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/detect/gzip/GZipSpecializationDetector.java
@@ -72,7 +72,7 @@ public class GZipSpecializationDetector implements Detector {
         }
         UnsynchronizedByteArrayOutputStream bytes = UnsynchronizedByteArrayOutputStream.builder().get();
         try (InputStream is = new
-                     GzipCompressorInputStream(new UnsynchronizedByteArrayInputStream(gzippedBytes.toByteArray()))) {
+                     GzipCompressorInputStream(UnsynchronizedByteArrayInputStream.builder().setByteArray(gzippedBytes.toByteArray()).get())) {
             int c = is.read();
             //read bytes one at a time to avoid premature EOF from buffering
             while (c > -1) {
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/parser/pkg/PackageParser.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/parser/pkg/PackageParser.java
index fd57fa493..3bb2e1e0c 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/parser/pkg/PackageParser.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/parser/pkg/PackageParser.java
@@ -445,7 +445,7 @@ public class PackageParser extends AbstractEncodingDetectorParser {
         if (detectCharsetsInEntryNames && entry instanceof ZipArchiveEntry) {
             Charset candidate =
                     getEncodingDetector().detect(
-                            new UnsynchronizedByteArrayInputStream(((ZipArchiveEntry) entry).getRawName()),
+                            UnsynchronizedByteArrayInputStream.builder().setByteArray(((ZipArchiveEntry) entry).getRawName()).get(),
                             parentMetadata);
             if (candidate != null) {
                 name = new String(((ZipArchiveEntry) entry).getRawName(), candidate);
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/test/java/org/apache/tika/parser/txt/BOMDetectorTest.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/test/java/org/apache/tika/parser/txt/BOMDetectorTest.java
index 599b5df46..113cb60ee 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/test/java/org/apache/tika/parser/txt/BOMDetectorTest.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/test/java/org/apache/tika/parser/txt/BOMDetectorTest.java
@@ -44,13 +44,13 @@ public class BOMDetectorTest extends TikaTest {
         }) {
             UnsynchronizedByteArrayOutputStream bos = createStream(bom);
             try (BOMInputStream bomInputStream =
-                         new BOMInputStream(new UnsynchronizedByteArrayInputStream(bos.toByteArray()),
+                         new BOMInputStream(UnsynchronizedByteArrayInputStream.builder().setByteArray(bos.toByteArray()).get(),
                                  ByteOrderMark.UTF_8, ByteOrderMark.UTF_32BE, ByteOrderMark.UTF_32LE,
                                  ByteOrderMark.UTF_16BE, ByteOrderMark.UTF_16LE)) {
                 assertEquals(bom, bomInputStream.getBOM());
             }
             try (UnsynchronizedByteArrayInputStream is =
-                         new UnsynchronizedByteArrayInputStream(bos.toByteArray())) {
+                         UnsynchronizedByteArrayInputStream.builder().setByteArray(bos.toByteArray()).get()) {
                 assertEquals(Charset.forName(bom.getCharsetName()), detector.detect(is, new Metadata()));
                 int cnt = 0;
                 int c = is.read();
@@ -74,7 +74,7 @@ public class BOMDetectorTest extends TikaTest {
             System.arraycopy(bom.getBytes(), 0, bytes, 0, 1);
             bytes[1] = (byte)32;
             bytes[2] = (byte)32;
-            try (InputStream is = new UnsynchronizedByteArrayInputStream(bytes)) {
+            try (InputStream is = UnsynchronizedByteArrayInputStream.builder().setByteArray(bytes).get()) {
                 assertNull(detector.detect(is, new Metadata()));
             }
         }
diff --git a/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/UnpackerResource.java b/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/UnpackerResource.java
index 79d41dec9..7fb362300 100644
--- a/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/UnpackerResource.java
+++ b/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/UnpackerResource.java
@@ -222,9 +222,9 @@ public class UnpackerResource {
                     LOG.warn("Unexpected MimeTypeException", e);
                 }
             }
-            try (InputStream is = new UnsynchronizedByteArrayInputStream(data)) {
+            try (InputStream is = UnsynchronizedByteArrayInputStream.builder().setByteArray(data).get()) {
                 if (embeddedStreamTranslator.shouldTranslate(is, metadata)) {
-                    InputStream translated = embeddedStreamTranslator.translate(new UnsynchronizedByteArrayInputStream(data), metadata);
+                    InputStream translated = embeddedStreamTranslator.translate(UnsynchronizedByteArrayInputStream.builder().setByteArray(data).get(), metadata);
                     UnsynchronizedByteArrayOutputStream bos2 = UnsynchronizedByteArrayOutputStream
                             .builder()
                             .get();
