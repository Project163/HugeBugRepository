diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index f5617731..6341b2fd 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -62,11 +62,12 @@ The <action> type attribute can be add,update,fix,remove.
     EvictionTimer
      -->
   <body>
-    <release version="2.11.1" date="2023-MM-DD" description="This is a minor release, including bug fixes and enhancements.">
+    <release version="2.11.1" date="2024-MM-DD" description="This is a minor release, including bug fixes and enhancements.">
       <!-- FIX -->
+      <action type="fix" issue="DBCP-596" dev="ggregory" due-to="Aapo Haapanen, Gary Gregory">PoolingConnection.toString() causes StackOverflowError.</action>
       <!-- ADD -->
       <!-- UPDATE -->
-      <action type="update" dev="psteitz" due-to="cortlepp-intershop">use ReentrantLock in PoolableConnection.close, #591</action>
+      <action type="update" dev="psteitz" due-to="cortlepp-intershop">Use ReentrantLock in PoolableConnection.close, #591</action>
       <action type="update" dev="ggregory" due-to="Gary Gregory">Bump commons-lang3 from 3.13.0 to 3.14.0.</action>
     </release>
     <release version="2.11.0" date="2023-10-23" description="This is a minor release, including bug fixes and enhancements.">
diff --git a/src/main/java/org/apache/commons/dbcp2/PoolingConnection.java b/src/main/java/org/apache/commons/dbcp2/PoolingConnection.java
index 3ae7e05d..1aedc3b3 100644
--- a/src/main/java/org/apache/commons/dbcp2/PoolingConnection.java
+++ b/src/main/java/org/apache/commons/dbcp2/PoolingConnection.java
@@ -27,6 +27,7 @@ import org.apache.commons.pool2.KeyedObjectPool;
 import org.apache.commons.pool2.KeyedPooledObjectFactory;
 import org.apache.commons.pool2.PooledObject;
 import org.apache.commons.pool2.impl.DefaultPooledObject;
+import org.apache.commons.pool2.impl.GenericKeyedObjectPool;
 
 /**
  * A {@link DelegatingConnection} that pools {@link PreparedStatement}s.
@@ -597,6 +598,13 @@ public class PoolingConnection extends DelegatingConnection<Connection>
 
     @Override
     public synchronized String toString() {
+        if (pStmtPool instanceof GenericKeyedObjectPool) {
+            // DBCP-596 PoolingConnection.toString() causes StackOverflowError
+            final GenericKeyedObjectPool<?, ?> gkop = (GenericKeyedObjectPool<?, ?>) pStmtPool;
+            if (gkop.getFactory() == this) {
+                return "PoolingConnection: " + pStmtPool.getClass() + "@" + System.identityHashCode(pStmtPool);
+            }
+        }
         return "PoolingConnection: " + Objects.toString(pStmtPool);
     }
 
diff --git a/src/test/java/org/apache/commons/dbcp2/TestPoolingConnection.java b/src/test/java/org/apache/commons/dbcp2/TestPoolingConnection.java
index 89de84ae..27fbccc6 100644
--- a/src/test/java/org/apache/commons/dbcp2/TestPoolingConnection.java
+++ b/src/test/java/org/apache/commons/dbcp2/TestPoolingConnection.java
@@ -168,4 +168,16 @@ public class TestPoolingConnection {
             assertEquals(resultSetHoldability, testStatement.getResultSetHoldability());
         }
     }
+
+    /**
+     * Tests DBCP-596 PoolingConnection.toString() causes StackOverflowError.
+     */
+    @Test
+    public void testToStringStackOverflow() {
+        final PoolingConnection conn = new PoolingConnection(null);
+        final GenericKeyedObjectPoolConfig<DelegatingPreparedStatement> config = new GenericKeyedObjectPoolConfig<>();
+        final GenericKeyedObjectPool stmtPool = new GenericKeyedObjectPool<>(conn, config);
+        conn.setStatementPool(stmtPool);
+        conn.toString();
+    }
 }
