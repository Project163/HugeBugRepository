diff --git a/src/main/java/org/apache/commons/jexl3/annotations/JexlSet.java b/src/main/java/org/apache/commons/jexl3/annotations/JexlSet.java
deleted file mode 100644
index 5a38164b..00000000
--- a/src/main/java/org/apache/commons/jexl3/annotations/JexlSet.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.commons.jexl3.annotations;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
-/**
- * Indicates to JEXL Introspection that this method is a property setter.
- * See {@link org.apache.commons.jexl3.introspection.JexlSandbox} for another way to restrict JEXL access.
- */
-@Documented
-@Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.METHOD, ElementType.FIELD})
-public @interface JexlSet {
-    String property();
-}
diff --git a/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java b/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java
index f9b6f9e1..bf9fbfb6 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/Interpreter.java
@@ -1286,8 +1286,7 @@ public class Interpreter extends ParserVisitor {
             if (object != null) {
                 // disallow mixing antish variable & bean with same root; avoid ambiguity
                 antish = false;
-            }
-            else if (antish) {
+            } else if (antish) {
                 if (ant == null) {
                     JexlNode first = left.jjtGetChild(0);
                     if (first instanceof ASTIdentifier && ((ASTIdentifier) first).getSymbol() < 0) {
@@ -1629,8 +1628,9 @@ public class Interpreter extends ParserVisitor {
         }
         // resolve that property
         Exception xcause = null;
-        List<JexlUberspect.ResolverType> strategy = (node == null) || !(node.jjtGetParent()instanceof ASTArrayAccess)
-                                                     ? JexlUberspect.POJO : JexlUberspect.MAP;
+        List<JexlUberspect.ResolverType> strategy = uberspect.getStrategy(
+                                                    !(node != null && node.jjtGetParent() instanceof ASTArrayAccess),
+                                                    object.getClass());
         JexlPropertyGet vg = uberspect.getPropertyGet(strategy, object, attribute);
         if (vg != null) {
             try {
@@ -1692,15 +1692,16 @@ public class Interpreter extends ParserVisitor {
             }
         }
         Exception xcause = null;
-        List<JexlUberspect.ResolverType> strategy = (node == null) || !(node.jjtGetParent()instanceof ASTArrayAccess)
-                                                     ? JexlUberspect.POJO : JexlUberspect.MAP;
+        List<JexlUberspect.ResolverType> strategy = uberspect.getStrategy(
+                                                    !(node != null && node.jjtGetParent() instanceof ASTArrayAccess),
+                                                    object.getClass());
         JexlPropertySet vs = uberspect.getPropertySet(strategy, object, attribute, value);
         // if we can't find an exact match, narrow the value argument and try again
         if (vs == null) {
             // replace all numbers with the smallest type that will fit
             Object[] narrow = {value};
             if (arithmetic.narrowArguments(narrow)) {
-                vs = uberspect.getPropertySet(object, attribute, narrow[0]);
+                vs = uberspect.getPropertySet(strategy, object, attribute, narrow[0]);
             }
         }
         if (vs != null) {
diff --git a/src/main/java/org/apache/commons/jexl3/internal/Operators.java b/src/main/java/org/apache/commons/jexl3/internal/Operators.java
index 08b91247..a481b4bb 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/Operators.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/Operators.java
@@ -46,7 +46,7 @@ public class Operators {
     }
 
     /**
-     * Checks whether a method returns a boolean or a Boolean
+     * Checks whether a method returns a boolean or a Boolean.
      * @param vm the JexlMethod (may be null)
      * @return true of false
      */
diff --git a/src/main/java/org/apache/commons/jexl3/internal/introspection/SandboxUberspect.java b/src/main/java/org/apache/commons/jexl3/internal/introspection/SandboxUberspect.java
index 1efb2fce..65bb98eb 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/introspection/SandboxUberspect.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/introspection/SandboxUberspect.java
@@ -103,6 +103,14 @@ public final class SandboxUberspect implements JexlUberspect {
         return null;
     }
 
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public List<ResolverType> getStrategy(boolean db, Class<?> clazz) {
+        return db ? JexlUberspect.POJO : JexlUberspect.MAP;
+    }
+
     /**
      * {@inheritDoc}
      */
diff --git a/src/main/java/org/apache/commons/jexl3/internal/introspection/Uberspect.java b/src/main/java/org/apache/commons/jexl3/internal/introspection/Uberspect.java
index 074619f4..5c8c5c49 100644
--- a/src/main/java/org/apache/commons/jexl3/internal/introspection/Uberspect.java
+++ b/src/main/java/org/apache/commons/jexl3/internal/introspection/Uberspect.java
@@ -216,13 +216,23 @@ public class Uberspect implements JexlUberspect {
         return MethodExecutor.discover(base(), obj, method, args);
     }
 
+    @Override
+    public List<ResolverType> getStrategy(boolean db, Class<?> clazz) {
+        //return Map.class.isAssignableFrom(clazz)? JexlUberspect.MAP : JexlUberspect.POJO;
+        return db ? JexlUberspect.POJO : JexlUberspect.MAP;
+    }
+
     @Override
     public JexlPropertyGet getPropertyGet(Object obj, Object identifier) {
         return getPropertyGet(POJO, obj, identifier);
     }
 
     @Override
-    public JexlPropertyGet getPropertyGet(final List<ResolverType> strategy, final Object obj, final Object identifier) {
+    public JexlPropertyGet getPropertyGet(
+            final List<ResolverType> strategy, final Object obj, final Object identifier) {
+        if (strategy == null) {
+            throw new NullPointerException("null property resolver strategy");
+        }
         final Class<?> claz = obj.getClass();
         final String property = AbstractExecutor.castString(identifier);
         final Introspector is = base();
@@ -279,7 +289,11 @@ public class Uberspect implements JexlUberspect {
     }
 
     @Override
-    public JexlPropertySet getPropertySet(final List<ResolverType> strategy, final Object obj, final Object identifier, final Object arg) {
+    public JexlPropertySet getPropertySet(
+            final List<ResolverType> strategy, final Object obj, final Object identifier, final Object arg) {
+        if (strategy == null) {
+            throw new NullPointerException("null property resolver strategy");
+        }
         final Class<?> claz = obj.getClass();
         final String property = AbstractExecutor.castString(identifier);
         final Introspector is = base();
diff --git a/src/main/java/org/apache/commons/jexl3/introspection/JexlUberspect.java b/src/main/java/org/apache/commons/jexl3/introspection/JexlUberspect.java
index 992fcf09..d1e2e633 100644
--- a/src/main/java/org/apache/commons/jexl3/introspection/JexlUberspect.java
+++ b/src/main/java/org/apache/commons/jexl3/introspection/JexlUberspect.java
@@ -71,7 +71,7 @@ public interface JexlUberspect {
      * @see JexlUberspect#getPropertyGet
      * @see JexlUberspect#getPropertySet
      */
-    static final List<ResolverType> POJO = Collections.unmodifiableList(Arrays.asList(
+    List<ResolverType> POJO = Collections.unmodifiableList(Arrays.asList(
         ResolverType.PROPERTY,
         ResolverType.MAP,
         ResolverType.LIST,
@@ -83,7 +83,7 @@ public interface JexlUberspect {
     /**
      * A resolver strategy tailored for Maps, favors '[]' over '.'.
      */
-    static final  List<ResolverType> MAP = Collections.unmodifiableList(Arrays.asList(
+    List<ResolverType> MAP = Collections.unmodifiableList(Arrays.asList(
         ResolverType.MAP,
         ResolverType.LIST,
         ResolverType.DUCK,
@@ -132,10 +132,19 @@ public interface JexlUberspect {
      */
     JexlPropertyGet getPropertyGet(Object obj, Object identifier);
 
+    /**
+     * Gets the strategy to apply for resolving properties.
+     * <p>Default behavior is to use POJO if db is true, MAP if db is false.
+     * @param db access operator flag, true for dot ('.' ) or false for bracket ('[]')
+     * @param clazz the property owner class
+     * @return the strategy
+     */
+    List<ResolverType> getStrategy(boolean db, Class<?> clazz);
+
     /**
      * Property getter.
      * <p>Seeks a JexlPropertyGet apropos to an expression like <code>bar.woogie</code>.</p>
-     * @param strategy  the ordered list of resolver types
+     * @param strategy  the ordered list of resolver types, must not be null
      * @param obj the object to get the property from
      * @param identifier property name
      * @return a {@link JexlPropertyGet} or null
@@ -156,7 +165,7 @@ public interface JexlUberspect {
     /**
      * Property setter.
      * <p>Seeks a JelPropertySet apropos to an expression like <code>foo.bar = "geir"</code>.</p>
-     * @param strategy the ordered list of resolver types
+     * @param strategy the ordered list of resolver types, must not be null
      * @param obj the object to get the property from
      * @param identifier property name
      * @param arg value to set
@@ -180,5 +189,4 @@ public interface JexlUberspect {
      */
     JexlArithmetic.Uberspect getArithmetic(JexlArithmetic arithmetic);
 
-
 }
\ No newline at end of file
