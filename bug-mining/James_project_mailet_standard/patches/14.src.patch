diff --git a/mailet/standard/src/main/java/org/apache/james/transport/mailets/RecipientToLowerCase.java b/mailet/standard/src/main/java/org/apache/james/transport/mailets/RecipientToLowerCase.java
index 52c34108cf..f5496b768b 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/mailets/RecipientToLowerCase.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/mailets/RecipientToLowerCase.java
@@ -27,7 +27,6 @@ import org.apache.mailet.Mail;
 import org.apache.mailet.MailAddress;
 import org.apache.mailet.base.GenericMailet;
 
-import com.google.common.base.Function;
 import com.google.common.base.Throwables;
 import com.google.common.collect.FluentIterable;
 
@@ -38,22 +37,19 @@ import com.google.common.collect.FluentIterable;
  */
 public class RecipientToLowerCase extends GenericMailet{
 
-    public static final Function<MailAddress, MailAddress> TO_LOWERCASE = new Function<MailAddress, MailAddress>() {
-        @Override
-        public MailAddress apply(MailAddress input) {
-            try {
-                return new MailAddress(input.asString().toLowerCase(Locale.US));
-            } catch (AddressException e) {
-                throw Throwables.propagate(e);
-            }
-        }
-    };
-
     @Override
     public void service(Mail mail) throws MessagingException {
         mail.setRecipients(FluentIterable.from(mail.getRecipients())
-            .transform(TO_LOWERCASE)
+            .transform(this::toLowerCase)
             .toList());
     }
 
+    private MailAddress toLowerCase(MailAddress mailAddress) {
+        try {
+            return new MailAddress(mailAddress.asString().toLowerCase(Locale.US));
+        } catch (AddressException e) {
+            throw Throwables.propagate(e);
+        }
+    }
+
 }
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/mailets/UseHeaderRecipients.java b/mailet/standard/src/main/java/org/apache/james/transport/mailets/UseHeaderRecipients.java
index 2d22205f10..ea45cb24c2 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/mailets/UseHeaderRecipients.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/mailets/UseHeaderRecipients.java
@@ -39,7 +39,6 @@ import org.apache.mailet.Mail;
 import org.apache.mailet.MailAddress;
 import org.apache.mailet.base.GenericMailet;
 
-import com.google.common.base.Function;
 import com.google.common.base.Splitter;
 import com.google.common.base.Throwables;
 import com.google.common.collect.FluentIterable;
@@ -70,17 +69,6 @@ import com.google.common.collect.ImmutableList;
 @Experimental
 public class UseHeaderRecipients extends GenericMailet {
 
-    public static final Function<Mailbox, MailAddress> TO_MAIL_ADDRESS = new Function<Mailbox, MailAddress>() {
-        @Override
-        public MailAddress apply(Mailbox input) {
-            try {
-                return new MailAddress(input.getAddress());
-            } catch (AddressException e) {
-                throw Throwables.propagate(e);
-            }
-        }
-    };
-
     /**
      * Controls certain log messages
      */
@@ -190,10 +178,18 @@ public class UseHeaderRecipients extends GenericMailet {
         }
 
         return FluentIterable.from(mailboxList.build())
-            .transform(TO_MAIL_ADDRESS)
+            .transform(this::toMailAddress)
             .toList();
     }
 
+    private MailAddress toMailAddress(Mailbox mailbox) {
+        try {
+            return new MailAddress(mailbox.getAddress());
+        } catch (AddressException e) {
+            throw Throwables.propagate(e);
+        }
+    }
+
     private Collection<Mailbox> convertAddressToMailboxCollection(Address address) {
         if (address instanceof Mailbox) {
             return ImmutableList.of((Mailbox) address);
diff --git a/mailet/standard/src/main/java/org/apache/james/transport/matchers/utils/MailAddressCollectionReader.java b/mailet/standard/src/main/java/org/apache/james/transport/matchers/utils/MailAddressCollectionReader.java
index 75086bae5a..fb78101ccf 100644
--- a/mailet/standard/src/main/java/org/apache/james/transport/matchers/utils/MailAddressCollectionReader.java
+++ b/mailet/standard/src/main/java/org/apache/james/transport/matchers/utils/MailAddressCollectionReader.java
@@ -25,9 +25,7 @@ import javax.mail.internet.AddressException;
 
 import org.apache.mailet.MailAddress;
 
-import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
-import com.google.common.base.Predicate;
 import com.google.common.base.Splitter;
 import com.google.common.base.Strings;
 import com.google.common.base.Throwables;
@@ -39,20 +37,12 @@ public class MailAddressCollectionReader {
         Preconditions.checkArgument(!Strings.isNullOrEmpty(condition));
         return FluentIterable.from(Splitter.onPattern("(,| |\t)")
             .split(condition))
-            .filter(new Predicate<String>() {
-                @Override
-                public boolean apply(String s) {
-                    return !Strings.isNullOrEmpty(s);
-                }
-            })
-            .transform(new Function<String, MailAddress>() {
-                @Override
-                public MailAddress apply(String s) {
-                    try {
-                        return new MailAddress(s);
-                    } catch (AddressException e) {
-                        throw Throwables.propagate(e);
-                    }
+            .filter(s -> !Strings.isNullOrEmpty(s))
+            .transform(s -> {
+                try {
+                    return new MailAddress(s);
+                } catch (AddressException e) {
+                    throw Throwables.propagate(e);
                 }
             }).toSet();
     }
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/RecipientToLowerCaseTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/RecipientToLowerCaseTest.java
index db88e69dd1..b062cb72fb 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/RecipientToLowerCaseTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/RecipientToLowerCaseTest.java
@@ -25,19 +25,11 @@ import java.util.Collection;
 
 import org.apache.mailet.MailAddress;
 import org.apache.mailet.base.test.FakeMail;
-import org.assertj.core.api.iterable.Extractor;
 import org.junit.Before;
 import org.junit.Test;
 
 public class RecipientToLowerCaseTest {
 
-    public static final Extractor<MailAddress, String> AS_STRING = new Extractor<MailAddress, String>() {
-        @Override
-        public String extract(MailAddress mailAddress) {
-            return mailAddress.asString();
-        }
-    };
-
     private RecipientToLowerCase testee;
 
     @Before
@@ -56,7 +48,7 @@ public class RecipientToLowerCaseTest {
         Collection<MailAddress> recipients = fakeMail.getRecipients();
 
         assertThat(recipients)
-            .extracting(AS_STRING)
+            .extracting(MailAddress::asString)
             .containsOnly("thienan1234@gmail.com");
     }
 
diff --git a/mailet/standard/src/test/java/org/apache/james/transport/mailets/StripAttachmentTest.java b/mailet/standard/src/test/java/org/apache/james/transport/mailets/StripAttachmentTest.java
index 1ded296681..e402b3be23 100644
--- a/mailet/standard/src/test/java/org/apache/james/transport/mailets/StripAttachmentTest.java
+++ b/mailet/standard/src/test/java/org/apache/james/transport/mailets/StripAttachmentTest.java
@@ -54,7 +54,6 @@ import org.junit.rules.ExpectedException;
 import org.junit.rules.TemporaryFolder;
 
 import com.google.common.base.Optional;
-import com.google.common.base.Predicate;
 import com.google.common.collect.FluentIterable;
 
 public class StripAttachmentTest {
@@ -239,13 +238,7 @@ public class StripAttachmentTest {
 
     private String retrieveFilenameStartingWith(Collection<String> savedAttachments, final String filename) {
         return FluentIterable.from(savedAttachments)
-                .filter(new Predicate<String>() {
-
-                    @Override
-                    public boolean apply(String attachmentFilename) {
-                        return attachmentFilename.startsWith(filename);
-                    }
-                })
+                .filter(attachmentFilename -> attachmentFilename.startsWith(filename))
                 .first()
                 .get();
     }
