diff --git a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/PageApi.java b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/PageApi.java
index a3ff32aa..9f6499a6 100644
--- a/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/PageApi.java
+++ b/rave-components/rave-web/src/main/java/org/apache/rave/portal/web/api/rest/PageApi.java
@@ -32,6 +32,7 @@ import org.springframework.web.bind.annotation.*;
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+import org.springframework.security.access.AccessDeniedException;
 
 /**
  * Handler for all services exposed under the /api/rest/page path.
@@ -68,6 +69,23 @@ public class PageApi {
         return page;
     }
 
+    /**
+     * Return a 403 response code when any org.springframework.security.access.AccessDeniedException
+     * is thrown from any of the API methods due to security restrictions
+     * 
+     * TODO: this should probably be moved up to an AbstractRestApi class since
+     * it seems common enough for all RestApi controllers
+     * 
+     * @param ex the AccessDeniedException
+     * @param request the http request
+     * @param response the http response
+     */
+    @ExceptionHandler(AccessDeniedException.class) 
+    public void handleAccessDeniedException(Exception ex, HttpServletRequest request, HttpServletResponse response) {
+        logger.info("AccessDeniedException: " + request.getUserPrincipal().getName() + " attempted to access resource " + request.getRequestURL(), ex);
+        response.setStatus(HttpStatus.FORBIDDEN.value());    
+    }
+    
     // TODO RAVE-240 - when we implement security we can implement different exception
     //        handlers for different errors (unauthorized, resource not found, etc)
     @ExceptionHandler(Exception.class)
diff --git a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/api/rest/PageApiTest.java b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/api/rest/PageApiTest.java
index 23745f3b..662eb1bf 100644
--- a/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/api/rest/PageApiTest.java
+++ b/rave-components/rave-web/src/test/java/org/apache/rave/portal/web/api/rest/PageApiTest.java
@@ -18,6 +18,8 @@
  */
 package org.apache.rave.portal.web.api.rest;
 
+import java.security.Principal;
+import org.springframework.security.access.AccessDeniedException;
 import org.apache.rave.portal.model.*;
 import org.springframework.util.ClassUtils;
 import org.springframework.mock.web.MockHttpServletRequest;
@@ -98,11 +100,24 @@ public class PageApiTest {
     }
     
     @Test
-    public void tesHandleException() {
+    public void testHandleException() {
         RuntimeException re = new RuntimeException("error");        
         String value = pageApi.handleException(re, request, response);
         
         assertThat(value, is(ClassUtils.getShortName(re.getClass())));
         assertThat(response.getStatus(), is(HttpStatus.INTERNAL_SERVER_ERROR.value()));   
     }
+    
+    @Test
+    public void testHandleAccessDeniedException() {
+        Principal principal = createMock(Principal.class);                
+        request.setUserPrincipal(principal);
+        AccessDeniedException ade = new AccessDeniedException("error");        
+        
+        expect(principal.getName()).andReturn("theuser");
+        replay(principal);        
+        pageApi.handleAccessDeniedException(ade, request, response);        
+        assertThat(response.getStatus(), is(HttpStatus.FORBIDDEN.value()));   
+        verify(principal);
+    }    
 }
