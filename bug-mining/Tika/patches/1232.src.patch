diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/txt/CharsetMatch.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/txt/CharsetMatch.java
index b4a549327..faab4a5e1 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/txt/CharsetMatch.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/txt/CharsetMatch.java
@@ -153,23 +153,33 @@ public class CharsetMatch implements Comparable<CharsetMatch> {
 
             return sb.toString();
         } else {
-            String name = getName();
-            /*
-             * getName() may return a name with a suffix 'rtl' or 'ltr'. This cannot
-             * be used to open a charset (e.g. IBM424_rtl). The ending '_rtl' or 'ltr'
-             * should be stripped off before creating the string.
-             */
-            int startSuffix =
-                    !name.contains("_rtl") ? name.indexOf("_ltr") : name.indexOf("_rtl");
-            if (startSuffix > 0) {
-                name = name.substring(0, startSuffix);
-            }
+            String name = getNormalizedName();
             result = new String(fRawInput, name);
         }
         return result;
 
     }
 
+    /**
+     * strips e.g. _rtl, _ltr off of charset names so that they can be used as a charset.
+     *
+     * @return
+     */
+    public String getNormalizedName() {
+        String name = getName();
+        /*
+         * getName() may return a name with a suffix 'rtl' or 'ltr'. This cannot
+         * be used to open a charset (e.g. IBM424_rtl). The ending '_rtl' or '_ltr'
+         * should be stripped off before creating the string.
+         */
+        int startSuffix =
+                !name.contains("_rtl") ? name.indexOf("_ltr") : name.indexOf("_rtl");
+        if (startSuffix > 0) {
+            name = name.substring(0, startSuffix);
+        }
+        return name;
+    }
+
     /**
      * Get an indication of the confidence in the charset detected.
      * Confidence values range from 0-100, with larger numbers indicating
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/txt/Icu4jEncodingDetector.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/txt/Icu4jEncodingDetector.java
index 49f2ef966..ce9ee9fa4 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/txt/Icu4jEncodingDetector.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/txt/Icu4jEncodingDetector.java
@@ -19,6 +19,9 @@ package org.apache.tika.parser.txt;
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.Charset;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
 
 import org.apache.tika.config.Field;
 import org.apache.tika.detect.EncodingDetector;
@@ -34,6 +37,8 @@ public class Icu4jEncodingDetector implements EncodingDetector {
     @Field
     private int markLimit = CharsetDetector.DEFAULT_MARK_LIMIT;
 
+    private Set<String> ignoreCharsets = new HashSet<>();
+
     public Charset detect(InputStream input, Metadata metadata) throws IOException {
         if (input == null) {
             return null;
@@ -68,7 +73,11 @@ public class Icu4jEncodingDetector implements EncodingDetector {
 
         for (CharsetMatch match : detector.detectAll()) {
             try {
-                return CharsetUtils.forName(match.getName());
+                String n = match.getNormalizedName();
+                if (ignoreCharsets.contains(n)) {
+                    return null;
+                }
+                return CharsetUtils.forName(match.getNormalizedName());
             } catch (IllegalArgumentException e) {
                 // ignore
             }
@@ -111,4 +120,9 @@ public class Icu4jEncodingDetector implements EncodingDetector {
     public void setMarkLimit(int markLimit) {
         this.markLimit = markLimit;
     }
+
+    @Field
+    public void setIgnoreCharsets(List<String> charsetsToIgnore) {
+        this.ignoreCharsets.addAll(charsetsToIgnore);
+    }
 }
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/test/java/org/apache/tika/parser/txt/CharsetDetectorTest.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/test/java/org/apache/tika/parser/txt/CharsetDetectorTest.java
index 74f9b6876..d41e3498f 100644
--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/test/java/org/apache/tika/parser/txt/CharsetDetectorTest.java
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/test/java/org/apache/tika/parser/txt/CharsetDetectorTest.java
@@ -29,6 +29,10 @@ import java.nio.file.Files;
 import org.junit.jupiter.api.Test;
 
 import org.apache.tika.TikaTest;
+import org.apache.tika.config.TikaConfig;
+import org.apache.tika.metadata.Metadata;
+import org.apache.tika.metadata.TikaCoreProperties;
+import org.apache.tika.parser.AutoDetectParser;
 
 public class CharsetDetectorTest extends TikaTest {
 
@@ -125,4 +129,17 @@ public class CharsetDetectorTest extends TikaTest {
         detector.setText(sb.toString().getBytes("UTF-8"));
         assertEquals("UTF-8", detector.detect().getName());
     }
+
+    @Test
+    public void testIgnoreCharset() throws Exception {
+        //TIKA-3516, TIKA-3525, TIKA-1236
+        TikaConfig tikaConfig = new TikaConfig(
+                getResourceAsStream("/test-configs/tika-config-ignore-charset.xml"));
+
+        Metadata m = new Metadata();
+
+        m.set(TikaCoreProperties.RESOURCE_NAME_KEY, "texty-text.txt");
+        assertContains("ACTIVE AGE", getXML("testIgnoreCharset.txt",
+                new AutoDetectParser(tikaConfig), m).xml);
+    }
 }
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/test/resources/test-configs/tika-config-ignore-charset.xml b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/test/resources/test-configs/tika-config-ignore-charset.xml
new file mode 100644
index 000000000..0b61f20c9
--- /dev/null
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/test/resources/test-configs/tika-config-ignore-charset.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+  http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<properties>
+    <parsers>
+        <parser class="org.apache.tika.parser.DefaultParser"/>
+    </parsers>
+    <encodingDetectors>
+        <encodingDetector class="org.apache.tika.parser.txt.Icu4jEncodingDetector">
+            <params>
+                <param name="ignoreCharsets" type="list">
+                    <string>IBM424</string>
+                </param>
+            </params>
+        </encodingDetector>
+        <encodingDetector class="org.apache.tika.parser.txt.UniversalEncodingDetector"/>
+    </encodingDetectors>
+</properties>
diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/test/resources/test-documents/testIgnoreCharset.txt b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/test/resources/test-documents/testIgnoreCharset.txt
new file mode 100644
index 000000000..4673e0485
--- /dev/null
+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/test/resources/test-documents/testIgnoreCharset.txt
@@ -0,0 +1,4 @@
+
+ACTIVE AGE
+
+BALM
