diff --git a/CHANGES.txt b/CHANGES.txt
index 3a8fc47e3..9521e9719 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -1,5 +1,7 @@
 Release 1.13 - ???
 
+  * Add detection for embedded MSChart.Graph files (TIKA-1033).
+
   * Fix NPE in Sqlite parser from Nick C (TIKA-1927).
 
   * Fix NPE in Open Document parser from Nick C (TIKA-1916).
diff --git a/tika-core/src/test/java/org/apache/tika/TikaTest.java b/tika-core/src/test/java/org/apache/tika/TikaTest.java
index 2c6f21f2a..1afb6475a 100644
--- a/tika-core/src/test/java/org/apache/tika/TikaTest.java
+++ b/tika-core/src/test/java/org/apache/tika/TikaTest.java
@@ -40,9 +40,12 @@ import org.apache.tika.mime.MediaType;
 import org.apache.tika.parser.AutoDetectParser;
 import org.apache.tika.parser.ParseContext;
 import org.apache.tika.parser.Parser;
+import org.apache.tika.parser.RecursiveParserWrapper;
+import org.apache.tika.sax.BasicContentHandlerFactory;
 import org.apache.tika.sax.BodyContentHandler;
 import org.apache.tika.sax.ToXMLContentHandler;
 import org.xml.sax.ContentHandler;
+import org.xml.sax.helpers.DefaultHandler;
 
 /**
  * Parent class of Tika tests
@@ -129,7 +132,17 @@ public abstract class TikaTest {
       } finally {
           input.close();
       }
-  }
+    }
+
+    protected List<Metadata> getRecursiveJson(String filePath) throws Exception {
+        Parser p = new AutoDetectParser();
+        RecursiveParserWrapper wrapper = new RecursiveParserWrapper(p,
+                new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.XML, -1));
+        try (InputStream is = getResourceAsStream("/test-documents/" + filePath)) {
+            wrapper.parse(is, new DefaultHandler(), new Metadata(), new ParseContext());
+        }
+        return wrapper.getMetadata();
+    }
 
     /**
      * Basic text extraction.
@@ -211,4 +224,16 @@ public abstract class TikaTest {
             }
         }
     }
+
+    public static void debug(List<Metadata> list) {
+        int i = 0;
+        for (Metadata m : list) {
+            for (String n : m.names()) {
+                for (String v : m.getValues(n)) {
+                    System.out.println(i + ": "+n + " : "+v);
+                }
+            }
+            i++;
+        }
+    }
 }
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OfficeParser.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OfficeParser.java
index 96dfd4b73..b8deb9926 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OfficeParser.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/OfficeParser.java
@@ -229,7 +229,8 @@ public class OfficeParser extends AbstractParser {
         OUTLOOK("msg", MediaType.application("vnd.ms-outlook")),
         SOLIDWORKS_PART("sldprt", MediaType.application("sldworks")),
         SOLIDWORKS_ASSEMBLY("sldasm", MediaType.application("sldworks")),
-        SOLIDWORKS_DRAWING("slddrw", MediaType.application("sldworks"));
+        SOLIDWORKS_DRAWING("slddrw", MediaType.application("sldworks")),
+        GRAPH("", MediaType.application("vnd.ms-graph"));
 
         private final String extension;
         private final MediaType type;
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/POIFSContainerDetector.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/POIFSContainerDetector.java
index 02a73306b..d4f1e1395 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/POIFSContainerDetector.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/POIFSContainerDetector.java
@@ -68,6 +68,10 @@ public class POIFSContainerDetector implements Detector {
      */
     public static final MediaType COMP_OBJ =
             new MediaType(GENERAL_EMBEDDED, "format", "comp_obj");
+    /**
+     * Graph/Charts embedded in PowerPoint and Excel
+     */
+    public static final MediaType MS_GRAPH_CHART = application("vnd.ms-graph");
     /**
      * Microsoft Excel
      */
@@ -150,6 +154,15 @@ public class POIFSContainerDetector implements Detector {
     private static final byte[] WORKS_QUILL96 = new byte[]{
             0x51, 0x75, 0x69, 0x6c, 0x6c, 0x39, 0x36
     };
+
+    /**
+     * An ASCII String "MSGraph.Chart" for embedded MSGraph files
+     * The full designator includes a version, e.g. MSGraph.Chart.8
+     */
+    private static final byte[] MS_GRAPH_CHART_BYTES = new byte[]{
+            0x4D, 0x53, 0x47, 0x72, 0x61, 0x70, 0x68,
+            0x2E, 0x43, 0x68, 0x61, 0x72, 0x74,
+    };
     /**
      * Regexp for matching the MPP Project Data stream
      */
@@ -209,6 +222,10 @@ public class POIFSContainerDetector implements Detector {
                 // we want to avoid classifying this as Excel
                 return XLR;
             } else if (names.contains("Workbook") || names.contains("WORKBOOK")) {
+                MediaType tmp = processCompObjFormatType(root);
+                if (tmp.equals(MS_GRAPH_CHART)) {
+                    return MS_GRAPH_CHART;
+                }
                 return XLS;
             } else if (names.contains("Book")) {
                 // Excel 95 or older, we won't be able to parse this....
@@ -309,7 +326,9 @@ public class POIFSContainerDetector implements Detector {
                  * application used to create this file. We want to search for that
                  * name.
                  */
-                if (arrayContains(bytes, STAR_DRAW)) {
+                if (arrayContains(bytes, MS_GRAPH_CHART_BYTES)) {
+                    return MS_GRAPH_CHART;
+                } else if (arrayContains(bytes, STAR_DRAW)) {
                     return SDA;
                 } else if (arrayContains(bytes, STAR_IMPRESS)) {
                     return SDD;
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/AbstractPOIContainerExtractionTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/AbstractPOIContainerExtractionTest.java
index 829051181..f45444636 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/AbstractPOIContainerExtractionTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/AbstractPOIContainerExtractionTest.java
@@ -21,7 +21,7 @@ import static org.junit.Assert.assertNotNull;
 
 import java.net.URL;
 
-import org.apache.tika.TikaTest.TrackingHandler;
+import org.apache.tika.TikaTest;
 import org.apache.tika.extractor.ContainerExtractor;
 import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.mime.MediaType;
@@ -30,7 +30,7 @@ import org.apache.tika.mime.MediaType;
  * Parent class of tests that the various POI powered parsers are
  * able to extract their embedded contents.
  */
-public abstract class AbstractPOIContainerExtractionTest {
+public abstract class AbstractPOIContainerExtractionTest extends TikaTest {
     public static final MediaType TYPE_DOC = MediaType.application("msword");
     public static final MediaType TYPE_PPT = MediaType.application("vnd.ms-powerpoint");
     public static final MediaType TYPE_XLS = MediaType.application("vnd.ms-excel");
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/POIContainerExtractionTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/POIContainerExtractionTest.java
index ceb81819f..25e567feb 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/POIContainerExtractionTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/POIContainerExtractionTest.java
@@ -20,22 +20,15 @@ import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
-import java.io.InputStream;
 import java.util.List;
 
-import org.apache.tika.TikaTest.TrackingHandler;
 import org.apache.tika.extractor.ContainerExtractor;
 import org.apache.tika.extractor.ParserContainerExtractor;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaMetadataKeys;
 import org.apache.tika.mime.MediaType;
-import org.apache.tika.parser.AutoDetectParser;
-import org.apache.tika.parser.ParseContext;
-import org.apache.tika.parser.Parser;
 import org.apache.tika.parser.RecursiveParserWrapper;
-import org.apache.tika.sax.BasicContentHandlerFactory;
 import org.junit.Test;
-import org.xml.sax.helpers.DefaultHandler;
 
 /**
  * Tests that the various POI powered parsers are
@@ -357,16 +350,7 @@ public class POIContainerExtractionTest extends AbstractPOIContainerExtractionTe
     @Test
     public void testEmbeddedStorageId() throws Exception {
 
-        Parser p = new AutoDetectParser();
-
-        RecursiveParserWrapper w = new RecursiveParserWrapper(p,
-                new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.XML, -1));
-        try (InputStream is = getTestFile("testWORD_embeded.doc")) {
-            Metadata meta = new Metadata();
-            ParseContext c = new ParseContext();
-            w.parse(is, new DefaultHandler(), meta, c);
-        }
-        List<Metadata> list = w.getMetadata();
+        List<Metadata> list = getRecursiveJson("testWORD_embeded.doc");
         //.docx
         assertEquals("{F4754C9B-64F5-4B40-8AF4-679732AC0607}",
                 list.get(10).get(TikaMetadataKeys.EMBEDDED_STORAGE_CLASS_ID));
@@ -378,4 +362,21 @@ public class POIContainerExtractionTest extends AbstractPOIContainerExtractionTe
                 list.get(16).get(TikaMetadataKeys.EMBEDDED_STORAGE_CLASS_ID));
 
     }
+
+    @Test
+    public void testEmbeddedGraphChart() throws Exception {
+        //doc converts a chart to a actual xls file
+        //so we only need to look in ppt and xls
+        for (String suffix : new String[]{"ppt", "xls"}) {
+            List<Metadata> list = getRecursiveJson("testMSChart-govdocs-428996."+suffix);
+            boolean found = false;
+            for (Metadata m : list) {
+                if (m.get(Metadata.CONTENT_TYPE).equals(POIFSContainerDetector.MS_GRAPH_CHART.toString())) {
+                    found = true;
+                }
+                assertNull(m.get(RecursiveParserWrapper.EMBEDDED_EXCEPTION));
+            }
+            assertTrue("didn't find chart in "+suffix, found);
+        }
+    }
 }
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLContainerExtractionTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLContainerExtractionTest.java
index 15c389dea..3d1359f7e 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLContainerExtractionTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLContainerExtractionTest.java
@@ -18,12 +18,17 @@ package org.apache.tika.parser.microsoft.ooxml;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+
+import java.util.List;
 
 import org.apache.tika.Tika;
-import org.apache.tika.TikaTest.TrackingHandler;
 import org.apache.tika.extractor.ContainerExtractor;
 import org.apache.tika.extractor.ParserContainerExtractor;
+import org.apache.tika.metadata.Metadata;
+import org.apache.tika.parser.RecursiveParserWrapper;
 import org.apache.tika.parser.microsoft.AbstractPOIContainerExtractionTest;
+import org.apache.tika.parser.microsoft.POIFSContainerDetector;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -298,4 +303,20 @@ public class OOXMLContainerExtractionTest extends AbstractPOIContainerExtraction
         assertEquals(TYPE_PDF, handler.mediaTypes.get(1));
     }
 
+    @Test
+    public void testEmbeddedGraphChart() throws Exception {
+        //docx converts a chart to a actual xlsx file
+        //so we only need to look in pptx and xlsx
+        for (String suffix : new String[]{"pptx", "xlsx"}) {
+            List<Metadata> list = getRecursiveJson("testMSChart-govdocs-428996."+suffix);
+            boolean found = false;
+            for (Metadata m : list) {
+                if (m.get(Metadata.CONTENT_TYPE).equals(POIFSContainerDetector.MS_GRAPH_CHART.toString())) {
+                    found = true;
+                }
+                assertNull(m.get(RecursiveParserWrapper.EMBEDDED_EXCEPTION));
+            }
+            assertTrue("didn't find chart in "+suffix, found);
+        }
+    }
 }
diff --git a/tika-parsers/src/test/resources/test-documents/testMSChart-govdocs-428996.ppt b/tika-parsers/src/test/resources/test-documents/testMSChart-govdocs-428996.ppt
new file mode 100644
index 000000000..2b5a3c3df
Binary files /dev/null and b/tika-parsers/src/test/resources/test-documents/testMSChart-govdocs-428996.ppt differ
diff --git a/tika-parsers/src/test/resources/test-documents/testMSChart-govdocs-428996.pptx b/tika-parsers/src/test/resources/test-documents/testMSChart-govdocs-428996.pptx
new file mode 100644
index 000000000..c1309ba14
Binary files /dev/null and b/tika-parsers/src/test/resources/test-documents/testMSChart-govdocs-428996.pptx differ
diff --git a/tika-parsers/src/test/resources/test-documents/testMSChart-govdocs-428996.xls b/tika-parsers/src/test/resources/test-documents/testMSChart-govdocs-428996.xls
new file mode 100644
index 000000000..7984de811
Binary files /dev/null and b/tika-parsers/src/test/resources/test-documents/testMSChart-govdocs-428996.xls differ
diff --git a/tika-parsers/src/test/resources/test-documents/testMSChart-govdocs-428996.xlsx b/tika-parsers/src/test/resources/test-documents/testMSChart-govdocs-428996.xlsx
new file mode 100644
index 000000000..1882bad50
Binary files /dev/null and b/tika-parsers/src/test/resources/test-documents/testMSChart-govdocs-428996.xlsx differ
