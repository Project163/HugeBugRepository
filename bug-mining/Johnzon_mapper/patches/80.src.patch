diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/DynamicMappingGenerator.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/DynamicMappingGenerator.java
index 86a80b6a..5e7c5c30 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/DynamicMappingGenerator.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/DynamicMappingGenerator.java
@@ -100,7 +100,8 @@ public class DynamicMappingGenerator implements MappingGenerator {
 
         @Override
         public JsonGenerator writeStartObject() {
-            return delegate.writeStartObject();
+            // return delegate.writeStartObject();
+            return this;
         }
 
         @Override
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/FieldAccessMode.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/FieldAccessMode.java
index 831f8959..95a9780f 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/FieldAccessMode.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/FieldAccessMode.java
@@ -109,9 +109,7 @@ public class FieldAccessMode extends BaseAccessMode {
 
         @Override
         public <T extends Annotation> T getClassOrPackageAnnotation(final Class<T> clazz) {
-            final Class<?> declaringClass = field.getDeclaringClass();
-            final T annotation = Meta.getAnnotation(declaringClass, clazz);
-            return annotation == null ? Meta.getAnnotation(declaringClass.getPackage(), clazz) : annotation;
+            return Meta.getClassOrPackageAnnotation(field, clazz);
         }
 
         @Override
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/Meta.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/Meta.java
index 9e57c09e..dbf8e00b 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/Meta.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/Meta.java
@@ -18,28 +18,66 @@
  */
 package org.apache.johnzon.mapper.access;
 
+import static java.util.Arrays.asList;
+
 import java.lang.annotation.Annotation;
 import java.lang.reflect.AccessibleObject;
-import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 import java.util.HashMap;
 import java.util.Map;
-
-import static java.util.Arrays.asList;
+import java.util.function.Supplier;
 
 public final class Meta {
     private Meta() {
         // no-op
     }
 
-    public static <T extends Annotation> T getAnnotation(final AccessibleObject holder, final Class<T> api) {
+    public static <T extends Annotation> T getAnnotation(final Method holder, final Class<T> api) {
+        return getDirectAnnotation(holder, api);
+    }
+
+    public static <T extends Annotation> T getAnnotation(final Field holder, final Class<T> api) {
+        return getDirectAnnotation(holder, api);
+    }
+
+    public static <T extends Annotation> T getClassOrPackageAnnotation(final Method holder, final Class<T> api) {
+        return getIndirectAnnotation(api, holder::getDeclaringClass, () -> holder.getDeclaringClass().getPackage());
+    }
+
+    public static <T extends Annotation> T getClassOrPackageAnnotation(final Field holder, final Class<T> api) {
+        return getIndirectAnnotation(api, holder::getDeclaringClass, () -> holder.getDeclaringClass().getPackage());
+    }
+
+    private static <T extends Annotation> T getDirectAnnotation(final AccessibleObject holder, final Class<T> api) {
         final T annotation = holder.getAnnotation(api);
         if (annotation != null) {
             return annotation;
         }
-        return findMeta(holder.getAnnotations(), api);
+        final T meta = findMeta(holder.getAnnotations(), api);
+        if (meta != null) {
+            return meta;
+        }
+        return null;
+    }
+
+    private static <T extends Annotation> T getIndirectAnnotation(final Class<T> api,
+                                                                  final Supplier<Class<?>> ownerSupplier,
+                                                                  final Supplier<Package> packageSupplier) {
+        final T ownerAnnotation = ownerSupplier.get().getAnnotation(api);
+        if (ownerAnnotation != null) {
+            return ownerAnnotation;
+        } // todo: meta?
+        final Package pck = packageSupplier.get();
+        if (pck != null) {
+            final T pckAnnotation = pck.getAnnotation(api);
+            if (pckAnnotation != null) {
+                return pckAnnotation;
+            }
+        } // todo: meta?
+        return null;
     }
 
     public static <T extends Annotation> T getAnnotation(final Class<?> clazz, final Class<T> api) {
@@ -81,18 +119,15 @@ public final class Meta {
 
     private static <T extends Annotation> T newAnnotation(final Map<String, Method> methodMapping, final Annotation user, final T johnzon) {
         return (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class<?>[]{johnzon.annotationType()},
-                new InvocationHandler() {
-                    @Override
-                    public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
-                        final Method m = methodMapping.get(method.getName());
-                        try {
-                            if (m.getDeclaringClass() == user.annotationType()) {
-                                return m.invoke(user, args);
-                            }
-                            return m.invoke(johnzon, args);
-                        } catch (final InvocationTargetException ite) {
-                            throw ite.getTargetException();
+                (proxy, method, args) -> {
+                    final Method m = methodMapping.get(method.getName());
+                    try {
+                        if (m.getDeclaringClass() == user.annotationType()) {
+                            return m.invoke(user, args);
                         }
+                        return m.invoke(johnzon, args);
+                    } catch (final InvocationTargetException ite) {
+                        throw ite.getTargetException();
                     }
                 });
     }
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/MethodAccessMode.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/MethodAccessMode.java
index b694bd2f..959d69f7 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/MethodAccessMode.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/MethodAccessMode.java
@@ -116,9 +116,7 @@ public class MethodAccessMode extends BaseAccessMode {
 
         @Override
         public <T extends Annotation> T getClassOrPackageAnnotation(final Class<T> clazz) {
-            final Class<?> declaringClass = method.getDeclaringClass();
-            final T annotation = Meta.getAnnotation(declaringClass, clazz);
-            return annotation == null ? Meta.getAnnotation(declaringClass.getPackage(), clazz) : annotation;
+            return Meta.getClassOrPackageAnnotation(method, clazz);
         }
 
         @Override
