diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
index 709801f9..775e7b63 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java
@@ -173,7 +173,13 @@ public class Mapper implements Closeable {
                 || object == null) {
             try {
                 final String valueOf = String.valueOf(object);
-                stream.write(config.isEnforceQuoteString() && String.class.isInstance(object) && !valueOf.startsWith("\"") ? '"' + valueOf + '"' : valueOf);
+                if (object instanceof String) {
+                    stream.write('"');
+                    stream.write(valueOf);
+                    stream.write('"');
+                }  else {
+                    stream.write(valueOf);
+                }
             } catch (final IOException e) {
                 throw new MapperException(e);
             } finally {
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
index 9646a907..cf6de3d1 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperBuilder.java
@@ -88,7 +88,6 @@ public class MapperBuilder {
     private boolean treatByteArrayAsBase64;
     private boolean treatByteArrayAsBase64URL;
     private boolean readAttributeBeforeWrite;
-    private boolean enforceQuoteString;
     private AccessMode accessMode;
     private Charset encoding = Charset.forName(System.getProperty("johnzon.mapper.encoding", "UTF-8"));
     private LazyConverterMap adapters = new LazyConverterMap();
@@ -231,7 +230,7 @@ public class MapperBuilder {
                         version, close,
                         skipNull, skipEmptyArray,
                         treatByteArrayAsBase64, treatByteArrayAsBase64URL, readAttributeBeforeWrite,
-                        accessMode, encoding, attributeOrder, enforceQuoteString, failOnUnknownProperties,
+                        accessMode, encoding, attributeOrder, failOnUnknownProperties,
                         serializeValueFilter, useBigDecimalForFloats, deduplicateObjects,
                         interfaceImplementationMapping, useJsRange, useBigDecimalForObjectNumbers,
                         supportEnumContainerDeserialization,
@@ -457,15 +456,6 @@ public class MapperBuilder {
         return this;
     }
 
-    public MapperBuilder setEnforceQuoteString() {
-        return setEnforceQuoteString(true);
-    }
-
-    public MapperBuilder setEnforceQuoteString(final boolean val) {
-        this.enforceQuoteString = val;
-        return this;
-    }
-
     public MapperBuilder setPrimitiveConverters(final boolean val) {
         this.primitiveConverters = val;
         return this;
diff --git a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
index 6e2906b1..eea17162 100644
--- a/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
+++ b/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MapperConfig.java
@@ -73,7 +73,6 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
     private final Map<Class<?>, ObjectConverter.Writer<?>> objectConverterWriters;
     private final Map<Class<?>, ObjectConverter.Reader<?>> objectConverterReaders;
     private final Comparator<String> attributeOrder;
-    private final boolean enforceQuoteString;
     private final boolean failOnUnknown;
     private final SerializeValueFilter serializeValueFilter;
     private final boolean useBigDecimalForFloats;
@@ -106,7 +105,7 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
                         final boolean readAttributeBeforeWrite,
                         final AccessMode accessMode, final Charset encoding,
                         final Comparator<String> attributeOrder,
-                        final boolean enforceQuoteString, final boolean failOnUnknown,
+                        final boolean failOnUnknown,
                         final SerializeValueFilter serializeValueFilter,
                         final boolean useBigDecimalForFloats,
                         final Boolean deduplicateObjects,
@@ -149,7 +148,6 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
 
 
         this.attributeOrder = attributeOrder;
-        this.enforceQuoteString = enforceQuoteString;
         this.failOnUnknown = failOnUnknown;
         this.serializeValueFilter = serializeValueFilter == null ? (name, value) -> false : serializeValueFilter;
         this.interfaceImplementationMapping = interfaceImplementationMapping;
@@ -410,10 +408,6 @@ public /* DON'T MAKE IT HIDDEN */ class MapperConfig implements Cloneable {
         return attributeOrder;
     }
 
-    public boolean isEnforceQuoteString() {
-        return enforceQuoteString;
-    }
-
     public boolean isUseBigDecimalForFloats() {
         return useBigDecimalForFloats;
     }
diff --git a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java
index 506e74e8..d512b419 100644
--- a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java
+++ b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperConfigTest.java
@@ -169,7 +169,7 @@ public class MapperConfigTest {
                                 new FieldAccessMode(true, true),
                                 StandardCharsets.UTF_8,
                                 null,
-                                false, false, null, false, false, emptyMap(), true, false, true,
+                                false, null, false, false, emptyMap(), true, false, true,
                                 null, null, null, null, null,
                                 type -> new EnumConverter(type));
     }
diff --git a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java
index 45def70e..58b0b2b0 100644
--- a/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java
+++ b/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java
@@ -302,7 +302,6 @@ public class MapperTest {
     public void justObjectAsModel() {
         final Mapper encodingAwareMapper = new MapperBuilder().setEncoding("UTF-8" /*otherwise guess algo fails for too small string*/).build();
         final Mapper simpleMapper = new MapperBuilder().build();
-        final Mapper enforcedQuotes = new MapperBuilder().setEnforceQuoteString().build();
         { // object
             final String object = "{\"a\":1,\"b\":true,\"c\":null,\"d\":[1,2]," +
                     "\"e\":[\"i\",\"j\"],\"k\":{\"a\":1,\"b\":true,\"c\":null,\"d\":[1,2],\"e\":[\"i\",\"j\"]}}";
@@ -339,7 +338,7 @@ public class MapperTest {
             assertEquals("true", simpleMapper.writeObjectAsString(true));
             assertEquals("false", simpleMapper.writeObjectAsString(false));
             assertEquals("1", simpleMapper.writeObjectAsString(1));
-            assertEquals("\"val\"", enforcedQuotes.writeObjectAsString("val"));
+            assertEquals("\"val\"", simpleMapper.writeObjectAsString("val"));
             assertEquals("[\"val1\",\"val2\"]", simpleMapper.writeObjectAsString(asList("val1", "val2")));
             assertEquals("{\"a\":\"val\",\"b\":true,\"c\":1,\"d\":true}", simpleMapper.writeObjectAsString(new TreeMap<String, Object>() {{
                 put("a", "val");
diff --git a/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java b/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java
index fb6ccf8d..febe682d 100644
--- a/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java
+++ b/johnzon-mapper/src/test/java/org/superbiz/ExtendMappingTest.java
@@ -61,7 +61,7 @@ public class ExtendMappingTest {
                     new LazyConverterMap(), new HashMap<>(), new HashMap<>(),
                     -1, true, true, true, false, false, false,
                     new FieldAccessMode(false, false),
-                    StandardCharsets.UTF_8, String::compareTo, false, false, null, false, false,
+                    StandardCharsets.UTF_8, String::compareTo, false, null, false, false,
                     emptyMap(), true, false, true,
                     null, null, null, null, null,
                     type -> new EnumConverter(type)));
