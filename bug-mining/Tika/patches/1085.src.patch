diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/FormattingUtils.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/FormattingUtils.java
index 44dda9ede..1dbed088b 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/FormattingUtils.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/FormattingUtils.java
@@ -1,5 +1,6 @@
 package org.apache.tika.parser.microsoft;
 
+import org.apache.poi.wp.usermodel.CharacterRun;
 import org.apache.poi.xwpf.usermodel.UnderlinePatterns;
 import org.apache.poi.xwpf.usermodel.XWPFRun;
 import org.apache.tika.sax.XHTMLContentHandler;
@@ -50,7 +51,7 @@ public class FormattingUtils {
         ensureFormattingState(xhtml, EnumSet.noneOf(Tag.class), formattingState);
     }
 
-    public static EnumSet<Tag> toTags(XWPFRun run) {
+    public static EnumSet<Tag> toTags(CharacterRun run) {
         EnumSet<Tag> tags = EnumSet.noneOf(Tag.class);
         if (run.isBold()) {
             tags.add(Tag.B);
@@ -61,8 +62,16 @@ public class FormattingUtils {
         if (run.isStrikeThrough()) {
             tags.add(Tag.S);
         }
-        if (run.getUnderline() != UnderlinePatterns.NONE) {
-            tags.add(Tag.U);
+        if(run instanceof XWPFRun) {
+            XWPFRun xwpfRun = (XWPFRun) run;
+            if (xwpfRun.getUnderline() != UnderlinePatterns.NONE) {
+                tags.add(Tag.U);
+            }
+        } else if(run instanceof org.apache.poi.hwpf.usermodel.CharacterRun) {
+            org.apache.poi.hwpf.usermodel.CharacterRun hwpfRun = (org.apache.poi.hwpf.usermodel.CharacterRun) run;
+            if (hwpfRun.getUnderlineCode() != 0) {
+                tags.add(Tag.U);
+            }
         }
         return tags;
     }
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java
index 6f7d3785b..6b3d08c8b 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java
@@ -20,7 +20,9 @@ import static java.nio.charset.StandardCharsets.UTF_8;
 
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.util.ArrayDeque;
 import java.util.ArrayList;
+import java.util.Deque;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -79,11 +81,7 @@ public class WordExtractor extends AbstractPOIFSExtractor {
         fixedParagraphStyles.put("HTML Preformatted", new TagAndStyle("pre", null));
     }
 
-    // True if we are currently in the named style tag:
-    private boolean curStrikeThrough;
-    private boolean curBold;
-    private boolean curItalic;
-    private boolean curUnderline;
+    private final Deque<FormattingUtils.Tag> formattingState = new ArrayDeque<>();
 
     private final Metadata metadata;
 
@@ -389,69 +387,7 @@ public class WordExtractor extends AbstractPOIFSExtractor {
             return;
 
         if (!skipStyling) {
-            if (cr.isBold() != curBold) {
-                // Enforce nesting -- must close u, s and i tags
-                if (curUnderline) {
-                    xhtml.endElement("u");
-                    curUnderline = false;
-                }
-                if (curStrikeThrough) {
-                    xhtml.endElement("s");
-                    curStrikeThrough = false;
-                }
-                if (curItalic) {
-                    xhtml.endElement("i");
-                    curItalic = false;
-                }
-                if (cr.isBold()) {
-                    xhtml.startElement("b");
-                } else {
-                    xhtml.endElement("b");
-                }
-                curBold = cr.isBold();
-            }
-
-            if (cr.isItalic() != curItalic) {
-                // Enforce nesting -- must close u and s tag
-            	if (curUnderline) {
-            		xhtml.endElement("u");
-            		curUnderline = false;
-            	}
-                if (curStrikeThrough) {
-                    xhtml.endElement("s");
-                    curStrikeThrough = false;
-                }
-                if (cr.isItalic()) {
-                    xhtml.startElement("i");
-                } else {
-                    xhtml.endElement("i");
-                }
-                curItalic = cr.isItalic();
-            }
-
-            if (cr.isStrikeThrough() != curStrikeThrough) {
-                // Enforce nesting -- must close u tag
-                if (curUnderline) {
-                    xhtml.endElement("u");
-                    curUnderline = false;
-                }
-                if (cr.isStrikeThrough()) {
-                    xhtml.startElement("s");
-                } else {
-                    xhtml.endElement("s");
-                }
-                curStrikeThrough = cr.isStrikeThrough();
-            }
-            
-            boolean isUnderline = cr.getUnderlineCode() != 0;
-            if (isUnderline != curUnderline) {
-                if (isUnderline) {
-                    xhtml.startElement("u");
-                } else {
-                    xhtml.endElement("u");
-                }
-                curUnderline = isUnderline;
-            }
+            FormattingUtils.ensureFormattingState(xhtml, FormattingUtils.toTags(cr), formattingState);
         }
 
         // Clean up the text
@@ -562,22 +498,7 @@ public class WordExtractor extends AbstractPOIFSExtractor {
         if (skipStyling) {
             return;
         }
-        if (curUnderline) {
-        	xhtml.endElement("u");
-        	curUnderline = false;
-        }
-        if (curStrikeThrough) {
-            xhtml.endElement("s");
-            curStrikeThrough = false;
-        }
-        if (curItalic) {
-            xhtml.endElement("i");
-            curItalic = false;
-        }
-        if (curBold) {
-            xhtml.endElement("b");
-            curBold = false;
-        }
+        FormattingUtils.closeStyleTags(xhtml, formattingState);
     }
 
     //temporary work around for TIKA-1512
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java
index d2c38a42d..edc9c94a4 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java
@@ -211,7 +211,7 @@ public class WordParserTest extends TikaTest {
 
         assertTrue(xml.contains("<i>ita<s>li</s>c</i>"));
         assertTrue(xml.contains("<i>ita<s>l<u>i</u></s>c</i>"));
-        assertTrue(xml.contains("<i><u>unde</u><s><u>r</u></s><u>line</u></i>"));
+        assertTrue(xml.contains("<i><u>unde<s>r</s>line</u></i>"));
     }
 
 
@@ -556,7 +556,7 @@ public class WordParserTest extends TikaTest {
         //TIKA-1255
         String xml = getXML("testWORD_boldHyperlink.doc").xml;
         xml = xml.replaceAll("\\s+", " ");
-        assertContains("<a href=\"http://tika.apache.org/\"><u>hyper </u><b><u>link</u></b></a>", xml);
+        assertContains("<a href=\"http://tika.apache.org/\"><u>hyper <b>link</b></u></a>", xml);
         assertContains("<a href=\"http://tika.apache.org/\"><b><u>hyper</u></b><u> link</u></a>; bold" , xml);
     }
 
