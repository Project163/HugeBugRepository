diff --git a/tika-app/src/main/java/org/apache/tika/batch/DigestingAutoDetectParserFactory.java b/tika-app/src/main/java/org/apache/tika/batch/DigestingAutoDetectParserFactory.java
index 5f54ed49e..1e072fa1b 100644
--- a/tika-app/src/main/java/org/apache/tika/batch/DigestingAutoDetectParserFactory.java
+++ b/tika-app/src/main/java/org/apache/tika/batch/DigestingAutoDetectParserFactory.java
@@ -34,8 +34,13 @@ public class DigestingAutoDetectParserFactory extends ParserFactory {
             return p;
         }
         boolean skipContainerDocument = false;
-        if (config.getAutoDetectParserConfig().getDigesterFactory() != null) {
-            skipContainerDocument = config.getAutoDetectParserConfig().getDigesterFactory().isSkipContainerDocument();
+        if (config
+                .getAutoDetectParserConfig()
+                .getDigesterFactory() != null) {
+            skipContainerDocument = config
+                    .getAutoDetectParserConfig()
+                    .getDigesterFactory()
+                    .isSkipContainerDocument();
         }
         return new DigestingParser(p, digester, skipContainerDocument);
     }
diff --git a/tika-app/src/main/java/org/apache/tika/batch/builders/AppParserFactoryBuilder.java b/tika-app/src/main/java/org/apache/tika/batch/builders/AppParserFactoryBuilder.java
index bfacbd998..09f4d434c 100644
--- a/tika-app/src/main/java/org/apache/tika/batch/builders/AppParserFactoryBuilder.java
+++ b/tika-app/src/main/java/org/apache/tika/batch/builders/AppParserFactoryBuilder.java
@@ -39,14 +39,15 @@ public class AppParserFactoryBuilder implements IParserFactoryBuilder {
         ParserFactory pf = ClassLoaderUtil.buildClass(ParserFactory.class, className);
 
         if (localAttrs.containsKey("parseRecursively")) {
-            String bString = localAttrs.get("parseRecursively").toLowerCase(Locale.ENGLISH);
+            String bString = localAttrs
+                    .get("parseRecursively")
+                    .toLowerCase(Locale.ENGLISH);
             if (bString.equals("true")) {
                 pf.setParseRecursively(true);
             } else if (bString.equals("false")) {
                 pf.setParseRecursively(false);
             } else {
-                throw new RuntimeException(
-                        "parseRecursively must have value of \"true\" or \"false\": " + bString);
+                throw new RuntimeException("parseRecursively must have value of \"true\" or \"false\": " + bString);
             }
         }
         if (pf instanceof DigestingAutoDetectParserFactory) {
@@ -60,16 +61,14 @@ public class AppParserFactoryBuilder implements IParserFactoryBuilder {
 
         String readLimitString = localAttrs.get("digestMarkLimit");
         if (readLimitString == null) {
-            throw new IllegalArgumentException("Must specify \"digestMarkLimit\" for " +
-                    "the DigestingAutoDetectParserFactory");
+            throw new IllegalArgumentException("Must specify \"digestMarkLimit\" for " + "the DigestingAutoDetectParserFactory");
         }
         int readLimit = -1;
 
         try {
             readLimit = Integer.parseInt(readLimitString);
         } catch (NumberFormatException e) {
-            throw new IllegalArgumentException(
-                    "Parameter \"digestMarkLimit\" must be a parseable int: " + readLimitString);
+            throw new IllegalArgumentException("Parameter \"digestMarkLimit\" must be a parseable int: " + readLimitString);
         }
         String digestString = localAttrs.get("digest");
         try {
@@ -78,9 +77,7 @@ public class AppParserFactoryBuilder implements IParserFactoryBuilder {
             try {
                 return new BouncyCastleDigester(readLimit, digestString);
             } catch (IllegalArgumentException bcException) {
-                throw new IllegalArgumentException(
-                        "Tried both CommonsDigester (" + commonsException.getMessage() +
-                                ") and BouncyCastleDigester (" + bcException.getMessage() + ")",
+                throw new IllegalArgumentException("Tried both CommonsDigester (" + commonsException.getMessage() + ") and BouncyCastleDigester (" + bcException.getMessage() + ")",
                         bcException);
             }
         }
diff --git a/tika-app/src/main/java/org/apache/tika/cli/BatchCommandLineBuilder.java b/tika-app/src/main/java/org/apache/tika/cli/BatchCommandLineBuilder.java
index b6528d493..9379f9d45 100644
--- a/tika-app/src/main/java/org/apache/tika/cli/BatchCommandLineBuilder.java
+++ b/tika-app/src/main/java/org/apache/tika/cli/BatchCommandLineBuilder.java
@@ -77,10 +77,14 @@ class BatchCommandLineBuilder {
         boolean foundHeadlessOption = false;
         for (Map.Entry<String, String> e : jvmOpts.entrySet()) {
             fullCommand.add(e.getKey());
-            if (e.getValue().length() > 0) {
+            if (e
+                    .getValue()
+                    .length() > 0) {
                 fullCommand.add(commandLineSafe(e.getValue()));
             }
-            if (e.getKey().contains("java.awt.headless")) {
+            if (e
+                    .getKey()
+                    .contains("java.awt.headless")) {
                 foundHeadlessOption = true;
             }
         }
@@ -93,7 +97,9 @@ class BatchCommandLineBuilder {
         //now add the process commands
         for (Map.Entry<String, String> e : processArgs.entrySet()) {
             fullCommand.add(e.getKey());
-            if (e.getValue().length() > 0) {
+            if (e
+                    .getValue()
+                    .length() > 0) {
                 fullCommand.add(commandLineSafe(e.getValue()));
             }
         }
@@ -121,8 +127,7 @@ class BatchCommandLineBuilder {
      * @param commandLine args that should be part of the batch commandline
      * @param jvmArgs     args that belong as jvm arguments for the forked process
      */
-    private static void mapifyArgs(final String[] args, final Map<String, String> commandLine,
-                                   final Map<String, String> jvmArgs) {
+    private static void mapifyArgs(final String[] args, final Map<String, String> commandLine, final Map<String, String> jvmArgs) {
 
         if (args.length == 0) {
             return;
@@ -130,7 +135,9 @@ class BatchCommandLineBuilder {
 
         Matcher matcher = JVM_OPTS_PATTERN.matcher("");
         for (int i = 0; i < args.length; i++) {
-            if (matcher.reset(args[i]).find()) {
+            if (matcher
+                    .reset(args[i])
+                    .find()) {
                 String jvmArg = matcher.group(1) + matcher.group(2);
                 String v = "";
                 if (i < args.length - 1 && !args[i + 1].startsWith("-")) {
@@ -150,8 +157,7 @@ class BatchCommandLineBuilder {
         }
     }
 
-    private static void translateCommandLine(String[] args, Map<String, String> map)
-            throws IOException {
+    private static void translateCommandLine(String[] args, Map<String, String> map) throws IOException {
         //if there are only two args and they are both directories, treat the first
         //as input and the second as output.
         if (args.length == 2 && !args[0].startsWith("-") && !args[1].startsWith("-")) {
@@ -159,8 +165,7 @@ class BatchCommandLineBuilder {
             Path candOutput = Paths.get(args[1]);
 
             if (Files.isRegularFile(candOutput)) {
-                throw new IllegalArgumentException("Can't specify an existing file as the " +
-                        "second argument for the output directory of a batch process");
+                throw new IllegalArgumentException("Can't specify an existing file as the " + "second argument for the output directory of a batch process");
             }
 
             if (Files.isDirectory(candInput)) {
diff --git a/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java b/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java
index bd78d4338..4aa5361ba 100644
--- a/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java
+++ b/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java
@@ -82,8 +82,6 @@ import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.language.detect.LanguageHandler;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaCoreProperties;
-import org.apache.tika.metadata.serialization.JsonMetadata;
-import org.apache.tika.metadata.serialization.JsonMetadataList;
 import org.apache.tika.mime.MediaType;
 import org.apache.tika.mime.MediaTypeRegistry;
 import org.apache.tika.mime.MimeType;
@@ -107,6 +105,8 @@ import org.apache.tika.sax.ExpandedTitleContentHandler;
 import org.apache.tika.sax.RecursiveParserWrapperHandler;
 import org.apache.tika.sax.WriteOutContentHandler;
 import org.apache.tika.sax.boilerpipe.BoilerpipeContentHandler;
+import org.apache.tika.serialization.JsonMetadata;
+import org.apache.tika.serialization.JsonMetadataList;
 import org.apache.tika.xmp.XMPMetadata;
 
 /**
@@ -123,22 +123,12 @@ public class TikaCLI {
             return new DefaultHandler();
         }
     };
-
-    private final OutputType XML = new OutputType() {
-        @Override
-        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata)
-                throws Exception {
-            return getTransformerHandler(output, "xml", encoding, prettyPrint);
-        }
-    };
-
     private File extractDir = new File(".");
     private ParseContext context;
     private Detector detector;
     private Parser parser;
     private TikaConfig config;
     private String configFilePath;
-    private OutputType type = XML;
     private boolean recursiveJSON = false;
     private URI networkURI = null;
     /**
@@ -147,53 +137,46 @@ public class TikaCLI {
     private String encoding = null;
     private final OutputType TEXT = new OutputType() {
         @Override
-        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata)
-                throws Exception {
+        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata) throws Exception {
             return new BodyContentHandler(getOutputWriter(output, encoding));
         }
     };
     private final OutputType TEXT_MAIN = new OutputType() {
         @Override
-        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata)
-                throws Exception {
+        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata) throws Exception {
             return new BoilerpipeContentHandler(getOutputWriter(output, encoding));
         }
     };
     private final OutputType TEXT_ALL = new OutputType() {
         @Override
-        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata)
-                throws Exception {
+        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata) throws Exception {
             return new WriteOutContentHandler(getOutputWriter(output, encoding));
         }
     };
     private final OutputType METADATA = new OutputType() {
         @Override
-        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata)
-                throws Exception {
+        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata) throws Exception {
             final PrintWriter writer = new PrintWriter(getOutputWriter(output, encoding));
             return new NoDocumentMetHandler(metadata, writer);
         }
     };
     private final OutputType JSON = new OutputType() {
         @Override
-        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata)
-                throws Exception {
+        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata) throws Exception {
             final PrintWriter writer = new PrintWriter(getOutputWriter(output, encoding));
             return new NoDocumentJSONMetHandler(metadata, writer);
         }
     };
     private final OutputType XMP = new OutputType() {
         @Override
-        protected ContentHandler getContentHandler(OutputStream output, final Metadata metadata)
-                throws Exception {
+        protected ContentHandler getContentHandler(OutputStream output, final Metadata metadata) throws Exception {
             final PrintWriter writer = new PrintWriter(getOutputWriter(output, encoding));
             return new NoDocumentXMPMetaHandler(metadata, writer);
         }
     };
     private final OutputType LANGUAGE = new OutputType() {
         @Override
-        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata)
-                throws Exception {
+        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata) throws Exception {
             final PrintWriter writer = new PrintWriter(getOutputWriter(output, encoding));
             return new LanguageHandler() {
                 public void endDocument() {
@@ -205,10 +188,11 @@ public class TikaCLI {
     };
     private final OutputType DETECT = new OutputType() {
         @Override
-        public void process(InputStream stream, OutputStream output, Metadata metadata)
-                throws Exception {
+        public void process(InputStream stream, OutputStream output, Metadata metadata) throws Exception {
             PrintWriter writer = new PrintWriter(getOutputWriter(output, encoding));
-            writer.println(detector.detect(stream, metadata).toString());
+            writer.println(detector
+                    .detect(stream, metadata)
+                    .toString());
             writer.flush();
         }
     };
@@ -221,13 +205,17 @@ public class TikaCLI {
     private boolean pipeMode = true;
     private boolean fork = false;
     private boolean prettyPrint;
-
+    private final OutputType XML = new OutputType() {
+        @Override
+        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata) throws Exception {
+            return getTransformerHandler(output, "xml", encoding, prettyPrint);
+        }
+    };
+    private OutputType type = XML;
     private final OutputType HTML = new OutputType() {
         @Override
-        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata)
-                throws Exception {
-            return new ExpandedTitleContentHandler(
-                    getTransformerHandler(output, "html", encoding, prettyPrint));
+        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata) throws Exception {
+            return new ExpandedTitleContentHandler(getTransformerHandler(output, "html", encoding, prettyPrint));
         }
     };
 
@@ -273,8 +261,7 @@ public class TikaCLI {
         }
     }
 
-    private static void async(String[] args)
-            throws Exception {
+    private static void async(String[] args) throws Exception {
         String tikaConfigPath = "";
         String config = "--config=";
         for (String arg : args) {
@@ -282,7 +269,7 @@ public class TikaCLI {
                 tikaConfigPath = arg.substring(config.length());
             }
         }
-        TikaAsyncCLI.main(new String[]{ tikaConfigPath});
+        TikaAsyncCLI.main(new String[]{tikaConfigPath});
     }
 
     /**
@@ -295,8 +282,7 @@ public class TikaCLI {
      * @throws UnsupportedEncodingException if the given encoding is not supported
      * @see <a href="https://issues.apache.org/jira/browse/TIKA-277">TIKA-277</a>
      */
-    private static Writer getOutputWriter(OutputStream output, String encoding)
-            throws UnsupportedEncodingException {
+    private static Writer getOutputWriter(OutputStream output, String encoding) throws UnsupportedEncodingException {
         if (encoding != null) {
             return new OutputStreamWriter(output, encoding);
         } else {
@@ -317,15 +303,19 @@ public class TikaCLI {
      * @throws TransformerConfigurationException if the transformer can not be created
      * @see <a href="https://issues.apache.org/jira/browse/TIKA-277">TIKA-277</a>
      */
-    private static TransformerHandler getTransformerHandler(OutputStream output, String method,
-                                                            String encoding, boolean prettyPrint)
-            throws TransformerConfigurationException {
+    private static TransformerHandler getTransformerHandler(OutputStream output, String method, String encoding, boolean prettyPrint) throws TransformerConfigurationException {
         SAXTransformerFactory factory = (SAXTransformerFactory) SAXTransformerFactory.newInstance();
         TransformerHandler handler = factory.newTransformerHandler();
-        handler.getTransformer().setOutputProperty(OutputKeys.METHOD, method);
-        handler.getTransformer().setOutputProperty(OutputKeys.INDENT, prettyPrint ? "yes" : "no");
+        handler
+                .getTransformer()
+                .setOutputProperty(OutputKeys.METHOD, method);
+        handler
+                .getTransformer()
+                .setOutputProperty(OutputKeys.INDENT, prettyPrint ? "yes" : "no");
         if (encoding != null) {
-            handler.getTransformer().setOutputProperty(OutputKeys.ENCODING, encoding);
+            handler
+                    .getTransformer()
+                    .setOutputProperty(OutputKeys.ENCODING, encoding);
         }
         handler.setResult(new StreamResult(output));
         return handler;
@@ -345,11 +335,8 @@ public class TikaCLI {
             PDFParserConfig pdfParserConfig = new PDFParserConfig();
             pdfParserConfig.setExtractInlineImages(true);
             pdfParserConfig.setParseIncrementalUpdates(true);
-            String warn = "As a convenience, TikaCLI has turned on extraction of\n" +
-                    "inline images and incremental updates for the PDFParser (TIKA-2374 and " +
-                    "TIKA-4017).\n" +
-                    "Aside from the -z option, this is not the default behavior\n" +
-                    "in Tika generally or in tika-server.";
+            String warn = "As a convenience, TikaCLI has turned on extraction of\n" + "inline images and incremental updates for the PDFParser (TIKA-2374 and " + "TIKA-4017).\n" +
+                    "Aside from the -z option, this is not the default behavior\n" + "in Tika generally or in tika-server.";
             LOG.info(warn);
             context.set(PDFParserConfig.class, pdfParserConfig);
         }
@@ -380,8 +367,7 @@ public class TikaCLI {
         } else if (arg.equals("--list-parser-detail") || arg.equals("--list-parser-details")) {
             pipeMode = false;
             displayParsers(true, false);
-        } else if (arg.equals("--list-parser-detail-apt") ||
-                arg.equals("--list-parser-details-apt")) {
+        } else if (arg.equals("--list-parser-detail-apt") || arg.equals("--list-parser-details-apt")) {
             pipeMode = false;
             displayParsers(true, true);
         } else if (arg.equals("--list-met-models")) {
@@ -459,11 +445,8 @@ public class TikaCLI {
             context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());
         } else if (arg.equals("-r") || arg.equals("--pretty-print")) {
             prettyPrint = true;
-        } else if (arg.equals("-p") || arg.equals("--port") || arg.equals("-s") ||
-                arg.equals("--server")) {
-            throw new IllegalArgumentException(
-                    "As of Tika 2.0, the server option is no longer supported in tika-app.\n" +
-                            "See https://wiki.apache.org/tika/TikaJAXRS for usage.");
+        } else if (arg.equals("-p") || arg.equals("--port") || arg.equals("-s") || arg.equals("--server")) {
+            throw new IllegalArgumentException("As of Tika 2.0, the server option is no longer supported in tika-app.\n" + "See https://wiki.apache.org/tika/TikaJAXRS for usage.");
         } else if (arg.startsWith("-c")) {
             networkURI = new URI(arg.substring("-c".length()));
         } else if (arg.startsWith("--client=")) {
@@ -473,15 +456,16 @@ public class TikaCLI {
             configure();
 
             if (arg.equals("-")) {
-                try (InputStream stream = TikaInputStream
-                        .get(CloseShieldInputStream.wrap(System.in))) {
+                try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {
                     type.process(stream, System.out, new Metadata());
                 }
             } else {
                 URL url;
                 File file = new File(arg);
                 if (file.isFile()) {
-                    url = file.toURI().toURL();
+                    url = file
+                            .toURI()
+                            .toURL();
                 } else {
                     url = new URL(arg);
                 }
@@ -503,17 +487,13 @@ public class TikaCLI {
         configure();
         TikaConfig localConfig = (config == null) ? TikaConfig.getDefaultConfig() : config;
 
-        TikaConfigSerializer
-                .serialize(localConfig, mode, new OutputStreamWriter(System.out, UTF_8), UTF_8);
+        TikaConfigSerializer.serialize(localConfig, mode, new OutputStreamWriter(System.out, UTF_8), UTF_8);
     }
 
-    private void handleRecursiveJson(URL url, OutputStream output)
-            throws IOException, SAXException, TikaException {
+    private void handleRecursiveJson(URL url, OutputStream output) throws IOException, SAXException, TikaException {
         Metadata metadata = new Metadata();
         RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser);
-        RecursiveParserWrapperHandler handler =
-                new RecursiveParserWrapperHandler(getContentHandlerFactory(type), -1,
-                        config.getMetadataFilter());
+        RecursiveParserWrapperHandler handler = new RecursiveParserWrapperHandler(getContentHandlerFactory(type), -1, config.getMetadataFilter());
         try (InputStream input = TikaInputStream.get(url, metadata)) {
             wrapper.parse(input, handler, metadata, context);
         }
@@ -524,8 +504,7 @@ public class TikaCLI {
     }
 
     private ContentHandlerFactory getContentHandlerFactory(OutputType type) {
-        BasicContentHandlerFactory.HANDLER_TYPE handlerType =
-                BasicContentHandlerFactory.HANDLER_TYPE.IGNORE;
+        BasicContentHandlerFactory.HANDLER_TYPE handlerType = BasicContentHandlerFactory.HANDLER_TYPE.IGNORE;
         if (type.equals(HTML)) {
             handlerType = BasicContentHandlerFactory.HANDLER_TYPE.HTML;
         } else if (type.equals(XML)) {
@@ -553,8 +532,7 @@ public class TikaCLI {
         out.println("    -f  or --fork          Use Fork Mode for out-of-process extraction");
         out.println();
         out.println("    --config=<tika-config.xml>");
-        out.println(
-                "        TikaConfig file. Must be specified before -g, -s, -f or the dump-x-config !");
+        out.println("        TikaConfig file. Must be specified before -g, -s, -f or the dump-x-config !");
         out.println("    --dump-minimal-config  Print minimal TikaConfig");
         out.println("    --dump-current-config  Print current TikaConfig");
         out.println("    --dump-static-config   Print static config");
@@ -563,8 +541,7 @@ public class TikaCLI {
         out.println("    -x  or --xml           Output XHTML content (default)");
         out.println("    -h  or --html          Output HTML content");
         out.println("    -t  or --text          Output plain text content (body)");
-        out.println(
-                "    -T  or --text-main     Output plain text content (main content only via boilerpipe handler)");
+        out.println("    -T  or --text-main     Output plain text content (main content only via boilerpipe handler)");
         out.println("    -A  or --text-all      Output all text content");
         out.println("    -m  or --metadata      Output only metadata");
         out.println("    -j  or --json          Output metadata in JSON");
@@ -572,8 +549,7 @@ public class TikaCLI {
         out.println("    -J  or --jsonRecursive Output metadata and content from all");
         out.println("                           embedded files (choose content type");
         out.println("                           with -x, -h, -t or -m; default is -x)");
-        out.println("    -a  or --async         Run Tika in async mode; must specify details in a" +
-                " tikaConfig file");
+        out.println("    -a  or --async         Run Tika in async mode; must specify details in a" + " tikaConfig file");
         out.println("    -l  or --language      Output only language");
         out.println("    -d  or --detect        Detect document type");
         out.println("           --digest=X      Include digest X (md2, md5, sha1,");
@@ -582,8 +558,7 @@ public class TikaCLI {
         out.println("    -pX or --password=X    Use document password X");
         out.println("    -z  or --extract       Extract all attachements into current directory");
         out.println("    --extract-dir=<dir>    Specify target directory for -z");
-        out.println(
-                "    -r  or --pretty-print  For JSON, XML and XHTML outputs, adds newlines and");
+        out.println("    -r  or --pretty-print  For JSON, XML and XHTML outputs, adds newlines and");
         out.println("                           whitespace, for better readability");
         out.println();
         out.println("    --list-parsers");
@@ -591,8 +566,7 @@ public class TikaCLI {
         out.println("    --list-parser-details");
         out.println("         List the available document parsers and their supported mime types");
         out.println("    --list-parser-details-apt");
-        out.println(
-                "         List the available document parsers and their supported mime types in apt format.");
+        out.println("         List the available document parsers and their supported mime types in apt format.");
         out.println("    --list-detectors");
         out.println("         List the available document detectors");
         out.println("    --list-met-models");
@@ -602,8 +576,7 @@ public class TikaCLI {
         out.println();
         out.println();
         out.println("    --compare-file-magic=<dir>");
-        out.println(
-                "         Compares Tika's known media types to the File(1) tool's magic directory");
+        out.println("         Compares Tika's known media types to the File(1) tool's magic directory");
         out.println("Description:");
         out.println("    Apache Tika will parse the file(s) specified on the");
         out.println("    command line and output the extracted text content");
@@ -636,18 +609,15 @@ public class TikaCLI {
         out.println("    -numConsumers              Number of processing threads");
         out.println("    -bc                        Batch config file");
         out.println("    -maxRestarts               Maximum number of times the ");
-        out.println(
-                "                               watchdog process will restart the forked process.");
+        out.println("                               watchdog process will restart the forked process.");
         out.println("    -timeoutThresholdMillis    Number of milliseconds allowed to a parse");
-        out.println(
-                "                               before the process is terminated and restarted");
+        out.println("                               before the process is terminated and restarted");
         out.println("    -fileList                  List of files to process, with");
         out.println("                               paths relative to the input directory");
         out.println("    -includeFilePat            Regular expression to determine which");
         out.println("                               files to process, e.g. \"(?i)\\.pdf\"");
         out.println("    -excludeFilePat            Regular expression to determine which");
-        out.println(
-                "                               files to avoid processing, e.g. \"(?i)\\.pdf\"");
+        out.println("                               files to avoid processing, e.g. \"(?i)\\.pdf\"");
         out.println("    -maxFileSizeBytes          Skip files longer than this value");
         out.println();
         out.println("    Control the type of output with -x, -h, -t and/or -J.");
@@ -715,7 +685,9 @@ public class TikaCLI {
         for (Class<?> modelClass : modelClasses) {
             // we don't care about internal Tika met classes
             // if we do, then we can take this conditional out
-            if (!modelClass.getSimpleName().contains("Tika")) {
+            if (!modelClass
+                    .getSimpleName()
+                    .contains("Tika")) {
                 System.out.println(modelClass.getSimpleName());
                 Field[] keyFields = modelClass.getFields();
                 Arrays.sort(keyFields, Comparator.comparing(Field::getName));
@@ -731,8 +703,7 @@ public class TikaCLI {
      * If a parser is a composite parser, it will list the
      * sub parsers and their mime-types.
      */
-    private void displayParsers(boolean includeMimeTypes, boolean aptListFormat)
-            throws TikaException, IOException, SAXException {
+    private void displayParsers(boolean includeMimeTypes, boolean aptListFormat) throws TikaException, IOException, SAXException {
         configure();
         displayParser(parser, includeMimeTypes, aptListFormat, 3);
     }
@@ -746,18 +717,17 @@ public class TikaCLI {
         }
 
         boolean isComposite = (p instanceof CompositeParser);
-        String name = p.getClass().getName();
+        String name = p
+                .getClass()
+                .getName();
 
         if (apt) {
-            name = name.substring(0, name.lastIndexOf(".") + 1) + "{{{./api/" +
-                    name.replace(".", "/") + "}" + name.substring(name.lastIndexOf(".") + 1) + "}}";
+            name = name.substring(0, name.lastIndexOf(".") + 1) + "{{{./api/" + name.replace(".", "/") + "}" + name.substring(name.lastIndexOf(".") + 1) + "}}";
         } else if (decorated != null) {
             name += decorated;
         }
-        if ((apt && !isComposite) ||
-                !apt) {    // Don't display Composite parsers in the apt output.
-            System.out.println(indent(i) + ((apt) ? "* " : "") + name +
-                    (isComposite ? " (Composite Parser):" : ""));
+        if ((apt && !isComposite) || !apt) {    // Don't display Composite parsers in the apt output.
+            System.out.println(indent(i) + ((apt) ? "* " : "") + name + (isComposite ? " (Composite Parser):" : ""));
             if (apt) {
                 System.out.println();
             }
@@ -772,11 +742,9 @@ public class TikaCLI {
         }
 
         if (isComposite) {
-            Parser[] subParsers =
-                    sortParsers(invertMediaTypeMap(((CompositeParser) p).getParsers()));
+            Parser[] subParsers = sortParsers(invertMediaTypeMap(((CompositeParser) p).getParsers()));
             for (Parser sp : subParsers) {
-                displayParser(sp, includeMimeTypes, apt,
-                        i + ((apt) ? 0 : 3));  // Don't indent for Composites in apt.
+                displayParser(sp, includeMimeTypes, apt, i + ((apt) ? 0 : 3));  // Don't indent for Composites in apt.
             }
         }
     }
@@ -793,7 +761,9 @@ public class TikaCLI {
 
     private void displayDetector(Detector d, int i) {
         boolean isComposite = (d instanceof CompositeDetector);
-        String name = d.getClass().getName();
+        String name = d
+                .getClass()
+                .getName();
         System.out.println(indent(i) + name + (isComposite ? " (Composite Detector):" : ""));
         if (isComposite) {
             List<Detector> subDetectors = ((CompositeDetector) d).getDetectors();
@@ -809,10 +779,16 @@ public class TikaCLI {
 
     private Parser[] sortParsers(Map<Parser, Set<MediaType>> parsers) {
         // Get a nicely sorted list of the parsers
-        Parser[] sortedParsers = parsers.keySet().toArray(new Parser[0]);
+        Parser[] sortedParsers = parsers
+                .keySet()
+                .toArray(new Parser[0]);
         Arrays.sort(sortedParsers, (p1, p2) -> {
-            String name1 = p1.getClass().getName();
-            String name2 = p2.getClass().getName();
+            String name1 = p1
+                    .getClass()
+                    .getName();
+            String name2 = p2
+                    .getClass()
+                    .getName();
             return name1.compareTo(name2);
         });
         return sortedParsers;
@@ -824,7 +800,9 @@ public class TikaCLI {
             if (!parsers.containsKey(e.getValue())) {
                 parsers.put(e.getValue(), new HashSet<>());
             }
-            parsers.get(e.getValue()).add(e.getKey());
+            parsers
+                    .get(e.getValue())
+                    .add(e.getKey());
         }
         return parsers;
     }
@@ -849,9 +827,13 @@ public class TikaCLI {
             Parser p = parsers.get(type);
             if (p != null) {
                 if (p instanceof CompositeParser) {
-                    p = ((CompositeParser) p).getParsers().get(type);
+                    p = ((CompositeParser) p)
+                            .getParsers()
+                            .get(type);
                 }
-                System.out.println("  parser:    " + p.getClass().getName());
+                System.out.println("  parser:    " + p
+                        .getClass()
+                        .getName());
             }
         }
     }
@@ -869,24 +851,23 @@ public class TikaCLI {
 
         // Plausibility check
         File dir = new File(magicDir);
-        if ((new File(dir, "elf")).exists() && (new File(dir, "mime")).exists() &&
-                (new File(dir, "vorbis")).exists()) {
+        if ((new File(dir, "elf")).exists() && (new File(dir, "mime")).exists() && (new File(dir, "vorbis")).exists()) {
             // Looks plausible
         } else {
-            throw new IllegalArgumentException(
-                    magicDir + " doesn't seem to hold uncompressed file magic entries");
+            throw new IllegalArgumentException(magicDir + " doesn't seem to hold uncompressed file magic entries");
         }
 
         // Find all the mimetypes in the directory
         Set<String> fileMimes = new HashSet<>();
         for (File mf : dir.listFiles()) {
             if (mf.isFile()) {
-                BufferedReader r =
-                        new BufferedReader(new InputStreamReader(new FileInputStream(mf), UTF_8));
+                BufferedReader r = new BufferedReader(new InputStreamReader(new FileInputStream(mf), UTF_8));
                 String line;
                 while ((line = r.readLine()) != null) {
                     if (line.startsWith("!:mime") || line.startsWith("#!:mime")) {
-                        String mime = line.substring(7).trim();
+                        String mime = line
+                                .substring(7)
+                                .trim();
                         fileMimes.add(mime);
                     }
                 }
@@ -930,9 +911,7 @@ public class TikaCLI {
                         } else {
                             // Check the parent next
                             MediaType parent = registry.getSupertype(type.getType());
-                            if (parent == MediaType.APPLICATION_XML ||
-                                    parent == MediaType.TEXT_PLAIN ||
-                                    parent == MediaType.OCTET_STREAM) {
+                            if (parent == MediaType.APPLICATION_XML || parent == MediaType.TEXT_PLAIN || parent == MediaType.OCTET_STREAM) {
                                 // Stop checking parents if we hit a top level type
                                 parent = null;
                             }
@@ -958,23 +937,22 @@ public class TikaCLI {
         int tikaAliases = 0;
         for (MediaType type : registry.getTypes()) {
             tikaTypes++;
-            tikaAliases += registry.getAliases(type).size();
+            tikaAliases += registry
+                    .getAliases(type)
+                    .size();
         }
 
         // Report
         System.out.println("Tika knows about " + tikaTypes + " unique mime types");
-        System.out.println(
-                "Tika knows about " + (tikaTypes + tikaAliases) + " mime types including aliases");
-        System.out.println(
-                "The File Magic directory knows about " + fileMimes.size() + " unique mime types");
+        System.out.println("Tika knows about " + (tikaTypes + tikaAliases) + " mime types including aliases");
+        System.out.println("The File Magic directory knows about " + fileMimes.size() + " unique mime types");
         System.out.println();
         System.out.println("The following mime types are known to File but not Tika:");
         for (String mime : tikaLacking) {
             System.out.println("  " + mime);
         }
         System.out.println();
-        System.out.println(
-                "The following mime types from File have no Tika magic (but their children might):");
+        System.out.println("The following mime types from File have no Tika magic (but their children might):");
         for (String mime : tikaNoMagic) {
             System.out.println("  " + mime);
         }
@@ -1058,8 +1036,7 @@ public class TikaCLI {
     }
 
     private class OutputType {
-        public void process(InputStream input, OutputStream output, Metadata metadata)
-                throws Exception {
+        public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {
             Parser p = parser;
             if (fork) {
                 p = new ForkParser(TikaCLI.class.getClassLoader(), p);
@@ -1083,8 +1060,7 @@ public class TikaCLI {
             }
         }
 
-        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata)
-                throws Exception {
+        protected ContentHandler getContentHandler(OutputStream output, Metadata metadata) throws Exception {
             throw new UnsupportedOperationException();
         }
 
@@ -1093,17 +1069,14 @@ public class TikaCLI {
     private class FileEmbeddedDocumentExtractor implements EmbeddedDocumentExtractor {
 
         private final TikaConfig config = TikaConfig.getDefaultConfig();
-        private final EmbeddedStreamTranslator embeddedStreamTranslator =
-                new DefaultEmbeddedStreamTranslator();
+        private final EmbeddedStreamTranslator embeddedStreamTranslator = new DefaultEmbeddedStreamTranslator();
         private int count = 0;
 
         public boolean shouldParseEmbedded(Metadata metadata) {
             return true;
         }
 
-        public void parseEmbedded(InputStream inputStream, ContentHandler contentHandler,
-                                  Metadata metadata, boolean outputHtml)
-                throws SAXException, IOException {
+        public void parseEmbedded(InputStream inputStream, ContentHandler contentHandler, Metadata metadata, boolean outputHtml) throws SAXException, IOException {
 
             if (!inputStream.markSupported()) {
                 inputStream = TikaInputStream.get(inputStream);
@@ -1128,8 +1101,7 @@ public class TikaCLI {
 
             try (FileOutputStream os = new FileOutputStream(outputFile)) {
                 if (embeddedStreamTranslator.shouldTranslate(inputStream, metadata)) {
-                    try (InputStream translated = embeddedStreamTranslator
-                            .translate(inputStream, metadata)) {
+                    try (InputStream translated = embeddedStreamTranslator.translate(inputStream, metadata)) {
                         IOUtils.copy(translated, os);
                     }
                 } else {
@@ -1139,9 +1111,7 @@ public class TikaCLI {
                 //
                 // being a CLI program messages should go to the stderr too
                 //
-                String msg = String.format(Locale.ROOT,
-                        "Ignoring unexpected exception trying to save embedded file %s (%s)", name,
-                        e.getMessage());
+                String msg = String.format(Locale.ROOT, "Ignoring unexpected exception trying to save embedded file %s (%s)", name, e.getMessage());
                 LOG.warn(msg, e);
             }
         }
@@ -1177,15 +1147,19 @@ public class TikaCLI {
             //if file already exists, prepend uuid
             if (outputFile.exists()) {
                 String fileName = FilenameUtils.getName(normalizedName);
-                outputFile = new File(extractDir, UUID.randomUUID().toString() + "-" + fileName);
+                outputFile = new File(extractDir, UUID
+                        .randomUUID()
+                        .toString() + "-" + fileName);
             }
             return outputFile;
         }
 
         private String getExtension(MediaType contentType) {
             try {
-                String ext =
-                        config.getMimeRepository().forName(contentType.toString()).getExtension();
+                String ext = config
+                        .getMimeRepository()
+                        .forName(contentType.toString())
+                        .getExtension();
                 if (ext == null) {
                     return ".bin";
                 } else {
diff --git a/tika-app/src/main/java/org/apache/tika/gui/ParsingTransferHandler.java b/tika-app/src/main/java/org/apache/tika/gui/ParsingTransferHandler.java
index 721ae13b8..debc24e5f 100644
--- a/tika-app/src/main/java/org/apache/tika/gui/ParsingTransferHandler.java
+++ b/tika-app/src/main/java/org/apache/tika/gui/ParsingTransferHandler.java
@@ -78,8 +78,7 @@ class ParsingTransferHandler extends TransferHandler {
 
     public boolean canImport(JComponent component, DataFlavor[] flavors) {
         for (DataFlavor flavor : flavors) {
-            if (flavor.equals(DataFlavor.javaFileListFlavor) || flavor.equals(uriListFlavor) ||
-                    flavor.equals(urlListFlavor)) {
+            if (flavor.equals(DataFlavor.javaFileListFlavor) || flavor.equals(uriListFlavor) || flavor.equals(urlListFlavor)) {
                 return true;
             }
         }
@@ -90,8 +89,7 @@ class ParsingTransferHandler extends TransferHandler {
     public boolean importData(JComponent component, Transferable transferable) {
         try {
             if (transferable.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
-                importFiles(
-                        (List<File>) transferable.getTransferData(DataFlavor.javaFileListFlavor));
+                importFiles((List<File>) transferable.getTransferData(DataFlavor.javaFileListFlavor));
             } else if (transferable.isDataFlavorSupported(urlListFlavor)) {
                 Object data = transferable.getTransferData(urlListFlavor);
                 tika.openURL(new URL(data.toString()));
@@ -114,8 +112,7 @@ class ParsingTransferHandler extends TransferHandler {
         delegate.exportAsDrag(arg0, arg1, arg2);
     }
 
-    public void exportToClipboard(JComponent arg0, Clipboard arg1, int arg2)
-            throws IllegalStateException {
+    public void exportToClipboard(JComponent arg0, Clipboard arg1, int arg2) throws IllegalStateException {
         delegate.exportToClipboard(arg0, arg1, arg2);
     }
 
diff --git a/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java b/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java
index b58b39257..6b1e65966 100644
--- a/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java
+++ b/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java
@@ -75,7 +75,6 @@ import org.apache.tika.extractor.DocumentSelector;
 import org.apache.tika.io.TikaInputStream;
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaCoreProperties;
-import org.apache.tika.metadata.serialization.JsonMetadataList;
 import org.apache.tika.mime.MediaType;
 import org.apache.tika.parser.AutoDetectParser;
 import org.apache.tika.parser.DigestingParser;
@@ -90,6 +89,7 @@ import org.apache.tika.sax.RecursiveParserWrapperHandler;
 import org.apache.tika.sax.TeeContentHandler;
 import org.apache.tika.sax.XHTMLContentHandler;
 import org.apache.tika.sax.boilerpipe.BoilerpipeContentHandler;
+import org.apache.tika.serialization.JsonMetadataList;
 
 /**
  * Simple Swing GUI for Apache Tika. You can drag and drop files on top
@@ -198,9 +198,8 @@ public class TikaGUI extends JFrame implements ActionListener, HyperlinkListener
         UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
         final TikaConfig finalConfig = config;
         SwingUtilities.invokeLater(() -> new TikaGUI(
-                new DigestingParser(new AutoDetectParser(finalConfig),
-                        new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5,
-                                CommonsDigester.DigestAlgorithm.SHA256), false)).setVisible(true));
+                new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),
+                        false)).setVisible(true));
     }
 
     private void addMenuBar() {
@@ -248,15 +247,16 @@ public class TikaGUI extends JFrame implements ActionListener, HyperlinkListener
                 openFile(chooser.getSelectedFile());
             }
         } else if ("openurl".equals(command)) {
-            Object rv = JOptionPane
-                    .showInputDialog(this, "Enter the URL of the resource to be parsed:",
-                            "Open URL", JOptionPane.PLAIN_MESSAGE, null, null, "");
-            if (rv != null && rv.toString().length() > 0) {
+            Object rv = JOptionPane.showInputDialog(this, "Enter the URL of the resource to be parsed:", "Open URL", JOptionPane.PLAIN_MESSAGE, null, null, "");
+            if (rv != null && rv
+                    .toString()
+                    .length() > 0) {
                 try {
-                    openURL(new URL(rv.toString().trim()));
+                    openURL(new URL(rv
+                            .toString()
+                            .trim()));
                 } catch (MalformedURLException exception) {
-                    JOptionPane.showMessageDialog(this, "The given string is not a valid URL",
-                            "Invalid URL", JOptionPane.ERROR_MESSAGE);
+                    JOptionPane.showMessageDialog(this, "The given string is not a valid URL", "Invalid URL", JOptionPane.ERROR_MESSAGE);
                 }
             }
         } else if ("html".equals(command)) {
@@ -274,7 +274,9 @@ public class TikaGUI extends JFrame implements ActionListener, HyperlinkListener
         } else if ("about".equals(command)) {
             textDialog("About Apache Tika", TikaGUI.class.getResource("about.html"));
         } else if ("exit".equals(command)) {
-            Toolkit.getDefaultToolkit().getSystemEventQueue()
+            Toolkit
+                    .getDefaultToolkit()
+                    .getSystemEventQueue()
                     .postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
         }
     }
@@ -309,8 +311,7 @@ public class TikaGUI extends JFrame implements ActionListener, HyperlinkListener
         StringBuilder metadataBuffer = new StringBuilder();
 
         ContentHandler handler =
-                new TeeContentHandler(getHtmlHandler(htmlBuffer), getTextContentHandler(textBuffer),
-                        getTextMainContentHandler(textMainBuffer), getXmlContentHandler(xmlBuffer));
+                new TeeContentHandler(getHtmlHandler(htmlBuffer), getTextContentHandler(textBuffer), getTextMainContentHandler(textMainBuffer), getXmlContentHandler(xmlBuffer));
 
         context.set(DocumentSelector.class, new ImageDocumentSelector());
 
@@ -363,14 +364,12 @@ public class TikaGUI extends JFrame implements ActionListener, HyperlinkListener
             input.reset();
             isReset = true;
         } catch (IOException e) {
-            setText(json, "Error during stream reset.\n" + "There's a limit of " + MAX_MARK +
-                    " bytes for this type of processing in the GUI.\n" +
+            setText(json, "Error during stream reset.\n" + "There's a limit of " + MAX_MARK + " bytes for this type of processing in the GUI.\n" +
                     "Try the app with command line argument of -J.");
         }
         if (isReset) {
             RecursiveParserWrapperHandler recursiveParserWrapperHandler =
-                    new RecursiveParserWrapperHandler(new BasicContentHandlerFactory(
-                            BasicContentHandlerFactory.HANDLER_TYPE.BODY, -1), -1);
+                    new RecursiveParserWrapperHandler(new BasicContentHandlerFactory(BasicContentHandlerFactory.HANDLER_TYPE.BODY, -1), -1);
             RecursiveParserWrapper wrapper = new RecursiveParserWrapper(parser);
             wrapper.parse(input, recursiveParserWrapperHandler, new Metadata(), new ParseContext());
             StringWriter jsonBuffer = new StringWriter();
@@ -384,7 +383,10 @@ public class TikaGUI extends JFrame implements ActionListener, HyperlinkListener
     private void handleError(String name, Throwable t) {
         StringWriter writer = new StringWriter();
         writer.append("Apache Tika was unable to parse the document\n");
-        writer.append("at ").append(name).append(".\n\n");
+        writer
+                .append("at ")
+                .append(name)
+                .append(".\n\n");
         writer.append("The full exception stack trace is included below:\n\n");
         t.printStackTrace(new PrintWriter(writer));
 
@@ -406,8 +408,7 @@ public class TikaGUI extends JFrame implements ActionListener, HyperlinkListener
             editor.setContentType("text/html");
             editor.setEditable(false);
             editor.setBackground(Color.WHITE);
-            editor.setTransferHandler(
-                    new ParsingTransferHandler(editor.getTransferHandler(), this));
+            editor.setTransferHandler(new ParsingTransferHandler(editor.getTransferHandler(), this));
             panel.add(new JScrollPane(editor), name);
         } catch (IOException e) {
             e.printStackTrace();
@@ -445,8 +446,7 @@ public class TikaGUI extends JFrame implements ActionListener, HyperlinkListener
             try {
                 URL url = e.getURL();
                 try (InputStream stream = url.openStream()) {
-                    JEditorPane editor =
-                            new JEditorPane("text/plain", IOUtils.toString(stream, UTF_8));
+                    JEditorPane editor = new JEditorPane("text/plain", IOUtils.toString(stream, UTF_8));
                     editor.setEditable(false);
                     editor.setBackground(Color.WHITE);
                     editor.setCaretPosition(0);
@@ -495,12 +495,13 @@ public class TikaGUI extends JFrame implements ActionListener, HyperlinkListener
     private ContentHandler getHtmlHandler(Writer writer) throws TransformerConfigurationException {
         SAXTransformerFactory factory = (SAXTransformerFactory) SAXTransformerFactory.newInstance();
         TransformerHandler handler = factory.newTransformerHandler();
-        handler.getTransformer().setOutputProperty(OutputKeys.METHOD, "html");
+        handler
+                .getTransformer()
+                .setOutputProperty(OutputKeys.METHOD, "html");
         handler.setResult(new StreamResult(writer));
         return new ContentHandlerDecorator(handler) {
             @Override
-            public void startElement(String uri, String localName, String name, Attributes atts)
-                    throws SAXException {
+            public void startElement(String uri, String localName, String name, Attributes atts) throws SAXException {
                 if (XHTMLContentHandler.XHTML.equals(uri)) {
                     uri = null;
                 }
@@ -520,11 +521,12 @@ public class TikaGUI extends JFrame implements ActionListener, HyperlinkListener
                                     String filename = src.substring(src.indexOf(':') + 1);
                                     try {
                                         File img = imageParser.requestSave(filename);
-                                        String newSrc = img.toURI().toString();
+                                        String newSrc = img
+                                                .toURI()
+                                                .toString();
                                         newAttrs.setValue(i, newSrc);
                                     } catch (IOException e) {
-                                        System.err.println(
-                                                "Error creating temp image file " + filename);
+                                        System.err.println("Error creating temp image file " + filename);
                                         // The html viewer will show a broken image too to alert them
                                     }
                                 }
@@ -565,11 +567,12 @@ public class TikaGUI extends JFrame implements ActionListener, HyperlinkListener
         return new BoilerpipeContentHandler(writer);
     }
 
-    private ContentHandler getXmlContentHandler(Writer writer)
-            throws TransformerConfigurationException {
+    private ContentHandler getXmlContentHandler(Writer writer) throws TransformerConfigurationException {
         SAXTransformerFactory factory = (SAXTransformerFactory) SAXTransformerFactory.newInstance();
         TransformerHandler handler = factory.newTransformerHandler();
-        handler.getTransformer().setOutputProperty(OutputKeys.METHOD, "xml");
+        handler
+                .getTransformer()
+                .setOutputProperty(OutputKeys.METHOD, "xml");
         handler.setResult(new StreamResult(writer));
         return handler;
     }
@@ -598,7 +601,9 @@ public class TikaGUI extends JFrame implements ActionListener, HyperlinkListener
             this.downstreamParser = downstreamParser;
 
             try {
-                File t = Files.createTempFile("tika", ".test").toFile();
+                File t = Files
+                        .createTempFile("tika", ".test")
+                        .toFile();
                 tmpDir = t.getParentFile();
             } catch (IOException e) {
                 //swallow
@@ -613,7 +618,9 @@ public class TikaGUI extends JFrame implements ActionListener, HyperlinkListener
                 embeddedName.substring(splitAt);
             }
 
-            File tmp = Files.createTempFile("tika-embedded-", suffix).toFile();
+            File tmp = Files
+                    .createTempFile("tika-embedded-", suffix)
+                    .toFile();
             wanted.put(embeddedName, tmp);
             return tmp;
         }
@@ -622,8 +629,7 @@ public class TikaGUI extends JFrame implements ActionListener, HyperlinkListener
             return downstreamParser.getSupportedTypes(context);
         }
 
-        public void parse(InputStream stream, ContentHandler handler, Metadata metadata,
-                          ParseContext context) throws IOException, SAXException, TikaException {
+        public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {
             String name = metadata.get(TikaCoreProperties.RESOURCE_NAME_KEY);
             if (name != null && wanted.containsKey(name)) {
                 FileOutputStream out = new FileOutputStream(wanted.get(name));
diff --git a/tika-app/src/test/java/org/apache/tika/cli/TikaCLIAsyncTest.java b/tika-app/src/test/java/org/apache/tika/cli/TikaCLIAsyncTest.java
index d9f6d053f..4913f96cd 100644
--- a/tika-app/src/test/java/org/apache/tika/cli/TikaCLIAsyncTest.java
+++ b/tika-app/src/test/java/org/apache/tika/cli/TikaCLIAsyncTest.java
@@ -39,19 +39,12 @@ public class TikaCLIAsyncTest extends TikaCLITest {
     @BeforeAll
     public static void setUpClass() throws Exception {
         ASYNC_CONFIG = Files.createTempFile(ASYNC_OUTPUT_DIR, "async-config-", ".xml");
-        String xml = "<properties>" + "<async>" + "<numClients>3</numClients>" +
-                "<tikaConfig>" + ASYNC_CONFIG.toAbsolutePath() + "</tikaConfig>" +
-                "</async>" + "<fetchers>" +
-                "<fetcher class=\"org.apache.tika.pipes.fetcher.fs.FileSystemFetcher\">" +
-                "<name>fsf</name>" + "<basePath>" + TEST_DATA_FILE.getAbsolutePath() +
-                "</basePath>" + "</fetcher>" + "</fetchers>" + "<emitters>" +
-                "<emitter class=\"org.apache.tika.pipes.emitter.fs.FileSystemEmitter\">" +
-                "<name>fse</name>" + "<basePath>" + ASYNC_OUTPUT_DIR.toAbsolutePath() +
-                "</basePath>" + "<prettyPrint>true</prettyPrint>" + "</emitter>" + "</emitters>" +
-                "<pipesIterator class=\"org.apache.tika.pipes.pipesiterator.fs.FileSystemPipesIterator\">" +
-                "<basePath>" + TEST_DATA_FILE.getAbsolutePath() + "</basePath>" +
-                "<fetcherName>fsf</fetcherName>" + "<emitterName>fse</emitterName>" +
-                "</pipesIterator>" + "</properties>";
+        String xml = "<properties>" + "<async>" + "<numClients>3</numClients>" + "<tikaConfig>" + ASYNC_CONFIG.toAbsolutePath() + "</tikaConfig>" + "</async>" + "<fetchers>" +
+                "<fetcher class=\"org.apache.tika.pipes.fetcher.fs.FileSystemFetcher\">" + "<name>fsf</name>" + "<basePath>" + TEST_DATA_FILE.getAbsolutePath() + "</basePath>" +
+                "</fetcher>" + "</fetchers>" + "<emitters>" + "<emitter class=\"org.apache.tika.pipes.emitter.fs.FileSystemEmitter\">" + "<name>fse</name>" + "<basePath>" +
+                ASYNC_OUTPUT_DIR.toAbsolutePath() + "</basePath>" + "<prettyPrint>true</prettyPrint>" + "</emitter>" + "</emitters>" +
+                "<pipesIterator class=\"org.apache.tika.pipes.pipesiterator.fs.FileSystemPipesIterator\">" + "<basePath>" + TEST_DATA_FILE.getAbsolutePath() + "</basePath>" +
+                "<fetcherName>fsf</fetcherName>" + "<emitterName>fse</emitterName>" + "</pipesIterator>" + "</properties>";
         Files.write(ASYNC_CONFIG, xml.getBytes(UTF_8));
     }
 
@@ -60,10 +53,16 @@ public class TikaCLIAsyncTest extends TikaCLITest {
         String content = getParamOutContent("-a", "--config=" + ASYNC_CONFIG.toAbsolutePath());
 
         int json = 0;
-        for (File f : ASYNC_OUTPUT_DIR.toFile().listFiles()) {
-            if (f.getName().endsWith(".json")) {
+        for (File f : ASYNC_OUTPUT_DIR
+                .toFile()
+                .listFiles()) {
+            if (f
+                    .getName()
+                    .endsWith(".json")) {
                 //check one file for pretty print
-                if (f.getName().equals("coffee.xls.json")) {
+                if (f
+                        .getName()
+                        .equals("coffee.xls.json")) {
                     checkForPrettyPrint(f);
                 }
                 json++;
@@ -76,10 +75,9 @@ public class TikaCLIAsyncTest extends TikaCLITest {
         String json = FileUtils.readFileToString(f, UTF_8);
         int previous = json.indexOf("Content-Length");
         assertTrue(previous > -1);
-        for (String k : new String[]{"Content-Type", "dc:creator",
-                "dcterms:created", "dcterms:modified", "X-TIKA:content\""}) {
+        for (String k : new String[]{"Content-Type", "dc:creator", "dcterms:created", "dcterms:modified", "X-TIKA:content\""}) {
             int i = json.indexOf(k);
-            assertTrue( i > -1, "should have found " + k);
+            assertTrue(i > -1, "should have found " + k);
             assertTrue(i > previous, "bad order: " + k + " at " + i + " not less than " + previous);
             previous = i;
         }
diff --git a/tika-app/src/test/java/org/apache/tika/cli/TikaCLIBatchCommandLineTest.java b/tika-app/src/test/java/org/apache/tika/cli/TikaCLIBatchCommandLineTest.java
index 3328db596..d25b35cfd 100644
--- a/tika-app/src/test/java/org/apache/tika/cli/TikaCLIBatchCommandLineTest.java
+++ b/tika-app/src/test/java/org/apache/tika/cli/TikaCLIBatchCommandLineTest.java
@@ -59,9 +59,10 @@ public class TikaCLIBatchCommandLineTest {
         } catch (IOException e) {
             throw new RuntimeException("Couldn't open testFile");
         }
-        testInputPathForCommandLine = testInput.toAbsolutePath().toString();
-        escapedInputPathForCommandLine =
-                BatchCommandLineBuilder.commandLineSafe(testInputPathForCommandLine);
+        testInputPathForCommandLine = testInput
+                .toAbsolutePath()
+                .toString();
+        escapedInputPathForCommandLine = BatchCommandLineBuilder.commandLineSafe(testInputPathForCommandLine);
     }
 
     @AfterEach
@@ -84,15 +85,16 @@ public class TikaCLIBatchCommandLineTest {
 
     @Test
     public void testJVMOpts() throws Exception {
-        String[] params = {"-JXmx1g", "-JDlog4j.configuration=batch_process_log4j.xml", "-inputDir",
-                testInputPathForCommandLine, "-outputDir", "testout-output"};
+        String[] params = {"-JXmx1g", "-JDlog4j.configuration=batch_process_log4j.xml", "-inputDir", testInputPathForCommandLine, "-outputDir", "testout-output"};
 
 
         String[] commandLine = BatchCommandLineBuilder.build(params);
         StringBuilder sb = new StringBuilder();
 
         for (String s : commandLine) {
-            sb.append(s).append(" ");
+            sb
+                    .append(s)
+                    .append(" ");
         }
         String s = sb.toString();
         int classInd = s.indexOf("org.apache.tika.batch.fs.FSBatchProcessCLI");
@@ -110,8 +112,7 @@ public class TikaCLIBatchCommandLineTest {
 
     @Test
     public void testBasicMappingOfArgs() throws Exception {
-        String[] params = {"-JXmx1g", "-JDlog4j.configuration=batch_process_log4j.xml", "-bc",
-                "batch-config.xml", "-J", "-h", "-inputDir", testInputPathForCommandLine};
+        String[] params = {"-JXmx1g", "-JDlog4j.configuration=batch_process_log4j.xml", "-bc", "batch-config.xml", "-J", "-h", "-inputDir", testInputPathForCommandLine};
 
         String[] commandLine = BatchCommandLineBuilder.build(params);
         Map<String, String> attrs = mapify(commandLine);
@@ -163,8 +164,7 @@ public class TikaCLIBatchCommandLineTest {
         String outputRoot = "outputRoot";
         String configPath = "c:/somewhere/someConfig.xml";
 
-        String[] params = {"--inputDir", testInputPathForCommandLine, "--outputDir", outputRoot,
-                "--config=" + configPath};
+        String[] params = {"--inputDir", testInputPathForCommandLine, "--outputDir", outputRoot, "--config=" + configPath};
         String[] commandLine = BatchCommandLineBuilder.build(params);
         Map<String, String> attrs = mapify(commandLine);
         assertEquals(escapedInputPathForCommandLine, attrs.get("-inputDir"));
@@ -177,7 +177,9 @@ public class TikaCLIBatchCommandLineTest {
     public void testOneDirOneFileException() throws Exception {
         boolean ex = false;
         try {
-            String path = testFile.toAbsolutePath().toString();
+            String path = testFile
+                    .toAbsolutePath()
+                    .toString();
             path = ProcessUtils.escapeCommandLine(path);
             String[] params = {testInputPathForCommandLine, path};
 
diff --git a/tika-app/src/test/java/org/apache/tika/cli/TikaCLIBatchIntegrationTest.java b/tika-app/src/test/java/org/apache/tika/cli/TikaCLIBatchIntegrationTest.java
index b482db13e..d42a9795f 100644
--- a/tika-app/src/test/java/org/apache/tika/cli/TikaCLIBatchIntegrationTest.java
+++ b/tika-app/src/test/java/org/apache/tika/cli/TikaCLIBatchIntegrationTest.java
@@ -40,7 +40,7 @@ import org.junit.jupiter.api.Test;
 
 import org.apache.tika.metadata.Metadata;
 import org.apache.tika.metadata.TikaCoreProperties;
-import org.apache.tika.metadata.serialization.JsonMetadataList;
+import org.apache.tika.serialization.JsonMetadataList;
 
 public class TikaCLIBatchIntegrationTest {
 
@@ -67,13 +67,20 @@ public class TikaCLIBatchIntegrationTest {
         err = System.err;
         System.setOut(outWriter);
         System.setErr(errWriter);
-        testInputDirForCommandLine = testInputDir.toAbsolutePath().toString();
-        tempOutputDirForCommandLine = tempOutputDir.toAbsolutePath().toString();
+        testInputDirForCommandLine = testInputDir
+                .toAbsolutePath()
+                .toString();
+        tempOutputDirForCommandLine = tempOutputDir
+                .toAbsolutePath()
+                .toString();
         customBatchLogging = tempOutputDir.resolve(propsFileName);
         configFile = Files.createTempFile("tika-app-batch-", ".xml");
-        Files.copy(this.getClass().getResourceAsStream("/" + propsFileName), customBatchLogging);
-        Files.copy(this.getClass().getResourceAsStream("/test-data/tika-config1.xml"),
-                configFile, StandardCopyOption.REPLACE_EXISTING);
+        Files.copy(this
+                .getClass()
+                .getResourceAsStream("/" + propsFileName), customBatchLogging);
+        Files.copy(this
+                .getClass()
+                .getResourceAsStream("/test-data/tika-config1.xml"), configFile, StandardCopyOption.REPLACE_EXISTING);
     }
 
     @AfterEach
@@ -95,18 +102,17 @@ public class TikaCLIBatchIntegrationTest {
 
     @Test
     public void testTikaConfig() throws Exception {
-        String[] params = {
-                "-i", testInputDirForCommandLine,
-                "-o", tempOutputDirForCommandLine,
-                "--config=" + configFile.toAbsolutePath().toString() };
+        String[] params = {"-i", testInputDirForCommandLine, "-o", tempOutputDirForCommandLine, "--config=" + configFile
+                .toAbsolutePath()
+                .toString()};
         TikaCLI.main(params);
         assertFileExists(tempOutputDir.resolve("bad_xml.xml.xml"));
         assertFileExists(tempOutputDir.resolve("coffee.xls.xml"));
     }
+
     @Test
     public void testBasicBatchIntegration() throws Exception {
-        String[] params = {"-i", testInputDirForCommandLine, "-o", tempOutputDirForCommandLine,
-                "-numConsumers", "2"};
+        String[] params = {"-i", testInputDirForCommandLine, "-o", tempOutputDirForCommandLine, "-numConsumers", "2"};
         TikaCLI.main(params);
 
         assertFileExists(tempOutputDir.resolve("bad_xml.xml.xml"));
@@ -115,8 +121,7 @@ public class TikaCLIBatchIntegrationTest {
 
     @Test
     public void testJsonRecursiveBatchIntegration() throws Exception {
-        String[] params = {"-i", testInputDirForCommandLine, "-o", tempOutputDirForCommandLine,
-                "-numConsumers", "10", "-J", //recursive Json
+        String[] params = {"-i", testInputDirForCommandLine, "-o", tempOutputDirForCommandLine, "-numConsumers", "10", "-J", //recursive Json
                 "-t" //plain text in content
         };
         TikaCLI.main(params);
@@ -125,15 +130,16 @@ public class TikaCLIBatchIntegrationTest {
         try (Reader reader = Files.newBufferedReader(jsonFile, UTF_8)) {
             List<Metadata> metadataList = JsonMetadataList.fromJson(reader);
             assertEquals(12, metadataList.size());
-            assertTrue(metadataList.get(6).get(TikaCoreProperties.TIKA_CONTENT)
+            assertTrue(metadataList
+                    .get(6)
+                    .get(TikaCoreProperties.TIKA_CONTENT)
                     .contains("human events"));
         }
     }
 
     @Test
     public void testStreamingJsonRecursiveBatchIntegration() throws Exception {
-        String[] params = {"-i", testInputDirForCommandLine, "-o", tempOutputDirForCommandLine,
-                "-numConsumers", "10", "-J", //recursive Json
+        String[] params = {"-i", testInputDirForCommandLine, "-o", tempOutputDirForCommandLine, "-numConsumers", "10", "-J", //recursive Json
                 "-t", //plain text in content
                 "-streamOut"};
         TikaCLI.main(params);
@@ -142,17 +148,20 @@ public class TikaCLIBatchIntegrationTest {
         try (Reader reader = Files.newBufferedReader(jsonFile, UTF_8)) {
             List<Metadata> metadataList = JsonMetadataList.fromJson(reader);
             assertEquals(12, metadataList.size());
-            assertTrue(metadataList.get(6).get(TikaCoreProperties.TIKA_CONTENT)
+            assertTrue(metadataList
+                    .get(6)
+                    .get(TikaCoreProperties.TIKA_CONTENT)
                     .contains("human events"));
             //test that the last written object has been bumped to the first by JsonMetadataList.fromJson()
-            assertNull(metadataList.get(0).get(TikaCoreProperties.EMBEDDED_RESOURCE_PATH));
+            assertNull(metadataList
+                    .get(0)
+                    .get(TikaCoreProperties.EMBEDDED_RESOURCE_PATH));
         }
     }
 
     @Test
     public void testProcessLogFileConfig() throws Exception {
-        String[] params = {"-i", testInputDirForCommandLine, "-o", tempOutputDirForCommandLine,
-                "-numConsumers", "2", "-JDlog4j.configurationFile=" + customBatchLogging.toUri()};
+        String[] params = {"-i", testInputDirForCommandLine, "-o", tempOutputDirForCommandLine, "-numConsumers", "2", "-JDlog4j.configurationFile=" + customBatchLogging.toUri()};
         TikaCLI.main(params);
 
         assertFileExists(tempOutputDir.resolve("bad_xml.xml.xml"));
@@ -182,8 +191,7 @@ public class TikaCLIBatchIntegrationTest {
             IOUtils.closeQuietly(reader);
         }
 */
-        String[] params = {"-i", testInputDirForCommandLine, "-o", tempOutputDirForCommandLine,
-                "-numConsumers", "10", "-J", //recursive Json
+        String[] params = {"-i", testInputDirForCommandLine, "-o", tempOutputDirForCommandLine, "-numConsumers", "10", "-J", //recursive Json
                 "-t", //plain text in content
                 "-digest", "sha512"};
         TikaCLI.main(params);
@@ -192,15 +200,18 @@ public class TikaCLIBatchIntegrationTest {
 
             List<Metadata> metadataList = JsonMetadataList.fromJson(reader);
             assertEquals(12, metadataList.size());
-            assertNotNull(metadataList.get(0).get("X-TIKA:digest:SHA512"));
-            assertTrue(metadataList.get(0).get("X-TIKA:digest:SHA512")
+            assertNotNull(metadataList
+                    .get(0)
+                    .get("X-TIKA:digest:SHA512"));
+            assertTrue(metadataList
+                    .get(0)
+                    .get("X-TIKA:digest:SHA512")
                     .startsWith("ee46d973ee1852c01858"));
         }
     }
 
     private void assertFileExists(Path path) {
-        assertTrue(Files.isRegularFile(path),
-                "File doesn't exist: " + path.toAbsolutePath());
+        assertTrue(Files.isRegularFile(path), "File doesn't exist: " + path.toAbsolutePath());
     }
 
 }
diff --git a/tika-app/src/test/java/org/apache/tika/cli/TikaCLITest.java b/tika-app/src/test/java/org/apache/tika/cli/TikaCLITest.java
index fa16e124a..0e55ac7db 100644
--- a/tika-app/src/test/java/org/apache/tika/cli/TikaCLITest.java
+++ b/tika-app/src/test/java/org/apache/tika/cli/TikaCLITest.java
@@ -44,11 +44,9 @@ import org.apache.tika.utils.ProcessUtils;
 public class TikaCLITest {
 
     static final File TEST_DATA_FILE = new File("src/test/resources/test-data");
-
-
+    private final URI testDataURI = TEST_DATA_FILE.toURI();
     @TempDir
     private Path extractDir;
-    private final URI testDataURI = TEST_DATA_FILE.toURI();
     /* Test members */
     private ByteArrayOutputStream outContent = null;
     private ByteArrayOutputStream errContent = null;
@@ -57,15 +55,13 @@ public class TikaCLITest {
     private String resourcePrefix;
 
 
-
     protected static void assertExtracted(Path p, String allFiles) throws IOException {
 
         assertTrue(Files.exists(p), "File " + p.getFileName() + " not found in " + allFiles);
 
         assertFalse(Files.isDirectory(p), "File " + p.getFileName() + " is a directory!");
 
-        assertTrue(Files.size(p) > 0,
-                "File " + p.getFileName() + " wasn't extracted with " + "contents");
+        assertTrue(Files.size(p) > 0, "File " + p.getFileName() + " wasn't extracted with " + "contents");
     }
 
     /**
@@ -144,8 +140,7 @@ public class TikaCLITest {
         assertTrue(content.contains("?xml version=\"1.0\" encoding=\"UTF-8\"?"));
 
         content = getParamOutContent("-x", "--digest=SHA256", resourcePrefix + "alice.cli.test");
-        assertTrue(content.contains(
-                "<meta name=\"X-TIKA:digest:SHA256\" content=\"e90779adbac09c4ee"));
+        assertTrue(content.contains("<meta name=\"X-TIKA:digest:SHA256\" content=\"e90779adbac09c4ee"));
 
     }
 
@@ -158,12 +153,10 @@ public class TikaCLITest {
     public void testHTMLOutput() throws Exception {
         String content = getParamOutContent("-h", resourcePrefix + "alice.cli.test");
         assertTrue(content.contains("html xmlns=\"http://www.w3.org/1999/xhtml"));
-        assertTrue(content.contains("<title></title>"),
-                "Expanded <title></title> element should be present");
+        assertTrue(content.contains("<title></title>"), "Expanded <title></title> element should be present");
 
         content = getParamOutContent("-h", "--digest=SHA384", resourcePrefix + "alice.cli.test");
-        assertTrue(content.contains(
-                "<meta name=\"X-TIKA:digest:SHA384\" content=\"c69ea023f5da95a026"));
+        assertTrue(content.contains("<meta name=\"X-TIKA:digest:SHA384\" content=\"c69ea023f5da95a026"));
     }
 
     /**
@@ -224,8 +217,7 @@ public class TikaCLITest {
      */
     @Test
     public void testJsonMetadataOutput() throws Exception {
-        String json = getParamOutContent("--json", "--digest=MD2",
-                resourcePrefix + "testJsonMultipleInts.html");
+        String json = getParamOutContent("--json", "--digest=MD2", resourcePrefix + "testJsonMultipleInts.html");
         //TIKA-1310
         assertTrue(json.contains("\"fb:admins\":\"1,2,3,4\","));
         assertTrue(json.contains("\"X-TIKA:digest:MD2\":"));
@@ -238,12 +230,9 @@ public class TikaCLITest {
      */
     @Test
     public void testJsonMetadataPrettyPrintOutput() throws Exception {
-        String json =
-                getParamOutContent("--json", "-r", resourcePrefix + "testJsonMultipleInts.html");
+        String json = getParamOutContent("--json", "-r", resourcePrefix + "testJsonMultipleInts.html");
 
-        assertTrue(json.contains(
-                "\"X-TIKA:Parsed-By\" : [ \"org.apache.tika.parser.DefaultParser\", " +
-                        "\"org.apache.tika.parser.html.JSoupParser\" ],"));
+        assertTrue(json.contains("\"X-TIKA:Parsed-By\" : [ \"org.apache.tika.parser.DefaultParser\", " + "\"org.apache.tika.parser.html.JSoupParser\" ],"));
         //test pretty-print alphabetic sort of keys
         int enc = json.indexOf("\"Content-Encoding\"");
         int fb = json.indexOf("fb:admins");
@@ -292,16 +281,13 @@ public class TikaCLITest {
      */
     @Test
     public void testListSupportedTypes() throws Exception {
-        String content =
-                getParamOutContent("--list-supported-types", resourcePrefix + "alice.cli.test");
+        String content = getParamOutContent("--list-supported-types", resourcePrefix + "alice.cli.test");
         assertTrue(content.contains("supertype: application/octet-stream"));
     }
 
     @Test
     public void testExtractSimple() throws Exception {
-        String[] expectedChildren =
-                new String[]{"MBD002B040A.cdx", "file4.png", "MBD002B0FA6.bin", "MBD00262FE3.txt",
-                        "file0.emf"};
+        String[] expectedChildren = new String[]{"MBD002B040A.cdx", "file4.png", "MBD002B0FA6.bin", "MBD00262FE3.txt", "file0.emf"};
         testExtract("/coffee.xls", expectedChildren, 8);
     }
 
@@ -330,21 +316,21 @@ public class TikaCLITest {
         testExtract("testZip_zeroByte.zip", expectedChildren);
     }
 
-    private void testExtract(String targetFile, String[] expectedChildrenFileNames)
-            throws Exception {
+    private void testExtract(String targetFile, String[] expectedChildrenFileNames) throws Exception {
         testExtract(targetFile, expectedChildrenFileNames, expectedChildrenFileNames.length);
     }
 
-    private void testExtract(String targetFile, String[] expectedChildrenFileNames,
-                             int expectedLength) throws Exception {
+    private void testExtract(String targetFile, String[] expectedChildrenFileNames, int expectedLength) throws Exception {
 
-        String[] params = {"--extract-dir=" +
-                ProcessUtils.escapeCommandLine(extractDir.toAbsolutePath().toString()), "-z",
-                resourcePrefix + "/" + targetFile};
+        String[] params = {"--extract-dir=" + ProcessUtils.escapeCommandLine(extractDir
+                .toAbsolutePath()
+                .toString()), "-z", resourcePrefix + "/" + targetFile};
 
         TikaCLI.main(params);
 
-        String[] tempFileNames = extractDir.toFile().list();
+        String[] tempFileNames = extractDir
+                .toFile()
+                .list();
         assertNotNull(tempFileNames);
         assertEquals(expectedLength, tempFileNames.length);
         String allFiles = String.join(" : ", tempFileNames);
@@ -358,12 +344,13 @@ public class TikaCLITest {
     public void testExtractTgz() throws Exception {
         //TIKA-2564
 
-        String[] params = {"--extract-dir=" + extractDir.toAbsolutePath(), "-z",
-                resourcePrefix + "/test-documents.tgz"};
+        String[] params = {"--extract-dir=" + extractDir.toAbsolutePath(), "-z", resourcePrefix + "/test-documents.tgz"};
 
         TikaCLI.main(params);
 
-        String[] tempFileNames = extractDir.toFile().list();
+        String[] tempFileNames = extractDir
+                .toFile()
+                .list();
         assertNotNull(tempFileNames);
         String allFiles = String.join(" : ", tempFileNames);
 
@@ -387,8 +374,7 @@ public class TikaCLITest {
     public void testZipWithSubdirs() throws Exception {
         new File("subdir/foo.txt").delete();
         new File("subdir").delete();
-        String content = getParamOutContent("-z", "--extract-dir=target",
-                resourcePrefix + "testWithSubdirs.zip");
+        String content = getParamOutContent("-z", "--extract-dir=target", resourcePrefix + "testWithSubdirs.zip");
         assertTrue(content.contains("Extracting 'subdir/foo.txt'"));
         // clean up. TODO: These should be in target.
         new File("target/subdir/foo.txt").delete();
@@ -397,12 +383,13 @@ public class TikaCLITest {
 
     @Test
     public void testExtractInlineImages() throws Exception {
-        String[] params = {"--extract-dir=" + extractDir.toAbsolutePath(), "-z",
-                resourcePrefix + "/testPDF_childAttachments.pdf"};
+        String[] params = {"--extract-dir=" + extractDir.toAbsolutePath(), "-z", resourcePrefix + "/testPDF_childAttachments.pdf"};
 
         TikaCLI.main(params);
 
-        String[] tempFileNames = extractDir.toFile().list();
+        String[] tempFileNames = extractDir
+                .toFile()
+                .list();
         assertNotNull(tempFileNames);
         String allFiles = String.join(" : ", tempFileNames);
 
@@ -434,18 +421,14 @@ public class TikaCLITest {
 
     @Test
     public void testConfig() throws Exception {
-        String content =
-                getParamOutContent("--config=" + TEST_DATA_FILE.toString() + "/tika-config1.xml",
-                        resourcePrefix + "bad_xml.xml");
+        String content = getParamOutContent("--config=" + TEST_DATA_FILE.toString() + "/tika-config1.xml", resourcePrefix + "bad_xml.xml");
         assertTrue(content.contains("apple"));
         assertTrue(content.contains("org.apache.tika.parser.html.JSoupParser"));
     }
 
     @Test
     public void testConfigIgnoreInit() throws Exception {
-        String content = getParamOutContent(
-                "--config=" + TEST_DATA_FILE.toString() + "/TIKA-2389-ignore-init-problems.xml",
-                resourcePrefix + "test_recursive_embedded.docx");
+        String content = getParamOutContent("--config=" + TEST_DATA_FILE.toString() + "/TIKA-2389-ignore-init-problems.xml", resourcePrefix + "test_recursive_embedded.docx");
         assertTrue(content.contains("embed_1a"));
         //TODO: add a real unit test that configures logging to a file to test that nothing is
         //written at the various logging levels
@@ -454,79 +437,62 @@ public class TikaCLITest {
 
     @Test
     public void testJsonRecursiveMetadataParserMetadataOnly() throws Exception {
-        String content = getParamOutContent("-m", "-J", "-r",
-                resourcePrefix + "test_recursive_embedded.docx");
+        String content = getParamOutContent("-m", "-J", "-r", resourcePrefix + "test_recursive_embedded.docx");
         assertTrue(content.contains("\"extended-properties:AppVersion\" : \"15.0000\","));
-        assertTrue(content.contains(
-                "\"extended-properties:Application\" : \"Microsoft Office Word\","));
+        assertTrue(content.contains("\"extended-properties:Application\" : \"Microsoft Office Word\","));
         assertTrue(content.contains("\"X-TIKA:embedded_resource_path\" : \"/embed1.zip\""));
         assertFalse(content.contains("X-TIKA:content"));
     }
 
     @Test
     public void testJsonRecursiveMetadataParserDefault() throws Exception {
-        String content =
-                getParamOutContent("-J", "-r", resourcePrefix + "test_recursive_embedded.docx");
-        assertTrue(content.contains(
-                "\"X-TIKA:content\" : \"<html xmlns=\\\"http://www.w3.org/1999/xhtml"));
+        String content = getParamOutContent("-J", "-r", resourcePrefix + "test_recursive_embedded.docx");
+        assertTrue(content.contains("\"X-TIKA:content\" : \"<html xmlns=\\\"http://www.w3.org/1999/xhtml"));
     }
 
     @Test
     public void testJsonRecursiveMetadataParserText() throws Exception {
-        String content = getParamOutContent("-J", "-r", "-t",
-                resourcePrefix + "test_recursive_embedded.docx");
+        String content = getParamOutContent("-J", "-r", "-t", resourcePrefix + "test_recursive_embedded.docx");
         assertTrue(content.contains("\\n\\nembed_4\\n"));
         assertTrue(content.contains("\\n\\nembed_0"));
     }
 
     @Test
     public void testDigestInJson() throws Exception {
-        String content = getParamOutContent("-J", "-r", "-t", "--digest=MD5",
-                resourcePrefix + "test_recursive_embedded.docx");
-        assertTrue(
-                content.contains("\"X-TIKA:digest:MD5\" : \"59f626e09a8c16ab6dbc2800c685f772\","));
-        assertTrue(
-                content.contains("\"X-TIKA:digest:MD5\" : \"f9627095ef86c482e61d99f0cc1cf87d\""));
+        String content = getParamOutContent("-J", "-r", "-t", "--digest=MD5", resourcePrefix + "test_recursive_embedded.docx");
+        assertTrue(content.contains("\"X-TIKA:digest:MD5\" : \"59f626e09a8c16ab6dbc2800c685f772\","));
+        assertTrue(content.contains("\"X-TIKA:digest:MD5\" : \"f9627095ef86c482e61d99f0cc1cf87d\""));
     }
 
     @Test
     public void testConfigSerializationStaticAndCurrent() throws Exception {
         String content = getParamOutContent("--dump-static-config");
         //make sure at least one detector is there
-        assertTrue(content.contains(
-                "<detector class=\"org.apache.tika.detect.microsoft.POIFSContainerDetector\"/>"));
+        assertTrue(content.contains("<detector class=\"org.apache.tika.detect.microsoft.POIFSContainerDetector\"/>"));
         //make sure Executable is there because follow on tests of custom config
         //test that it has been turned off.
-        assertTrue(content.contains(
-                "<parser class=\"org.apache.tika.parser.executable.ExecutableParser\"/>"));
+        assertTrue(content.contains("<parser class=\"org.apache.tika.parser.executable.ExecutableParser\"/>"));
 
         content = getParamOutContent("--dump-current-config");
         //make sure at least one detector is there
-        assertTrue(
-                content.contains("<detector class=\"org.apache.tika.detect.DefaultDetector\"/>"));
+        assertTrue(content.contains("<detector class=\"org.apache.tika.detect.DefaultDetector\"/>"));
         //and at least one parser
         assertTrue(content.contains("<parser class=\"org.apache.tika.parser.DefaultParser\"/>"));
     }
 
     @Test
     public void testConfigSerializationCustomMinimal() throws Exception {
-        String content =
-                getParamOutContent("--config=" + TEST_DATA_FILE.toString() + "/tika-config2.xml",
-                        "--dump-minimal-config").replaceAll("[\r\n\t ]+", " ");
-
-        String expected = "<parser class=\"org.apache.tika.parser.DefaultParser\">" +
-                " <mime-exclude>application/pdf</mime-exclude>" +
-                " <mime-exclude>image/jpeg</mime-exclude> " + "</parser> " +
-                "<parser class=\"org.apache.tika.parser.EmptyParser\">" +
-                " <mime>application/pdf</mime> " + "</parser>";
+        String content = getParamOutContent("--config=" + TEST_DATA_FILE.toString() + "/tika-config2.xml", "--dump-minimal-config").replaceAll("[\r\n\t ]+", " ");
+
+        String expected =
+                "<parser class=\"org.apache.tika.parser.DefaultParser\">" + " <mime-exclude>application/pdf</mime-exclude>" + " <mime-exclude>image/jpeg</mime-exclude> " +
+                        "</parser> " + "<parser class=\"org.apache.tika.parser.EmptyParser\">" + " <mime>application/pdf</mime> " + "</parser>";
         assertTrue(content.contains(expected));
     }
 
     @Test
     public void testConfigSerializationCustomStatic() throws Exception {
-        String content =
-                getParamOutContent("--config=" + TEST_DATA_FILE.toString() + "/tika-config2.xml",
-                        "--dump-static-config");
+        String content = getParamOutContent("--config=" + TEST_DATA_FILE.toString() + "/tika-config2.xml", "--dump-static-config");
         assertFalse(content.contains("org.apache.tika.parser.executable.Executable"));
     }
 
diff --git a/tika-app/src/test/java/org/apache/tika/extractor/TestEmbeddedDocumentUtil.java b/tika-app/src/test/java/org/apache/tika/extractor/TestEmbeddedDocumentUtil.java
index 3306f6f23..bcd31dffa 100644
--- a/tika-app/src/test/java/org/apache/tika/extractor/TestEmbeddedDocumentUtil.java
+++ b/tika-app/src/test/java/org/apache/tika/extractor/TestEmbeddedDocumentUtil.java
@@ -37,9 +37,7 @@ public class TestEmbeddedDocumentUtil {
         Parser p = new AutoDetectParser();
         ParseContext parseContext = new ParseContext();
         parseContext.set(Parser.class, p);
-        Parser txtParser = EmbeddedDocumentUtil
-                .tryToFindExistingLeafParser(org.apache.tika.parser.csv.TextAndCSVParser.class,
-                        parseContext);
+        Parser txtParser = EmbeddedDocumentUtil.tryToFindExistingLeafParser(org.apache.tika.parser.csv.TextAndCSVParser.class, parseContext);
         assertNotNull(txtParser);
         assertEquals(org.apache.tika.parser.csv.TextAndCSVParser.class, txtParser.getClass());
 
@@ -51,9 +49,7 @@ public class TestEmbeddedDocumentUtil {
         RecursiveParserWrapper wrapper = new RecursiveParserWrapper(d, true);
         ParseContext parseContext = new ParseContext();
         parseContext.set(Parser.class, wrapper);
-        Parser txtParser = EmbeddedDocumentUtil
-                .tryToFindExistingLeafParser(org.apache.tika.parser.csv.TextAndCSVParser.class,
-                        parseContext);
+        Parser txtParser = EmbeddedDocumentUtil.tryToFindExistingLeafParser(org.apache.tika.parser.csv.TextAndCSVParser.class, parseContext);
         assertNotNull(txtParser);
         assertEquals(org.apache.tika.parser.csv.TextAndCSVParser.class, txtParser.getClass());
     }
