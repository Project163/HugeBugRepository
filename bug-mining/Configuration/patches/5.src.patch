diff --git a/conf/config/deep/testEqualDeep.properties b/conf/config/deep/testEqualDeep.properties
new file mode 100644
index 00000000..509bb2b3
--- /dev/null
+++ b/conf/config/deep/testEqualDeep.properties
@@ -0,0 +1,12 @@
+property.a = a
+property.b = b
+property.c = 100
+
+#
+# Value set twice
+property.a = aa
+
+clear.property = delete me
+
+existing.property = i exist
+
diff --git a/conf/config/deep/testFileFromClasspath.xml b/conf/config/deep/testFileFromClasspath.xml
new file mode 100644
index 00000000..e872c497
--- /dev/null
+++ b/conf/config/deep/testFileFromClasspath.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+
+<configuration>
+  <properties config-name="propConf" fileName="testEqual.properties"/>
+  <properties config-name="propConfDeep" fileName="testEqualDeep.properties"/>
+</configuration>
+
diff --git a/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java b/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
index 05c8434d..ffc18b9a 100644
--- a/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
+++ b/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
@@ -26,6 +26,7 @@ import java.io.OutputStreamWriter;
 import java.io.Reader;
 import java.io.UnsupportedEncodingException;
 import java.io.Writer;
+import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.Iterator;
 
@@ -523,8 +524,10 @@ public abstract class AbstractFileConfiguration extends BaseConfiguration implem
     }
 
     /**
-     * Set the name of the file. The passed in file name should not contain a
-     * path. Use <code>{@link AbstractFileConfiguration#setPath(String)
+     * Set the name of the file. The passed in file name can contain a
+     * relative path. 
+     * It must be used when referring files with relative paths from classpath.
+     * Use <code>{@link AbstractFileConfiguration#setPath(String)
      * setPath()}</code> to set a full qualified file name.
      *
      * @param fileName the name of the file
@@ -559,7 +562,8 @@ public abstract class AbstractFileConfiguration extends BaseConfiguration implem
 
     /**
      * Return the file where the configuration is stored. If the base path is a
-     * URL with a protocol different than &quot;file&quot;, the return value
+     * URL with a protocol different than &quot;file&quot;, or the configuration 
+     * file is within a compressed archive, the return value
      * will not point to a valid file object.
      *
      * @return the file where the configuration is stored; this can be <b>null</b>
@@ -600,19 +604,51 @@ public abstract class AbstractFileConfiguration extends BaseConfiguration implem
 
     /**
      * Returns the full path to the file this configuration is based on. The
-     * return value is valid only if this configuration is based on a file on
-     * the local disk.
+     * return value is a valid File path only if this configuration is based on 
+     * a file on the local disk.
+     * If the configuration was loaded from a packed archive the returned value
+     * is the string form of the URL from which the configuration was loaded.
      *
      * @return the full path to the configuration file
      */
     public String getPath()
     {
-        return getFile().getAbsolutePath();
+        String path = null;
+        File file = getFile();
+        // if resource was loaded from jar file may be null
+        if (file != null)
+        {
+            path = file.getAbsolutePath();
+        }
+        
+        // try to see if file was loaded from a jar
+        if (path == null)
+        {
+            if (sourceURL != null)
+            {
+                path = sourceURL.getPath();
+            }
+            else
+            {
+                try {
+                    path = ConfigurationUtils.getURL(getBasePath(),
+                            getFileName()).getPath();
+                } catch (MalformedURLException e) {
+                    // simply ignore it and return null
+                }
+            }
+        }
+
+        return path;
     }
 
     /**
-     * Sets the location of this configuration as a full path name. The passed
-     * in path should represent a valid file name.
+     * Sets the location of this configuration as a full or relative path name. 
+     * The passed in path should represent a valid file name on the file system.
+     * It must not be used to specify relative paths for files that exist 
+     * in classpath, either plain file system or compressed archive, 
+     * because this method expands any relative path to an absolute one which
+     * may end in an invalid absolute path for classpath references.
      *
      * @param path the full path name of the configuration file
      */
diff --git a/src/java/org/apache/commons/configuration/AbstractHierarchicalFileConfiguration.java b/src/java/org/apache/commons/configuration/AbstractHierarchicalFileConfiguration.java
index e0f9d4c6..0a99c01c 100644
--- a/src/java/org/apache/commons/configuration/AbstractHierarchicalFileConfiguration.java
+++ b/src/java/org/apache/commons/configuration/AbstractHierarchicalFileConfiguration.java
@@ -65,7 +65,7 @@ implements FileConfiguration, ConfigurationListener
     {
         this();
         // store the file name
-        delegate.setPath(fileName);
+        delegate.setFileName(fileName);
 
         // load the file
         load();
diff --git a/src/java/org/apache/commons/configuration/ConfigurationUtils.java b/src/java/org/apache/commons/configuration/ConfigurationUtils.java
index 771239a2..17878db1 100644
--- a/src/java/org/apache/commons/configuration/ConfigurationUtils.java
+++ b/src/java/org/apache/commons/configuration/ConfigurationUtils.java
@@ -486,31 +486,32 @@ public final class ConfigurationUtils
             }
         }
 
-        String resourceName = null;
+        // attempt to load from classpath
         if (url == null)
         {
-            if (base != null)
-            {
-                resourceName = base + RESOURCE_PATH_SEPARATOR + name;
-            }
-            else
-            {
-                resourceName = name;
-            }
+            url = locateFromClasspath(name);
         }
+        return url;
+    }
 
+    /**
+     * Tries to find a resource with the given name in the classpath.
+     * @param resourceName the name of the resource
+     * @return the URL to the found resource or <b>null</b> if the resource
+     * cannot be found
+     */
+    static URL locateFromClasspath(String resourceName)
+    {
+        URL url = null;
         // attempt to load from the context classpath
-        if (url == null)
+        ClassLoader loader = Thread.currentThread().getContextClassLoader();
+        if (loader != null)
         {
-            ClassLoader loader = Thread.currentThread().getContextClassLoader();
-            if (loader != null)
-            {
-                url = loader.getResource(resourceName);
+            url = loader.getResource(resourceName);
 
-                if (url != null)
-                {
-                    log.debug("Configuration loaded from the context classpath (" + resourceName + ")");
-                }
+            if (url != null)
+            {
+                log.debug("Configuration loaded from the context classpath (" + resourceName + ")");
             }
         }
 
@@ -524,7 +525,6 @@ public final class ConfigurationUtils
                 log.debug("Configuration loaded from the system classpath (" + resourceName + ")");
             }
         }
-
         return url;
     }
 
diff --git a/src/test/org/apache/commons/configuration/TestFileConfiguration.java b/src/test/org/apache/commons/configuration/TestFileConfiguration.java
index 3928b499..77afd62c 100644
--- a/src/test/org/apache/commons/configuration/TestFileConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestFileConfiguration.java
@@ -491,6 +491,20 @@ public class TestFileConfiguration extends TestCase
         compare(config1, config2);
     }
 
+    /**
+     * Tests the loading of configuration file in a Combined configuration 
+     * when the configuration source is in the classpath.
+     */
+    public void testLoadFromClassPath() throws ConfigurationException
+    {
+        DefaultConfigurationBuilder cf = 
+            new DefaultConfigurationBuilder("conf/config/deep/testFileFromClasspath.xml");
+        CombinedConfiguration config = cf.getConfiguration(true);
+        Configuration config1 = config.getConfiguration("propConf");
+        Configuration config2 = config.getConfiguration("propConfDeep");
+        compare(config1, config2);
+    }
+
     /**
      * Tests cloning a file based configuration.
      */
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 6c346a01..cfc5a61a 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -23,6 +23,11 @@
   <body>
 
     <release version="1.3-rc2" date="in SVN">
+      <action dev="oheger" type="update" issue="CONFIGURATION-216" due-to="Gabriele Garuglieri">
+        There were still some problems with resolving relative paths when
+        configuration files are loaded from classpath. This fix addresses these
+        issues.
+      </action>
       <action dev="oheger" type="update" issue="CONFIGURATION-220">
         DataConfiguration.getDateArray() used to ignore the format argument.
         This was fixed.
