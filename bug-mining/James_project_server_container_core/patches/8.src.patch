diff --git a/server/container/core/src/main/java/org/apache/james/core/MailImpl.java b/server/container/core/src/main/java/org/apache/james/core/MailImpl.java
index c0cbdeb1b2..857302a3f0 100644
--- a/server/container/core/src/main/java/org/apache/james/core/MailImpl.java
+++ b/server/container/core/src/main/java/org/apache/james/core/MailImpl.java
@@ -19,19 +19,6 @@
 
 package org.apache.james.core;
 
-import org.apache.james.lifecycle.api.Disposable;
-import org.apache.james.lifecycle.api.LifecycleUtil;
-import org.apache.mailet.Mail;
-import org.apache.mailet.MailAddress;
-import org.apache.mailet.PerRecipientHeaders;
-import org.apache.mailet.PerRecipientHeaders.Header;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.mail.MessagingException;
-import javax.mail.internet.MimeMessage;
-import javax.mail.internet.ParseException;
-
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -49,6 +36,19 @@ import java.util.Iterator;
 import java.util.Map;
 import java.util.UUID;
 
+import javax.mail.MessagingException;
+import javax.mail.internet.MimeMessage;
+import javax.mail.internet.ParseException;
+
+import org.apache.james.lifecycle.api.Disposable;
+import org.apache.james.lifecycle.api.LifecycleUtil;
+import org.apache.mailet.Mail;
+import org.apache.mailet.MailAddress;
+import org.apache.mailet.PerRecipientHeaders;
+import org.apache.mailet.PerRecipientHeaders.Header;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 /**
  * <p>
  * Wraps a MimeMessage adding routing information (from SMTP) and some simple
@@ -127,7 +127,7 @@ public class MailImpl implements Disposable, Mail {
      */
     public MailImpl() {
         setState(Mail.DEFAULT);
-        attributes = new HashMap<String, Object>();
+        attributes = new HashMap<>();
         perRecipientSpecificHeaders = new PerRecipientHeaders();
     }
 
@@ -147,7 +147,7 @@ public class MailImpl implements Disposable, Mail {
 
         // Copy the recipient list
         if (recipients != null) {
-            this.recipients = new ArrayList<MailAddress>();
+            this.recipients = new ArrayList<>();
             this.recipients.addAll(recipients);
         }
     }
@@ -177,7 +177,7 @@ public class MailImpl implements Disposable, Mail {
             if (mail instanceof MailImpl) {
                 setAttributesRaw((HashMap<String, Object>) cloneSerializableObject(((MailImpl) mail).getAttributesRaw()));
             } else {
-                HashMap<String, Object> attribs = new HashMap<String, Object>();
+                HashMap<String, Object> attribs = new HashMap<>();
                 for (Iterator<String> i = mail.getAttributeNames(); i.hasNext(); ) {
                     String hashKey = i.next();
                     attribs.put(hashKey, cloneSerializableObject(mail.getAttribute(hashKey)));
@@ -186,10 +186,10 @@ public class MailImpl implements Disposable, Mail {
             }
         } catch (IOException e) {
             LOGGER.error("Error while deserializing attributes", e);
-            setAttributesRaw(new HashMap<String, Object>());
+            setAttributesRaw(new HashMap<>());
         } catch (ClassNotFoundException e) {
             LOGGER.error("Error while deserializing attributes", e);
-            setAttributesRaw(new HashMap<String, Object>());
+            setAttributesRaw(new HashMap<>());
         }
     }
 
@@ -520,7 +520,7 @@ public class MailImpl implements Disposable, Mail {
             attributes = (HashMap<String, Object>) in.readObject();
         } catch (OptionalDataException ode) {
             if (ode.eof) {
-                attributes = new HashMap<String, Object>();
+                attributes = new HashMap<>();
             } else {
                 throw ode;
             }
@@ -582,7 +582,7 @@ public class MailImpl implements Disposable, Mail {
      * @since 2.2.0
      */
     public void setAttributesRaw(HashMap<String, Object> attr) {
-        this.attributes = (attr == null) ? new HashMap<String, Object>() : attr;
+        this.attributes = (attr == null) ? new HashMap<>() : attr;
     }
 
     @Override
diff --git a/server/container/core/src/main/java/org/apache/james/core/MimeMessageInputStreamSource.java b/server/container/core/src/main/java/org/apache/james/core/MimeMessageInputStreamSource.java
index 531529a1ac..46d1afdab8 100644
--- a/server/container/core/src/main/java/org/apache/james/core/MimeMessageInputStreamSource.java
+++ b/server/container/core/src/main/java/org/apache/james/core/MimeMessageInputStreamSource.java
@@ -42,7 +42,7 @@ import org.apache.james.lifecycle.api.Disposable;
  */
 public class MimeMessageInputStreamSource extends MimeMessageSource implements Disposable {
 
-    private final List<InputStream> streams = new ArrayList<InputStream>();
+    private final List<InputStream> streams = new ArrayList<>();
 
     /**
      * A temporary file used to hold the message stream
diff --git a/server/container/core/src/test/java/org/apache/james/core/MailImplTest.java b/server/container/core/src/test/java/org/apache/james/core/MailImplTest.java
index 57a8ae1950..aa82d0b99c 100644
--- a/server/container/core/src/test/java/org/apache/james/core/MailImplTest.java
+++ b/server/container/core/src/test/java/org/apache/james/core/MailImplTest.java
@@ -18,17 +18,22 @@
  ****************************************************************/
 package org.apache.james.core;
 
-import org.apache.mailet.base.test.MailUtil;
-import org.apache.mailet.MailAddress;
-import org.apache.mailet.Mail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNotSame;
+import static org.junit.Assert.assertNull;
+
+import java.io.ByteArrayInputStream;
+import java.util.ArrayList;
 
 import javax.mail.MessagingException;
 import javax.mail.Session;
 import javax.mail.internet.MimeMessage;
 
-import java.io.ByteArrayInputStream;
-import java.util.ArrayList;
-import static org.junit.Assert.*;
+import org.apache.mailet.Mail;
+import org.apache.mailet.MailAddress;
+import org.apache.mailet.base.test.MailUtil;
 import org.junit.Test;
 
 public class MailImplTest extends MailTestAllImplementations {
@@ -53,7 +58,7 @@ public class MailImplTest extends MailTestAllImplementations {
 
     @Test
     public void testConstr2() throws MessagingException {
-        ArrayList<MailAddress> recepients = new ArrayList<MailAddress>();
+        ArrayList<MailAddress> recepients = new ArrayList<>();
         String name = MailUtil.newId();
         String sender = "sender@localhost";
         MailAddress senderMailAddress = new MailAddress(sender);
@@ -71,7 +76,7 @@ public class MailImplTest extends MailTestAllImplementations {
 
     @Test
     public void testConstr3() throws MessagingException {
-        ArrayList<MailAddress> recepients = new ArrayList<MailAddress>();
+        ArrayList<MailAddress> recepients = new ArrayList<>();
         String name = MailUtil.newId();
         String sender = "sender@localhost";
         MailAddress senderMailAddress = new MailAddress(sender);
diff --git a/server/container/core/src/test/java/org/apache/james/core/MimeMessageCopyOnWriteProxyTest.java b/server/container/core/src/test/java/org/apache/james/core/MimeMessageCopyOnWriteProxyTest.java
index c9c2e42ba3..36c678bc33 100644
--- a/server/container/core/src/test/java/org/apache/james/core/MimeMessageCopyOnWriteProxyTest.java
+++ b/server/container/core/src/test/java/org/apache/james/core/MimeMessageCopyOnWriteProxyTest.java
@@ -18,6 +18,14 @@
  ****************************************************************/
 package org.apache.james.core;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNotSame;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
 import java.util.ArrayList;
 import java.util.Properties;
 
@@ -29,7 +37,6 @@ import javax.mail.util.SharedByteArrayInputStream;
 import org.apache.james.lifecycle.api.LifecycleUtil;
 import org.apache.mailet.Mail;
 import org.apache.mailet.MailAddress;
-import static org.junit.Assert.*;
 import org.junit.Test;
 
 public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
@@ -48,7 +55,7 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
 
     @Test
     public void testMessageCloning1() throws Exception {
-        ArrayList<MailAddress> r = new ArrayList<MailAddress>();
+        ArrayList<MailAddress> r = new ArrayList<>();
         r.add(new MailAddress("recipient@test.com"));
         MimeMessageCopyOnWriteProxy messageFromSources = (MimeMessageCopyOnWriteProxy) getMessageFromSources(
                 content + sep + body);
@@ -74,7 +81,7 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
 
     @Test
     public void testMessageCloning2() throws Exception {
-        ArrayList<MailAddress> r = new ArrayList<MailAddress>();
+        ArrayList<MailAddress> r = new ArrayList<>();
         r.add(new MailAddress("recipient@test.com"));
         MimeMessageCopyOnWriteProxy messageFromSources = (MimeMessageCopyOnWriteProxy) getMessageFromSources(
                 content + sep + body);
@@ -124,7 +131,7 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
      */
     @Test
     public void testMessageAvoidCloning() throws Exception {
-        ArrayList<MailAddress> r = new ArrayList<MailAddress>();
+        ArrayList<MailAddress> r = new ArrayList<>();
         r.add(new MailAddress("recipient@test.com"));
         MimeMessageCopyOnWriteProxy messageFromSources = (MimeMessageCopyOnWriteProxy) getMessageFromSources(
                 content + sep + body);
@@ -160,7 +167,7 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
      */
     @Test
     public void testMessageCloning3() throws Exception {
-        ArrayList<MailAddress> r = new ArrayList<MailAddress>();
+        ArrayList<MailAddress> r = new ArrayList<>();
         r.add(new MailAddress("recipient@test.com"));
         MimeMessage m = new MimeMessage(Session.getDefaultInstance(new Properties(null)));
         m.setText("CIPS");
@@ -181,7 +188,7 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
 
     @Test
     public void testMessageDisposing() throws Exception {
-        ArrayList<MailAddress> r = new ArrayList<MailAddress>();
+        ArrayList<MailAddress> r = new ArrayList<>();
         r.add(new MailAddress("recipient@test.com"));
         MimeMessageCopyOnWriteProxy messageFromSources = (MimeMessageCopyOnWriteProxy) getMessageFromSources(
                 content + sep + body);
@@ -203,7 +210,7 @@ public class MimeMessageCopyOnWriteProxyTest extends MimeMessageFromStreamTest {
 
     @Test
     public void testNPE1() throws MessagingException, InterruptedException {
-        ArrayList<MailAddress> recipients = new ArrayList<MailAddress>();
+        ArrayList<MailAddress> recipients = new ArrayList<>();
         recipients.add(new MailAddress("recipient@test.com"));
         MimeMessageCopyOnWriteProxy mw = new MimeMessageCopyOnWriteProxy(new MimeMessageInputStreamSource("test",
                 new SharedByteArrayInputStream(("Return-path: return@test.com\r\n" + "Content-Transfer-Encoding: plain\r\n" + "Subject: test\r\n\r\n" + "Body Text testNPE1\r\n").
