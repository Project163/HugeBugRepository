diff --git a/src/main/java/org/apache/sling/commons/classloader/impl/PackageAdminClassLoader.java b/src/main/java/org/apache/sling/commons/classloader/impl/PackageAdminClassLoader.java
index f7d9b52..d9052a3 100644
--- a/src/main/java/org/apache/sling/commons/classloader/impl/PackageAdminClassLoader.java
+++ b/src/main/java/org/apache/sling/commons/classloader/impl/PackageAdminClassLoader.java
@@ -50,7 +50,7 @@ class PackageAdminClassLoader extends ClassLoader {
     private final DynamicClassLoaderManagerFactory factory;
 
     /** A cache for resolved classes. */
-    private Map<String, Class<?>> classCache = new ConcurrentHashMap<String, Class<?>>();
+    private Map<String, Class<?>> classCache = new ConcurrentHashMap<>();
 
     /** Negative class cache. */
     private Set<String> negativeClassCache = Collections.synchronizedSet(new HashSet<String>());
@@ -58,7 +58,7 @@ class PackageAdminClassLoader extends ClassLoader {
     private Map<String, Bundle> packageProviders = new ConcurrentHashMap<>();
 
     /** A cache for resolved urls. */
-    private Map<String, URL> urlCache = new ConcurrentHashMap<String, URL>();
+    private Map<String, URL> urlCache = new ConcurrentHashMap<>();
 
     public PackageAdminClassLoader(final PackageAdmin pckAdmin,
             final ClassLoader parent,
@@ -157,6 +157,7 @@ class PackageAdminClassLoader extends ClassLoader {
                     e = bundle.getResources(name);
                     if (e != null) {
                         packageProviders.put(packageName, bundle);
+                        this.factory.addUsedBundle(bundle);
                         LOGGER.debug("Marking bundle {}:{} as the provider for API package {}.", bundle.getSymbolicName(), bundle
                                 .getVersion().toString(), packageName);
                         return e;
@@ -192,6 +193,7 @@ class PackageAdminClassLoader extends ClassLoader {
                     url = bundle.getResource(name);
                     if (url != null) {
                         urlCache.put(name, url);
+                        this.factory.addUsedBundle(bundle);
                         packageProviders.put(packageName, bundle);
                         LOGGER.debug("Marking bundle {}:{} as the provider for API package {}.", bundle.getSymbolicName(), bundle
                                 .getVersion().toString(), packageName);
diff --git a/src/test/java/org/apache/sling/commons/classloader/impl/BundeChangesTest.java b/src/test/java/org/apache/sling/commons/classloader/impl/BundeChangesTest.java
index 873271a..656aa2a 100644
--- a/src/test/java/org/apache/sling/commons/classloader/impl/BundeChangesTest.java
+++ b/src/test/java/org/apache/sling/commons/classloader/impl/BundeChangesTest.java
@@ -79,14 +79,16 @@ public class BundeChangesTest {
 
         // at this point the bundle is not used, so nothing should happen on update:
 
-        // step one: stop bundle
+        // step one: stop bundle and unresolve
         listener.bundleChanged(new BundleEvent(BundleEvent.STOPPING, bundle));
         listener.bundleChanged(new BundleEvent(BundleEvent.STOPPED, bundle));
+        listener.bundleChanged(new BundleEvent(BundleEvent.UNRESOLVED, bundle));
         assertFalse(registerCalled.get());
         assertFalse(unregisterCalled.get());
 
-        // step two: update bundle
+        // step two: update bundle and resolved
         listener.bundleChanged(new BundleEvent(BundleEvent.UPDATED, bundle));
+        listener.bundleChanged(new BundleEvent(BundleEvent.RESOLVED, bundle));
         assertFalse(registerCalled.get());
         assertFalse(unregisterCalled.get());
 
@@ -104,13 +106,21 @@ public class BundeChangesTest {
         // and update
         listener.bundleChanged(new BundleEvent(BundleEvent.STOPPING, bundle));
         listener.bundleChanged(new BundleEvent(BundleEvent.STOPPED, bundle));
-        assertFalse(registerCalled.get());
-        assertFalse(unregisterCalled.get());
+        listener.bundleChanged(new BundleEvent(BundleEvent.UNRESOLVED, bundle));
+        assertTrue(registerCalled.get());
+        assertTrue(unregisterCalled.get());
+
+        registerCalled.set(false);
+        unregisterCalled.set(false);
 
         // step two: update bundle
         listener.bundleChanged(new BundleEvent(BundleEvent.UPDATED, bundle));
-        assertFalse(registerCalled.get());
-        assertFalse(unregisterCalled.get());
+        listener.bundleChanged(new BundleEvent(BundleEvent.RESOLVED, bundle));
+        assertTrue(registerCalled.get());
+        assertTrue(unregisterCalled.get());
+
+        registerCalled.set(false);
+        unregisterCalled.set(false);
 
         // step three: start bundle
         listener.bundleChanged(new BundleEvent(BundleEvent.STARTING, bundle));
