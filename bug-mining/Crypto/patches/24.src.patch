diff --git a/pom.xml b/pom.xml
index 4529a5f7..11753649 100644
--- a/pom.xml
+++ b/pom.xml
@@ -494,23 +494,5 @@ The following provides more details on the included cryptographic software:
       <version>${junit.version}</version>
       <scope>test</scope>
     </dependency>
-    <dependency>
-      <groupId>commons-logging</groupId>
-      <artifactId>commons-logging</artifactId>
-      <version>${commons-logging.version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.slf4j</groupId>
-      <artifactId>slf4j-api</artifactId>
-      <version>${slf4j-api.version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.slf4j</groupId>
-      <artifactId>slf4j-simple</artifactId>
-      <version>${slf4j-api.version}</version>
-      <scope>test</scope>
-    </dependency>
   </dependencies>
 </project>
diff --git a/src/test/java/org/apache/commons/crypto/stream/AbstractCipherStreamTest.java b/src/test/java/org/apache/commons/crypto/stream/AbstractCipherStreamTest.java
index 1a494db3..c055616d 100644
--- a/src/test/java/org/apache/commons/crypto/stream/AbstractCipherStreamTest.java
+++ b/src/test/java/org/apache/commons/crypto/stream/AbstractCipherStreamTest.java
@@ -30,22 +30,19 @@
 import java.security.SecureRandom;
 import java.util.Properties;
 import java.util.Random;
+import javax.crypto.spec.IvParameterSpec;
+import javax.crypto.spec.SecretKeySpec;
 
-import org.apache.commons.crypto.cipher.*;
+import org.apache.commons.crypto.cipher.CipherTransformation;
 import org.apache.commons.crypto.cipher.CryptoCipher;
+import org.apache.commons.crypto.cipher.JceCipher;
+import org.apache.commons.crypto.cipher.OpensslCipher;
 import org.apache.commons.crypto.utils.ReflectionUtils;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
-import javax.crypto.spec.IvParameterSpec;
-import javax.crypto.spec.SecretKeySpec;
-
 public abstract class AbstractCipherStreamTest {
-    private static final Log LOG = LogFactory
-            .getLog(AbstractCipherStreamTest.class);
 
     private final int dataLen = 20000;
     private byte[] data = new byte[dataLen];
@@ -339,15 +336,14 @@ private void doReadWriteTest(int count, String encCipherClass,
     private void doReadWriteTestForInputStream(int count,
             String encCipherClass, String decCipherClass, byte[] iv)
             throws IOException {
+        // Created a cipher object of type encCipherClass;
         CryptoCipher encCipher = getCipher(encCipherClass);
-        LOG.debug("Created a cipher object of type: " + encCipherClass);
 
         // Generate data
         SecureRandom random = new SecureRandom();
         byte[] originalData = new byte[count];
         byte[] decryptedData = new byte[count];
         random.nextBytes(originalData);
-        LOG.debug("Generated " + count + " records");
 
         // Encrypt data
         ByteArrayOutputStream encryptedData = new ByteArrayOutputStream();
@@ -356,10 +352,9 @@ private void doReadWriteTestForInputStream(int count,
         out.write(originalData, 0, originalData.length);
         out.flush();
         out.close();
-        LOG.debug("Finished encrypting data");
 
+        // Created a cipher object of type decCipherClass;
         CryptoCipher decCipher = getCipher(decCipherClass);
-        LOG.debug("Created a cipher object of type: " + decCipherClass);
 
         // Decrypt data
         CryptoInputStream in = getCryptoInputStream(new ByteArrayInputStream(
@@ -396,21 +391,20 @@ private void doReadWriteTestForInputStream(int count,
                     expected, in.read());
         } while (expected != -1);
 
-        LOG.debug("SUCCESS! Completed checking " + count + " records");
+        // Completed checking records;
     }
 
     private void doReadWriteTestForReadableByteChannel(int count,
             String encCipherClass, String decCipherClass, byte[] iv)
             throws IOException {
+        // Creates a cipher object of type encCipherClass;
         CryptoCipher encCipher = getCipher(encCipherClass);
-        LOG.debug("Created a cipher object of type: " + encCipherClass);
 
         // Generate data
         SecureRandom random = new SecureRandom();
         byte[] originalData = new byte[count];
         byte[] decryptedData = new byte[count];
         random.nextBytes(originalData);
-        LOG.debug("Generated " + count + " records");
 
         // Encrypt data
         ByteArrayOutputStream encryptedData = new ByteArrayOutputStream();
@@ -419,10 +413,9 @@ private void doReadWriteTestForReadableByteChannel(int count,
         out.write(originalData, 0, originalData.length);
         out.flush();
         out.close();
-        LOG.debug("Finished encrypting data");
 
+        // Creates a cipher object of type decCipherClass
         CryptoCipher decCipher = getCipher(decCipherClass);
-        LOG.debug("Created a cipher object of type: " + decCipherClass);
 
         // Decrypt data
         CryptoInputStream in = getCryptoInputStream(new ByteArrayInputStream(
@@ -459,6 +452,6 @@ private void doReadWriteTestForReadableByteChannel(int count,
                     expected, in.read());
         } while (expected != -1);
 
-        LOG.debug("SUCCESS! Completed checking " + count + " records");
+        // Completed checking records
     }
 }
