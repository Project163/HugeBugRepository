diff --git a/src/main/java/org/apache/commons/scxml/model/Action.java b/src/main/java/org/apache/commons/scxml/model/Action.java
index 2bd2e914..da90e700 100644
--- a/src/main/java/org/apache/commons/scxml/model/Action.java
+++ b/src/main/java/org/apache/commons/scxml/model/Action.java
@@ -101,6 +101,8 @@ public abstract class Action implements NamespacePrefixesHolder,
      *
      * @return The parent State
      * @throws ModelException For an unknown TransitionTarget subclass
+     *
+     * @deprecated Use {@link #getParentTransitionTarget()} instead.
      */
     public final State getParentState() throws ModelException {
         TransitionTarget tt = parent.getParent();
@@ -116,6 +118,28 @@ public abstract class Action implements NamespacePrefixesHolder,
         }
     }
 
+    /**
+     * Return the {@link TransitionTarget} whose {@link Context} this action
+     * executes in.
+     *
+     * @return The parent {@link TransitionTarget}
+     * @throws ModelException For an unknown TransitionTarget subclass
+     *
+     * @since 0.9
+     */
+    public final TransitionTarget getParentTransitionTarget()
+    throws ModelException {
+        TransitionTarget tt = parent.getParent();
+        if (tt instanceof State || tt instanceof Parallel) {
+            return tt;
+        } else if (tt instanceof History) {
+            return tt.getParent();
+        } else {
+            throw new ModelException("Unknown TransitionTarget subclass:"
+                    + tt.getClass().getName());
+        }
+    }
+
     /**
      * Execute this action instance.
      *
diff --git a/src/main/java/org/apache/commons/scxml/model/Assign.java b/src/main/java/org/apache/commons/scxml/model/Assign.java
index fb7f8359..63aacf57 100644
--- a/src/main/java/org/apache/commons/scxml/model/Assign.java
+++ b/src/main/java/org/apache/commons/scxml/model/Assign.java
@@ -178,8 +178,8 @@ public class Assign extends Action implements PathResolverHolder {
             final ErrorReporter errRep, final SCInstance scInstance,
             final Log appLog, final Collection derivedEvents)
     throws ModelException, SCXMLExpressionException {
-        State parentState = getParentState();
-        Context ctx = scInstance.getContext(parentState);
+        TransitionTarget parentTarget = getParentTransitionTarget();
+        Context ctx = scInstance.getContext(parentTarget);
         Evaluator eval = scInstance.getEvaluator();
         ctx.setLocal(getNamespacesKey(), getNamespaces());
         // "location" gets preference over "name"
@@ -232,7 +232,7 @@ public class Assign extends Action implements PathResolverHolder {
             // lets try "name" (usage as in Sep '05 WD, useful with <var>)
             if (!ctx.has(name)) {
                 errRep.onError(ErrorConstants.UNDEFINED_VARIABLE, name
-                    + " = null", parentState);
+                    + " = null", parentTarget);
             } else {
                 Object varObj = null;
                 if (src != null && src.trim().length() > 0) {
diff --git a/src/main/java/org/apache/commons/scxml/model/If.java b/src/main/java/org/apache/commons/scxml/model/If.java
index ae0abc55..a07970f1 100644
--- a/src/main/java/org/apache/commons/scxml/model/If.java
+++ b/src/main/java/org/apache/commons/scxml/model/If.java
@@ -116,8 +116,8 @@ public class If extends Action {
             final ErrorReporter errRep, final SCInstance scInstance,
             final Log appLog, final Collection derivedEvents)
     throws ModelException, SCXMLExpressionException {
-        State parentState = getParentState();
-        Context ctx = scInstance.getContext(parentState);
+        TransitionTarget parentTarget = getParentTransitionTarget();
+        Context ctx = scInstance.getContext(parentTarget);
         Evaluator eval = scInstance.getEvaluator();
         ctx.setLocal(getNamespacesKey(), getNamespaces());
         execute = eval.evalCond(ctx, cond).booleanValue();
diff --git a/src/main/java/org/apache/commons/scxml/model/Log.java b/src/main/java/org/apache/commons/scxml/model/Log.java
index 5ffca8cd..3564fb52 100644
--- a/src/main/java/org/apache/commons/scxml/model/Log.java
+++ b/src/main/java/org/apache/commons/scxml/model/Log.java
@@ -99,7 +99,7 @@ public class Log extends Action {
             final org.apache.commons.logging.Log appLog,
             final Collection derivedEvents)
     throws ModelException, SCXMLExpressionException {
-        Context ctx = scInstance.getContext(getParentState());
+        Context ctx = scInstance.getContext(getParentTransitionTarget());
         Evaluator eval = scInstance.getEvaluator();
         ctx.setLocal(getNamespacesKey(), getNamespaces());
         appLog.info(label + ": " + String.valueOf(eval.eval(ctx, expr)));
diff --git a/src/main/java/org/apache/commons/scxml/model/Send.java b/src/main/java/org/apache/commons/scxml/model/Send.java
index 0f77b328..51691cc1 100644
--- a/src/main/java/org/apache/commons/scxml/model/Send.java
+++ b/src/main/java/org/apache/commons/scxml/model/Send.java
@@ -270,8 +270,8 @@ public class Send extends Action implements ExternalContent {
             final Log appLog, final Collection derivedEvents)
     throws ModelException, SCXMLExpressionException {
         // Send attributes evaluation
-        State parentState = getParentState();
-        Context ctx = scInstance.getContext(parentState);
+        TransitionTarget parentTarget = getParentTransitionTarget();
+        Context ctx = scInstance.getContext(parentTarget);
         ctx.setLocal(getNamespacesKey(), getNamespaces());
         Evaluator eval = scInstance.getEvaluator();
         // Most attributes of <send> are expressions so need to be
@@ -311,7 +311,7 @@ public class Send extends Action implements ExternalContent {
                 if (varObj == null) {
                     //considered as a warning here
                     errRep.onError(ErrorConstants.UNDEFINED_VARIABLE,
-                            varName + " = null", parentState);
+                            varName + " = null", parentTarget);
                 }
                 params.put(varName, varObj);
             }
diff --git a/src/main/java/org/apache/commons/scxml/model/Var.java b/src/main/java/org/apache/commons/scxml/model/Var.java
index 84a4ebb6..60b750ca 100644
--- a/src/main/java/org/apache/commons/scxml/model/Var.java
+++ b/src/main/java/org/apache/commons/scxml/model/Var.java
@@ -101,7 +101,7 @@ public class Var extends Action {
             final ErrorReporter errRep, final SCInstance scInstance,
             final Log appLog, final Collection derivedEvents)
     throws ModelException, SCXMLExpressionException {
-        Context ctx = scInstance.getContext(getParentState());
+        Context ctx = scInstance.getContext(getParentTransitionTarget());
         Evaluator eval = scInstance.getEvaluator();
         ctx.setLocal(getNamespacesKey(), getNamespaces());
         Object varObj = eval.eval(ctx, expr);
diff --git a/src/test/java/org/apache/commons/scxml/model/ActionTest.java b/src/test/java/org/apache/commons/scxml/model/ActionTest.java
index 57b25d5e..a7d2d541 100644
--- a/src/test/java/org/apache/commons/scxml/model/ActionTest.java
+++ b/src/test/java/org/apache/commons/scxml/model/ActionTest.java
@@ -50,7 +50,7 @@ public class ActionTest extends TestCase {
         transition.setParent(state);
         action.setParent(transition);
 
-        State returnValue = action.getParentState();
+        TransitionTarget returnValue = action.getParentTransitionTarget();
         
         assertEquals("on", returnValue.getId());
     }
@@ -69,7 +69,7 @@ public class ActionTest extends TestCase {
         transition.setParent(parallel);
         action.setParent(transition);
 
-        State returnValue = action.getParentState();
+        TransitionTarget returnValue = action.getParentTransitionTarget();
         
         assertEquals("off", returnValue.getId());
     }
@@ -88,7 +88,7 @@ public class ActionTest extends TestCase {
         transition.setParent(history);
         action.setParent(transition);
 
-        State returnValue = action.getParentState();
+        TransitionTarget returnValue = action.getParentTransitionTarget();
         
         assertEquals("off", returnValue.getId());
     }
@@ -103,7 +103,7 @@ public class ActionTest extends TestCase {
         action.setParent(transition);
 
         try{
-            action.getParentState();
+            action.getParentTransitionTarget();
             fail("Unknown TransitionTarget subclass:Initial");
         }
         catch( ModelException e ){
diff --git a/src/test/java/org/apache/commons/scxml/model/ActionsTest.java b/src/test/java/org/apache/commons/scxml/model/ActionsTest.java
index 5366bc75..e63eeab9 100644
--- a/src/test/java/org/apache/commons/scxml/model/ActionsTest.java
+++ b/src/test/java/org/apache/commons/scxml/model/ActionsTest.java
@@ -54,7 +54,7 @@ public class ActionsTest extends TestCase {
     }
 
     // Test data
-    private URL actionsSample;
+    private URL actionsSample01, actionsSample02;
     private ELEvaluator evaluator;
     private ELContext ctx;
     private SCXMLExecutor exec;
@@ -63,8 +63,10 @@ public class ActionsTest extends TestCase {
      * Set up instance variables required by this test case.
      */
     public void setUp() {
-        actionsSample = this.getClass().getClassLoader().
-            getResource("org/apache/commons/scxml/model/actions-test.xml");
+        actionsSample01 = this.getClass().getClassLoader().
+            getResource("org/apache/commons/scxml/model/actions-state-test.xml");
+        actionsSample02 = this.getClass().getClassLoader().
+            getResource("org/apache/commons/scxml/model/actions-parallel-test.xml");
         evaluator = new ELEvaluator();
         ctx = new ELContext();
     }
@@ -73,7 +75,7 @@ public class ActionsTest extends TestCase {
      * Tear down instance variables required by this test case.
      */
     public void tearDown() {
-        actionsSample = null;
+        actionsSample01 = actionsSample02 = null;
         evaluator = null;
         ctx = null;
         exec = null;
@@ -82,8 +84,8 @@ public class ActionsTest extends TestCase {
     /**
      * Test the implementation
      */
-    public void testModelActions() {
-        SCXML scxml = SCXMLTestHelper.parse(actionsSample);
+    public void testStateActions() {
+        SCXML scxml = SCXMLTestHelper.parse(actionsSample01);
         exec = SCXMLTestHelper.getExecutor(scxml, ctx, evaluator);
         ELContext ctx = (ELContext) SCXMLTestHelper.lookupContext(exec,
             "actionsTest");
@@ -92,7 +94,17 @@ public class ActionsTest extends TestCase {
             "true", (String) ctx.get("eventsent"));
     }
 
-     public static void main(String args[]) {
+    public void testParallelActions() {
+        SCXML scxml = SCXMLTestHelper.parse(actionsSample02);
+        exec = SCXMLTestHelper.getExecutor(scxml, ctx, evaluator);
+        ELContext ctx = (ELContext) SCXMLTestHelper.lookupContext(exec,
+            "actionsTest");
+        assertEquals((String) ctx.get("foo"), "foobar");
+        assertEquals("Missed event transition",
+            "true", (String) ctx.get("eventsent"));
+    }
+
+    public static void main(String args[]) {
         TestRunner.run(suite());
     }
 }
diff --git a/src/test/java/org/apache/commons/scxml/model/ParallelTest.java b/src/test/java/org/apache/commons/scxml/model/ParallelTest.java
index bea2f7f9..bc3c7555 100644
--- a/src/test/java/org/apache/commons/scxml/model/ParallelTest.java
+++ b/src/test/java/org/apache/commons/scxml/model/ParallelTest.java
@@ -17,9 +17,13 @@
 package org.apache.commons.scxml.model;
 
 import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
 
+import org.apache.commons.scxml.Builtin;
 import org.apache.commons.scxml.SCXMLExecutor;
 import org.apache.commons.scxml.SCXMLTestHelper;
+import org.w3c.dom.Node;
 
 import junit.framework.Test;
 import junit.framework.TestCase;
@@ -41,7 +45,7 @@ public class ParallelTest extends TestCase {
     }
 
     // Test data
-    private URL parallel01, parallel02;
+    private URL parallel01, parallel02, parallel03;
     private SCXMLExecutor exec;
     
     public void setUp() {
@@ -49,15 +53,17 @@ public class ParallelTest extends TestCase {
             getResource("org/apache/commons/scxml/model/parallel-01.xml");
         parallel02 = this.getClass().getClassLoader().
             getResource("org/apache/commons/scxml/model/parallel-02.xml");
+        parallel03 = this.getClass().getClassLoader().
+            getResource("org/apache/commons/scxml/model/parallel-03.xml");
     }
 
     public void tearDown() {
-        parallel01 = parallel02 = null;
+        parallel01 = parallel02 = parallel03 = null;
         exec = null;
     }
 
     public void testParallel01() {
-    	SCXML scxml = SCXMLTestHelper.parse(parallel01);
+        SCXML scxml = SCXMLTestHelper.parse(parallel01);
         assertNotNull(scxml);
         exec = SCXMLTestHelper.getExecutor(scxml);
         assertNotNull(exec);
@@ -69,15 +75,37 @@ public class ParallelTest extends TestCase {
     }
 
     public void testParallel02() {
-    	SCXML scxml = SCXMLTestHelper.parse(parallel02);
+        SCXML scxml = SCXMLTestHelper.parse(parallel02);
         assertNotNull(scxml);
         exec = SCXMLTestHelper.getExecutor(scxml);
         assertNotNull(exec);
         try {
-        	SCXMLTestHelper.assertPostTriggerStates(exec, "dummy.event", new String[] { "state01", "state02" });
+            SCXMLTestHelper.assertPostTriggerStates(exec, "dummy.event", new String[] { "state01", "state02" });
             SCXMLTestHelper.assertPostTriggerState(exec, "event1", "state1");
         } catch (Exception e) {
-        	e.printStackTrace();
+            fail(e.getMessage());
+        }
+    }
+
+    public void testParallel03() {
+        SCXML scxml = SCXMLTestHelper.parse(parallel03);
+        assertNotNull(scxml);
+        exec = SCXMLTestHelper.getExecutor(scxml);
+        assertNotNull(exec);
+        try {
+            SCXMLTestHelper.assertPostTriggerStates(exec, "dummy.event", new String[] { "para11", "para21" });
+            Node data = (Node) exec.getRootContext().get("root");
+            Map namespaces = new HashMap();
+            namespaces.put("", "http://www.w3.org/2005/07/scxml");
+            Object count = Builtin.data(namespaces, data, "root/count");
+            assertEquals("5.0", count.toString());
+            SCXMLTestHelper.assertPostTriggerStates(exec, "foo", new String[] { "para12", "para21" });
+            count = Builtin.data(namespaces, data, "root/count");
+            assertEquals("7.0", count.toString());
+            SCXMLTestHelper.assertPostTriggerState(exec, "bar", "end");
+            count = Builtin.data(namespaces, data, "root/count");
+            assertEquals("14.0", count.toString());
+        } catch (Exception e) {
             fail(e.getMessage());
         }
     }
diff --git a/src/test/java/org/apache/commons/scxml/model/actions-parallel-test.xml b/src/test/java/org/apache/commons/scxml/model/actions-parallel-test.xml
new file mode 100644
index 00000000..10c06355
--- /dev/null
+++ b/src/test/java/org/apache/commons/scxml/model/actions-parallel-test.xml
@@ -0,0 +1,55 @@
+<?xml version="1.0"?>
+<!--
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+-->
+<scxml xmlns="http://www.w3.org/2005/07/scxml"
+       xmlns:cs="http://commons.apache.org/scxml"
+       version="1.0"
+       initial="actionsTest">
+  
+  <parallel id="actionsTest">
+    <onentry>
+      <cs:var name="foo"/>
+      <cs:var name="delta" expr="${1+2+3}" />
+      <cs:var name="eventsent"/>
+      <if cond="${delta le 3}">
+        <assign name="foo" expr="bar" />
+      <elseif cond="${delta eq 3}"/>
+        <assign name="foo" expr="fubar" />
+      <else/>
+        <assign name="foo" expr="foobar" />
+      </if>
+      <cs:var name="drink" expr="water" />
+      <cs:var name="eat" expr="flies" />
+      <send sendid="send12345" target="freddy" targettype="frog"
+       event="croak" namelist="drink eat" hints="h2o bzz"
+       delay="${1000+500}" />
+      <cancel sendId="send12345"/>
+      <log expr="leaving" label="entry001" />
+      <event name="event.test"/>
+      <cs:exit expr="later" namelist="freddy" />
+    </onentry>
+
+    <transition event="event.test">
+      <assign name="eventsent" expr="true"/>
+    </transition>
+
+    <!-- dummy regions -->
+    <state id="state01"/>
+    <state id="state02"/>
+  </parallel>
+
+</scxml>
diff --git a/src/test/java/org/apache/commons/scxml/model/actions-test.xml b/src/test/java/org/apache/commons/scxml/model/actions-state-test.xml
similarity index 100%
rename from src/test/java/org/apache/commons/scxml/model/actions-test.xml
rename to src/test/java/org/apache/commons/scxml/model/actions-state-test.xml
diff --git a/src/test/java/org/apache/commons/scxml/model/parallel-03.xml b/src/test/java/org/apache/commons/scxml/model/parallel-03.xml
new file mode 100644
index 00000000..d57196a0
--- /dev/null
+++ b/src/test/java/org/apache/commons/scxml/model/parallel-03.xml
@@ -0,0 +1,118 @@
+<?xml version="1.0"?>
+<!--
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+-->
+<!--
+    Needs SCXMLParser
+-->
+<scxml xmlns="http://www.w3.org/2005/07/scxml"
+       version="1.0"
+       initial="para">
+
+    <datamodel>
+        <data id="root">
+            <root xmlns="">
+                <count>0</count>
+            </root>
+        </data>
+    </datamodel>
+
+    <parallel id="para">
+
+        <onentry>
+            <assign location="Data(root, 'root/count')" expr="Data(root, 'root/count') + 1"/>
+        </onentry>
+
+        <state id="para1">
+
+            <initial>
+                <transition target="para11"/>
+            </initial>
+            <onentry>
+                <assign location="Data(root, 'root/count')" expr="Data(root, 'root/count') + 1"/>
+            </onentry>
+
+            <state id="para11">
+                <onentry>
+                    <assign location="Data(root, 'root/count')" expr="Data(root, 'root/count') + 1"/>
+                </onentry>
+                <transition event="foo" target="para12"/>
+                <onexit>
+                    <assign location="Data(root, 'root/count')" expr="Data(root, 'root/count') + 1"/>
+                </onexit>
+            </state>
+
+            <final id="para12">
+                <onentry>
+                    <assign location="Data(root, 'root/count')" expr="Data(root, 'root/count') + 1"/>
+                </onentry>
+                <onexit>
+                    <assign location="Data(root, 'root/count')" expr="Data(root, 'root/count') + 1"/>
+                </onexit>
+            </final>
+
+            <onexit>
+                <assign location="Data(root, 'root/count')" expr="Data(root, 'root/count') + 1"/>
+            </onexit>
+
+        </state>
+
+        <state id="para2">
+
+            <initial>
+                <transition target="para21"/>
+            </initial>
+            <onentry>
+                <assign location="Data(root, 'root/count')" expr="Data(root, 'root/count') + 1"/>
+            </onentry>
+
+            <state id="para21">
+                <onentry>
+                    <assign location="Data(root, 'root/count')" expr="Data(root, 'root/count') + 1"/>
+                </onentry>
+                <transition event="bar" target="para22"/>
+                <onexit>
+                    <assign location="Data(root, 'root/count')" expr="Data(root, 'root/count') + 1"/>
+                </onexit>
+            </state>
+
+            <final id="para22">
+                <onentry>
+                    <assign location="Data(root, 'root/count')" expr="Data(root, 'root/count') + 1"/>
+                </onentry>
+                <onexit>
+                    <assign location="Data(root, 'root/count')" expr="Data(root, 'root/count') + 1"/>
+                </onexit>
+            </final>
+
+            <onexit>
+                <assign location="Data(root, 'root/count')" expr="Data(root, 'root/count') + 1"/>
+            </onexit>
+
+        </state>
+
+        <transition event="para.done" target="end"/>
+
+        <onexit>
+            <assign location="Data(root, 'root/count')" expr="Data(root, 'root/count') + 1"/>
+        </onexit>
+
+    </parallel>
+
+    <state id="end" final="true" />
+
+</scxml>
+
