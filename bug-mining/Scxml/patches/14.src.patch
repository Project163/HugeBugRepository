diff --git a/src/main/java/org/apache/commons/scxml/invoke/SimpleSCXMLInvoker.java b/src/main/java/org/apache/commons/scxml/invoke/SimpleSCXMLInvoker.java
index 3f5cfcb9..351a214c 100644
--- a/src/main/java/org/apache/commons/scxml/invoke/SimpleSCXMLInvoker.java
+++ b/src/main/java/org/apache/commons/scxml/invoke/SimpleSCXMLInvoker.java
@@ -111,6 +111,11 @@ public class SimpleSCXMLInvoker implements Invoker, Serializable {
         } catch (ModelException me) {
             throw new InvokerException(me.getMessage(), me.getCause());
         }
+        if (executor.getCurrentStatus().isFinal()) {
+            TriggerEvent te = new TriggerEvent(eventPrefix + invokeDone,
+                TriggerEvent.SIGNAL_EVENT);
+            new AsyncTrigger(parentSCInstance.getExecutor(), te);
+        }
     }
 
     /**
diff --git a/src/test/java/org/apache/commons/scxml/invoke/InvokeTest.java b/src/test/java/org/apache/commons/scxml/invoke/InvokeTest.java
index 02262004..16ae10c6 100644
--- a/src/test/java/org/apache/commons/scxml/invoke/InvokeTest.java
+++ b/src/test/java/org/apache/commons/scxml/invoke/InvokeTest.java
@@ -54,7 +54,7 @@ public class InvokeTest extends TestCase {
     }
 
     // Test data
-    private URL invoke01;
+    private URL invoke01, invoke02;
     private SCXMLExecutor exec;
 
     /**
@@ -63,13 +63,15 @@ public class InvokeTest extends TestCase {
     public void setUp() {
         invoke01 = this.getClass().getClassLoader().
             getResource("org/apache/commons/scxml/invoke/invoker-01.xml");
+        invoke02 = this.getClass().getClassLoader().
+            getResource("org/apache/commons/scxml/invoke/invoker-02.xml");
     }
 
     /**
      * Tear down instance variables required by this test case.
      */
     public void tearDown() {
-        invoke01 = null;
+        invoke01 = invoke02 = null;
     }
 
     /**
@@ -96,6 +98,25 @@ public class InvokeTest extends TestCase {
         }
     }
 
+    public void testInvoke02Sample() {
+        try {
+            SCXML scxml = SCXMLDigester.digest(invoke02,
+                new SimpleErrorHandler());
+            exec = new SCXMLExecutor(new JexlEvaluator(), new SimpleDispatcher(),
+                new SimpleErrorReporter());
+            assertNotNull(exec);
+            exec.setRootContext(new JexlContext());
+            exec.setStateMachine(scxml);
+            exec.registerInvokerClass("scxml", SimpleSCXMLInvoker.class);
+            exec.go();
+            Set currentStates = exec.getCurrentStatus().getStates();
+            assertEquals(1, currentStates.size());
+        } catch (Exception e) {
+            e.printStackTrace();
+            fail(e.getMessage());
+        }
+    }
+
     public static void main(String args[]) {
         TestRunner.run(suite());
     }
diff --git a/src/test/java/org/apache/commons/scxml/invoke/invoked-02.xml b/src/test/java/org/apache/commons/scxml/invoke/invoked-02.xml
new file mode 100644
index 00000000..31868bd1
--- /dev/null
+++ b/src/test/java/org/apache/commons/scxml/invoke/invoked-02.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0"?>
+<!--
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+-->
+<scxml xmlns="http://www.w3.org/2005/07/scxml"
+       version="1.0"
+       initialstate="state1">
+
+    <state id="state1">
+        <onentry>
+            <send event="invoked.next" />
+        </onentry>
+        <transition event="invoked.next" target="state2" />
+    </state>
+
+    <state id="state2" final="true" />
+
+</scxml>
+
diff --git a/src/test/java/org/apache/commons/scxml/invoke/invoker-02.xml b/src/test/java/org/apache/commons/scxml/invoke/invoker-02.xml
new file mode 100644
index 00000000..7bb4356a
--- /dev/null
+++ b/src/test/java/org/apache/commons/scxml/invoke/invoker-02.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0"?>
+<!--
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+-->
+<scxml xmlns="http://www.w3.org/2005/07/scxml"
+       version="1.0"
+       initialstate="invoker">
+
+    <state id="invoker">
+        <invoke targettype="scxml" src="invoked-02.xml"/>
+        <transition event="invoker.invoke.done" target="end" />
+    </state>
+
+    <state id="end" final="true" />
+
+</scxml>
+
