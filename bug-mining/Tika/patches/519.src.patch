diff --git a/CHANGES.txt b/CHANGES.txt
index 7083fc546..ac6060978 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -28,6 +28,9 @@ Release 1.5 - Current Development
 
   * RTF: Fixed ArrayIndexOutOfBoundsException when parsing list override (TIKA-1192).
 
+  * CLI: TikaCLI now escapes invalid filename characters as hex
+    characters (TIKA-1078).
+
 Release 1.4 - 06/15/2013
 
   * Removed a test HTML file with a poorly chosen GPL text in it (TIKA-1129).
diff --git a/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java b/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java
index c2afe8250..7a4406017 100644
--- a/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java
+++ b/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java
@@ -91,6 +91,7 @@ import org.xml.sax.ContentHandler;
 import org.xml.sax.SAXException;
 import org.xml.sax.helpers.DefaultHandler;
 import com.google.gson.Gson;
+import org.apache.tika.io.FilenameUtils;
 
 /**
  * Simple command line interface for Apache Tika.
@@ -712,7 +713,7 @@ public class TikaCLI {
                 name = relID + "_" + name;
             }
 
-            File outputFile = new File(extractDir, name);
+            File outputFile = new File(extractDir, FilenameUtils.normalize(name));
             File parent = outputFile.getParentFile();
             if (!parent.exists()) {
                 if (!parent.mkdirs()) {
@@ -740,7 +741,16 @@ public class TikaCLI {
                     IOUtils.copy(inputStream, os);
                 }
             } catch (Exception e) {
-                logger.warn("Ignoring unexpected exception trying to save embedded file " + name, e);
+                //
+                // being a CLI program messages should go to the stderr too
+                //
+                String msg = String.format(
+                    "Ignoring unexpected exception trying to save embedded file %s (%s)",
+                    name,
+                    e.getMessage()
+                );
+                System.err.println(msg);
+                logger.warn(msg, e);
             } finally {
                 if (os != null) {
                     os.close();
diff --git a/tika-core/src/main/java/org/apache/tika/io/FilenameUtils.java b/tika-core/src/main/java/org/apache/tika/io/FilenameUtils.java
new file mode 100644
index 000000000..2bdfd531d
--- /dev/null
+++ b/tika-core/src/main/java/org/apache/tika/io/FilenameUtils.java
@@ -0,0 +1,73 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tika.io;
+
+import java.util.HashSet;
+
+
+public class FilenameUtils {
+
+    /**
+     * Reserved characters
+     */
+    public final static char[] RESERVED_FILENAME_CHARACTERS = {
+        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
+        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
+        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
+        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
+        '?', ':', '*', '<', '>', '|'
+    };
+
+    private final static HashSet<Character> RESERVED = new HashSet<Character>(38);
+
+    static {
+        for (int i=0; i<RESERVED_FILENAME_CHARACTERS.length; ++i) {
+            RESERVED.add(RESERVED_FILENAME_CHARACTERS[i]);
+        }
+    }
+
+    /**
+     * Scans the given file name for reserved characters on different OSs and
+     * file systems and returns a sanitized version of the name with the
+     * reserved chars replaced by their hexadecimal value.
+     *
+     * For example <code>why?.zip</code> will be converted into <code>why%3F.zip</code>
+     *
+     * @param name the file name to be normalized - NOT NULL
+     *
+     * @return the normalized file name
+     *
+     * @throws IllegalArgumentException if name is null
+     */
+    public static String normalize(final String name) {
+        if (name == null) {
+            throw new IllegalArgumentException("name cannot be null");
+        }
+
+        StringBuilder sb = new StringBuilder();
+
+        for (char c: name.toCharArray()) {
+            if (RESERVED.contains(c)) {
+                sb.append('%').append((c<16) ? "0" : "").append(Integer.toHexString(c).toUpperCase());
+            } else {
+                sb.append(c);
+            }
+        }
+
+        return sb.toString();
+    }
+}
diff --git a/tika-core/src/test/java/org/apache/tika/io/FilenameUtilsTest.java b/tika-core/src/test/java/org/apache/tika/io/FilenameUtilsTest.java
new file mode 100644
index 000000000..03452b3bd
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/io/FilenameUtilsTest.java
@@ -0,0 +1,98 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.tika.io;
+
+
+import org.junit.Test;
+import static org.junit.Assert.*;
+
+public class FilenameUtilsTest {
+
+    /**
+     * Different filesystems and operating systems have different restrictions
+     * on the name that can be used for files and directories.
+     * FilenameUtils.normalize() returns a cross platform file name that turns
+     * special characters in a HEX based code convention. This is %<code>.
+     * For example why?.zip will be converted into why%3F.zip
+     *
+     * @see http://en.wikipedia.org/wiki/Filename#Comparison_of_filename_limitations
+     *
+     * Reserved chars are the ones in FilenameUtils.RESERVED_FILENAME_CHARACTERS:
+     */
+    @Test
+    public void normalizeNothingTodo() throws Exception {
+        final String TEST_NAME = "test.zip";
+
+        assertEquals(TEST_NAME, FilenameUtils.normalize(TEST_NAME));
+    }
+
+    @Test
+    public void normalizeWithNull() throws Exception {
+        try {
+            FilenameUtils.normalize(null);
+            fail("missing check for null parameters");
+        } catch (IllegalArgumentException x) {
+            assertTrue(x.getMessage().contains("name"));
+            assertTrue(x.getMessage().contains("not be null"));
+        }
+    }
+
+    @Test
+    public void normalizeWithReservedChar() throws Exception {
+        final String[] TEST_NAMES = {
+            "test?.txt", "?test.txt", "test.txt?", "?test?txt?"
+        };
+        final String[] EXPECTED_NAMES = {
+            "test%3F.txt", "%3Ftest.txt", "test.txt%3F", "%3Ftest%3Ftxt%3F"
+        };
+
+        for (int i=0; i<TEST_NAMES.length; ++i) {
+            //System.out.println("checking " + TEST_NAMES[i]);
+            assertEquals(EXPECTED_NAMES[i], FilenameUtils.normalize(TEST_NAMES[i]));
+        }
+    }
+
+    @Test
+    public void normalizeWithReservedChars() throws Exception {
+        final String TEST_NAME =
+            "?a/b\nc\td\re*f\\g:h<i>j.txt|";
+        final String EXPECTED_NAME =
+            "%3Fa/b%0Ac%09d%0De%2Af\\g%3Ah%3Ci%3Ej.txt%7C";
+
+        assertEquals(EXPECTED_NAME, FilenameUtils.normalize(TEST_NAME));
+    }
+
+    @Test
+    public void normalizeWithNotPrintableChars() throws Exception {
+        final String TEST_NAME = new String(
+            new char[] {
+                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
+                '.',
+                16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31
+            }
+        );
+        final String EXPECTED_NAME =
+            "%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F" +
+            "." +
+            "%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F";
+
+        assertEquals(EXPECTED_NAME, FilenameUtils.normalize(TEST_NAME));
+    }
+
+
+}
