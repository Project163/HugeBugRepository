diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPatchImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPatchImpl.java
index 91bb4360..390c4386 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPatchImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPatchImpl.java
@@ -162,11 +162,11 @@ class JsonPatchImpl implements JsonPatch {
                    final JsonValue value) {
             this.provider = provider;
             this.operation = operation;
-            this.path = new JsonPointerImpl(provider, path);
+            this.path = new JsonPatchPointerImpl(provider, path);
 
             // ignore from if we do not need it
             if (operation == JsonPatch.Operation.MOVE || operation == JsonPatch.Operation.COPY) {
-                this.from = new JsonPointerImpl(provider, from);
+                this.from = new JsonPatchPointerImpl(provider, from);
             } else {
                 this.from = null;
             }
@@ -250,4 +250,24 @@ class JsonPatchImpl implements JsonPatch {
             return json;
         }
     }
+
+    public static class JsonPatchPointerImpl extends JsonPointerImpl {
+
+        /**
+         * Constructs and initializes a JsonPointer.
+         *
+         * @param provider the JsonProvider
+         * @param jsonPointer the JSON Pointer string
+         * @throws NullPointerException if {@code jsonPointer} is {@code null}
+         * @throws JsonException        if {@code jsonPointer} is not a valid JSON Pointer
+         */
+        public JsonPatchPointerImpl(final JsonProvider provider, final String jsonPointer) {
+            super(provider, jsonPointer);
+        }
+
+        @Override
+        protected int minusShift() {
+            return 1;
+        }
+    }
 }
diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPointerImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPointerImpl.java
index be9f2be6..2f1a76d0 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPointerImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonPointerImpl.java
@@ -473,8 +473,9 @@ public class JsonPointerImpl implements JsonPointer {
     private int getArrayIndex(String referenceToken, JsonArray jsonArray, boolean addOperation) {
         if (addOperation && referenceToken.equals("-")) {
             return jsonArray.size();
+
         } else if (!addOperation && referenceToken.equals("-")) {
-            final int arrayIndex = jsonArray.size();
+            final int arrayIndex = jsonArray.size() - minusShift();
             validateArraySize(referenceToken, jsonArray, arrayIndex, jsonArray.size());
             return arrayIndex;
         }
@@ -491,6 +492,16 @@ public class JsonPointerImpl implements JsonPointer {
         }
     }
 
+    /**
+     * This method can be overridden in sub classes.
+     * It's main goal is to support patch operation using "-" to replace, remove last element which is forbidden in JsonPointer
+     *
+     * @return the shift to apply on minus. For pointer, it's 0 because we need the element right after the last.
+     */
+    protected int minusShift() {
+        return 0;
+    }
+
     private void validateJsonPointer(JsonValue target, int size) throws NullPointerException, JsonException {
         if (target == null) {
             throw new NullPointerException("target must not be null");
@@ -503,7 +514,7 @@ public class JsonPointerImpl implements JsonPointer {
     }
 
     private void validateArrayIndex(String referenceToken) throws JsonException {
-        if (referenceToken.startsWith("+") || (referenceToken.startsWith("-") && referenceToken.length() > 1)) {
+        if (referenceToken.startsWith("-") && referenceToken.length() > 1) {
             throw new JsonException("An array index must not start with '" + referenceToken.charAt(0) + "'");
         }
         if (referenceToken.startsWith("0") && referenceToken.length() > 1) {
@@ -515,10 +526,10 @@ public class JsonPointerImpl implements JsonPointer {
                                    final int arrayIndex, final int arraySize) throws JsonException {
 
         if (arrayIndex >= arraySize) {
-            throw new JsonException(String.format("'%s' contains no element for index %d and for '%s'.", jsonArray, arrayIndex, referenceToken));
+            throw new JsonException("'" + jsonArray + "' contains no element for index " + arrayIndex + " and for '" + referenceToken + "'.");
         }
         if (arrayIndex < 0) {
-            throw new JsonException(String.format("%d is not a valid index for array '%s' and for '%s'.", arrayIndex, jsonArray, referenceToken));
+            throw new JsonException(arrayIndex + " is not a valid index for array '" + jsonArray + "' and for '" + referenceToken + "'.");
         }
     }
 
diff --git a/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPointerTest.java b/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPointerTest.java
index 0747d237..f9e782c4 100644
--- a/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPointerTest.java
+++ b/johnzon-core/src/test/java/org/apache/johnzon/core/JsonPointerTest.java
@@ -18,7 +18,6 @@
  */
 package org.apache.johnzon.core;
 
-import org.junit.Ignore;
 import org.junit.Test;
 
 import javax.json.Json;
@@ -31,7 +30,6 @@ import javax.json.JsonString;
 import javax.json.JsonStructure;
 import javax.json.JsonValue;
 import javax.json.spi.JsonProvider;
-
 import java.util.Collections;
 
 import static org.junit.Assert.assertEquals;
@@ -457,15 +455,26 @@ public class JsonPointerTest {
         assertEquals("[[\"bar\",\"baz\"]]", result.toString()); // [["bar","baz"]]
     }
 
-    @Ignore("https://issues.apache.org/jira/browse/JOHNZON-325 anything other than add with - should fail")
-    @Test
+    @Test(expected = JsonException.class)
     public void testRemoveLastArrayElement() {
         JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/0/-");
         JsonStructure target = Json.createArrayBuilder()
-                .add(Json.createArrayBuilder()
-                        .add("bar")
-                        .add("qux")
-                        .add("baz")).build(); // [["bar","qux","baz"]]
+                                   .add(Json.createArrayBuilder()
+                                            .add("bar")
+                                            .add("qux")
+                                            .add("baz")).build(); // [["bar","qux","baz"]]
+
+        JsonStructure result = jsonPointer.remove(target);
+        assertEquals("[[\"bar\",\"qux\"]]", result.toString()); // [["bar","qux"]]
+    }
+
+    public void testRemoveLastArrayElementWithPatch() {
+        JsonPointerImpl jsonPointer = new JsonPatchImpl.JsonPatchPointerImpl(JsonProvider.provider(), "/0/-");
+        JsonStructure target = Json.createArrayBuilder()
+                                   .add(Json.createArrayBuilder()
+                                            .add("bar")
+                                            .add("qux")
+                                            .add("baz")).build(); // [["bar","qux","baz"]]
 
         JsonStructure result = jsonPointer.remove(target);
         assertEquals("[[\"bar\",\"qux\"]]", result.toString()); // [["bar","qux"]]
@@ -582,8 +591,7 @@ public class JsonPointerTest {
         assertEquals("[[\"bar\",\"qux\",\"baz\",\"xyz\"]]", result.toString());
     }
 
-    @Ignore("https://issues.apache.org/jira/browse/JOHNZON-325 anything other than add with - should fail")
-    @Test
+    @Test(expected = JsonException.class)
     public void testRemoveLastArrayElementSimple() {
         JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/-");
         JsonStructure target = Json.createArrayBuilder()
@@ -596,6 +604,19 @@ public class JsonPointerTest {
         assertEquals("[\"bar\",\"qux\"]", result.toString());
     }
 
+    @Test
+    public void testRemoveLastArrayElementSimpleWithPatch() {
+        JsonPointerImpl jsonPointer = new JsonPatchImpl.JsonPatchPointerImpl(JsonProvider.provider(), "/-");
+        JsonStructure target = Json.createArrayBuilder()
+                                   .add("bar")
+                                   .add("qux")
+                                   .add("baz")
+                                   .build();
+
+        JsonStructure result = jsonPointer.remove(target);
+        assertEquals("[\"bar\",\"qux\"]", result.toString());
+    }
+
     @Test(expected = JsonException.class)
     public void testRemoveLastArrayElementFromEmptySimple() {
         final JsonPointerImpl jsonPointer = new JsonPointerImpl(JsonProvider.provider(), "/-");
