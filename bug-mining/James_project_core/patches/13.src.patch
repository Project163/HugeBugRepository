diff --git a/core/src/main/java/org/apache/james/core/quota/QuotaCount.java b/core/src/main/java/org/apache/james/core/quota/QuotaCountLimit.java
similarity index 72%
rename from core/src/main/java/org/apache/james/core/quota/QuotaCount.java
rename to core/src/main/java/org/apache/james/core/quota/QuotaCountLimit.java
index 0eb6915285..1867e834de 100644
--- a/core/src/main/java/org/apache/james/core/quota/QuotaCount.java
+++ b/core/src/main/java/org/apache/james/core/quota/QuotaCountLimit.java
@@ -24,24 +24,24 @@ import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 import com.google.common.base.Preconditions;
 
-public class QuotaCount implements QuotaValue<QuotaCount> {
+public class QuotaCountLimit implements QuotaLimitValue<QuotaCountLimit> {
 
-    public static QuotaCount unlimited() {
-        return new QuotaCount(Optional.empty());
+    public static QuotaCountLimit unlimited() {
+        return new QuotaCountLimit(Optional.empty());
     }
 
-    public static QuotaCount count(long value) {
+    public static QuotaCountLimit count(long value) {
         return count(Optional.of(value));
     }
 
-    public static QuotaCount count(Optional<Long> value) {
-        return new QuotaCount(value);
+    public static QuotaCountLimit count(Optional<Long> value) {
+        return new QuotaCountLimit(value);
     }
 
     private final Optional<Long> value;
 
-    private QuotaCount(Optional<Long> value) {
-        Preconditions.checkArgument(QuotaValue.isValidValue(value), "Quota limit should be positive");
+    private QuotaCountLimit(Optional<Long> value) {
+        Preconditions.checkArgument(QuotaLimitValue.isValidValue(value), "Quota limit should be positive");
         this.value = value;
     }
 
@@ -56,16 +56,16 @@ public class QuotaCount implements QuotaValue<QuotaCount> {
     }
 
     @Override
-    public QuotaCount add(long additionalValue) {
-        return new QuotaCount(value.map(x -> x + additionalValue));
+    public QuotaCountLimit add(long additionalValue) {
+        return new QuotaCountLimit(value.map(x -> x + additionalValue));
     }
 
     @Override
-    public QuotaCount add(QuotaCount additionalValue) {
+    public QuotaCountLimit add(QuotaCountLimit additionalValue) {
         if (additionalValue.isUnlimited()) {
             return unlimited();
         }
-        return new QuotaCount(value.map(x -> x + additionalValue.asLong()));
+        return new QuotaCountLimit(value.map(x -> x + additionalValue.asLong()));
     }
 
     @Override
@@ -76,14 +76,14 @@ public class QuotaCount implements QuotaValue<QuotaCount> {
     }
 
     @Override
-    public boolean isGreaterThan(QuotaCount other) {
+    public boolean isGreaterThan(QuotaCountLimit other) {
         return value.orElse(Long.MAX_VALUE) > other.value.orElse(Long.MAX_VALUE);
     }
 
     @Override
     public final boolean equals(Object o) {
-        if (o instanceof QuotaCount) {
-            QuotaCount that = (QuotaCount) o;
+        if (o instanceof QuotaCountLimit) {
+            QuotaCountLimit that = (QuotaCountLimit) o;
             return Objects.equal(this.value, that.value);
         }
         return false;
diff --git a/core/src/main/java/org/apache/james/core/quota/QuotaCountUsage.java b/core/src/main/java/org/apache/james/core/quota/QuotaCountUsage.java
new file mode 100644
index 0000000000..7e67f1b328
--- /dev/null
+++ b/core/src/main/java/org/apache/james/core/quota/QuotaCountUsage.java
@@ -0,0 +1,104 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+package org.apache.james.core.quota;
+
+import java.util.Optional;
+
+import com.google.common.base.MoreObjects;
+import com.google.common.base.Objects;
+
+public class QuotaCountUsage implements QuotaUsageValue<QuotaCountUsage, QuotaCountLimit> {
+
+    public static QuotaCountUsage unlimited() {
+        return new QuotaCountUsage(Optional.empty());
+    }
+
+    public static QuotaCountUsage count(long value) {
+        return count(Optional.of(value));
+    }
+
+    public static QuotaCountUsage count(Optional<Long> value) {
+        return new QuotaCountUsage(value);
+    }
+
+    private final Optional<Long> value;
+
+    private QuotaCountUsage(Optional<Long> value) {
+        this.value = value;
+    }
+
+    @Override
+    public long asLong() {
+        return value.orElseThrow(IllegalStateException::new);
+    }
+
+    @Override
+    public boolean isLimited() {
+        return value.isPresent();
+    }
+
+    @Override
+    public QuotaCountUsage add(long additionalValue) {
+        return new QuotaCountUsage(value.map(x -> x + additionalValue));
+    }
+
+    @Override
+    public QuotaCountUsage add(QuotaCountUsage additionalValue) {
+        if (additionalValue.isUnlimited()) {
+            return unlimited();
+        }
+        return new QuotaCountUsage(value.map(x -> x + additionalValue.asLong()));
+    }
+
+    @Override
+    public boolean greaterThan(QuotaCountUsage other) {
+        return value.orElse(Long.MAX_VALUE) > other.value.orElse(Long.MAX_VALUE);
+    }
+
+    @Override
+    public boolean exceedLimit(QuotaCountLimit limit) {
+        if (limit.isLimited()) {
+            return value.orElse(Long.MAX_VALUE) > limit.asLong();
+        } else {
+            return false;
+        }
+    }
+
+    @Override
+    public String toString() {
+        return MoreObjects.toStringHelper(this)
+            .add("value", value.map(String::valueOf).orElse("unlimited"))
+            .toString();
+    }
+
+    @Override
+    public final boolean equals(Object o) {
+        if (o instanceof QuotaCountUsage) {
+            QuotaCountUsage that = (QuotaCountUsage) o;
+            return Objects.equal(this.value, that.value);
+        }
+        return false;
+    }
+
+    @Override
+    public final int hashCode() {
+        return Objects.hashCode(value);
+    }
+
+}
diff --git a/core/src/main/java/org/apache/james/core/quota/QuotaValue.java b/core/src/main/java/org/apache/james/core/quota/QuotaLimitValue.java
similarity index 96%
rename from core/src/main/java/org/apache/james/core/quota/QuotaValue.java
rename to core/src/main/java/org/apache/james/core/quota/QuotaLimitValue.java
index 4f07eeca63..ff32575595 100644
--- a/core/src/main/java/org/apache/james/core/quota/QuotaValue.java
+++ b/core/src/main/java/org/apache/james/core/quota/QuotaLimitValue.java
@@ -20,7 +20,7 @@ package org.apache.james.core.quota;
 
 import java.util.Optional;
 
-public interface QuotaValue<T extends QuotaValue<T>> {
+public interface QuotaLimitValue<T extends QuotaLimitValue<T>> {
 
     static boolean isValidValue(Optional<Long> value) {
         return !value.isPresent() || value.get() >= 0;
diff --git a/core/src/main/java/org/apache/james/core/quota/QuotaSize.java b/core/src/main/java/org/apache/james/core/quota/QuotaSizeLimit.java
similarity index 71%
rename from core/src/main/java/org/apache/james/core/quota/QuotaSize.java
rename to core/src/main/java/org/apache/james/core/quota/QuotaSizeLimit.java
index 22d788fca9..d8997ae51c 100644
--- a/core/src/main/java/org/apache/james/core/quota/QuotaSize.java
+++ b/core/src/main/java/org/apache/james/core/quota/QuotaSizeLimit.java
@@ -24,26 +24,26 @@ import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 import com.google.common.base.Preconditions;
 
-public class QuotaSize implements QuotaValue<QuotaSize> {
+public class QuotaSizeLimit implements QuotaLimitValue<QuotaSizeLimit> {
 
-    public static final QuotaSize QUOTA_SIZE = new QuotaSize(Optional.empty());
+    public static final QuotaSizeLimit QUOTA_SIZE = new QuotaSizeLimit(Optional.empty());
 
-    public static QuotaSize unlimited() {
+    public static QuotaSizeLimit unlimited() {
         return QUOTA_SIZE;
     }
 
-    public static QuotaSize size(long value) {
+    public static QuotaSizeLimit size(long value) {
         return size(Optional.of(value));
     }
 
-    public static QuotaSize size(Optional<Long> value) {
-        return new QuotaSize(value);
+    public static QuotaSizeLimit size(Optional<Long> value) {
+        return new QuotaSizeLimit(value);
     }
 
     private final Optional<Long> value;
 
-    private QuotaSize(Optional<Long> value) {
-        Preconditions.checkArgument(QuotaValue.isValidValue(value), "Quota limit should be positive");
+    private QuotaSizeLimit(Optional<Long> value) {
+        Preconditions.checkArgument(QuotaLimitValue.isValidValue(value), "Quota limit should be positive");
         this.value = value;
     }
 
@@ -58,20 +58,20 @@ public class QuotaSize implements QuotaValue<QuotaSize> {
     }
 
     @Override
-    public QuotaSize add(long additionalValue) {
-        return new QuotaSize(value.map(x -> x + additionalValue));
+    public QuotaSizeLimit add(long additionalValue) {
+        return new QuotaSizeLimit(value.map(x -> x + additionalValue));
     }
 
     @Override
-    public QuotaSize add(QuotaSize additionalValue) {
+    public QuotaSizeLimit add(QuotaSizeLimit additionalValue) {
         if (additionalValue.isUnlimited()) {
             return unlimited();
         }
-        return new QuotaSize(value.map(x -> x + additionalValue.asLong()));
+        return new QuotaSizeLimit(value.map(x -> x + additionalValue.asLong()));
     }
 
     @Override
-    public boolean isGreaterThan(QuotaSize other) {
+    public boolean isGreaterThan(QuotaSizeLimit other) {
         return value.orElse(Long.MAX_VALUE) > other.value.orElse(Long.MAX_VALUE);
     }
 
@@ -84,8 +84,8 @@ public class QuotaSize implements QuotaValue<QuotaSize> {
 
     @Override
     public final boolean equals(Object o) {
-        if (o instanceof QuotaSize) {
-            QuotaSize that = (QuotaSize) o;
+        if (o instanceof QuotaSizeLimit) {
+            QuotaSizeLimit that = (QuotaSizeLimit) o;
             return Objects.equal(this.value, that.value);
         }
         return false;
diff --git a/core/src/main/java/org/apache/james/core/quota/QuotaSizeUsage.java b/core/src/main/java/org/apache/james/core/quota/QuotaSizeUsage.java
new file mode 100644
index 0000000000..7bc74fb55a
--- /dev/null
+++ b/core/src/main/java/org/apache/james/core/quota/QuotaSizeUsage.java
@@ -0,0 +1,105 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+package org.apache.james.core.quota;
+
+import java.util.Optional;
+
+import com.google.common.base.MoreObjects;
+import com.google.common.base.Objects;
+
+public class QuotaSizeUsage implements QuotaUsageValue<QuotaSizeUsage, QuotaSizeLimit> {
+
+    public static final QuotaSizeUsage QUOTA_SIZE = new QuotaSizeUsage(Optional.empty());
+
+    public static QuotaSizeUsage unlimited() {
+        return QUOTA_SIZE;
+    }
+
+    public static QuotaSizeUsage size(long value) {
+        return size(Optional.of(value));
+    }
+
+    public static QuotaSizeUsage size(Optional<Long> value) {
+        return new QuotaSizeUsage(value);
+    }
+
+    private final Optional<Long> value;
+
+    private QuotaSizeUsage(Optional<Long> value) {
+        this.value = value;
+    }
+
+    @Override
+    public long asLong() {
+        return value.orElseThrow(IllegalStateException::new);
+    }
+
+    @Override
+    public boolean isLimited() {
+        return value.isPresent();
+    }
+
+    @Override
+    public QuotaSizeUsage add(long additionalValue) {
+        return new QuotaSizeUsage(value.map(x -> x + additionalValue));
+    }
+
+    @Override
+    public QuotaSizeUsage add(QuotaSizeUsage additionalValue) {
+        if (additionalValue.isUnlimited()) {
+            return unlimited();
+        }
+        return new QuotaSizeUsage(value.map(x -> x + additionalValue.asLong()));
+    }
+
+    @Override
+    public boolean greaterThan(QuotaSizeUsage other) {
+        return value.orElse(Long.MAX_VALUE) > other.value.orElse(Long.MAX_VALUE);
+    }
+
+    @Override
+    public boolean exceedLimit(QuotaSizeLimit limit) {
+        if (limit.isLimited()) {
+            return value.orElse(Long.MAX_VALUE) > limit.asLong();
+        } else {
+            return false;
+        }
+    }
+
+    @Override
+    public String toString() {
+        return MoreObjects.toStringHelper(this)
+            .add("value", value.map(String::valueOf).orElse("unlimited"))
+            .toString();
+    }
+
+    @Override
+    public final boolean equals(Object o) {
+        if (o instanceof QuotaSizeUsage) {
+            QuotaSizeUsage that = (QuotaSizeUsage) o;
+            return Objects.equal(this.value, that.value);
+        }
+        return false;
+    }
+
+    @Override
+    public final int hashCode() {
+        return Objects.hashCode(value);
+    }
+}
diff --git a/core/src/main/java/org/apache/james/core/quota/QuotaUsageValue.java b/core/src/main/java/org/apache/james/core/quota/QuotaUsageValue.java
new file mode 100644
index 0000000000..d96d55d1e6
--- /dev/null
+++ b/core/src/main/java/org/apache/james/core/quota/QuotaUsageValue.java
@@ -0,0 +1,44 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+package org.apache.james.core.quota;
+
+import java.util.Optional;
+
+public interface QuotaUsageValue<T extends QuotaUsageValue<T, U>, U extends QuotaLimitValue<U>> {
+
+    static boolean isValidValue(Optional<Long> value) {
+        return !value.isPresent() || value.get() >= -1;
+    }
+
+    long asLong();
+
+    boolean isLimited();
+
+    default boolean isUnlimited() {
+        return !isLimited();
+    }
+
+    T add(long additionalValue);
+
+    T add(T additionalValue);
+
+    boolean greaterThan(T other);
+
+    boolean exceedLimit(U limit);
+}
diff --git a/core/src/test/java/org/apache/james/core/quota/QuotaCountTest.java b/core/src/test/java/org/apache/james/core/quota/QuotaCountLimitTest.java
similarity index 81%
rename from core/src/test/java/org/apache/james/core/quota/QuotaCountTest.java
rename to core/src/test/java/org/apache/james/core/quota/QuotaCountLimitTest.java
index 47222973ba..f001076986 100644
--- a/core/src/test/java/org/apache/james/core/quota/QuotaCountTest.java
+++ b/core/src/test/java/org/apache/james/core/quota/QuotaCountLimitTest.java
@@ -22,21 +22,21 @@ import org.junit.jupiter.api.Test;
 
 import nl.jqno.equalsverifier.EqualsVerifier;
 
-public class QuotaCountTest implements QuotaValueTest<QuotaCount> {
+public class QuotaCountLimitTest implements QuotaLimitValueTest<QuotaCountLimit> {
 
     @Override
-    public QuotaCount instance(long value) {
-        return QuotaCount.count(value);
+    public QuotaCountLimit instance(long value) {
+        return QuotaCountLimit.count(value);
     }
 
     @Override
-    public QuotaCount unlimited() {
-        return QuotaCount.unlimited();
+    public QuotaCountLimit unlimited() {
+        return QuotaCountLimit.unlimited();
     }
 
     @Test
     void shouldRespectBeanContract() {
-        EqualsVerifier.forClass(QuotaCount.class).verify();
+        EqualsVerifier.forClass(QuotaCountLimit.class).verify();
     }
 
 }
diff --git a/core/src/test/java/org/apache/james/core/quota/QuotaCountUsageTest.java b/core/src/test/java/org/apache/james/core/quota/QuotaCountUsageTest.java
new file mode 100644
index 0000000000..5e6679a894
--- /dev/null
+++ b/core/src/test/java/org/apache/james/core/quota/QuotaCountUsageTest.java
@@ -0,0 +1,36 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+package org.apache.james.core.quota;
+
+public class QuotaCountUsageTest implements QuotaUsageValueTest<QuotaCountLimit, QuotaCountUsage> {
+    @Override
+    public QuotaCountUsage usageInstance(long value) {
+        return QuotaCountUsage.count(value);
+    }
+
+    @Override
+    public QuotaCountLimit limitInstance(long value) {
+        return QuotaCountLimit.count(value);
+    }
+
+    @Override
+    public QuotaCountLimit unlimited() {
+        return QuotaCountLimit.unlimited();
+    }
+}
diff --git a/core/src/test/java/org/apache/james/core/quota/QuotaValueTest.java b/core/src/test/java/org/apache/james/core/quota/QuotaLimitValueTest.java
similarity index 97%
rename from core/src/test/java/org/apache/james/core/quota/QuotaValueTest.java
rename to core/src/test/java/org/apache/james/core/quota/QuotaLimitValueTest.java
index 8545e31920..8a8e28fe90 100644
--- a/core/src/test/java/org/apache/james/core/quota/QuotaValueTest.java
+++ b/core/src/test/java/org/apache/james/core/quota/QuotaLimitValueTest.java
@@ -22,7 +22,7 @@ import static org.assertj.core.api.Assertions.assertThat;
 
 import org.junit.jupiter.api.Test;
 
-public interface QuotaValueTest<T extends QuotaValue<T>> {
+public interface QuotaLimitValueTest<T extends QuotaLimitValue<T>> {
 
     T instance(long i);
 
diff --git a/core/src/test/java/org/apache/james/core/quota/QuotaSizeTest.java b/core/src/test/java/org/apache/james/core/quota/QuotaSizeLimitTest.java
similarity index 81%
rename from core/src/test/java/org/apache/james/core/quota/QuotaSizeTest.java
rename to core/src/test/java/org/apache/james/core/quota/QuotaSizeLimitTest.java
index 7d1fa7b1dd..d540166490 100644
--- a/core/src/test/java/org/apache/james/core/quota/QuotaSizeTest.java
+++ b/core/src/test/java/org/apache/james/core/quota/QuotaSizeLimitTest.java
@@ -22,21 +22,21 @@ import org.junit.jupiter.api.Test;
 
 import nl.jqno.equalsverifier.EqualsVerifier;
 
-public class QuotaSizeTest implements QuotaValueTest<QuotaSize> {
+public class QuotaSizeLimitTest implements QuotaLimitValueTest<QuotaSizeLimit> {
 
     @Override
-    public QuotaSize instance(long value) {
-        return QuotaSize.size(value);
+    public QuotaSizeLimit instance(long value) {
+        return QuotaSizeLimit.size(value);
     }
 
     @Override
-    public QuotaSize unlimited() {
-        return QuotaSize.unlimited();
+    public QuotaSizeLimit unlimited() {
+        return QuotaSizeLimit.unlimited();
     }
 
     @Test
     void shouldRespectBeanContract() {
-        EqualsVerifier.forClass(QuotaSize.class).verify();
+        EqualsVerifier.forClass(QuotaSizeLimit.class).verify();
     }
 
 }
diff --git a/core/src/test/java/org/apache/james/core/quota/QuotaSizeUsageTest.java b/core/src/test/java/org/apache/james/core/quota/QuotaSizeUsageTest.java
new file mode 100644
index 0000000000..7e81862d6d
--- /dev/null
+++ b/core/src/test/java/org/apache/james/core/quota/QuotaSizeUsageTest.java
@@ -0,0 +1,36 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+package org.apache.james.core.quota;
+
+public class QuotaSizeUsageTest implements QuotaUsageValueTest<QuotaSizeLimit, QuotaSizeUsage> {
+    @Override
+    public QuotaSizeUsage usageInstance(long value) {
+        return QuotaSizeUsage.size(value);
+    }
+
+    @Override
+    public QuotaSizeLimit limitInstance(long value) {
+        return QuotaSizeLimit.size(value);
+    }
+
+    @Override
+    public QuotaSizeLimit unlimited() {
+        return QuotaSizeLimit.unlimited();
+    }
+}
diff --git a/core/src/test/java/org/apache/james/core/quota/QuotaUsageValueTest.java b/core/src/test/java/org/apache/james/core/quota/QuotaUsageValueTest.java
new file mode 100644
index 0000000000..8e4ddcec4c
--- /dev/null
+++ b/core/src/test/java/org/apache/james/core/quota/QuotaUsageValueTest.java
@@ -0,0 +1,72 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+package org.apache.james.core.quota;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import org.junit.jupiter.api.Test;
+
+public interface QuotaUsageValueTest<T extends QuotaLimitValue<T>, U extends QuotaUsageValue<U, T>> {
+
+    U usageInstance(long value);
+
+    T limitInstance(long value);
+
+    T unlimited();
+
+    @Test
+    default void greaterThanShouldReturnFalseWhenFirstEqualToSecond() {
+        assertThat(usageInstance(1).greaterThan(usageInstance(1))).isFalse();
+    }
+
+    @Test
+    default void greaterThanShouldReturnFalseWhenFirstSmallerThanSecond() {
+        assertThat(usageInstance(1).greaterThan(usageInstance(2))).isFalse();
+    }
+
+    @Test
+    default void greaterThanShouldReturnTrueWhenFirstGreaterThanSecond() {
+        assertThat(usageInstance(2).greaterThan(usageInstance(1))).isTrue();
+    }
+
+    @Test
+    default void greaterThanShouldReturnFalseWhenUsageEqualToLimit() {
+        assertThat(usageInstance(1).exceedLimit(limitInstance(1))).isFalse();
+    }
+
+    @Test
+    default void greaterThanShouldReturnFalseWhenUsageSmallerThanLimit() {
+        assertThat(usageInstance(1).exceedLimit(limitInstance(2))).isFalse();
+    }
+
+    @Test
+    default void greaterThanShouldReturnTrueWhenUsageGreaterThanLimit() {
+        assertThat(usageInstance(2).exceedLimit(limitInstance(1))).isTrue();
+    }
+
+    @Test
+    default void greaterThanShouldReturnFalseWhenUsageIsLimitedAndLimitIsUnlimited() {
+        assertThat(usageInstance(1).exceedLimit(unlimited())).isFalse();
+    }
+
+    @Test
+    default void addShouldReturnSumResult() {
+        assertThat(usageInstance(12).add(usageInstance(23))).isEqualTo(usageInstance(35));
+    }
+}
