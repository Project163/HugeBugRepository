diff --git a/src/java/org/apache/commons/vfs/provider/AbstractFileObject.java b/src/java/org/apache/commons/vfs/provider/AbstractFileObject.java
index d93116c8..5f094829 100644
--- a/src/java/org/apache/commons/vfs/provider/AbstractFileObject.java
+++ b/src/java/org/apache/commons/vfs/provider/AbstractFileObject.java
@@ -921,7 +921,8 @@ public abstract class AbstractFileObject implements FileObject
                 throw new FileSystemException("vfs.provider/rename-read-only.error", getName());
             }
         }
-        if (destFile.exists())
+
+        if (destFile.exists() && !isSameFile(destFile))
         {
             destFile.delete(Selectors.SELECT_ALL);
             // throw new FileSystemException("vfs.provider/rename-dest-exists.error", destFile.getName());
@@ -972,6 +973,27 @@ public abstract class AbstractFileObject implements FileObject
 
     }
 
+    /**
+     * Checks if this fileObject is the same file as <code>destFile</code> just with a different
+     * name.<br />
+     * E.g. for case insensitive filesystems like windows. 
+     */
+    protected boolean isSameFile(FileObject destFile) throws FileSystemException
+    {
+        attach();
+        return doIsSameFile(destFile);
+    }
+
+    /**
+     * Checks if this fileObject is the same file as <code>destFile</code> just with a different
+     * name.<br />
+     * E.g. for case insensitive filesystems like windows.
+     */
+    protected boolean doIsSameFile(FileObject destFile) throws FileSystemException
+    {
+        return false;
+    }
+
     /**
      * Queries the object if a simple rename to the filename of <code>newfile</code>
      * is possible.
diff --git a/src/java/org/apache/commons/vfs/provider/local/LocalFile.java b/src/java/org/apache/commons/vfs/provider/local/LocalFile.java
index f1b631a5..ebb8e67f 100644
--- a/src/java/org/apache/commons/vfs/provider/local/LocalFile.java
+++ b/src/java/org/apache/commons/vfs/provider/local/LocalFile.java
@@ -23,12 +23,14 @@ import org.apache.commons.vfs.RandomAccessContent;
 import org.apache.commons.vfs.provider.AbstractFileObject;
 import org.apache.commons.vfs.provider.UriParser;
 import org.apache.commons.vfs.util.RandomAccessMode;
+import org.apache.commons.vfs.util.FileObjectUtils;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.io.IOException;
 
 /**
  * A file object implementation which uses direct file access.
@@ -224,4 +226,28 @@ public class LocalFile
     {
         return new LocalFileRandomAccessContent(file, mode);
     }
+
+    protected boolean doIsSameFile(FileObject destFile) throws FileSystemException
+    {
+        if (!FileObjectUtils.isInstanceOf(destFile, LocalFile.class))
+        {
+            return false;
+        }
+
+        LocalFile destLocalFile = (LocalFile) FileObjectUtils.getAbstractFileObject(destFile);
+        if (!exists() || !destLocalFile.exists())
+        {
+            return false;
+        }
+
+        try
+        {
+            return file.getCanonicalPath().equals(destLocalFile.file.getCanonicalPath());
+        }
+        catch (IOException e)
+        {
+            throw new FileSystemException(e);
+        }
+
+    }
 }
