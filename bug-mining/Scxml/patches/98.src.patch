diff --git a/src/main/java/org/apache/commons/scxml2/SCInstance.java b/src/main/java/org/apache/commons/scxml2/SCInstance.java
index e3f77195..7aa2ceea 100644
--- a/src/main/java/org/apache/commons/scxml2/SCInstance.java
+++ b/src/main/java/org/apache/commons/scxml2/SCInstance.java
@@ -128,6 +128,11 @@ public class SCInstance implements Serializable {
      */
     private Context globalContext;
 
+    /**
+     * Flag indicating if the globalContext is shared between all states (a single flat context, default false)
+     */
+    private boolean singleContext;
+
     /**
      * Constructor
      * @param internalIOProcessor The I/O Processor for the internal event queue
@@ -259,6 +264,17 @@ public class SCInstance implements Serializable {
         initialize();
     }
 
+    public void setSingleContext(boolean singleContext) throws ModelException {
+        if (initialized) {
+            throw new ModelException("SCInstance: already initialized");
+        }
+        this.singleContext = singleContext;
+    }
+
+    public boolean isSingleContext() {
+        return singleContext;
+    }
+
     /**
      * Clone data model.
      *
@@ -438,12 +454,17 @@ public class SCInstance implements Serializable {
     public Context getContext(final EnterableState state) {
         Context context = contexts.get(state);
         if (context == null) {
-            EnterableState parent = state.getParent();
-            if (parent == null) {
-                // docroot
-                context = evaluator.newContext(getGlobalContext());
-            } else {
-                context = evaluator.newContext(getContext(parent));
+            if (singleContext) {
+                context = getGlobalContext();
+            }
+            else {
+                EnterableState parent = state.getParent();
+                if (parent == null) {
+                    // docroot
+                    context = evaluator.newContext(getGlobalContext());
+                } else {
+                    context = evaluator.newContext(getContext(parent));
+                }
             }
             if (state instanceof TransitionalState) {
                 Datamodel datamodel = ((TransitionalState)state).getDatamodel();
diff --git a/src/main/java/org/apache/commons/scxml2/SCXMLExecutor.java b/src/main/java/org/apache/commons/scxml2/SCXMLExecutor.java
index 2a6c7602..6a268c0c 100644
--- a/src/main/java/org/apache/commons/scxml2/SCXMLExecutor.java
+++ b/src/main/java/org/apache/commons/scxml2/SCXMLExecutor.java
@@ -191,6 +191,14 @@ public class SCXMLExecutor implements SCXMLIOProcessor {
         exctx.getScInstance().setRootContext(rootContext);
     }
 
+    public void setSingleContext(boolean singleContext) throws ModelException {
+        getSCInstance().setSingleContext(singleContext);
+    }
+
+    public boolean isSingleContext() {
+        return getSCInstance().isSingleContext();
+    }
+
     /**
      * Get the state machine that is being executed.
      * <b>NOTE:</b> This is the state machine definition or model used by this
diff --git a/src/test/java/org/apache/commons/scxml2/w3c/W3CTests.java b/src/test/java/org/apache/commons/scxml2/w3c/W3CTests.java
index f70c25b0..02621098 100644
--- a/src/test/java/org/apache/commons/scxml2/w3c/W3CTests.java
+++ b/src/test/java/org/apache/commons/scxml2/w3c/W3CTests.java
@@ -728,6 +728,7 @@ public class W3CTests {
                 return false;
             }
             final SCXMLExecutor exec = new SCXMLExecutor(null, null, trc);
+            exec.setSingleContext(true);
             exec.setStateMachine(doc);
             exec.addListener(doc, trc);
             exec.registerInvokerClass("scxml", SimpleSCXMLInvoker.class);
