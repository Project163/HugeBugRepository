diff --git a/xbean-naming/src/main/java/org/apache/xbean/naming/context/AbstractContext.java b/xbean-naming/src/main/java/org/apache/xbean/naming/context/AbstractContext.java
index 4e81046e..9b47419e 100644
--- a/xbean-naming/src/main/java/org/apache/xbean/naming/context/AbstractContext.java
+++ b/xbean-naming/src/main/java/org/apache/xbean/naming/context/AbstractContext.java
@@ -110,12 +110,6 @@ public abstract class AbstractContext implements Context, NestedContextFactory,
         }
         if (stringName == null) stringName = parsedName.toString();
 
-        // If the name starts with our name in namespace strip it off
-        // This works because the name in namespace is assumed to be absolute
-        if (stringName.startsWith(nameInNamespace)) {
-            stringName = stringName.substring(nameInNamespace.length());
-        }
-
         // try to look up the name directly (this is the fastest path)
         Object directLookup = getDeepBinding(stringName);
         if (directLookup != null) {
diff --git a/xbean-naming/src/main/java/org/apache/xbean/naming/context/AbstractFederatedContext.java b/xbean-naming/src/main/java/org/apache/xbean/naming/context/AbstractFederatedContext.java
index 8c406dd8..9935418b 100644
--- a/xbean-naming/src/main/java/org/apache/xbean/naming/context/AbstractFederatedContext.java
+++ b/xbean-naming/src/main/java/org/apache/xbean/naming/context/AbstractFederatedContext.java
@@ -45,10 +45,10 @@ public abstract class AbstractFederatedContext extends AbstractContext {
         this.contextFederation = new ContextFederation(this);
     }
 
-    public AbstractFederatedContext(AbstractFederatedContext masterContext, String path) throws NamingException {
-        super(masterContext.getNameInNamespace(path), masterContext.getContextAccess());
+    public AbstractFederatedContext(AbstractFederatedContext masterContext, String nameInNamespace) throws NamingException {
+        super(nameInNamespace, masterContext.getContextAccess());
         this.masterContext = masterContext;
-        this.contextFederation = this.masterContext.contextFederation.createSubcontextFederation(path, this);
+        this.contextFederation = this.masterContext.contextFederation.createSubcontextFederation(nameInNamespace, this);
     }
 
     protected Object faultLookup(String stringName, Name parsedName) {
diff --git a/xbean-naming/src/main/java/org/apache/xbean/naming/context/ContextUtil.java b/xbean-naming/src/main/java/org/apache/xbean/naming/context/ContextUtil.java
index 9fd31232..1381072e 100644
--- a/xbean-naming/src/main/java/org/apache/xbean/naming/context/ContextUtil.java
+++ b/xbean-naming/src/main/java/org/apache/xbean/naming/context/ContextUtil.java
@@ -248,7 +248,7 @@ public final class ContextUtil {
                 // recursive call create bindings to cause building the context depth first
                 String path = nameInNameSpace == null ? name : nameInNameSpace + "/" + name;
 
-                Map nestedBindings = createBindings(path, nestedNode, factory);
+                Map<String, Object> nestedBindings = createBindings(path, nestedNode, factory);
                 Context nestedContext = factory.createNestedSubcontext(path, nestedBindings);
                 bindings.put(name, nestedContext);
             } else {
diff --git a/xbean-naming/src/main/java/org/apache/xbean/naming/context/WritableContext.java b/xbean-naming/src/main/java/org/apache/xbean/naming/context/WritableContext.java
index f55395ca..68f8c892 100644
--- a/xbean-naming/src/main/java/org/apache/xbean/naming/context/WritableContext.java
+++ b/xbean-naming/src/main/java/org/apache/xbean/naming/context/WritableContext.java
@@ -163,7 +163,10 @@ public class WritableContext extends AbstractFederatedContext {
     }
 
     public Context createNestedSubcontext(String path, Map<String, Object> bindings) throws NamingException {
-        return new NestedWritableContext(path,bindings);
+        if (getNameInNamespace().length() > 0) {
+            path = getNameInNamespace() + "/" + path;
+        }
+        return new NestedWritableContext(path, bindings);
     }
 
     private static Map<String, Object> buildIndex(String nameInNamespace, Map<String, Object> bindings) {
@@ -212,7 +215,7 @@ public class WritableContext extends AbstractFederatedContext {
         }
 
         public Context createNestedSubcontext(String path, Map<String, Object> bindings) throws NamingException {
-            return new NestedWritableContext(path, bindings);
+            return new NestedWritableContext(getNameInNamespace(path), bindings);
         }
 
         protected Object getDeepBinding(String name) {
diff --git a/xbean-naming/src/test/java/org/apache/xbean/naming/context/ImmutableContextTest.java b/xbean-naming/src/test/java/org/apache/xbean/naming/context/ImmutableContextTest.java
index a8b115d1..3494698e 100644
--- a/xbean-naming/src/test/java/org/apache/xbean/naming/context/ImmutableContextTest.java
+++ b/xbean-naming/src/test/java/org/apache/xbean/naming/context/ImmutableContextTest.java
@@ -27,16 +27,49 @@ public class ImmutableContextTest extends AbstractContextTest {
     private static final String STRING_VAL = "some string";
 
     public void testBasic() throws Exception {
-        Map map = new HashMap();
+        Map<String, Object> map = new HashMap<String, Object>();
         map.put("string", STRING_VAL);
         map.put("nested/context/string", STRING_VAL);
         map.put("a/b/c/d/e/string", STRING_VAL);
-        map.put("a/b/c/d/e/one", new Integer(1));
-        map.put("a/b/c/d/e/two", new Integer(2));
-        map.put("a/b/c/d/e/three", new Integer(3));
+        map.put("a/b/c/d/e/one", 1);
+        map.put("a/b/c/d/e/two", 2);
+        map.put("a/b/c/d/e/three", 3);
+        map.put("a/a/b/c/d/e/three", 3);
+        map.put("a/b/b/c/d/e/three", 3);
 
         Context context = new ImmutableContext(map);
 
         assertEq(map, context);
+
+        assertEquals("a", ((Context)context.lookup("a")).getNameInNamespace());
+        assertEquals("a/a", ((Context)context.lookup("a/a")).getNameInNamespace());
+        assertEquals("a/b/b", ((Context)context.lookup("a/b/b")).getNameInNamespace());
+        assertEquals("a/b", ((Context)context.lookup("a/b")).getNameInNamespace());
+        assertEquals("a/b/c", ((Context)context.lookup("a/b/c")).getNameInNamespace());
+        assertEquals("a/b/c/d", ((Context)context.lookup("a/b/c/d")).getNameInNamespace());
+        assertEquals("a/b/c/d/e", ((Context)context.lookup("a/b/c/d/e")).getNameInNamespace());
+
+    }
+
+    public void testNameInNamespace() throws Exception {
+        Map<String, Object> map = new HashMap<String, Object>();
+        map.put("string", STRING_VAL);
+        map.put("nested/context/string", STRING_VAL);
+        map.put("a/b/c/d/e/string", STRING_VAL);
+        map.put("a/b/c/d/e/one", 1);
+        map.put("a/b/c/d/e/two", 2);
+        map.put("a/b/c/d/e/three", 3);
+        map.put("a/a/b/c/d/e/three", 3);
+        map.put("a/b/b/c/d/e/three", 3);
+
+        Context context = new ImmutableContext("a", map, false);
+        assertEquals("a/a", ((Context)context.lookup("a")).getNameInNamespace());
+        assertEquals("a/a/a", ((Context)context.lookup("a/a")).getNameInNamespace());
+        assertEquals("a/a/b/b", ((Context)context.lookup("a/b/b")).getNameInNamespace());
+        assertEquals("a/a/b", ((Context)context.lookup("a/b")).getNameInNamespace());
+        assertEquals("a/a/b/c", ((Context)context.lookup("a/b/c")).getNameInNamespace());
+        assertEquals("a/a/b/c/d", ((Context)context.lookup("a/b/c/d")).getNameInNamespace());
+        assertEquals("a/a/b/c/d/e", ((Context)context.lookup("a/b/c/d/e")).getNameInNamespace());
+
     }
 }
diff --git a/xbean-naming/src/test/java/org/apache/xbean/naming/context/WritableContextTest.java b/xbean-naming/src/test/java/org/apache/xbean/naming/context/WritableContextTest.java
index 1767f20f..57cf86f5 100644
--- a/xbean-naming/src/test/java/org/apache/xbean/naming/context/WritableContextTest.java
+++ b/xbean-naming/src/test/java/org/apache/xbean/naming/context/WritableContextTest.java
@@ -23,6 +23,8 @@ import javax.naming.NotContextException;
 import javax.naming.NameAlreadyBoundException;
 import javax.naming.InvalidNameException;
 import javax.naming.ContextNotEmptyException;
+import javax.naming.NamingException;
+
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
@@ -971,4 +973,38 @@ public class WritableContextTest extends AbstractContextTest {
         }
     }
 
+    public void test2PathsCreateSubcontext() throws Exception {
+        WritableContext w = new WritableContext();
+        doBind(w, "a/b/c", "c");
+        doBind(w, "a/b/b/c", "c");
+        assertEquals("a", ((Context)w.lookup("a")).getNameInNamespace());
+        assertEquals("a/b", ((Context)w.lookup("a/b")).getNameInNamespace());
+        assertEquals("a/b/b", ((Context)w.lookup("a/b/b")).getNameInNamespace());
+
+        w = new WritableContext("a");
+        doBind(w, "a/b/c", "c");
+        doBind(w, "a/b/b/c", "c");
+        assertEquals("a/a", ((Context)w.lookup("a")).getNameInNamespace());
+        assertEquals("a/a/b", ((Context)w.lookup("a/b")).getNameInNamespace());
+        assertEquals("a/a/b/b", ((Context)w.lookup("a/a/b/b")).getNameInNamespace());
+    }
+
+    private void doBind(Context context, String nameString, Object value) throws NamingException {
+        Name name = context.getNameParser("").parse(nameString);
+        Context current = context;
+        for (int i = 0; i< name.size() - 1; i++) {
+            String part = name.get(i);
+            try {
+                Object o = current.lookup(part);
+                if (!(o instanceof Context)) {
+                    throw new NamingException("not a context at " + part +" found: " + o);
+                }
+                current = (Context) o;
+            } catch (NamingException e) {
+                current = current.createSubcontext(part);
+            }
+        }
+        current.bind(name.get(name.size() - 1), value);
+    }
+
 }
