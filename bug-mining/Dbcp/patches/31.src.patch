diff --git a/src/java/org/apache/commons/dbcp/datasources/CPDSConnectionFactory.java b/src/java/org/apache/commons/dbcp/datasources/CPDSConnectionFactory.java
index 4a8259a2..d1ad30b6 100644
--- a/src/java/org/apache/commons/dbcp/datasources/CPDSConnectionFactory.java
+++ b/src/java/org/apache/commons/dbcp/datasources/CPDSConnectionFactory.java
@@ -49,8 +49,8 @@ class CPDSConnectionFactory
             + "I have no record of the underlying PooledConnection.";
 
     protected ConnectionPoolDataSource _cpds = null;
-    protected String _validationQuery = null;
-    protected boolean _rollbackAfterValidation = false;
+    protected volatile String _validationQuery = null;
+    protected volatile boolean _rollbackAfterValidation = false;
     protected ObjectPool _pool = null;
     protected String _username = null;
     protected String _password = null;
@@ -121,33 +121,33 @@ class CPDSConnectionFactory
 
     /**
      * Sets the query I use to {*link #validateObject validate}
-     * {*link Connection}s.
+     * {@link Connection}s.
      * Should return at least one row.
-     * May be <tt>null</tt>
-     * @param validationQuery a query to use to {*link #validateObject validate}
-     *        {*link Connection}s.
+     * May be <code>null</code>
+     * @param validationQuery a query to use to {@link #validateObject validate}
+     *        {@link Connection}s.
      */
-    public synchronized void setValidationQuery(String validationQuery) {
+    public void setValidationQuery(String validationQuery) {
         _validationQuery = validationQuery;
     }
 
     /**
      * Sets whether a rollback should be issued after 
-     * {*link #validateObject validating} 
-     * {*link Connection}s.
+     * {@link #validateObject validating} 
+     * {@link Connection}s.
      * @param rollbackAfterValidation whether a rollback should be issued after
-     *        {*link #validateObject validating} 
-     *        {*link Connection}s.
+     *        {@link #validateObject validating} 
+     *        {@link Connection}s.
      */
-    public synchronized void setRollbackAfterValidation(
+    public void setRollbackAfterValidation(
             boolean rollbackAfterValidation) {
         _rollbackAfterValidation = rollbackAfterValidation;
     }
 
     /**
-     * Sets the {*link ObjectPool} in which to pool {*link Connection}s.
+     * Sets the {@link ObjectPool} in which to pool {*link Connection}s.
      * @param pool the {*link ObjectPool} in which to pool those
-     *        {*link Connection}s
+     *        {@link Connection}s
      */
     public synchronized void setPool(ObjectPool pool) throws SQLException {
         if (null != _pool && pool != _pool) {
@@ -162,7 +162,11 @@ class CPDSConnectionFactory
         _pool = pool;
     }
 
-    public ObjectPool getPool() {
+    /**
+     * Gets the {@link ObjectPool} for {@link Connection}s.
+     * @return connection pool
+     */
+    public synchronized ObjectPool getPool() {
         return _pool;
     }
 
diff --git a/src/java/org/apache/commons/dbcp/datasources/KeyedCPDSConnectionFactory.java b/src/java/org/apache/commons/dbcp/datasources/KeyedCPDSConnectionFactory.java
index 60741e4e..53fad9a5 100644
--- a/src/java/org/apache/commons/dbcp/datasources/KeyedCPDSConnectionFactory.java
+++ b/src/java/org/apache/commons/dbcp/datasources/KeyedCPDSConnectionFactory.java
@@ -50,8 +50,8 @@ class KeyedCPDSConnectionFactory
             + "I have no record of the underlying PooledConnection.";
 
     protected ConnectionPoolDataSource _cpds = null;
-    protected String _validationQuery = null;
-    protected boolean _rollbackAfterValidation = false;
+    protected volatile String _validationQuery = null;
+    protected volatile boolean _rollbackAfterValidation = false;
     protected KeyedObjectPool _pool = null;
     
     /** 
@@ -118,22 +118,22 @@ class KeyedCPDSConnectionFactory
     /**
      * Sets the query I use to {*link #validateObject validate} {*link Connection}s.
      * Should return at least one row.
-     * May be <tt>null</tt>
+     * May be <code>null</code>
      * @param validationQuery a query to use to {*link #validateObject validate} {*link Connection}s.
      */
-    synchronized public void setValidationQuery(String validationQuery) {
+    public void setValidationQuery(String validationQuery) {
         _validationQuery = validationQuery;
     }
 
     /**
      * Sets whether a rollback should be issued after 
-     * {*link #validateObject validating} 
-     * {*link Connection}s.
+     * {@link #validateObject validating} 
+     * {@link Connection}s.
      * @param rollbackAfterValidation whether a rollback should be issued after
-     *        {*link #validateObject validating} 
-     *        {*link Connection}s.
+     *        {@link #validateObject validating} 
+     *        {@link Connection}s.
      */
-    public synchronized void setRollbackAfterValidation(
+    public void setRollbackAfterValidation(
             boolean rollbackAfterValidation) {
         _rollbackAfterValidation = rollbackAfterValidation;
     }
@@ -156,7 +156,7 @@ class KeyedCPDSConnectionFactory
         _pool = pool;
     }
 
-    public KeyedObjectPool getPool() {
+    public synchronized KeyedObjectPool getPool() {
         return _pool;
     }
 
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 5ac72663..b937e40c 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -114,6 +114,12 @@ The <action> type attribute can be add,update,fix,remove.
         Made getPool synchronized in PoolableConnectionFactory.
         Fixes inconsistent synchronization accessing _pool.
       </action> 
+      <action dev="psteitz" type="fix" issue="DBCP-252" due-to="FindBugs">
+        Fixed inconsistent synchronization on _rollbackAfterValidation,
+        _validationQuery and _pool in CPDSConnectionFactory and 
+        KeyedCPDSConnectionFactory by making the first two volatile and making
+        both getter and setter for _pool synchronized.
+      </action> 
     </release>
     <release version="1.2.2" date="2007-04-04"
       description="This is a maintenance release containing bug fixes
