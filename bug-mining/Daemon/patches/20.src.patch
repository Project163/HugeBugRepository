diff --git a/src/native/nt/procrun/apps/prunsrv/prunsrv.c b/src/native/nt/procrun/apps/prunsrv/prunsrv.c
index 7d50456..3795b9c 100644
--- a/src/native/nt/procrun/apps/prunsrv/prunsrv.c
+++ b/src/native/nt/procrun/apps/prunsrv/prunsrv.c
@@ -215,8 +215,8 @@ static LPCWSTR  _jni_rparam               = NULL;    /* Startup  arguments */
 static LPCWSTR  _jni_sparam               = NULL;    /* Shutdown arguments */
 static LPSTR    _jni_rmethod              = NULL;    /* Startup  arguments */
 static LPSTR    _jni_smethod              = NULL;    /* Shutdown arguments */
-static CHAR     _jni_rclass[SIZ_HUGLEN]   = {'\0'};  /* Startup  class */
-static CHAR     _jni_sclass[SIZ_HUGLEN]   = {'\0'};  /* Shutdown class */
+static LPSTR    _jni_rclass               = NULL;    /* Startup  class */
+static LPSTR    _jni_sclass               = NULL;    /* Shutdown class */
 
 static HANDLE gShutdownEvent = NULL;
 static HANDLE gSignalEvent   = NULL;
@@ -255,8 +255,8 @@ static BOOL redirectStdStreams(APX_STDWRAP *lpWrapper)
             aOut = TRUE;
             lpWrapper->szStdOutFilename = apxLogFile(gPool,
                                                      lpWrapper->szLogPath,
-                                                     NULL,
-                                                     L"stdout_");
+                                                     L"stdout_",
+                                                     NULL);
         }
         /* Delete the file if not in append mode
          * XXX: See if we can use the params instead of that.
@@ -291,8 +291,8 @@ static BOOL redirectStdStreams(APX_STDWRAP *lpWrapper)
             aErr = TRUE;
             lpWrapper->szStdErrFilename = apxLogFile(gPool,
                                                      lpWrapper->szLogPath,
-                                                     NULL,
-                                                     L"stderr_");
+                                                     L"stderr_",
+                                                     NULL);
         }
         if (!aErr)
             DeleteFileW(lpWrapper->szStdErrFilename);
@@ -323,13 +323,15 @@ static BOOL redirectStdStreams(APX_STDWRAP *lpWrapper)
                                               _O_WRONLY | _O_TEXT);
     if (lpWrapper->fdStdOutFile > 0) {
         lpWrapper->fdStdOutFile = dup2(lpWrapper->fdStdOutFile, 1);
-        setvbuf(stdout, NULL, _IONBF, 0);
+        if (lpWrapper->fdStdOutFile > 0)
+            setvbuf(stdout, NULL, _IONBF, 0);
     }
     lpWrapper->fdStdErrFile = _open_osfhandle((ptrdiff_t)lpWrapper->hStdErrFile,
                                               _O_WRONLY | _O_TEXT);
     if (lpWrapper->fdStdErrFile > 0) {
         lpWrapper->fdStdErrFile = dup2(lpWrapper->fdStdErrFile, 2);
-        setvbuf(stderr, NULL, _IONBF, 0);
+        if (lpWrapper->fdStdErrFile > 0)
+            setvbuf(stderr, NULL, _IONBF, 0);
     }
 
     return TRUE;
@@ -1186,7 +1188,7 @@ void WINAPI serviceMain(DWORD argc, LPTSTR *argv)
     if (SO_STARTMODE) {
         if (!lstrcmpiW(SO_STARTMODE, PRSRV_JVM)) {
             _jni_startup = TRUE;
-            WideToAscii(SO_STARTCLASS, _jni_rclass);
+            _jni_rclass  = WideToUTF8(SO_STARTCLASS);
             /* Exchange all dots with slashes */
             apxStrCharReplaceA(_jni_rclass, '.', '/');
             _jni_rparam = SO_STARTPARAMS;
@@ -1214,7 +1216,7 @@ void WINAPI serviceMain(DWORD argc, LPTSTR *argv)
     if (SO_STOPMODE) {
         if (!lstrcmpiW(SO_STOPMODE, PRSRV_JVM)) {
             _jni_shutdown = TRUE;
-            WideToAscii(SO_STOPCLASS, _jni_sclass);
+            _jni_sclass = WideToUTF8(SO_STOPCLASS);
             apxStrCharReplaceA(_jni_sclass, '.', '/');
             _jni_sparam = SO_STOPPARAMS;
         }
@@ -1275,7 +1277,11 @@ void WINAPI serviceMain(DWORD argc, LPTSTR *argv)
         rv = apxHandleWait(gWorker, INFINITE, FALSE);
         apxLogWrite(APXLOG_MARK_DEBUG "Worker finished.");
         reportServiceStatus(SERVICE_STOP_PENDING, NO_ERROR, 0);
-        fflush(stdout);
+        /* This will cause to wait for all threads to exit
+         * TODO: Use some kind of timeout wait logic
+         */
+        apxDestroyJvm();
+        apxLogWrite(APXLOG_MARK_DEBUG "JVM destroyed.");
     }
     else {
         apxLogWrite(APXLOG_MARK_ERROR "ServiceStart returned %d", rc);
@@ -1416,6 +1422,7 @@ cleanup:
     if (_service_status_handle)
         CloseHandle(_service_status_handle);
     _service_status_handle = NULL;
+    _flushall();
     apxLogClose(NULL);
     apxHandleManagerDestroy();
     ExitProcess(rv);
diff --git a/src/native/nt/procrun/include/javajni.h b/src/native/nt/procrun/include/javajni.h
index db91037..1032ebb 100644
--- a/src/native/nt/procrun/include/javajni.h
+++ b/src/native/nt/procrun/include/javajni.h
@@ -19,6 +19,8 @@
 
 __APXBEGIN_DECLS
 
+#define     APX_JVM_DESTROY 0x00000001
+
 APXHANDLE   apxCreateJava(APXHANDLE hPool, LPCWSTR szJvmDllPath);
 
 BOOL        apxJavaInitialize(APXHANDLE hJava, LPCSTR szClassPath,
@@ -39,6 +41,9 @@ DWORD       apxJavaWait(APXHANDLE hJava, DWORD dwMilliseconds, BOOL bKill);
 
 BOOL        apxJavaSetOut(APXHANDLE hJava, BOOL setErrorOrOut,
                           LPCWSTR szFilename);
+DWORD       apxJavaSetOptions(APXHANDLE hJava, DWORD dwOptions);
+
+BOOL        apxDestroyJvm(void);
 
 
 __APXEND_DECLS
diff --git a/src/native/nt/procrun/src/handles.c b/src/native/nt/procrun/src/handles.c
index 53c964e..ecec9ef 100644
--- a/src/native/nt/procrun/src/handles.c
+++ b/src/native/nt/procrun/src/handles.c
@@ -407,9 +407,12 @@ apxPoolWStrdupA(APXHANDLE hPool, LPCSTR szSource)
 {
     if (szSource) {
         LPWSTR szDest;
-        DWORD l = lstrlenA(szSource);
-        szDest = apxPoolAlloc(hPool, (l + 1) * sizeof(WCHAR));
-        AsciiToWide(szSource, szDest);
+        int cch = MultiByteToWideChar(CP_UTF8, 0, szSource, -1, NULL, 0);
+        szDest = (LPWSTR)apxPoolAlloc(hPool, cch * sizeof(WCHAR));
+        if (!MultiByteToWideChar(CP_UTF8, 0, szSource, -1, szDest, cch)) {
+            apxFree(szDest);
+            return NULL;
+        }
         return szDest;
     }
     else
diff --git a/src/native/nt/procrun/src/javajni.c b/src/native/nt/procrun/src/javajni.c
index 5b3a444..25125b9 100644
--- a/src/native/nt/procrun/src/javajni.c
+++ b/src/native/nt/procrun/src/javajni.c
@@ -45,7 +45,8 @@ static DYNLOAD_FPTR_DECLARE(JNI_CreateJavaVM) = NULL;
 DYNOLAD_TYPE_DECLARE(JNI_GetCreatedJavaVMs, JNICALL, jint)(JavaVM **, jsize, jsize *);
 static DYNLOAD_FPTR_DECLARE(JNI_GetCreatedJavaVMs) = NULL;
 
-static HANDLE _st_sys_jvmDllHandle = NULL;
+static HANDLE  _st_sys_jvmDllHandle = NULL;
+static JavaVM *_st_sys_jvm = NULL;
 
 DYNOLAD_TYPE_DECLARE(SetDllDirectoryW, WINAPI, BOOL)(LPCWSTR);
 static DYNLOAD_FPTR_DECLARE(SetDllDirectoryW) = NULL;
@@ -127,7 +128,11 @@ typedef struct APXJAVAVM {
 
 static __inline BOOL __apxJvmAttach(LPAPXJAVAVM lpJava)
 {
-    jint _iStatus = (*(lpJava->lpJvm))->GetEnv(lpJava->lpJvm,
+    jint _iStatus;
+
+    if (!_st_sys_jvm)
+      return FALSE;  
+    _iStatus = (*(lpJava->lpJvm))->GetEnv(lpJava->lpJvm,
                                           (void **)&(lpJava->lpEnv),
                                           lpJava->iVersion);
     if (_iStatus != JNI_OK) {
@@ -145,8 +150,9 @@ static __inline BOOL __apxJvmAttach(LPAPXJAVAVM lpJava)
 
 static __inline BOOL __apxJvmDetach(LPAPXJAVAVM lpJava)
 {
-    jint _iStatus = (*(lpJava->lpJvm))->DetachCurrentThread(lpJava->lpJvm);
-    if (_iStatus != JNI_OK) {
+    if (!_st_sys_jvm)
+      return FALSE;  
+    if ((*(lpJava->lpJvm))->DetachCurrentThread(lpJava->lpJvm) != JNI_OK) {
         lpJava->lpEnv = NULL;
         return FALSE;
     }
@@ -226,7 +232,7 @@ static BOOL __apxJavaJniCallback(APXHANDLE hObject, UINT uMsg,
     lpJava = APXHANDLE_DATA(hObject);
     switch (uMsg) {
         case WM_CLOSE:
-            if (lpJava->lpJvm) {
+            if (_st_sys_jvm && lpJava->lpJvm) {
                 if (!IS_INVALID_HANDLE(lpJava->hWorkerThread)) {
                     if (GetExitCodeThread(lpJava->hWorkerThread, &dwJvmRet) &&
                         dwJvmRet == STILL_ACTIVE) {
@@ -240,11 +246,6 @@ static BOOL __apxJavaJniCallback(APXHANDLE hObject, UINT uMsg,
                 __apxJvmDetach(lpJava);
                 /* Check if this is the jvm loader */
                 if (!lpJava->iVmCount && _st_sys_jvmDllHandle) {
-#if 0
-                    /* Do not destroy if we terminated the worker thread */
-                    if (dwJvmRet != STILL_ACTIVE)
-                        (*(lpJava->lpJvm))->DestroyJavaVM(lpJava->lpJvm);
-#endif
                     /* Unload JVM dll */
                     FreeLibrary(_st_sys_jvmDllHandle);
                     _st_sys_jvmDllHandle = NULL;
@@ -286,9 +287,25 @@ apxCreateJava(APXHANDLE hPool, LPCWSTR szJvmDllPath)
     lpJava = APXHANDLE_DATA(hJava);
     lpJava->lpJvm = lpJvm;
     lpJava->iVmCount = iVmCount;
+    if (!_st_sys_jvm)
+        _st_sys_jvm = lpJvm;
     return hJava;
 }
 
+BOOL
+apxDestroyJvm()
+{
+    if (_st_sys_jvm) {
+        JavaVM *lpJvm = _st_sys_jvm;
+        _st_sys_jvm = NULL;
+        (*lpJvm)->DetachCurrentThread(lpJvm);
+        (*lpJvm)->DestroyJavaVM(lpJvm);
+        return TRUE;
+    }
+    else
+        return FALSE;
+}
+
 static DWORD __apxMultiSzToJvmOptions(APXHANDLE hPool,
                                       LPCSTR lpString,
                                       JavaVMOption **lppArray,
@@ -421,8 +438,11 @@ apxJavaInitialize(APXHANDLE hJava, LPCSTR szClassPath,
             apxLogWrite(APXLOG_MARK_ERROR "CreateJavaVM Failed");
             rv = FALSE;
         }
-        else
+        else {
             rv = TRUE;
+            if (!_st_sys_jvm)
+                _st_sys_jvm = lpJava->lpJvm;
+        }
         apxFree(szCp);
         apxFree(lpJvmOptions);
     }
@@ -456,7 +476,7 @@ apxJavaCmdInitialize(APXHANDLE hPool, LPCWSTR szClassPath, LPCWSTR szClass,
     DWORD i, nJVM, nCmd, nTotal, lJVM, lCmd;
     LPWSTR p;
 
-    // Calculate the number of all arguments
+    /* Calculate the number of all arguments */
     nTotal = 0;
     if (szClassPath)
         ++nTotal;
@@ -476,10 +496,11 @@ apxJavaCmdInitialize(APXHANDLE hPool, LPCWSTR szClassPath, LPCWSTR szClass,
     if (nTotal == 0)
         return 0;
 
-    // Allocate the array to store all arguments' pointers
+    /* Allocate the array to store all arguments' pointers
+     */
     *lppArray = (LPWSTR *)apxPoolAlloc(hPool, (nTotal + 2) * sizeof(LPWSTR));
 
-    // Process JVM options
+    /* Process JVM options */
     if (nJVM && lJVM) {
         p = (LPWSTR)apxPoolAlloc(hPool, (lJVM + 1) * sizeof(WCHAR));
         AplCopyMemory(p, szOptions, (lJVM + 1) * sizeof(WCHAR) + sizeof(WCHAR));
@@ -491,7 +512,7 @@ apxJavaCmdInitialize(APXHANDLE hPool, LPCWSTR szClassPath, LPCWSTR szClass,
         }
     }
 
-    // Process the 3 extra JVM options
+    /* Process the 3 extra JVM options */
     if (dwMs) {
         p = (LPWSTR)apxPoolAlloc(hPool, 64 * sizeof(WCHAR));
         wsprintfW(p, L"-Xms%dm", dwMs);
@@ -508,7 +529,7 @@ apxJavaCmdInitialize(APXHANDLE hPool, LPCWSTR szClassPath, LPCWSTR szClass,
         (*lppArray)[i++] = p;
     }
 
-    // Process the classpath and class
+    /* Process the classpath and class */
     if (szClassPath) {
         p = (LPWSTR)apxPoolAlloc(hPool, (lstrlenW(JAVA_CLASSPATH_W) + lstrlenW(szClassPath)) * sizeof(WCHAR));
         lstrcpyW(p, JAVA_CLASSPATH_W);
@@ -521,7 +542,7 @@ apxJavaCmdInitialize(APXHANDLE hPool, LPCWSTR szClassPath, LPCWSTR szClass,
         (*lppArray)[i++] = p;
     }
 
-    // Process command arguments
+    /* Process command arguments */
     if (nCmd && lCmd) {
         p = (LPWSTR)apxPoolAlloc(hPool, (lCmd + 1) * sizeof(WCHAR));
         AplCopyMemory(p, szCmdArgs, (lCmd + 1) * sizeof(WCHAR) + sizeof(WCHAR));
@@ -593,7 +614,6 @@ apxJavaLoadMainClass(APXHANDLE hJava, LPCSTR szClassName,
     return TRUE;
 }
 
-
 /* Main java application worker thread
  * It will launch Java main and wait until
  * it finishes.
@@ -623,6 +643,8 @@ static DWORD WINAPI __apxJavaWorkerThread(LPVOID lpParameter)
 
     JVM_EXCEPTION_CLEAR(lpJava);
     __apxJvmDetach(lpJava);
+    apxLogWrite(APXLOG_MARK_DEBUG "Java Worker thread %s:%s finished",
+                lpJava->clWorker.sClazz, lpJava->clWorker.sMethod);
 finished:
     lpJava->dwWorkerStatus = 0;
     apxLogWrite(APXLOG_MARK_DEBUG "Java Worker thread finished %s:%s",
@@ -656,6 +678,20 @@ apxJavaStart(APXHANDLE hJava)
     return TRUE;
 }
 
+DWORD
+apxJavaSetOptions(APXHANDLE hJava, DWORD dwOptions)
+{
+    DWORD dwOrgOptions;
+    LPAPXJAVAVM lpJava;
+
+    if (hJava->dwType != APXHANDLE_TYPE_JVM)
+        return 0;
+    lpJava = APXHANDLE_DATA(hJava);
+    dwOrgOptions = lpJava->dwOptions;
+    lpJava->dwOptions = dwOptions;
+    return dwOrgOptions;
+}
+
 DWORD
 apxJavaWait(APXHANDLE hJava, DWORD dwMilliseconds, BOOL bKill)
 {
diff --git a/src/native/nt/procrun/src/log.c b/src/native/nt/procrun/src/log.c
index 5b93947..2070fc9 100644
--- a/src/native/nt/procrun/src/log.c
+++ b/src/native/nt/procrun/src/log.c
@@ -57,28 +57,23 @@ LPWSTR apxLogFile(
     if (!szPath) {
         if (GetSystemDirectoryW(sPath, MAX_PATH) == 0)
             return INVALID_HANDLE_VALUE;
-        lstrlcatW(sPath, MAX_PATH, L"\\LogFiles\\");
-        if (!szPrefix)
-            lstrlcatW(sPath, MAX_PATH, L"Apache");
-        else
-            lstrlcatW(sPath, MAX_PATH, szPrefix);
-        wsprintfW(sName, L"\\%s%04d%02d%02d.log",
-                  szName,
-                  sysTime.wYear,
-                  sysTime.wMonth,
-                  sysTime.wDay);
+        lstrlcatW(sPath, MAX_PATH, L"\\LogFiles\\Apache");
     }
     else {
         lstrlcpyW(sPath, MAX_PATH, szPath);
-        if (szPrefix)
-            wsprintfW(sName, L"\\%s", szPrefix);
-        else
-            wsprintfW(sName, L"\\%s%04d%02d%02d.log",
-                      szName,
-                      sysTime.wYear,
-                      sysTime.wMonth,
-                      sysTime.wDay);
     }
+    if (!szPrefix)
+        szPrefix = L"";
+    if (!szName)
+        szName   = L"";
+    wsprintfW(sName,
+              L"\\%s%s%04d%02d%02d.log",
+              szPrefix,
+              szName,
+              sysTime.wYear,
+              sysTime.wMonth,
+              sysTime.wDay);
+
     sRet = apxPoolAlloc(hPool, (MAX_PATH + 1) * sizeof(WCHAR));
     /* Set default level to info */
     CreateDirectoryW(sPath, NULL);
diff --git a/src/native/nt/procrun/src/utils.c b/src/native/nt/procrun/src/utils.c
index e1e6d6c..5a64474 100644
--- a/src/native/nt/procrun/src/utils.c
+++ b/src/native/nt/procrun/src/utils.c
@@ -149,6 +149,19 @@ LPSTR WideToUTF8(LPCWSTR ws)
     return s;
 }
 
+LPWSTR UTF8ToWide(LPCSTR cs)
+{
+
+    LPWSTR s;
+    int cch = MultiByteToWideChar(CP_UTF8, 0, cs, -1, NULL, 0);
+    s = (LPWSTR)apxAlloc(cch * sizeof(WCHAR));
+    if (!MultiByteToWideChar(CP_UTF8, 0, cs, -1, s, cch)) {
+        apxFree(s);
+        return NULL;
+    }
+    return s;
+}
+
 LPSTR MzWideToAscii(LPCWSTR ws, LPSTR s)
 {
     LPSTR pszSave = s;
