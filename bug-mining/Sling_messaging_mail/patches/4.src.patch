diff --git a/src/test/java/org/apache/sling/commons/messaging/mail/it/tests/SimpleMailServiceIT.java b/src/test/java/org/apache/sling/commons/messaging/mail/it/tests/SimpleMailServiceIT.java
index 16bcabe..1e3aace 100644
--- a/src/test/java/org/apache/sling/commons/messaging/mail/it/tests/SimpleMailServiceIT.java
+++ b/src/test/java/org/apache/sling/commons/messaging/mail/it/tests/SimpleMailServiceIT.java
@@ -33,6 +33,8 @@ import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
 
 import javax.inject.Inject;
+
+import jakarta.mail.Header;
 import jakarta.mail.Message;
 import jakarta.mail.Session;
 import jakarta.mail.event.ConnectionEvent;
@@ -40,7 +42,9 @@ import jakarta.mail.event.ConnectionListener;
 import jakarta.mail.event.TransportEvent;
 import jakarta.mail.event.TransportListener;
 import jakarta.mail.internet.InternetAddress;
+import jakarta.mail.internet.MimeBodyPart;
 import jakarta.mail.internet.MimeMessage;
+import jakarta.mail.internet.MimeMultipart;
 
 import com.icegreen.greenmail.util.DummySSLSocketFactory;
 import com.icegreen.greenmail.util.GreenMail;
@@ -389,8 +393,8 @@ public class SimpleMailServiceIT extends MailTestSupport {
             .subject(subject)
             .text(text)
             .html(html)
-            .attachment(support, "image/png", "SupportApache-small.png")
-            .inline(sling, "image/png", "sling")
+            .attachment(support, "image/png", "SupportApache-small.png", Collections.singleton(new Header("X-Attachment", "Apache Software Foundation")))
+            .inline(sling, "image/png", "sling", Collections.singleton(new Header("X-Inline", "Apache Sling")))
             .build();
 
         final CompletableFuture<Void> future = mailService.sendMessage(message);
@@ -412,6 +416,25 @@ public class SimpleMailServiceIT extends MailTestSupport {
             assertThat(parser.getHtmlContent()).isEqualTo(html);
 
             assertThat(parser.getContentIds()).contains("sling");
+
+            final MimeMultipart content = (MimeMultipart) received.getContent();
+            assertThat(content.getContentType()).startsWith("multipart/mixed");
+
+            final MimeBodyPart alternative = (MimeBodyPart) content.getBodyPart(0);
+            assertThat(alternative.getContentType()).startsWith("multipart/alternative");
+
+            final MimeBodyPart related = (MimeBodyPart) ((MimeMultipart) alternative.getContent()).getBodyPart(0);
+            assertThat(related.getContentType()).startsWith("multipart/related");
+
+            final MimeBodyPart inline = (MimeBodyPart) ((MimeMultipart) related.getContent()).getBodyPart(1);
+            assertThat(inline.getContentType()).isEqualTo("image/png");
+            assertThat(inline.getHeader("X-Inline")).hasLength(1);
+            assertThat(inline.getHeader("X-Inline")[0]).isEqualTo("Apache Sling");
+
+            final MimeBodyPart attachment = (MimeBodyPart) content.getBodyPart(1);
+            assertThat(attachment.getContentType()).isEqualTo("image/png; name=SupportApache-small.png");
+            assertThat(attachment.getHeader("X-Attachment")).hasLength(1);
+            assertThat(attachment.getHeader("X-Attachment")[0]).isEqualTo("Apache Software Foundation");
         }
     }
 
