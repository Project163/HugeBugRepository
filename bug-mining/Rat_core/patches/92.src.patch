diff --git a/apache-rat-core/src/test/java/org/apache/rat/analysis/HeaderCheckWorkerTest.java b/apache-rat-core/src/test/java/org/apache/rat/analysis/HeaderCheckWorkerTest.java
index f7e0dffb..8d9eb3fe 100644
--- a/apache-rat-core/src/test/java/org/apache/rat/analysis/HeaderCheckWorkerTest.java
+++ b/apache-rat-core/src/test/java/org/apache/rat/analysis/HeaderCheckWorkerTest.java
@@ -26,7 +26,6 @@ import java.util.stream.Collectors;
 import org.apache.rat.api.Document;
 import org.apache.rat.configuration.builders.AnyBuilder;
 import org.apache.rat.license.ILicenseFamily;
-import org.apache.rat.license.ILicenseFamilyBuilder;
 import org.apache.rat.testhelpers.TestingDocument;
 import org.apache.rat.license.ILicense;
 import org.apache.rat.testhelpers.TestingLicense;
diff --git a/apache-rat-core/src/test/java/org/apache/rat/config/exclusion/fileProcessors/GitFileProcessorTest.java b/apache-rat-core/src/test/java/org/apache/rat/config/exclusion/fileProcessors/GitFileProcessorTest.java
index bd791976..3166b4ca 100644
--- a/apache-rat-core/src/test/java/org/apache/rat/config/exclusion/fileProcessors/GitFileProcessorTest.java
+++ b/apache-rat-core/src/test/java/org/apache/rat/config/exclusion/fileProcessors/GitFileProcessorTest.java
@@ -23,7 +23,6 @@ import java.util.Iterator;
 import java.util.stream.Stream;
 import org.apache.rat.document.DocumentName;
 import org.apache.rat.document.DocumentNameMatcher;
-import org.apache.rat.document.FileDocument;
 import org.apache.rat.utils.ExtendedIterator;
 import org.junit.Ignore;
 import org.junit.jupiter.api.Test;
diff --git a/apache-rat-core/src/test/java/org/apache/rat/configuration/XMLConfigurationWriterTest.java b/apache-rat-core/src/test/java/org/apache/rat/configuration/XMLConfigurationWriterTest.java
index b90902fd..556868a6 100644
--- a/apache-rat-core/src/test/java/org/apache/rat/configuration/XMLConfigurationWriterTest.java
+++ b/apache-rat-core/src/test/java/org/apache/rat/configuration/XMLConfigurationWriterTest.java
@@ -16,30 +16,14 @@
  */
 package org.apache.rat.configuration;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertNotNull;
-import static org.junit.jupiter.api.Assertions.assertTrue;
-
-import java.io.ByteArrayInputStream;
 import java.io.StringReader;
 import java.io.StringWriter;
-import java.util.Optional;
-
-import javax.xml.xpath.XPath;
-import javax.xml.xpath.XPathConstants;
-import javax.xml.xpath.XPathFactory;
 
 import org.apache.rat.Defaults;
 import org.apache.rat.ReportConfiguration;
 import org.apache.rat.api.RatException;
-import org.apache.rat.config.parameters.Description;
-import org.apache.rat.license.ILicense;
 import org.apache.rat.license.LicenseSetFactory.LicenseFilter;
-import org.apache.rat.report.xml.writer.XmlWriter;
-import org.apache.rat.testhelpers.XmlUtils;
 import org.junit.jupiter.api.Test;
-import org.w3c.dom.Document;
-import org.w3c.dom.Node;
 
 public class XMLConfigurationWriterTest {
 
diff --git a/apache-rat-core/src/test/java/org/apache/rat/report/xml/XmlReportFactoryTest.java b/apache-rat-core/src/test/java/org/apache/rat/report/xml/XmlReportFactoryTest.java
index cf481d83..a462cac0 100644
--- a/apache-rat-core/src/test/java/org/apache/rat/report/xml/XmlReportFactoryTest.java
+++ b/apache-rat-core/src/test/java/org/apache/rat/report/xml/XmlReportFactoryTest.java
@@ -98,7 +98,6 @@ public class XmlReportFactoryTest {
 
     @Test
     public void testNoLicense()  {
-
         final ILicense mockLicense = mock(ILicense.class);
         when(mockLicense.matches(any())).thenReturn(true);
         when(mockLicense.getLicenseFamily()).thenReturn(family);
diff --git a/apache-rat-core/src/test/java/org/apache/rat/test/AbstractOptionsProvider.java b/apache-rat-core/src/test/java/org/apache/rat/test/AbstractOptionsProvider.java
index 656d2eff..81c44b8d 100644
--- a/apache-rat-core/src/test/java/org/apache/rat/test/AbstractOptionsProvider.java
+++ b/apache-rat-core/src/test/java/org/apache/rat/test/AbstractOptionsProvider.java
@@ -421,7 +421,7 @@ public abstract class AbstractOptionsProvider {
         PrintStream origin = System.out;
         try (PrintStream out = new PrintStream(output)){
             System.setOut(out);
-            ReportConfiguration config = generateConfig(ImmutablePair.of(HELP_LICENSES.option(), null));
+            generateConfig(ImmutablePair.of(HELP_LICENSES.option(), null));
         } catch (IOException e) {
             fail(e.getMessage());
         } finally {
@@ -692,7 +692,7 @@ public abstract class AbstractOptionsProvider {
             for (Level level : Level.values()) {
                 try {
                     args[0] = level.name();
-                    ReportConfiguration config = generateConfig(ImmutablePair.of(option, args));
+                    generateConfig(ImmutablePair.of(option, args));
                     assertEquals(level, DefaultLog.getInstance().getLevel());
                 } catch (IOException e) {
                     fail(e.getMessage());
@@ -876,7 +876,7 @@ public abstract class AbstractOptionsProvider {
                             }
                     }
                 if (!missingTests.isEmpty()) {
-                        System.out.println("The following tests are excluded: '"+String.join( "', '", missingTests )+"'");
+                        System.out.println("The following tests are excluded: '" + String.join( "', '", missingTests ) + "'");
                     }
                 return lst.stream();
             }
diff --git a/apache-rat-core/src/test/resources/RAT_355/verify.groovy b/apache-rat-core/src/test/resources/RAT_355/verify.groovy
index 76a5216c..46694988 100644
--- a/apache-rat-core/src/test/resources/RAT_355/verify.groovy
+++ b/apache-rat-core/src/test/resources/RAT_355/verify.groovy
@@ -1,4 +1,4 @@
-package ReportTest.RAT_355
+package RAT_355
 
 import org.apache.rat.report.claim.ClaimStatistic
 import org.apache.rat.testhelpers.XmlUtils
@@ -12,11 +12,11 @@ import javax.xml.xpath.XPathFactory
 import static org.assertj.core.api.Assertions.assertThat
 
 private static Map<String, String> mapOf(String... parts) {
-    Map<String, String> map = new HashMap<>();
+    Map<String, String> map = new HashMap<>()
     for (int i=0; i<parts.length; i+=2) {
-        map.put(parts[i], parts[i+1]);
+        map.put(parts[i], parts[i+1])
     }
-    return map;
+    return map
 }
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
@@ -37,45 +37,44 @@ private static Map<String, String> mapOf(String... parts) {
 output = new File(args[0])
 content = output.text
 
-//Map<ClaimStatistic.Counter, String> data = new HashMap<>();
-//data.put(ClaimStatistic.Counter.APPROVED, "2");
-//data.put(ClaimStatistic.Counter.ARCHIVES, "0");
-//data.put(ClaimStatistic.Counter.BINARIES, "0");
-//data.put(ClaimStatistic.Counter.DOCUMENT_TYPES, "3");
-//data.put(ClaimStatistic.Counter.IGNORED, "6");
-//data.put(ClaimStatistic.Counter.LICENSE_CATEGORIES, "2");
-//data.put(ClaimStatistic.Counter.LICENSE_NAMES, "2");
-//data.put(ClaimStatistic.Counter.NOTICES, "1");
-//data.put(ClaimStatistic.Counter.STANDARDS, "6");
-//data.put(ClaimStatistic.Counter.UNAPPROVED, "4");
-//data.put(ClaimStatistic.Counter.UNKNOWN, "4");
-
-
-Document document = XmlUtils.toDom(new FileInputStream(args[0]));
-XPath xPath = XPathFactory.newInstance().newXPath();
+//Map<ClaimStatistic.Counter, String> data = new HashMap<>()
+//data.put(ClaimStatistic.Counter.APPROVED, "2")
+//data.put(ClaimStatistic.Counter.ARCHIVES, "0")
+//data.put(ClaimStatistic.Counter.BINARIES, "0")
+//data.put(ClaimStatistic.Counter.DOCUMENT_TYPES, "3")
+//data.put(ClaimStatistic.Counter.IGNORED, "6")
+//data.put(ClaimStatistic.Counter.LICENSE_CATEGORIES, "2")
+//data.put(ClaimStatistic.Counter.LICENSE_NAMES, "2")
+//data.put(ClaimStatistic.Counter.NOTICES, "1")
+//data.put(ClaimStatistic.Counter.STANDARDS, "6")
+//data.put(ClaimStatistic.Counter.UNAPPROVED, "4")
+//data.put(ClaimStatistic.Counter.UNKNOWN, "4")
+
+Document document = XmlUtils.toDom(new FileInputStream(args[0]))
+XPath xPath = XPathFactory.newInstance().newXPath()
 
 //for (ClaimStatistic.Counter counter : ClaimStatistic.Counter.values()) {
-//    String xpath = String.format("/rat-report/statistics/statistic[@name='%s']", counter.displayName());
+//    String xpath = String.format("/rat-report/statistics/statistic[@name='%s']", counter.displayName())
 //    Map<String, String> map = mapOf("approval",
 //            counter == ClaimStatistic.Counter.UNAPPROVED ? "false" : "true",
 //            "count", data.get(counter),
 //            "description", counter.getDescription());
-//    XmlUtils.assertAttributes(document, xPath, xpath, map);
+//    XmlUtils.assertAttributes(document, xPath, xpath, map)
 //}
 
 //// license categories
 //XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/licenseCategory[@name='?????']",
-//        mapOf("count", "4" ));
+//        mapOf("count", "4" ))
 //
 //XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/licenseCategory[@name='AL   ']",
-//        mapOf("count", "2" ));
+//        mapOf("count", "2" ))
 //
 //// license names
 //XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/licenseName[@name='Apache License Version 2.0']",
-//        mapOf("count", "2" ));
+//        mapOf("count", "2" ))
 //
 //XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/licenseName[@name='Unknown license']",
-//        mapOf("count", "4" ));
+//        mapOf("count", "4" ))
 
 List<String> ignoredFiles = new ArrayList<>(Arrays.asList(
         "/dir1/dir1.txt",
@@ -84,31 +83,28 @@ List<String> ignoredFiles = new ArrayList<>(Arrays.asList(
         "/dir2/dir2.md",
         "/dir3/dir3.log",
         "/.gitignore",
-        "/root.md"));
+        "/root.md"))
 
-NodeList nodeList = XmlUtils.getNodeList(document, xPath, "/rat-report/resource[@type='IGNORED']");
+NodeList nodeList = XmlUtils.getNodeList(document, xPath, "/rat-report/resource[@type='IGNORED']")
 for (int i=0;i< nodeList.getLength(); i++) {
-    NamedNodeMap attr = nodeList.item(i).getAttributes();
-    String s = attr.getNamedItem("name").getNodeValue();
-    assertThat(ignoredFiles).contains(s);
-    ignoredFiles.remove(s);
+    NamedNodeMap attr = nodeList.item(i).getAttributes()
+    String s = attr.getNamedItem("name").getNodeValue()
+    assertThat(ignoredFiles).contains(s)
+    ignoredFiles.remove(s)
 }
-assertThat(ignoredFiles).isEmpty();
-
+assertThat(ignoredFiles).isEmpty()
 
 // Document types
 XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/documentType[@name='IGNORED']",
-        mapOf("count", "6" ));
+        mapOf("count", "6" ))
 
 XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/documentType[@name='NOTICE']",
-        mapOf("count", "1" ));
+        mapOf("count", "1" ))
 
 XmlUtils.assertAttributes(document, xPath, "/rat-report/statistics/documentType[@name='STANDARD']",
-        mapOf("count", "6" ));
-
+        mapOf("count", "6" ))
 
 /*
-
 TextUtils.assertPatternInTarget("^  Approved:\\s+8 ", content)
 TextUtils.assertPatternInTarget("^  Archives:\\s+1 ", content)
 TextUtils.assertPatternInTarget("^  Binaries:\\s+2 ", content)
