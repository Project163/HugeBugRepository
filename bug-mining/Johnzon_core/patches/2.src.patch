diff --git a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonStreamParserImpl.java b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonStreamParserImpl.java
index c083b691..b78106b3 100644
--- a/johnzon-core/src/main/java/org/apache/johnzon/core/JsonStreamParserImpl.java
+++ b/johnzon-core/src/main/java/org/apache/johnzon/core/JsonStreamParserImpl.java
@@ -42,8 +42,7 @@ public class JsonStreamParserImpl implements JsonChars, JsonParser{
     //-1 would cause a re-read of the first character in the buffer (which is at zero index)
     private int bufferPos = Integer.MIN_VALUE;
 
-    //available character in the buffer
-    //normally this is buffer.length, except for the last buffer page it might be <= buffer.length
+    //available character in the buffer. It might be <= "buffer.length".
     private int availableCharsInBuffer;
 
     //start and end position of values in the buffer
@@ -244,12 +243,12 @@ public class JsonStreamParserImpl implements JsonChars, JsonParser{
     }
 
     //read the next char from the stream and set/increment the bufferPos
-    //will also refill buffer if neccessary
+    //will also refill buffer if necessary
     //if we are currently processing a value (string or number) and buffer 
-    //refill is neccessary copy the already readed value part into the value buffer
+    //refill is necessary copy the already read value part into the value buffer
     private char readNextChar() {
 
-        if ((buffer.length - bufferPos) <= 1) {
+        if ((availableCharsInBuffer - bufferPos) <= 1) {
             //fillbuffer
 
             //copy content from old buffer to valuebuffer
@@ -279,12 +278,12 @@ public class JsonStreamParserImpl implements JsonChars, JsonParser{
             bufferPos = 0;
             //end fillbuffer
         } else {
-            
+
             //prevent "bufferoverflow
             if(bufferPos + 1 >= availableCharsInBuffer) {
                 return EOF;
             }
-            
+
             bufferPos++;
         }
 
diff --git a/johnzon-core/src/test/java/org/apache/johnzon/core/JsonParserTest.java b/johnzon-core/src/test/java/org/apache/johnzon/core/JsonParserTest.java
index 80d3952d..e494de3b 100644
--- a/johnzon-core/src/test/java/org/apache/johnzon/core/JsonParserTest.java
+++ b/johnzon-core/src/test/java/org/apache/johnzon/core/JsonParserTest.java
@@ -1056,7 +1056,32 @@ public class JsonParserTest {
   
         assertEquals("\"abcdef", Json.createReader(new ByteArrayInputStream("[\"\\\"abcdef\"]".getBytes())).readArray().getString(0));
     }
-    
+
+    @Test
+    public void testSlowIs() {
+        // using a reader as wrapper of parser
+        class SlowIs extends ByteArrayInputStream {
+            private boolean slowDown = true;
+
+            @Override
+            public synchronized int read(byte[] b, int off, int len) {
+                if(slowDown) {
+                    this.count = 5;
+                    slowDown = false;
+                } else {
+                    this.count = this.buf.length;
+                }
+                return super.read(b, off, len);
+            }
+
+            protected SlowIs() {
+                super("{\"message\":\"Hi REST!\"}".getBytes());
+            }
+        }
+
+        assertEquals("Hi REST!", Json.createReaderFactory(null).createReader(new SlowIs(), UTF_8).readObject().getString("message"));
+    }
+
     @Test
     public void threeLiterals() {
         final JsonParser parser = Json.createParserFactory(new HashMap<String, Object>() {{
