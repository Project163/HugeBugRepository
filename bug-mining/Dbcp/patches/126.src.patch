diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 3ee26572..29dc53fa 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -60,7 +60,7 @@ The <action> type attribute can be add,update,fix,remove.
      -->
 
   <body>
-    <release version="2.0.2" date="TBD" description="This is a bug fix release.">
+    <release version="2.1" date="TBD" description="This is minor release, including bug fixes and enhancements.">
       <action issue="DBCP-420" dev="sebb" type="fix">
         InstanceKeyDataSource discards native SQLException when given password does not match
         password used to create the connection.
@@ -76,6 +76,9 @@ The <action> type attribute can be add,update,fix,remove.
         Do not ignore the configured custom eviction policy when creating a
         BasicDataSource.
       </action>
+      <action dev="psteitz" type="add" issue="DBCP-426" due-to="Kasper SÃ¸rensen">
+        Added invalidateConnection method to BasicDataSource.
+      </action>
     </release>
     <release version="2.0.1" date="24 May 2014" description="This is a bug fix release.">
       <action dev="markt" type="fix">
diff --git a/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java b/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java
index 686cffdb..4c95eeae 100644
--- a/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java
+++ b/src/main/java/org/apache/commons/dbcp2/BasicDataSource.java
@@ -1865,6 +1865,47 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
         throw new SQLFeatureNotSupportedException();
     }
 
+    /**
+     * Manually invalidates a connection, effectively requesting the pool to try
+     * to close it, remove it from the pool and reclaim pool capacity.
+     *
+     * @throws IllegalStateException
+     *             if invalidating the connection failed.
+     * @since 2.1
+     */
+    public void invalidateConnection(Connection connection) throws IllegalStateException {
+        if (connection == null) {
+            return;
+        }
+        if (connectionPool == null) {
+            throw new IllegalStateException("Cannot invalidate connection: ConnectionPool is null.");
+        }
+
+        final PoolableConnection poolableConnection;
+        try {
+            poolableConnection = connection.unwrap(PoolableConnection.class);
+            if (poolableConnection == null) {
+                throw new IllegalStateException(
+                        "Cannot invalidate connection: Connection is not a poolable connection.");
+            }
+        } catch (SQLException e) {
+            throw new IllegalStateException("Cannot invalidate connection: Unwrapping poolable connection failed.", e);
+        }
+
+        // attempt to close the connection for good measure
+        try {
+            connection.close();
+        } catch (Exception e) {
+            // ignore any exceptions here
+        }
+
+        try {
+            connectionPool.invalidateObject(poolableConnection);
+        } catch (Exception e) {
+            throw new IllegalStateException("Invalidating connection threw unexpected exception", e);
+        }
+    }
+
     // ------------------------------------------------------ Protected Methods
 
 
diff --git a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java
index 15a24f17..943c3f5d 100644
--- a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java
+++ b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java
@@ -453,6 +453,20 @@ public class TestBasicDataSource extends TestConnectionPool {
             // test OK
         }
     }
+    
+    public void testInvalidateConnection() throws Exception {
+    	ds.setMaxTotal(2);
+    	Connection conn1 = ds.getConnection();
+    	Connection conn2 = ds.getConnection();
+    	ds.invalidateConnection(conn1);
+    	assertTrue(conn1.isClosed());
+    	assertEquals(1, ds.getNumActive());
+    	assertEquals(0, ds.getNumIdle());
+    	Connection conn3 = ds.getConnection();
+    	conn2.close();
+    	conn3.close();
+    }
+    
     /**
      * JIRA DBCP-93: If an SQLException occurs after the GenericObjectPool is
      * initialized in createDataSource, the evictor task is not cleaned up.
