diff --git a/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java b/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
index 8acdf9c8..8239ae0a 100644
--- a/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
+++ b/src/main/java/org/apache/commons/crypto/random/CryptoRandomFactory.java
@@ -198,6 +198,14 @@ public static CryptoRandom getCryptoRandom(final Properties props)
             } catch (final Exception e) {
                 lastException = e;
                 errorMessage.append("CryptoRandom: [" + className + "] failed with " + e.getMessage());
+            } catch (final ExceptionInInitializerError initializerError) {
+                Throwable t = initializerError.getCause();
+                if (t instanceof Exception) {
+                    lastException = (Exception) t;
+                    errorMessage.append("CryptoRandom: [" + className + "] initialization failed with " + t.getMessage());
+                } else {
+                    throw initializerError;
+                }
             }
         }
 
diff --git a/src/test/java/org/apache/commons/crypto/random/CryptoRandomFactoryTest.java b/src/test/java/org/apache/commons/crypto/random/CryptoRandomFactoryTest.java
index eaaefc92..4d18cade 100644
--- a/src/test/java/org/apache/commons/crypto/random/CryptoRandomFactoryTest.java
+++ b/src/test/java/org/apache/commons/crypto/random/CryptoRandomFactoryTest.java
@@ -141,4 +141,14 @@ public void testNull() {
         assertThrows(NullPointerException.class, () -> CryptoRandomFactory.getCryptoRandom(null));
     }
 
+    @Test
+    public void testExceptionInInitializerErrorRandom() throws GeneralSecurityException, IOException {
+        final Properties properties = new Properties();
+        String classes = ExceptionInInitializerErrorRandom.class.getName().concat(",")
+            .concat(CryptoRandomFactory.RandomProvider.JAVA.getClassName());
+        properties.setProperty(CryptoRandomFactory.CLASSES_KEY, classes);
+        try (final CryptoRandom random = CryptoRandomFactory.getCryptoRandom(properties)) {
+            assertEquals(JavaCryptoRandom.class.getName(), random.getClass().getName());
+        }
+    }
 }
diff --git a/src/test/java/org/apache/commons/crypto/random/ExceptionInInitializerErrorRandom.java b/src/test/java/org/apache/commons/crypto/random/ExceptionInInitializerErrorRandom.java
new file mode 100644
index 00000000..f44c98b8
--- /dev/null
+++ b/src/test/java/org/apache/commons/crypto/random/ExceptionInInitializerErrorRandom.java
@@ -0,0 +1,49 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.crypto.random;
+
+import java.io.IOException;
+import java.security.GeneralSecurityException;
+
+/**
+ * Simulates scenarios where {@link OpenSslCryptoRandom} fails in the static code block {@code checkNative()} or
+ * {@code !OpenSslCryptoRandomNative.nextRandBytes(new byte[1])} is false.
+ */
+public class ExceptionInInitializerErrorRandom implements CryptoRandom {
+
+    static {
+        try {
+            check();
+        } catch (final GeneralSecurityException e) {
+            throw new IllegalStateException(e);
+        }
+    }
+
+    private static void check() throws GeneralSecurityException {
+        throw new GeneralSecurityException("ExceptionInInitializerErrorRandom init failed");
+    }
+
+    @Override
+    public void nextBytes(byte[] bytes) {
+        // empty
+    }
+
+    @Override
+    public void close() throws IOException {
+        // empty
+    }
+}
