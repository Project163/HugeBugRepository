diff --git a/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java b/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java
index acc7f8f76..632eb3478 100644
--- a/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java
+++ b/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java
@@ -173,6 +173,10 @@ public class ServiceLoader {
     /**
      * Loads and returns the named service class that's expected to implement
      * the given interface.
+     * 
+     * Note that this class does not use the {@link LoadErrorHandler}, a
+     *  {@link ClassNotFoundException} is always returned for unknown
+     *  classes or classes of the wrong type
      *
      * @param iface service interface
      * @param name service class name
diff --git a/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java b/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java
index 3259da9b9..52ab46b4b 100644
--- a/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java
+++ b/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java
@@ -92,18 +92,25 @@ public class TikaConfig {
 
     public TikaConfig(File file)
             throws TikaException, IOException, SAXException {
-        this(getBuilder().parse(file));
+        this(file, new ServiceLoader());
+    }
+    public TikaConfig(File file, ServiceLoader loader)
+            throws TikaException, IOException, SAXException {
+        this(getBuilder().parse(file), loader);
     }
 
     public TikaConfig(URL url)
             throws TikaException, IOException, SAXException {
         this(url, ServiceLoader.getContextClassLoader());
     }
-
     public TikaConfig(URL url, ClassLoader loader)
             throws TikaException, IOException, SAXException {
         this(getBuilder().parse(url.toString()).getDocumentElement(), loader);
     }
+    public TikaConfig(URL url, ServiceLoader loader)
+            throws TikaException, IOException, SAXException {
+        this(getBuilder().parse(url.toString()).getDocumentElement(), loader);
+    }
 
     public TikaConfig(InputStream stream)
             throws TikaException, IOException, SAXException {
@@ -113,6 +120,9 @@ public class TikaConfig {
     public TikaConfig(Document document) throws TikaException, IOException {
         this(document.getDocumentElement());
     }
+    public TikaConfig(Document document, ServiceLoader loader) throws TikaException, IOException {
+        this(document.getDocumentElement(), loader);
+    }
 
     public TikaConfig(Element element) throws TikaException, IOException {
         this(element, new ServiceLoader());
@@ -418,7 +428,8 @@ public class TikaConfig {
             
             // Find the children of the parent tag, if any
             for (Element le : getTopLevelElementChildren(element, getParentTagName(), getLoaderTagName())) {
-                loaded.add(loadOne(le, mimeTypes, loader));
+                T loadedChild = loadOne(le, mimeTypes, loader);
+                if (loadedChild != null) loaded.add(loadedChild);
             }
             
             // Build the classes, and wrap as needed
@@ -462,9 +473,9 @@ public class TikaConfig {
                     NodeList childNodes = element.getElementsByTagName(getLoaderTagName());
                     if (childNodes.getLength() > 0) {
                         for (int i = 0; i < childNodes.getLength(); i++) {
-                            children.add(loadOne(
-                                    (Element)childNodes.item(i), mimeTypes, loader
-                            ));
+                            T loadedChild = loadOne((Element)childNodes.item(i), 
+                                                    mimeTypes, loader);
+                            if (loadedChild != null) children.add(loadedChild);
                         }
                     }
                     
@@ -499,8 +510,14 @@ public class TikaConfig {
                 // All done with setup
                 return loaded;
             } catch (ClassNotFoundException e) {
-                throw new TikaException(
+                if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {
+                    // Use a different exception signature here
+                    throw new TikaException(
                         "Unable to find a "+getLoaderTagName()+" class: " + name, e);
+                }
+                // Report the problem
+                loader.getLoadErrorHandler().handleLoadError(name, e);
+                return null;
             } catch (IllegalAccessException e) {
                 throw new TikaException(
                         "Unable to access a "+getLoaderTagName()+" class: " + name, e);
@@ -510,7 +527,8 @@ public class TikaConfig {
             } catch (InstantiationException e) {
                 throw new TikaException(
                         "Unable to instantiate a "+getLoaderTagName()+" class: " + name, e);
-            }        }
+            }
+        }
     }
     private static class ParserXmlLoader extends XmlLoader<CompositeParser,Parser> {
         boolean supportsComposite() { return true; }
diff --git a/tika-core/src/test/java/org/apache/tika/config/AbstractTikaConfigTest.java b/tika-core/src/test/java/org/apache/tika/config/AbstractTikaConfigTest.java
index 1a290ff2e..9e7b24686 100644
--- a/tika-core/src/test/java/org/apache/tika/config/AbstractTikaConfigTest.java
+++ b/tika-core/src/test/java/org/apache/tika/config/AbstractTikaConfigTest.java
@@ -16,6 +16,8 @@
  */
 package org.apache.tika.config;
 
+import static org.junit.Assert.assertNotNull;
+
 import java.net.URL;
 
 import org.apache.tika.parser.ParseContext;
@@ -30,9 +32,13 @@ import org.junit.After;
 public abstract class AbstractTikaConfigTest {
     protected static ParseContext context = new ParseContext();
     
-    protected static TikaConfig getConfig(String config) throws Exception {
+    protected static String getConfigPath(String config) throws Exception {
         URL url = TikaConfig.class.getResource(config);
-        System.setProperty("tika.config", url.toExternalForm());
+        assertNotNull("Test Tika Config not found: " + config, url);
+        return url.toExternalForm();
+    }
+    protected static TikaConfig getConfig(String config) throws Exception {
+        System.setProperty("tika.config", getConfigPath(config));
         return new TikaConfig();
     }
     
diff --git a/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java b/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java
index c2a748768..efb0afd7c 100644
--- a/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java
+++ b/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java
@@ -16,6 +16,8 @@
  */
 package org.apache.tika.config;
 
+import java.io.File;
+import java.net.URI;
 import java.net.URL;
 import java.util.List;
 import java.util.Map;
@@ -65,7 +67,28 @@ public class TikaConfigTest extends AbstractTikaConfigTest {
      */
     @Test
     public void testUnknownParser() throws Exception {
-        // TODO
+        ServiceLoader ignoreLoader = new ServiceLoader(
+                getClass().getClassLoader(), LoadErrorHandler.IGNORE);
+        ServiceLoader warnLoader = new ServiceLoader(
+                getClass().getClassLoader(), LoadErrorHandler.WARN);
+        ServiceLoader throwLoader = new ServiceLoader(
+                getClass().getClassLoader(), LoadErrorHandler.THROW);
+        File configPath = new File(new URI(getConfigPath("TIKA-1700-unknown-parser.xml")));
+        
+        TikaConfig ignore = new TikaConfig(configPath, ignoreLoader);
+        assertNotNull(ignore);
+        assertNotNull(ignore.getParser());
+        assertEquals(1, ((CompositeParser)ignore.getParser()).getAllComponentParsers().size());
+        
+        TikaConfig warn = new TikaConfig(configPath, warnLoader);
+        assertNotNull(warn);
+        assertNotNull(warn.getParser());
+        assertEquals(1, ((CompositeParser)warn.getParser()).getAllComponentParsers().size());
+        
+        try {
+            new TikaConfig(configPath, throwLoader);
+            fail("Shouldn't get here, invalid parser class");
+        } catch (TikaException expected) {}
     }
 
     /**
diff --git a/tika-core/src/test/resources/org/apache/tika/config/TIKA-1700-unknown-parser.xml b/tika-core/src/test/resources/org/apache/tika/config/TIKA-1700-unknown-parser.xml
new file mode 100644
index 000000000..f6d8bc86c
--- /dev/null
+++ b/tika-core/src/test/resources/org/apache/tika/config/TIKA-1700-unknown-parser.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+  http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<properties>
+  <parsers>
+    <parser class="org.apache.tika.parser.EmptyParser">
+      <mime>hello/world</mime>
+    </parser>
+    <parser class="made.up.invalid" />
+  </parsers>
+</properties>
