diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/mp3/ID3v22Handler.java b/tika-parsers/src/main/java/org/apache/tika/parser/mp3/ID3v22Handler.java
index a4c64f044..46341adbf 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/mp3/ID3v22Handler.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/mp3/ID3v22Handler.java
@@ -55,7 +55,7 @@ public class ID3v22Handler implements ID3Tags {
             } else if (tag.name.equals("TCM")) {
                 composer = getTagString(tag.data, 0, tag.data.length); 
             } else if (tag.name.equals("COM")) {
-                comment = getTagString(tag.data, 0, tag.data.length); 
+                comment = getCommentString(tag.data, 0, tag.data.length); 
             } else if (tag.name.equals("TRK")) {
                 trackNumber = getTagString(tag.data, 0, tag.data.length); 
             } else if (tag.name.equals("TCO")) {
@@ -67,6 +67,9 @@ public class ID3v22Handler implements ID3Tags {
     private String getTagString(byte[] data, int offset, int length) {
         return ID3v2Frame.getTagString(data, offset, length);
     }
+    private String getCommentString(byte[] data, int offset, int length) {
+        return ID3v2Frame.getCommentString(data, offset, length);
+    }
     
     protected static String extractGenre(String rawGenre) {
        int open = rawGenre.indexOf("(");
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/mp3/ID3v23Handler.java b/tika-parsers/src/main/java/org/apache/tika/parser/mp3/ID3v23Handler.java
index 7509a8412..72c0b9f22 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/mp3/ID3v23Handler.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/mp3/ID3v23Handler.java
@@ -55,7 +55,7 @@ public class ID3v23Handler implements ID3Tags {
             } else if (tag.name.equals("TCOM")) {
                 composer = getTagString(tag.data, 0, tag.data.length); 
             } else if (tag.name.equals("COMM")) {
-                comment = getTagString(tag.data, 0, tag.data.length); 
+                comment = getCommentString(tag.data, 0, tag.data.length); 
             } else if (tag.name.equals("TRCK")) {
                 trackNumber = getTagString(tag.data, 0, tag.data.length); 
             } else if (tag.name.equals("TCON")) {
@@ -65,9 +65,10 @@ public class ID3v23Handler implements ID3Tags {
     }
 
     private String getTagString(byte[] data, int offset, int length) {
-        String str = ID3v2Frame.getTagString(data, offset, length);
-        // Handle embedded nulls
-        return str.replace((char)0, '\n');
+        return ID3v2Frame.getTagString(data, offset, length);
+    }
+    private String getCommentString(byte[] data, int offset, int length) {
+       return ID3v2Frame.getCommentString(data, offset, length);
     }
 
     public boolean getTagsPresent() {
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/mp3/ID3v24Handler.java b/tika-parsers/src/main/java/org/apache/tika/parser/mp3/ID3v24Handler.java
index 575ed7b31..dda81bda6 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/mp3/ID3v24Handler.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/mp3/ID3v24Handler.java
@@ -60,7 +60,7 @@ public class ID3v24Handler implements ID3Tags {
             } else if (tag.name.equals("TCOM")) {
                 composer = getTagString(tag.data, 0, tag.data.length); 
             } else if (tag.name.equals("COMM")) {
-                comment = getTagString(tag.data, 0, tag.data.length); 
+                comment = getCommentString(tag.data, 0, tag.data.length); 
             } else if (tag.name.equals("TRCK")) {
                 trackNumber = getTagString(tag.data, 0, tag.data.length); 
             } else if (tag.name.equals("TCON")) {
@@ -72,6 +72,9 @@ public class ID3v24Handler implements ID3Tags {
     private String getTagString(byte[] data, int offset, int length) {
         return ID3v2Frame.getTagString(data, offset, length);
     }
+    private String getCommentString(byte[] data, int offset, int length) {
+        return ID3v2Frame.getCommentString(data, offset, length);
+    }
 
     public boolean getTagsPresent() {
         return true;
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/mp3/ID3v2Frame.java b/tika-parsers/src/main/java/org/apache/tika/parser/mp3/ID3v2Frame.java
index 68c9c57f5..d790741a5 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/mp3/ID3v2Frame.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/mp3/ID3v2Frame.java
@@ -175,6 +175,21 @@ public class ID3v2Frame implements MP3Frame {
 
         return b;
     }
+    
+    protected static class TextEncoding {
+       public final boolean doubleByte;
+       public final String encoding;
+       private TextEncoding(String encoding, boolean doubleByte) {
+          this.doubleByte = doubleByte;
+          this.encoding = encoding;
+       }
+    }
+    protected static final TextEncoding[] encodings = new TextEncoding[] {
+          new TextEncoding("ISO-8859-1", false),
+          new TextEncoding("UTF-16", true), // With BOM
+          new TextEncoding("UTF-16BE", true), // Without BOM
+          new TextEncoding("UTF-8", false)
+    };
 
     /**
      * Returns the (possibly null padded) String at the given offset and
@@ -191,31 +206,19 @@ public class ID3v2Frame implements MP3Frame {
 
         // Does it have an encoding flag?
         // Detect by the first byte being sub 0x20
-        boolean doubleByte = false;
-        String encoding = "ISO8859_1";
+        TextEncoding encoding = encodings[0];
         byte maybeEncodingFlag = data[offset];
-        if (maybeEncodingFlag == 0 || maybeEncodingFlag == 1 ||
-              maybeEncodingFlag == 2 || maybeEncodingFlag == 3) {
+        if (maybeEncodingFlag >= 0 && maybeEncodingFlag < encodings.length) {
             offset++;
             actualLength--;
-            if (maybeEncodingFlag == 1) {
-                // With BOM
-                encoding = "UTF-16";
-                doubleByte = true;
-            } else if (maybeEncodingFlag == 2) {
-                // Without BOM
-                encoding = "UTF-16BE";
-                doubleByte = true;
-            } else if (maybeEncodingFlag == 3) {
-                encoding = "UTF8";
-            }
+            encoding = encodings[maybeEncodingFlag];
         }
         
         // Trim off null termination / padding (as present) 
-        while (doubleByte && actualLength >= 2 && data[offset+actualLength-1] == 0 && data[offset+actualLength-2] == 0) {
+        while (encoding.doubleByte && actualLength >= 2 && data[offset+actualLength-1] == 0 && data[offset+actualLength-2] == 0) {
            actualLength -= 2;
         } 
-        while (!doubleByte && actualLength >= 1 && data[offset+actualLength-1] == 0) {
+        while (!encoding.doubleByte && actualLength >= 1 && data[offset+actualLength-1] == 0) {
            actualLength--;
         }
         if (actualLength == 0) {
@@ -224,12 +227,74 @@ public class ID3v2Frame implements MP3Frame {
 
         try {
             // Build the base string
-            return new String(data, offset, actualLength, encoding);
+            return new String(data, offset, actualLength, encoding.encoding);
         } catch (UnsupportedEncodingException e) {
             throw new RuntimeException(
-                    "Core encoding " + encoding + " is not available", e);
+                    "Core encoding " + encoding.encoding + " is not available", e);
         }
     }
+    /**
+     * Returns the comment string, in the form [LANG]: [Desc]\n[Text]
+     */
+    protected static String getCommentString(byte[] data, int offset, int length) {
+       // Comments must have an encoding
+       int encodingFlag = data[offset];
+       if (encodingFlag >= 0 && encodingFlag < encodings.length) {
+          // Good, valid flag
+       } else {
+          // Invalid string
+          return "";
+       }
+       
+       TextEncoding encoding = encodings[encodingFlag];
+       
+       // First is a 3 byte language
+       String lang = getString(data, offset+1, 3);
+       
+       // After that we have [Desc]\0(\0)[Text]
+       int descStart = offset+4;
+       int textStart = -1;
+       String description = null;
+       String text = null;
+       
+       // Find where the description ends
+       try {
+          for (int i=descStart; i<offset+length; i++) {
+             if (encoding.doubleByte && data[i]==0 && data[i+1] == 0) {
+                // Handle LE vs BE on low byte text
+                if (i+2 < offset+length && data[i+1] == 0 && data[i+2] == 0) {
+                   i++;
+                }
+                textStart = i+2;
+                description = new String(data, descStart, i-descStart, encoding.encoding);
+                break;
+             }
+             if (!encoding.doubleByte && data[i]==0) {
+                textStart = i+1;
+                description = new String(data, descStart, i-descStart, encoding.encoding);
+                break;
+             }
+          }
+          
+          // Did we find the end?
+          if (textStart > -1) {
+             text = new String(data, textStart, offset+length-textStart, encoding.encoding);
+          } else {
+             // Assume everything is the text
+             text = new String(data, descStart, offset+length-descStart, encoding.encoding);
+          }
+          
+          // Return
+          if (description == null || description.length() == 0) {
+             return lang + " - " + text;
+          } else {
+             return lang + " - " + description + "\n" + text;
+          }
+       } catch (UnsupportedEncodingException e) {
+          throw new RuntimeException(
+                  "Core encoding " + encoding.encoding + " is not available", e);
+       }
+    }
 
     /**
      * Returns the String at the given
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/mp3/Mp3ParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/mp3/Mp3ParserTest.java
index 56949692d..41484f2b8 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/mp3/Mp3ParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/mp3/Mp3ParserTest.java
@@ -109,7 +109,7 @@ public class Mp3ParserTest extends TestCase {
         assertEquals(null, metadata.get(XMPDM.COMPOSER));
         assertEquals("2008", metadata.get(XMPDM.RELEASE_DATE));
         assertEquals("Rock", metadata.get(XMPDM.GENRE));
-        assertEquals("XXXID3v1 Comment\nTest Comment", metadata.get(XMPDM.LOG_COMMENT.getName()));
+        assertEquals("XXX - ID3v1 Comment\nTest Comment", metadata.get(XMPDM.LOG_COMMENT.getName()));
         assertEquals("1", metadata.get(XMPDM.TRACK_NUMBER));
         
         assertEquals("44100", metadata.get(XMPDM.AUDIO_SAMPLE_RATE));
@@ -208,8 +208,10 @@ public class Mp3ParserTest extends TestCase {
        assertEquals("Test Artist \u2468\u2460", metadata.get(XMPDM.ARTIST));
        assertEquals("Test Album \u2460\u2468", metadata.get(XMPDM.ALBUM));
 
-       // TODO Fix comments
-//       assertEquals("Comment Desc - This is a comment", metadata.get(XMPDM.LOG_COMMENT));
+       assertEquals(
+             "Eng - Comment Desc\nThis is a \u1357\u2468\u2460 Comment", 
+             metadata.get(XMPDM.LOG_COMMENT)
+       );
        
        assertEquals("MPEG 3 Layer III Version 1", metadata.get("version"));
        assertEquals("44100", metadata.get("samplerate"));
