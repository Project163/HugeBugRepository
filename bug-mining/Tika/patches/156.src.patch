diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/html/DefaultHtmlMapper.java b/tika-parsers/src/main/java/org/apache/tika/parser/html/DefaultHtmlMapper.java
index 94c67feda..a93d77622 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/html/DefaultHtmlMapper.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/html/DefaultHtmlMapper.java
@@ -41,7 +41,8 @@ public class DefaultHtmlMapper implements HtmlMapper {
         put("P", "p");
         put("PRE", "pre");
         put("BLOCKQUOTE", "blockquote");
-
+        put("Q", "q");
+        
         put("UL", "ul");
         put("OL", "ol");
         put("MENU", "ul");
@@ -61,12 +62,18 @@ public class DefaultHtmlMapper implements HtmlMapper {
         
         // TIKA-460 - add anchors
         put("A", "a");
-        // TIKA-463 - add additional elements that contain URLs
+        
+        // TIKA-463 - add additional elements that contain URLs (and their sub-elements)
+        put("MAP", "map");
         put("AREA", "area");
         put("IMG", "img");
         put("FRAMESET", "frameset");
         put("FRAME", "frame");
-
+        put("IFRAME", "iframe");
+        put("OBJECT", "object");
+        put("PARAM", "param");
+        put("INS", "ins");
+        put("DEL", "del");
     }};
     
     private static final Set<String> DISCARDABLE_ELEMENTS = new HashSet<String>() {{
@@ -74,12 +81,26 @@ public class DefaultHtmlMapper implements HtmlMapper {
         add("SCRIPT");
     }};
 
+    // For information on tags & attributes, see:
+    // http://www.w3.org/TR/2002/REC-xhtml1-20020801/dtds.html#a_dtd_XHTML-1.0-Strict
+    // http://www.w3schools.com/TAGS/
     private static final Map<String, Set<String>> SAFE_ATTRIBUTES = new HashMap<String, Set<String>>() {{
-        put("a", attrSet("rel", "name"));
-        put("img", attrSet("src"));
-        put("frame", attrSet("src"));
+        put("a", attrSet("charset", "type", "name", "href", "hreflang", "rel", "rev", "shape", "coords"));
+        put("img", attrSet("src", "alt", "longdesc", "height", "width", "usemap", "ismap"));
+        put("frame", attrSet("longdesc", "name", "src", "frameborder", "marginwidth", "marginheight", "noresize", "scrolling"));
+        put("iframe", attrSet("longdesc", "name", "src", "frameborder", "marginwidth", "marginheight", "scrolling", "align", "height", "width"));
         put("link", attrSet("charset", "href", "hreflang", "type", "rel", "rev", "media"));
-        // TODO KKr - fill out this set.
+        put("map", attrSet("id", "class", "style", "title", "name"));
+        put("area", attrSet("shape", "coords", "href", "nohref", "alt"));
+        put("object", attrSet("declare", "classid", "codebase", "data", "type", "codetype", "archive", "standby", "height", 
+                "width", "usemap", "name", "tabindex", "align", "border", "hspace", "vspace"));
+        put("param", attrSet("id", "name", "value", "valuetype", "type"));
+        put("blockquote", attrSet("cite"));
+        put("ins", attrSet("cite", "datetime"));
+        put("del", attrSet("cite", "datetime"));
+        put("q", attrSet("cite"));
+        
+        // TODO - fill out this set. Include core, i18n, etc sets where appropriate.
     }};
     
     private static Set<String> attrSet(String... attrs) {
diff --git a/tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlHandler.java b/tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlHandler.java
index 09eb03511..902e6e5f6 100644
--- a/tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlHandler.java
+++ b/tika-parsers/src/main/java/org/apache/tika/parser/html/HtmlHandler.java
@@ -18,6 +18,8 @@ package org.apache.tika.parser.html;
 
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.HashSet;
+import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -29,8 +31,21 @@ import org.xml.sax.ContentHandler;
 import org.xml.sax.SAXException;
 import org.xml.sax.helpers.AttributesImpl;
 
+@SuppressWarnings("serial")
 class HtmlHandler extends TextContentHandler {
 
+    // List of attributes that need to be resolved.
+    private static final Set<String> URI_ATTRIBUTES = new HashSet<String>() {{
+        add("src");
+        add("href");
+        add("longdesc");
+        add("usemap");
+        add("data");
+        add("cite");
+        add("codebase");
+        add("classid");
+    }};
+
     private final HtmlMapper mapper;
 
     private final XHTMLContentHandler xhtml;
@@ -115,9 +130,9 @@ class HtmlHandler extends TextContentHandler {
             } else if ("BASE".equals(name) && atts.getValue("href") != null) {
                 metadata.set(
                         Metadata.CONTENT_LOCATION,
-                        resolve(atts.getValue("href").trim()));
+                        resolve(atts.getValue("href")));
                 xhtml.startElement(uri, local, "base", atts);
-            } else if ("LINK".equals(name) && atts.getValue("href") != null) {
+            } else if ("LINK".equals(name)) {
                 startElementWithSafeAttributes("link", atts);
             }
         }
@@ -125,26 +140,7 @@ class HtmlHandler extends TextContentHandler {
         if (bodyLevel > 0 && discardLevel == 0) {
             String safe = mapper.mapSafeElement(name);
             if (safe != null) {
-                // special treatment for anchors
-                if ("a".equals(safe)) {
-                    String href = atts.getValue("href");
-                    if (href != null) {
-                        xhtml.startElement("a", "href", resolve(href.trim()));
-                    } else {
-                        String anchor = atts.getValue("name");
-                        if (anchor != null) {
-                            xhtml.startElement("a", "name", anchor.trim());
-                        } else {
-                            xhtml.startElement("a");
-                        }
-                    }
-                }
-                // check if there are any attributes to process
-                else if (atts.getLength() == 0) {
-                    xhtml.startElement(safe);
-                } else {
-                    startElementWithSafeAttributes(safe, atts);
-                }
+                startElementWithSafeAttributes(safe, atts);
             }
         }
 
@@ -152,6 +148,11 @@ class HtmlHandler extends TextContentHandler {
     }
 
     private void startElementWithSafeAttributes(String name, Attributes atts) throws SAXException {
+        if (atts.getLength() == 0) {
+            xhtml.startElement(name);
+            return;
+        }
+        
         AttributesImpl newAttributes = new AttributesImpl(atts);
         for (int att = 0; att < newAttributes.getLength(); att++) {
             String normAttrName = mapper.mapSafeAttribute(name, newAttributes.getLocalName(att));
@@ -162,9 +163,10 @@ class HtmlHandler extends TextContentHandler {
                 // We have a remapped attribute name, so set it as it might have changed.
                 newAttributes.setLocalName(att, normAttrName);
                 
-                // And resolve relative links for the href & src attributes.
-                if (normAttrName.equals("src") || normAttrName.equals("href")) {
-                    newAttributes.setValue(att, resolve(newAttributes.getValue(att).trim()));
+                // And resolve relative links. Eventually this should be pushed
+                // into the HtmlMapper code.
+                if (URI_ATTRIBUTES.contains(normAttrName)) {
+                    newAttributes.setValue(att, resolve(newAttributes.getValue(att)));
                 }
             }
         }
@@ -229,6 +231,8 @@ class HtmlHandler extends TextContentHandler {
     }
 
     private String resolve(String url) {
+        url = url.trim();
+        
         // Return the URL as-is if no base URL is available
         if (metadata.get(Metadata.CONTENT_LOCATION) == null) {
             return url;
diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java
index 0e69b8c53..c34601bbc 100644
--- a/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java
+++ b/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java
@@ -481,7 +481,72 @@ public class HtmlParserTest extends TestCase {
         String result = sw.toString();
         
         // <frame> tag should exist, with fully resolved URL
-        assertTrue(Pattern.matches("(?s).*<frame src=\"http://domain.com/frame.html\"/>.*$", result));
+        assertTrue(Pattern.matches("(?s).*<frame .* src=\"http://domain.com/frame.html\"/>.*$", result));
+    }
+
+    /**
+     * Test case for TIKA-463. Don't skip elements that have URLs.
+     * @see <a href="https://issues.apache.org/jira/browse/TIKA-463">TIKA-463</a>
+     */
+    public void testIFrameSrcExtraction() throws Exception {
+        final String test = "<html><head><title>Title</title>" +
+        "<base href=\"http://domain.com\" />" +
+        "</head><body><iframe src =\"framed.html\" width=\"100%\" height=\"300\">" +
+        "<p>Your browser doesn't support iframes!</p></body></html>";
+
+        StringWriter sw = new StringWriter();
+        new HtmlParser().parse(
+                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                makeHtmlTransformer(sw), new Metadata(), new ParseContext());
+
+        String result = sw.toString();
+        
+        // <iframe> tag should exist, with fully resolved URL
+        assertTrue(Pattern.matches("(?s).*<iframe .* src=\"http://domain.com/framed.html\".*$", result));
+    }
+
+    /**
+     * Test case for TIKA-463. Don't skip elements that have URLs.
+     * @see <a href="https://issues.apache.org/jira/browse/TIKA-463">TIKA-463</a>
+     */
+    public void testAreaExtraction() throws Exception {
+        final String test = "<html><head><title>Title</title>" +
+        "<base href=\"http://domain.com\" />" +
+        "</head><body><p><map name=\"map\" id=\"map\">" +
+        "<area shape=\"rect\" href=\"map.html\" alt=\"\" />" +
+        "</map></p></body></html>";
+
+        StringWriter sw = new StringWriter();
+        new HtmlParser().parse(
+                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                makeHtmlTransformer(sw), new Metadata(), new ParseContext());
+
+        String result = sw.toString();
+        
+        // <map> tag should exist, with <area> tag with fully resolved URL
+        assertTrue(Pattern.matches("(?s).*<map .*<area .* href=\"http://domain.com/map.html\".*</map>.*$", result));
+    }
+
+    /**
+     * Test case for TIKA-463. Don't skip elements that have URLs.
+     * @see <a href="https://issues.apache.org/jira/browse/TIKA-463">TIKA-463</a>
+     */
+    public void testObjectExtraction() throws Exception {
+        final String test = "<html><head><title>Title</title>" +
+        "<base href=\"http://domain.com\" />" +
+        "</head><body><p><object data=\"object.data\" type=\"text/html\">" +
+        "<param name=\"name\" value=\"value\" />" +
+        "</object></p></body></html>";
+
+        StringWriter sw = new StringWriter();
+        new HtmlParser().parse(
+                new ByteArrayInputStream(test.getBytes("UTF-8")),
+                makeHtmlTransformer(sw), new Metadata(), new ParseContext());
+
+        String result = sw.toString();
+        
+        // <object> tag should exist with fully resolved URLs
+        assertTrue(Pattern.matches("(?s).*<object data=\"http://domain.com/object.data\".*<param .* name=\"name\" value=\"value\"/>.*</object>.*$", result));
     }
 
     /**
@@ -511,7 +576,7 @@ public class HtmlParserTest extends TestCase {
      * Test case for TIKA-457. Better handling for broken HTML that has <frameset> inside of <body>.
      * @see <a href="https://issues.apache.org/jira/browse/TIKA-457">TIKA-457</a>
      */
-    public void testFBrokenrameset() throws Exception {
+    public void testBrokenFrameset() throws Exception {
         final String test1 = "<html><head><title>Title</title>" +
         "<base href=\"http://domain.com\" />" +
         "</head><body><frameset><frame src=\"frame.html\" /></frameset></body></html>";
@@ -524,7 +589,7 @@ public class HtmlParserTest extends TestCase {
         String result = sw1.toString();
         
         // <frame> tag should exist, with fully resolved URL
-        assertTrue(Pattern.matches("(?s).*<frame src=\"http://domain.com/frame.html\"/>.*$", result));
+        assertTrue(Pattern.matches("(?s).*<frame .* src=\"http://domain.com/frame.html\"/>.*$", result));
         
         // <body> tag should not exist.
         assertFalse(Pattern.matches("(?s).*<body>.*$", result));
@@ -545,10 +610,10 @@ public class HtmlParserTest extends TestCase {
         result = sw2.toString();
         
         // <frame> tags should exist, with relative URL (no base element specified)
-        assertTrue(Pattern.matches("(?s).*<frame src=\"top.html\"/>.*$", result));
-        assertTrue(Pattern.matches("(?s).*<frame src=\"left.html\"/>.*$", result));
-        assertTrue(Pattern.matches("(?s).*<frame src=\"invalid.html\"/>.*$", result));
-        assertTrue(Pattern.matches("(?s).*<frame src=\"right.html\"/>.*$", result));
+        assertTrue(Pattern.matches("(?s).*<frame .* src=\"top.html\"/>.*$", result));
+        assertTrue(Pattern.matches("(?s).*<frame .* src=\"left.html\"/>.*$", result));
+        assertTrue(Pattern.matches("(?s).*<frame .* src=\"invalid.html\"/>.*$", result));
+        assertTrue(Pattern.matches("(?s).*<frame .* src=\"right.html\"/>.*$", result));
 
         // <body> tag should not exist.
         assertFalse(Pattern.matches("(?s).*<body>.*$", result));
