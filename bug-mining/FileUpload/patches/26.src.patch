diff --git a/pom.xml b/pom.xml
index 2846667d..93a8c62c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -26,7 +26,7 @@
 
   <groupId>commons-fileupload</groupId>
   <artifactId>commons-fileupload</artifactId>
-  <version>1.2.3-SNAPSHOT</version>
+  <version>1.3-SNAPSHOT</version>
 
   <name>Commons FileUpload</name>
   <description>
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 0c3cbe49..ae2b961a 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -43,7 +43,7 @@ The <action> type attribute can be add,update,fix,remove.
   </properties>
 
   <body>
-    <release version="1.2.3-SNAPSHOT">
+    <release version="1.3-SNAPSHOT">
       <action dev="simonetripodi" type="add" issue="FILEUPLOAD-218">
         Update version in POM
       </action>
diff --git a/src/main/java/org/apache/commons/fileupload/FileUploadBase.java b/src/main/java/org/apache/commons/fileupload/FileUploadBase.java
index d61a52b8..9f75a010 100644
--- a/src/main/java/org/apache/commons/fileupload/FileUploadBase.java
+++ b/src/main/java/org/apache/commons/fileupload/FileUploadBase.java
@@ -918,7 +918,7 @@ public abstract class FileUploadBase {
             InputStream input = ctx.getInputStream();
 
             if (sizeMax >= 0) {
-                int requestSize = ctx.getContentLength();
+                long requestSize = ctx.contentLength();
                 if (requestSize == -1) {
                     input = new LimitedInputStream(input, sizeMax) {
                         @Override
@@ -952,7 +952,7 @@ public abstract class FileUploadBase {
             }
 
             notifier = new MultipartStream.ProgressNotifier(listener,
-                    ctx.getContentLength());
+                    ctx.contentLength());
             multi = new MultipartStream(input, boundary, notifier);
             multi.setHeaderEncoding(charEncoding);
 
diff --git a/src/main/java/org/apache/commons/fileupload/RequestContext.java b/src/main/java/org/apache/commons/fileupload/RequestContext.java
index ee001470..a92e1b9a 100644
--- a/src/main/java/org/apache/commons/fileupload/RequestContext.java
+++ b/src/main/java/org/apache/commons/fileupload/RequestContext.java
@@ -50,9 +50,20 @@ public interface RequestContext {
      * Retrieve the content length of the request.
      *
      * @return The content length of the request.
+     * @deprecated
+     * @see #contentLength()
      */
+    @Deprecated
     int getContentLength();
 
+    /**
+     * Retrieve the content length of the request.
+     *
+     * @return The content length of the request.
+     * @since 1.3
+     */
+    long contentLength();
+
     /**
      * Retrieve the input stream for the request.
      *
diff --git a/src/main/java/org/apache/commons/fileupload/portlet/PortletRequestContext.java b/src/main/java/org/apache/commons/fileupload/portlet/PortletRequestContext.java
index 27526821..242aedbf 100644
--- a/src/main/java/org/apache/commons/fileupload/portlet/PortletRequestContext.java
+++ b/src/main/java/org/apache/commons/fileupload/portlet/PortletRequestContext.java
@@ -21,6 +21,8 @@ import static java.lang.String.format;
 import java.io.InputStream;
 import java.io.IOException;
 import javax.portlet.ActionRequest;
+
+import org.apache.commons.fileupload.FileUploadBase;
 import org.apache.commons.fileupload.RequestContext;
 
 /**
@@ -79,11 +81,30 @@ public class PortletRequestContext implements RequestContext {
      * Retrieve the content length of the request.
      *
      * @return The content length of the request.
+     * @deprecated
+     * @see #contentLength()
      */
+    @Deprecated
     public int getContentLength() {
         return request.getContentLength();
     }
 
+    /**
+     * Retrieve the content length of the request.
+     *
+     * @return The content length of the request.
+     * @since 1.3
+     */
+    public long contentLength() {
+        long size;
+        try {
+            size = Long.parseLong(request.getProperty(FileUploadBase.CONTENT_LENGTH));
+        } catch (NumberFormatException e) {
+            size = -1;
+        }
+        return size;
+    }
+
     /**
      * Retrieve the input stream for the request.
      *
diff --git a/src/main/java/org/apache/commons/fileupload/servlet/ServletRequestContext.java b/src/main/java/org/apache/commons/fileupload/servlet/ServletRequestContext.java
index 2fd12b04..a05e6931 100644
--- a/src/main/java/org/apache/commons/fileupload/servlet/ServletRequestContext.java
+++ b/src/main/java/org/apache/commons/fileupload/servlet/ServletRequestContext.java
@@ -18,9 +18,12 @@ package org.apache.commons.fileupload.servlet;
 
 import static java.lang.String.format;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
+
 import javax.servlet.http.HttpServletRequest;
+
+import org.apache.commons.fileupload.FileUploadBase;
 import org.apache.commons.fileupload.RequestContext;
 
 /**
@@ -77,11 +80,30 @@ public class ServletRequestContext implements RequestContext {
      * Retrieve the content length of the request.
      *
      * @return The content length of the request.
+     * @deprecated
+     * @see #contentLength()
      */
+    @Deprecated
     public int getContentLength() {
         return request.getContentLength();
     }
 
+    /**
+     * Retrieve the content length of the request.
+     *
+     * @return The content length of the request.
+     * @since 1.3
+     */
+    public long contentLength() {
+        long size;
+        try {
+            size = Long.parseLong(request.getHeader(FileUploadBase.CONTENT_LENGTH));
+        } catch (NumberFormatException e) {
+            size = -1;
+        }
+        return size;
+    }
+
     /**
      * Retrieve the input stream for the request.
      *
@@ -101,7 +123,7 @@ public class ServletRequestContext implements RequestContext {
     @Override
     public String toString() {
         return format("ContentLength=%s, ContentType=%s",
-                      this.getContentLength(),
+                      this.contentLength(),
                       this.getContentType());
     }
 
diff --git a/src/test/java/org/apache/commons/fileupload/MockHttpServletRequest.java b/src/test/java/org/apache/commons/fileupload/MockHttpServletRequest.java
index 557d8bde..f05b54e6 100644
--- a/src/test/java/org/apache/commons/fileupload/MockHttpServletRequest.java
+++ b/src/test/java/org/apache/commons/fileupload/MockHttpServletRequest.java
@@ -44,7 +44,7 @@ class MockHttpServletRequest implements HttpServletRequest
 {
 
     private final InputStream m_requestData;
-    private final int length;
+    private final long length;
     private String m_strContentType;
     private final Map<String, String> m_headers = new java.util.HashMap<String, String>();
 
@@ -66,7 +66,7 @@ class MockHttpServletRequest implements HttpServletRequest
      */
     public MockHttpServletRequest(
             final InputStream requestData,
-            final int requestLength,
+            final long requestLength,
             final String strContentType)
     {
         m_requestData = requestData;
@@ -324,7 +324,10 @@ class MockHttpServletRequest implements HttpServletRequest
         }
         else
         {
-            iLength = length;
+            if (length > Integer.MAX_VALUE) {
+                throw new RuntimeException("Value '" + length + "' is too large to be converted to int");
+            }
+            iLength = (int) length;
         }
         return iLength;
     }
