diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 3c4e58d0..2c5b3b3a 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -28,6 +28,10 @@
         clear() method. This is more efficient and also solves some other
         problems related to clearing a SubnodeConfiguration.
       </action>
+      <action dev="oheger" type="update" issue="CONFIGURATION-456">
+        Improved Javadocs of getKeys(String) method for some configuration
+        classes.
+      </action>
       <action dev="oheger" type="update" issue="CONFIGURATION-455">
         HierarchicalINIConfiguration.getSection() now creates a section if it
         does not exist. The SubnodeConfiguration returned by this method is now
diff --git a/src/java/org/apache/commons/configuration/AbstractConfiguration.java b/src/java/org/apache/commons/configuration/AbstractConfiguration.java
index 91ff45d0..c7f20517 100644
--- a/src/java/org/apache/commons/configuration/AbstractConfiguration.java
+++ b/src/java/org/apache/commons/configuration/AbstractConfiguration.java
@@ -560,6 +560,13 @@ public abstract class AbstractConfiguration extends EventSource implements Confi
         fireEvent(EVENT_CLEAR, null, null, false);
     }
 
+    /**
+     * {@inheritDoc} This implementation returns keys that either match the
+     * prefix or start with the prefix followed by a dot ('.'). So the call
+     * <code>getKeys("db");</code> will find the keys <code>db</code>,
+     * <code>db.user</code>, or <code>db.password</code>, but not the key
+     * <code>dbdriver</code>.
+     */
     public Iterator getKeys(final String prefix)
     {
         return new FilterIterator(getKeys(), new Predicate()
diff --git a/src/java/org/apache/commons/configuration/Configuration.java b/src/java/org/apache/commons/configuration/Configuration.java
index 51ae0dae..eb9429ae 100644
--- a/src/java/org/apache/commons/configuration/Configuration.java
+++ b/src/java/org/apache/commons/configuration/Configuration.java
@@ -168,7 +168,15 @@ public interface Configuration
 
     /**
      * Get the list of the keys contained in the configuration that match the
-     * specified prefix.
+     * specified prefix. For instance, if the configuration contains the
+     * following keys:<br>
+     * <code>db.user, db.pwd, db.url, window.xpos, window.ypos</code>,<br>
+     * an invocation of <code>getKeys("db");</code><br>
+     * will return the keys below:<br>
+     * <code>db.user, db.pwd, db.url</code>.<br>
+     * Note that the prefix itself is included in the result set if there is a
+     * matching key. The exact behavior - how the prefix is actually
+     * interpreted - depends on a concrete implementation.
      *
      * @param prefix The prefix to test against.
      * @return An Iterator of keys that match the prefix.
diff --git a/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java b/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java
index e0a02170..035fa2e5 100644
--- a/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java
+++ b/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java
@@ -841,7 +841,10 @@ public class HierarchicalConfiguration extends AbstractConfiguration implements
     /**
      * Returns an iterator with all keys defined in this configuration that
      * start with the given prefix. The returned keys will not contain any
-     * indices.
+     * indices. This implementation tries to locate a node whose key is the same
+     * as the passed in prefix. Then the subtree of this node is traversed, and
+     * the keys of all nodes encountered (including attributes) are added to the
+     * result set.
      *
      * @param prefix the prefix of the keys to start with
      * @return an iterator with the found keys
