diff --git a/src/main/java/org/apache/commons/scxml2/semantics/TransitionTargetComparator.java b/src/main/java/org/apache/commons/scxml2/semantics/TransitionTargetComparator.java
index 4d2dbe33..eae4dfcd 100644
--- a/src/main/java/org/apache/commons/scxml2/semantics/TransitionTargetComparator.java
+++ b/src/main/java/org/apache/commons/scxml2/semantics/TransitionTargetComparator.java
@@ -17,11 +17,11 @@
 package org.apache.commons.scxml2.semantics;
 
 import java.io.Serializable;
+import java.util.Collection;
 import java.util.Comparator;
 
 import org.apache.commons.scxml2.SCXMLHelper;
 import org.apache.commons.scxml2.model.Parallel;
-import org.apache.commons.scxml2.model.State;
 import org.apache.commons.scxml2.model.TransitionTarget;
 
 
@@ -75,7 +75,7 @@ final class TransitionTargetComparator<T> implements Comparator<T>, Serializable
                 // - not a requirement
                 // - though useful for an impl to have repeatable behavior
                 // - downside is users may rely on this behavior
-                Parallel lca = (Parallel) SCXMLHelper.getLCA(tt1, tt2);
+                TransitionTarget lca = SCXMLHelper.getLCA(tt1, tt2);
                 TransitionTarget parent1 = tt1;
                 while (parent1.getParent() != lca) {
                     parent1 = parent1.getParent();
@@ -84,12 +84,17 @@ final class TransitionTargetComparator<T> implements Comparator<T>, Serializable
                 while (parent2.getParent() != lca) {
                     parent2 = parent2.getParent();
                 }
-                for (TransitionTarget tt : lca.getChildren()) {
-                    State s = (State) tt;
-                    if (s == parent1) {
-                        return 1;
-                    } else if (s == parent2) {
-                        return -1;
+                Collection<TransitionTarget> children = null;
+                if (lca instanceof Parallel) {
+                    children = ((Parallel) lca).getChildren();
+                }
+                if (children != null) {
+                    for (TransitionTarget tt : children) {
+                        if (tt == parent1) {
+                            return 1;
+                        } else if (tt == parent2) {
+                            return -1;
+                        }
                     }
                 }
             }
diff --git a/src/test/java/org/apache/commons/scxml2/semantics/TransitionTargetComparatorTest.java b/src/test/java/org/apache/commons/scxml2/semantics/TransitionTargetComparatorTest.java
index d22424ff..578206d6 100644
--- a/src/test/java/org/apache/commons/scxml2/semantics/TransitionTargetComparatorTest.java
+++ b/src/test/java/org/apache/commons/scxml2/semantics/TransitionTargetComparatorTest.java
@@ -108,4 +108,28 @@ public class TransitionTargetComparatorTest {
         
         Assert.assertEquals(1, comparator.compare(target1, target2));
     }
+
+    @Test
+    public void testComparatorSiblingParallels() {
+        Parallel ancestor = new Parallel();
+
+        State target1 = new State();
+        Parallel parent1 = new Parallel();
+        target1.setParent(parent1);
+        parent1.addChild(target1);
+
+        State target2 = new State();
+        Parallel parent2 = new Parallel();
+        target1.setParent(parent2);
+        parent1.addChild(target2);
+
+        parent1.setParent(ancestor);
+        ancestor.addChild(parent1);
+        parent2.setParent(ancestor);
+        ancestor.addChild(parent2);
+
+        Assert.assertEquals(1, comparator.compare(parent1, parent2));
+        Assert.assertEquals(-1, comparator.compare(parent2, parent1));
+    }
+
 }
